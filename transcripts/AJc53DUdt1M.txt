 what's going on YouTube this is ipsack me doing shoppie from hack the box which is a relatively easy Linux box as long as you're good at Recon enumeration because there's two pieces that are a little bit challenging the first one being um enumerating that the web application is node.js which you can do based upon the error messages and knowing its node makes the login SQL injection much easier because most node applications use no SQL like mongodb and the injection you do there is some type of Boolean injection that hasn't been done on hack the Box before but it is on hack trick so if you just look at mongodb injection should be relatively straightforward to log into the application the next hard part of shoppie is doing the sub domain brute forcing because there is a domain matamost at shoppie.htb and the matamus subdomain doesn't appear on a lot of older word lists because matamos is a somewhat new application and once you do that you can log into the box and everything is pretty straightforward from there so let's just jump in as always gonna start off with it and map so SC for default scripts as V enumerate versions OA output all formats playing the nmap director and call it shopping and then the IP address of 101011.180 this can take some time to run so I've already ran it looking at the results we have just two ports open the first one being SSH on Port 22 and its Banner tells us it's a Debian box then we also have HTTP on Port 80. its Banner tells us it is running engine X and we also have the HTTP title and map script saying that it is a redirect to shopping.hdb so if we just went to 10 10 11.180 it's going to give us an error message because our box does not know where shoppie.hdb is so let's fix that so I'm going to go in my Etsy host file 10 10 11 180. shopping.htb save that we can refresh this I just did Ctrl shift R and now we get to a page the shoppie beta is coming soon stay tuned for Access so the very first thing I always do is check the HTML source to see if it leaks what type of framework this is and I don't really see anything that sticks out to me I mean we got some JavaScript files but every website has JavaScript so the next thing I'm going to do set this up to intercept just for a easy way to um see all the server headers and I'm mainly looking for like X powered by because that generally leaks some type of information I don't see anything other than engine X so we have no idea what framework this is um we could like go try triggering a 404 error message so I'm just going to go to like slash please subscribe to see what error messages look like here and we just have this cannot get slash page URL and this is a node.js thing I want to say Express but um I've never really played with a node application that I can remember that isn't expressed so I don't know if it's like chicken before the egg type of scenario but if you just Google cannot get slash you get a bunch of results telling you it is node.js so just keep that in the back of the Mind as we're playing with this application um that it's like JavaScript on the background so the first thing I'm going to do is like test some basic things if we go to like slash admin uh it redirects us to slash login so remember what I just said about it being node chances are this isn't going to be MySQL so we can't do just like um this payload probably won't work if we put that in the password and we just get wrong credentials it's probably going to be mongodb which is a nosql database so the very first thing I generally do whenever testing this is let's just get a credential inside of prep Suite click login so if this was a PHP app that used it we could probably use like um the scalar or array on username but I want to say this is a very much PHP thing um and we get this redirect to wrong credentials one or wrong so since this is a npm server I don't think this will work and it's either a PHP thing or Apache thing where you can pass variables this way I want to say it's like PHP and pearl that's common but not node.js in node.js typically what you do is you convert it to Json so we get this we have wrong credentials I'm going to change it from X www formula encoded to Json and then we just fix our payload so it's um username it's equal to admin and password is equal to whoops not equals please subscribe and thank you syntax highlighting so we still have this it's redirecting to wrong credentials if we had missed out a variable like password um we'd get a clear error that is trying to process Json so we know we have rendered this correctly or at least we're in the Json function and this is key because in this remember when I did the username then let's see I want to keep it highlighting like not equals to something well we can do the same thing in Json form except put it on the right side which is when it gets processed so I'm going to say the password is not equal to blank right so now when I send this after I add my um bracket the server is just hanging and I don't know exactly why it's hanging here but it never returns so I'm going to go back here we can start going back to repeater and I can kind of replicate that if I played with this more if I put a single quote here it still hangs so I think if we create some type of error message the application just hangs up and this injection is not working there is another type of injection we can do and uh no SQL and that is um if we do this double uh pipe that is an or statement so you can say admin or one equals one like this and let's cancel this request start it up again and it is still hanging and I just realized what is wrong uh we need two equal signs here and now we have redirected to admin and this may look weird right um we can maybe explain it better if we go into the console so right now the statement was something along the lines of where username is equal to admin so we're going to assume we know the username is equal to admin so we do true and then we put an or statement and the or statement was also true but then there's an and and false because with this um we didn't like make sure the password's correct right and general SQL injection we put a comment out so it's ignoring the password and this we didn't do that right but this still translates to True which is a bit weird um if we like humans will probably read this left to right right so if we tell the computer that's what we want to do by using parentheses so it's true or true and Dan false now the statement's false so what's happening here is um we can also do false false right is it's treating this as true and then treating this statement as [Music] um the first one it goes to so it's going to solve this it says false and false okay and that says or true so the statement's going to be true um it's just weird how no s or I guess JavaScript processes variables right that's just not what I would expect so we can copy this username and then just log in with it right so I'm going to do login admin password can literally be anything oh wait we have to do equals two equal signs login maybe copy and refresh this page oh wait is it going to burp Suite okay this one now will work right yes we are now in this product app um Let's see we can go to the search for users search a user admin download the export and we get username admin password is this hash so we want to try to export all the users from this before we just go cracking this right I'm going to add this to hashes.txt just in case we want to um but there's probably going to be other users in this database right so we can maybe do admin pipe pipe all right let's do single quote one is equal to one like this so downloading hopefully all users and that one did not work and I'm not sure why I'm going to copy this payload do it again still just get one um oh I think when I click this button this uh form it doesn't get read so we just go to search users uh would it look like at the very beginning didn't have that button right so I put this in hit enter and it puts this username up here and I think this is what the download export uses not this search box which I guess just a janky web app but now if I download the export we have a list of every user because this search is searching for the admin or true right and every user is going to be true so we can now copy this hash for Josh and we insert it in the database and then I'm just going to cut it so we can copy go over to the Kraken so I can quickly crack these hashes actually this just looks like md5 sums right yeah so we can probably just Google um was it crackstation probably will work crackstation.net for md5s put these in let's see if it cracks uh clicking bicycles okay is that it oh another bike verify sweet so we have the bottom hash the 6eb is md5 and the password is Remember Me this Way so demon have to go to the Kraken um that password was Josh's so Josh so we can try sh Josh at 10 10 11 180. and put in the password Remember Me this Way and we don't get in I'm just going to test my clipboard out there's no trailing space everything looks fine so we have to figure out what else there is to this box I don't see any functionality here where we could like leak files or do any other type of login I guess we could try logging in as Josh to see if there's anything else under the shoppie admin but we could have also done a Dura bust right so if we do um I'm just going to use foff we can do F Dash U put in shoppi.hdb and then Dash H for header and I want to say host is equal to fuzz like this and then the word list we're going to use is opt seclist uh Discovery DNS and this one's going to be tough um normally I like using the sub domains top 1 million but using hindsight the word is not in that list you should always use multiple DNS subroot forcing techniques so I'm going to try this bit Quark sub domains and I think that's all we have to do right actually we need to fuzz Dot shopee.hdb let's see and fuzz I guess is capital and what we're going to do is filter size or we can do filter words five so we're going to hide everything that's just five words which is the cannot get the thing right so running this it may take a little bit I guess we can try logging into the admin um I type it in let's see let's get rid of our cookies so storage cookie we could also enumerate this cookie to see how it's generated right but we can log in with Josh Remember Me this Way and it's still the same exact app we don't have any other functionality SO waiting for uh fluff to finish and we finally got a hit on matter most so let's add this to our host but also sudo VI Etsy host and we can do mattermost.shoppy.hdb save this and log in so now let's take well once matamus actually loads we can do Josh Remember Me this Way because that's the only credentials we have and now we're logged into the matamboast instance so clicking on all the channels um coffee break is empty deploy machine which is a private channel does have some credentials so we see a message from Jaeger saying for the deploy machine you can access it with these creds and then let's see we're going to use dock of a deployment we look at development and we have Josh talking about some type of password manager and C plus plus along with just talking about the general layout of the admin interface if we go into the thread nothing really interesting so the key piece is this deploy machine so let's take a look at it so if we do SSH actually is it up here yep so sh Josh at 10 10 11 180 actually that's the wrong credentials we want the past the username to be deploy right so we do deploy login that is the correct thing oh Jaeger he gave his own credentials users will always do silly things right so now we're logged in as Jaeger and we have this shoppie start and we can just cat that and see nothing real fancy there we look at sudo we can see Jaeger may run this password manager binary so if I go lsla home deploy we have the source code here for a password manager so if I look at password manager.cpp uh permissions denied so I guess we can't view it only to deploy user can we also have creds.text that only deploy can read um we can have the password manager so if I just execute it actually I can't execute it I have to execute with sudo so pseudo-l let's do sudo Dash U deploy this and please enter the master password we'll enter please subscribe and access is denied so the first thing I would do is create a bunch of A's and just try like a buffer overflow right so let's do the password manager put in a ton of these longer than any password should be and we don't see any type of Crash so probably not a buffer overflow the next thing I would do is take a look at the strings against it so if we strings password manager and then go searching around let's see there weren't that many we have a system call here are some strings so welcome to the password manager please end your password um we have it just doing cat and cat doesn't have a fully qualified path which leads me to believe this could be done with path injection however um this isn't a set uid binary it's being ran by sudo if we do sudo-l we can see secure path and environment reset is set so we can't change the path if you don't know what I'm talking about you can probably just go to ipsec.rocks and type like path injection or path hijack but essentially um when it runs cat it's going to run the cat and user bin cat because user bin is in the path if we put like slash temp at the beginning of the path and then created a cat binary it would execute that instead of the one in user bin and that's where we get code execution but since it's sudo we can't really do that um I don't really see any other strings that were interesting it's definitely catting the deploy creds right and we could just run this back in ghidra but there are other encoding methods with strings right um so we can do e l for little Andean and we get sample and that's the only string we get when we change the encoding method right so if I run this pseudo again let's see pseudo Dash U deploy home deploy password manager enter the password sample that is the credential and we get logged in at the end of the video we'll look at it in Gidget and figure out the password that way but strings is a really good tool and definitely always try changing the encoding methods right so if I look at Dash e let's see what other methods there are I think it's like yeah um let's see capital S lowercase s lowercase B capital B lowercase L and capital L right um lowercase I was 16-bit little endian capital L would be 32-bit little ndn so you could look at the other strings so if we just did capital L we get nothing we do B we get sample as well capital B we don't lowercase s we get pretty much what we saw before right and then capital S we get some extra things but no sample so let's just run this and log in as the user we want so password with sample we get deploy and deploying app is the password so sh deploy at 10 10 11 180 we could just use um s u to switch users but generally I like establishing a new SSH when I can if I look at the password manager.cpp uh we can see how they encoded the password so they just did this one character at a time I think they did this so it didn't end up in strings but I mean it still did so you generally want to use some type of um encryption or at least xoring if you want to hide passwords from strings so now that we're this deploy user let's do a sudo-l to see what we can run um what was the password deploy app like this and deploy may not run sudo on shoppie so look at the files in the home director to see if they um give anything really is too interesting bash history has pointed devnoll DB shell is also pointed devno I don't know what creates that file I've never really seen it before but nothing really interesting so the next thing I'm going to do is take a look at the groups and I can see them a member of the docker group and Docker is a service that runs as root and you can generally always priv ask if you can run a doc container because if you're in a docking container that has elevated privileges like this says admin capability you can Elevate to root on the host so it makes sense that if I can create Docker images that I would be able to just um convert myself to root so I'm going to do Docker images to see what images already exist and we have Alpine which is a super common really small Linux distribution we can see it's just five and a half Megs big but all I'm going to do is a Docker run and then I'm going to specify RM to delete the container when it's done and then Dash it for interactive terminal I think and then Dash V for a mount point I'm going to mount um slash to slash Mount so inside the container um slash Mount will be mounted at slash of the root system and then I'm just going to execute the Alpine image I'm going to call Bin sh so now I'm in the container and if I go to slash mount it looks like we have another file system in here right we could also just see each root dot at this point so I see it rooted into slash mount and it's just like I'm on the host system right so I go to slash root and we get root.txt because again the slash Mount directory of this container is the slash of the root file system um and it looks like there may be some type of schedule task that is uh deleting running Dockers but we don't have to do the CH root we could just do Mount root and get root.txt that way we can also drop an SSH key here and then SSH into the box so um hope you guys enjoyed all of that now we have to do the password manager reversing with ghidra so let's copy it over to our host so I'm going to do SCP deploy at 10 10 11 180 and then the path of it was home deploy password manager and then we're going to copy the password paste it in and we have a copy to a box so now I'm just going to open Deidra and then we'll import the binary and see what it says about it I probably should update this this is like to almost like a year and a half old at this point let's see file new project we don't really care about a project name because I don't save it my guidra stuff for these videos see it's opening I'm going to hit I for import and then let's go to shoppie and the password manager okay that's going to ask me like what options I want to analyze I'll just do the defaults so it looks like it is all done I'm going to look at the exports first go over to Main and we can see what it is doing here and right off the bat we see sample right here so as soon as you click on Main you understand what's happening um what I generally would do is I'd look for Strings because the program was asking for like our master password so I'd probably go uh what is it there's a view for Strings right windows functions not simple tree pretty sure it was in search there we go four strings and we're just going to search all the strings I'm going to go to all blocks and not just loaded blocks and this is just the strings of the program I don't think sample is here if we look uh no it is right here so we do have that string but the one we wanted was what was it master password or something um please animate master password so typically if a program's asking for a password then the input is going to be around the same exact spot in code so if we click here then it's going to highlight right here for us so let's look at the disassembly so we can see please enter your master password we highlight a few things actually this is a function so we can right click go to references show references to it and we see that we go right here in the code for that so this is where it's loading that string because what we looked at was just where the string exists in the program right so this is where it actually pulls the string from the program and we just highlight around we can see the decompiled code right here and then the next string is sample so that's kind of how you also know that that is the password and you may be wondering like if we look at the source code the author did try to prevent the password from just showing up in strings because if we look at it password manager.cpp um maybe we'll do it from deploy let's see right here they put it one character at a time so most people would think well since I'm adding this one character at a time it's not going to um show up as a string right so let's take a look at exactly what this looks like so I'm going to do xxd against this and then we're just going to go password manager pipe it over to less so now we have just the hex output right so I'm going to look for sample we don't find it I'm going to go a period M uh let's see M period P here we go here's where the password is stored and because we added it one character at a time we just have it going with this um like s with a null byte then a a null byte then p and a null byte and by adding the null byte because the null bite is coming because every time you terminate I believe um it just terminates that string with a null byte I'm not a hundred percent positive but that's what I'd be guessing is going on because we have this quote s quote and how you terminate a string is null byte so really we add s null byte to the master password is what I'm guessing maybe I'm completely wrong but by doing that we just convert it into little ndn format even though that was not the intention so um hope you guys enjoyed that video take care and I will see you all next time