 what's going on youtube this is ipsec we're doing ransom from the uhc merch qualifiers and the inspiration behind this box was a web portal that an instant response team may give a company when they've been hired to investigate a hack and the reason they use these types of web portals is because when a company's been hacked you can't really trust that company's email server so they switch to some out-of-band communication so if someone's snooping in on the conversation hopefully there's an audit trail behind it that will let the incident response team know however the application suffers from a type juggling vulnerability that allows for authentication bypass and i believe type juggling is one of those vulnerabilities that's a lot more common than people think it just goes undetected for one reason or the other once you get logged into the application you can download a zip file and that zip file is encrypted with the zip crypto encryption algorithm which is vulnerable to a known plaintext attack which was recently in the news because the kante ransomware leaker that leaked some of their source code leaked it via this algorithm and you didn't actually need to know the password to be able to decrypt the source code so let's just jump in as always we start off with an nmap so dash sc for default scripts sv enumerate versions o a output all formats bring the nmap directory and call it ransom then the ip address of 1010 11.153 this can take some time to run so i've already ran it looking at the results we have just two ports open the first one being ssh on port 22. it's running open ssh on ubuntu then we also have http on port 80 and it's running apache httpd on ubuntu we can take these exact versions and google them and get the distribution so if i just copy this go over to firefox and google like launchpad and then paste that we can see the actual page and it says it is in ubuntu focal and we can also do the same exact thing with openssh if we just copy this and then search launchpad for it launchpad is like where all ubuntu packages are we can see this one is also an ubuntu focal and the reason this works is these versions like for ubuntu 0.4 is specific to the release so if this was like bionic or something else it would have a different tag associated with it doesn't really give us any information other than we know it's ubuntu 20 so we don't have to worry about old exploits like shell shock i guess but um whenever i can get any type of recon done i like doing it especially if it doesn't take any time like that right there so let's just go take a look at the web page because there wasn't really anything else and just going there brings us to this hdp portal of the e-corp instant response secure file transfer and it wants us to enter a password to log in so i'm going to try a password of password and we get invalid login so let's go take a look at burp suite so i'm going to do intercept request and we can click that and we go in and we can see it's doing a get request to slash api login with the password of password of course we set that but the other key thing to note is this larval session cookie so this tells us it's using the larval framework and it's within php if it wasn't doing this there may be other ways we can pinpoint its larval so if i do like a 404 request and we google something so we can take hold on i want to press control u to look at the source code and we just google like this string and then 404 which is what's on the page i don't think i want to put that in quotes and i can say not found because it's 404 not found and this whole div header is going to be unique to um the illuminate response plug-in thing so we see illuminate here this is just a namespace that laravel likes using so that's another way we can fingerprint it by just doing like google searches on generic error messages and seeing where that goes but let's go back at this one request so we have a cross site request forgery token and then laravel session now because it's going into this api this xsrf is not really that uh too useful there's also a second thing that happens in a lot of larval forms and that's if it's not going to api it also normally likes passing this underscore token parameter which is another cross site request forgery thing so it not having the underscore token and also having api in the url means we're hitting the api middleware of larval and that becomes very interesting to us in a minute but first i want to try fingerprinting this password field so i'm going to try to make it error out by just putting a bunch of characters that are bad for sql mainly a parenthesis single quote and double quote and we don't really get anything here so i'm going to assume this is not sql injection but you know me i always like having some type of recon going in the background so we copy this to a file we should save this into ransom i'm just going to call this login dot request and we can just do sql map dash r login dot request dash dash batch so now we have this going to be running while we poke at it but another thing we could do is not pass anything so if i just do password equals nothing we get json back so this is key and a lot of apis if it can send you json chances are it's going to accept json as well the other weird thing about laravel and we'll look at this more in a little bit but if i change this request method to post we get this method is not allowed because we only have a route for get however if i change this verb from post to get too many attempts ooh it does not like us doing that sql map so we have some type of protection built in there if i get rid of this cookie what happens still too many attempts so it's got some type of automated um protections put in so i'm probably gonna pause the video wait five minutes and then we will resume maybe if i change user agent it's probably ip based oh was it not or did i just hit that magic time okay so i probably just hit that magic time where i could access it again and we see a message here saying the given data was invalid uh password field is required now we're supplying it in this request we also have this x request with xml if i get rid of this we have different logic so this is telling us two important things number one um this xml thing is going to be annoying so we should remove it we may be able to say like password hold on let's see test slash password is that gonna work um request i probably have to like form xml better is this like application xml yeah i don't know exactly how to do that but we do have unique behavior when we remove this header and the unique behavior looks like it processes our word password because if i put something else here like please subscribe we can see how this behaves if it says password does not exist oh it doesn't so we just know the application behaves differently when we do that i wonder if i get rid of this content type anything different nope so the api was giving us json data and this is the hard part of the box just knowing to do type juggling here but when we look at the source code it may make more sense it's one of those things that's a lot more common in php than other like programming languages just because of how php works under the herd which we'll explain after we solve the box but i'm going to change the content type to application json and we're going to put this in json itself so if i do a password in json we get invalid passwords so now even though we have this get verb up here um it's still accepting it and if i change that to post we have method not allowed so um it's weird for the actual application this thing to submit passwords and a get but that's the whole reason i put this in i did it this way because i also wanted to showcase if it's a get you can still put data down here if you update this content type and also keep in mind i did remove the xml piece let's see if i add that back in a bunch of control z's to where we have xml up here there we go if i put this in whoops two lines there we go this to be json we're still getting invalid password so you can still have this x requested with it's just weird that it behaves differently with or without that header but let's get back to it so we're getting invalid password the cool thing about json is we can actually pass different types like if i don't put quotes around here it's probably going to give a weird error message because it did not process this and i can say password is equal to true and now it's just a boolean and lets me in and this sounds like absolutely crazy but when you look at the code it somewhat makes sense if we do php dash a if let's see ipsec is equal to true echo success else echo false and i need to put semicolons and i think that will be good to demo it so we have that so this piece is the user input so we're putting stuff like this and it wasn't working but essentially what we did is we put true there and because we're in json we could remove these strings so php treats this as a boolean and then says if ipsec is equal to the boolean true which is essentially saying if this variable is not empty then succeed and that's essentially what we did um we could probably change this to zero and it also succeeds because true is zero false is one but the whole fix here is using three equals to enforce type comparison in php so if we do three equals it will make sure the content is the same and also how it's declaring it is the same so if i do ipsec is equal to ipsec it says it's true so this is a common like php logic bug that affects a lot of applications just a lot of people don't really test for it because you have to convert the request to json so um we'll look at the source code after that but we do have login successful and it gives us a new cookie or maybe it's the well it's a new cookie here because we don't even have one set so what i'm going to do is let's just go back to this application turn intercept on put something in so we can intercept it and then we want to delete it from here actually we can just copy this whole request paste it and then we can intercept the response to this because i'm interested what the server tells us so i click forward we can see the server is responding with set cookie this larval session and also login successful and the reason uh that worked because there was one piece if this wasn't a larval api um we would fail because we don't have that xsrf cookie in but we're hitting the larval api with that slash api endpoint so that works um if i for this to my browser we can see what the next step is we have the secure file transfer so we can see files sent by the client and there's two there's this home directory.zip and user flag if i look at the user flag this is going to be the flag to the box so you can get user that way um i'll go into more why i made that so easy after we get root on the box it's a silly reason but um yeah so i'm going to click download here to download the zip and this is where a somewhat realistic challenge i guess comes from it's they used zip in a bad way and i'll show the inspiration i got it once i move this so let's move downloads uploads.zip over here i think i had multiple copies of that let's see i'm just going to delete and re-download just in case i have an old copy that has the wrong ssh key in it so let's download this again move downloads uploads.zip here if i try to unzip it it has a password so what i'm going to do is 7zl to list files in it i'm sure i could do it in zip as well but it shows us all the files here the other thing we could do is a dash slt and this is going to show us the crc for each file and then also the method used to encrypt it and because it's encrypted in zip crypto it's vulnerable to a plain text attack and let's see if i can find it real quick on twitter twitter conti source code zip medium is this going to find it um let's see that's not it see cracked yes this whole post or this next step is going to follow pretty much the guide here if you're unfamiliar with this essentially the conti malware group had a rogue employee leak a bunch of things one file with their source code was encrypted and there was they used the um zip crypto library to encrypt it and then someone was managed able to crack it through a plain text attack so that's what this step is noticing the zipcryptor store here and then if we look at the files we have a list of files and all we need to know is some plain text that's in a file we could probably use like the private key here by cat ssh um or if i look at a private key i'm head dash one this is a good way to do it id rsa we could probably use a plain text like this to crack it because we know this file in this encrypted library or encrypted zip begins with this however uh bash logout is probably a better one to use because it's going to be a much larger size the more plain text you have the quicker this attack works and dot bash underscore log out probably doesn't change all that much and if i look at this on my box do i have it wait oh log ooh let's do log it wait what got bash underscore log out oh i don't have one here let's see do i have another user yep does this have a bash log out bash history see um cat dot dash underscore well i don't know why i don't have a bash logout on this machine that is bizarre let's just google one so i'm gonna go to google we can do dot bash underscore log out and we'll download maybe github bash log out master let's see is this going to be the same size now this is a wrench that i did not expect have to cover in this video lsla dot bash underscore log out uh it's downloaded does not have that that's 285 so this is probably the wrong version because we want one that is 220. see etsy skill see do i have one in here so i'm going to do a pseudo update while we look for one let's see 220 if i google that i'm guessing this is probably the same exact thing i had just got locate dot bash underscore logout well we have a few that is 220 in this snap etsy scale so i'm guessing for some reason i wave to my bash log out file but we have one that's 220 on our box so i'm just going to copy it there and let's remove the one that's not because that will just get confusing so now what we want to do is zip it up so bash underscore log out dot zip and we add this and what i want to do is a 7-zip dash slt on this file because i'm interested in this crc checksum i want to make sure it matches the same so doing that that looks good let's do it on the encrypted zip so l slt uploaded and let's search for log out and we can take a look 6ce3189b this is the same it is the method is different because again the zip we created was not zip crypto because we didn't encrypt it we just have the plain text version of what this encrypted file looks like see the pack size is different i wonder if that's going to cause an issue i don't think so so let us try the whole cracking process so if we follow how this user or person cracked the conti he gets the plain text of decrypt note which is going to be just underscore underscore decrypt underscore note and he runs bk crack with these commands so dash capital c the encrypted zip and the file he wants to do the plain text attack with then dash capital p the um zip that he created the encrypt the unencrypted zip and the example file so let's redo that command and if you want to download bk crack you can just google bk crack github and download it here so we can do cd opt get clone i probably already have it nope no i don't and then let's see oh is there a release it does not have the source there let's see is this going to be it let's just go back to our other directory so move downloads bk crack over here tar x bf bk crack i think he has yep a binary here awesome i'm going to copy that up one directory and now i can run dot slash bk crack and it was dash capital c the encrypted zip then dot bash underscore logout which is the encrypted file we want to do this attack with against it and that's a lowercase c and then dash capital p the plain text zip and lowercase p the file we want to um say is in there there we go we have this going it's probably going to take actually i'm going to control see it quite a time here so we can see exactly how long it takes because i'm going to speed up the video for this process and 57 seconds later we do see it has outputted a key for us which we can use to change the password on the zip so in this he's doing dash capital c specifying the encrypted zip dash k the key dash u the new zip name and then what password he wants to set so let's try this so going back to the previous command we can do dash k copy this whole key then it was i want to say dash u yup u we'll call it unlocked dot zip and then put the password of please subscribe and we can see it took less than a second to write the new archive if i make dur let's call this zip and then unzip the unlocked contents in it we can put the password please subscribe and now we have unzipped everything so if i do ssh we can look at idrsa.pub and we can see this is a key to hdb at ransom we can then do chmod 600 id rsa and try this key out so sh-i idrsa hdb at 10 10 10 or 10 10 11 153 accept this and we get into the box so the very first thing i always do is like a pseudo dash l it's asking for a password so that's not going to do anything um i always like looking at the web code to see what the passwords in the application are and looking at www.html doesn't really get me anything so i'm going to go etsy apache 2 we can do sites dash enabled look at the default site and we can see the document root is set to serv prod public so if i go to cd srv prod this is going to be where that whole laravel application is we can look at routes and then api.php to look at where um the application goes to login and we see it's in the auth controller class as the function custom login so let's go cd app then http controllers and then look at authcontroller.p and we can see the custom login and the password of uhc-merch-global-pw exclamation point and it being global password probably means it's the root password so you can just try su dash and we get logged in and that will be how you root the box i wasn't super happy with doing the route here but um for uhc it's done in amazon and when we move this machine over to aws the custom root kit i had in this machine uh didn't work on aws so the whole step there died and we found out last minute and did a little bit shuffling around to still make sure there's a privesque even though it's a pretty lame one but i didn't want people to look at this code because where this password is is the vulnerable function and anyone just glancing at this would probably say well chances are this isn't vulnerable because it's saying if the request is a get and it's um get the variable password if it's equal to this then sure and we can put this password in on this i didn't code a logout button so let me go to my storage and clear all my cookies then we refresh if we put this password in we log in but again as i said earlier this only has two equals so we can bypass this through type juggling in php and you can imagine how many applications may not do the triple equals and a lot of people don't know how to convert that http request to json in order to be able to prove it's exploitable so hope you guys enjoyed that um i think that's it i'm trying to think there's anything else i want to show but i don't believe so i also found it funny that this whole request git thing accepts data and the parameter i didn't do anything custom to have the api accept data here so larval essentially for this whole http verb it only uses it in the routing piece and that routing piece was up three directories and routes v api.php right here so that's the only place this verb actually matters because once you get into the function it will pull from the like request variable in php which is both the um get and post and maybe also session i wonder i don't know how we could really test for that because i want to say request polls from three places um this is gonna be a rabbit hole that i did not think i was gonna go down uh php underscore request i know it pulls in three places i forget where uh cookie it pulls from the cookie i wonder this would be really funny um let's see what is a cookie is it cookies or cookie cookie okay i'm just really curious here so if i do cookie password is equal to password password field is required let me get rid of this content type redirecting password is equal to what is that uhc thing if this works it's going to be absolutely hilarious i don't think it is because it didn't say invalid password but let's see cd controllers bless copy paste no it does not work maybe there's a different way we can set the cookie here but um i guess it only accepts data and the body or whatever this is called in the url so hope you guys enjoyed the video take care and i will see you all next week