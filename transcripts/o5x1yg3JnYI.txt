 hey guys what's going on this is ipsec and we'll be doing the brain machine and by doing uh we'll see how this goes if you remember back in my october video i said october was one of two machines i did not look forward to recording just because of the final step well this is that second box so i guess let's jump in so like any other box we're going to start off with the nmap with safe scripts version numeration outputting in all formats call it nmap and the ip address which is 10 10 10.17 i've already ran this so we're going to look at the output nmap.nmap and we see ssh smtp pop3 imap and https there's no port 80 which is odd for hack the box a lot of the boxes did have 80. this one only listens on https so perhaps there's something there and also there's a lot of mail protocols so there's probably something there i'm much more comfortable with looking into web type exploits first so that's where i'm going to start if i knew a lot about dovecot or postfix exploitation that's probably where i'd start enumerate versions etc since i don't see port 80 at all i'm kind of curious in the like sl cert information we do see it gives a common name brainfuck.htb this may be beneficial so let us see going to 10 10 10 17 we have to accept this certificate and we just get the blank engine x page if we go to robots.txt not found i think if you do a bus to this you won't get a single thing so let's look at this certificate and see what happens ah not cookies if you're sure so we know right off the bat the common name is brainfuck.htb but let's see what other information is hidden within the certificate right now in the issuer we do see an email odrestus at brainfuck.htb this is definitely going to be useful since we see a bunch of smtp type stuff we have a valid email to try brute forcing or other things with same information and again the common name we see is brainfuck.htb going down let's see other things the alternative names so the certificate is also valid for www.brainfuck.htb and supersecret.brainfuck.htb so let's add those in our host file and i've already added them so all i did was add an entry 10.10.10.17 and gave it the three dns names and that lets us type those into a url bar and check out if they're valid pages and the last one is super secret so we see a custom form here and these pages are taking a lot of load and wordpress so i don't know what this is right off the bat i do know a bunch about wordpress so this is where we're going to be starting the interesting here is the open ticket this isn't normally on wordpress the other thing we can do is start a wp scan so wp scan is a wordpress enumeration utility so if we give it wp scan hbs brainflux.htb it wants us to disable tls checks and when we start adding arguments we have to add a dash u silly program but it is amazing while that's going we do see that open ticket that i mentioned we can go to this dev post and we see a username admin see if this is done it is so we do see wordpress support plus responsive ticketing system authenticated sql injection uh we don't have a valid credential yet so authenticated's not going to be helpful to us what i want to do is enumerate different users on this to see hey do we have like a guest or some other type of user that we can authenticate then exploit this so i'm going to do wp scan again add a dash h and i do see it has a enumerate user option so i'm going to do that and that's i was trying to rename a window my bad so let's see let's see if there's any other exploits for this so just copy this i guess search exploit and we see sql injection that's the one we were just looking at a privilege escalation and multiple vulnerabilities that's 2.0 so we'll ignore that let's look at this privilege escalation since it doesn't say if it's a sql injection or not authenticated or not and it's also interesting i'm guessing this 4939 4939 the exploit db page isn't saying it's authenticated but our wordpress scan is saying it's authenticated so if nothing's here we'll go back and see if that sql injection is actually authenticated required looking into the privesque we see an odd proof of concept it's just giving us a html form post you can log in without knowing any password because of incorrect usage of the wordpress set authentication cookie so it looks like this plugin is giving unauthenticated access to this admin ajax.php and we can set a username and say we're logging in from facebook that's my take on this vulnerability real quick so let's try this out v exploit.html i set paste okay so what will we have to do well first we'll have to change this to be the right url username let's see wp scan did finish and we have two users admin and administrator so let's just try it with administrator first since it looks like both are here don't have to change that email uh let's go what we think may be valid so let's just change this to admin and oh restus at brainfuck.htb login guest facebook that should be fine so now we're gonna python-m simple http server go back to firefox and let's go to localhost thousand if we go to this exploit.html click login and not found so this admin ajax is under wp-admin so let's fix that real quick i probably wasn't reading something as i edited that so go back refresh log in and waiting we'll see if this logs in it's taking quite a while go back let's look at our source again make sure we didn't screw up while it is loading no page if we go back to brainfuck.htb we do see like magic we are logged in so let's see exactly what happened there because that is not descriptive whatsoever so let's go to uh edit preferences privacy clear recent everything sure if we refresh this please don't be logged in okay not logged in so what i'm going to do enable proxy that was just foxy proxy to make me able to switch between and back and forth and burp easily refresh confirm we're going through burp now so still listening on localhost host a thousand go to exploit.html for yes log in send this to the repeater tab so we can easily see the response back from the server and we see once we set this the server is telling us hey set your cookies to this and these cookies are the valid cookies of an admin so that's what happened that's why we don't see anything here because all this page is doing is telling a browser to set the cookies of a logged in user and we're back so as admin user let us check out the wordpress administration page if we can edit any php file we have a direct shell the easiest way to edit php files in wordpress is through their templating engine and this is taking a while to load is this the server or is burp on intercept nope so just the server let's maybe we can just jump right ahead and do themes but okay appearance themes editor this is where we can edit template files and right off the bat i notice you need to make this file writable before you can save changes checking other files around everything is not writable by whatever user is running this wordpress so can't edit this file to gain code execution the next thing i want to mention is the dev posts that smtp integration is ready so one can assume this is some type of mail authentication to this ticketing thing so going around we can do settings easy wp smtp and we see the username arrestus and the password down here it is in masked characters so let's open up a developer toolbar with f12 inspector click on this thing and we'll inspect this we get a potential password right here so copy i think in our html let's go we can kill this creds did not copy there we go paste there we go so we can assume this is going to be smtp creds for erestus okay so what can we do with mail creds well let's load up a email client i use evolution and there's probably a bunch of command line tools just to download a bunch of email but we're not doing an exploit so might as well just configure it like we're doing it so organization probably don't need let's see server what ports was this listening under cat and map nmap it is 143 and 110 143 there so imap plus is fine brainfuck.hdb username o restus password yes 60 minutes is fine again smtp probably don't need this but won't hurt brainfuck.htb account summary arrest us at brainfuck.htb next apply and let's copy that password again because we're going to need it restus paste this password and if it worked we'll authenticate and should see mail so we do awesome new wordpress site has been set up okay we know that and form access details hi there your credentials to a secret form are below ah we got more creds so copy this go into our creds secret forms arrest us and paste that and if you remember from our enumeration we did see a secret form and we just didn't bother exploiting it because we knew nothing about it now we have credits so let's try logging in arrestus and the password and it lets us write in awesome so having access to the super secret form let us go to different pages so we can open up development ssh and key let's see what's here development test okay nothing important there close this and let's read this ssh access was upgraded to make use of keys password log is disabled and we see a bit of a flame fest one thing is we always see erestus his signature arrest us hacking for fun and profit so going to the next post key we see everything is encrypted so the key thread is them opening up this encrypted thread looking at this it looks like complete gibberish you may look at this like oh this looks the same but it changes every time so even though it's the same number of characters it's not the same throughout each post that's because it's doing a cipher and the number of characters here's a bit different so it's jumping here at different spots in the cipher it's not cypher i forget the terminology crypto is not my expertise so this is where i may start making a lot of mistakes i want to say something like a rolling cipher so let's say it's encrypted with abc it goes like m plus a y plus c b a plus c and it keeps going keeps going and then starts here and because this is a this one becomes c and this is different number of characters this ends on c this now is a may make more sense in a second let's hope i can explain this the important thing though is this looks very familiar to a good old signature and if you know anything about like world war ii you know that this is kind of like the hail hitler thing which broke the enigma machine the enigma machines what the nazis used to encrypt communication and essentially it was a keyed vigenere cipher with a custom alphabet that would be rolling really fancy substitution but the issue was it was vulnerable to kind of a known plaintext attack because the early in the day they would always transmit like the weather which you can predict what the plane text will be from the weather and they'll be signed hail hitler this is signed arrested hacking for fun and profit so if we want we can try to decrypt this and try to explain what's going on so we have the plain text and the encrypted encrypted is that plain text will be this so very similar same number care oh very similar because that was the exact same thing i copied paste okay very similar but how do we go from o to p so the one time pad pretty much adds p to o or i don't know how to explain this let's work through it and hopefully working through it will explain it to you uh python so we'll go in python and we will print the ordinal value of o and we'll print the ordinal value of p okay and we also want to know what the ordinal value of a is 97 so let's just do this i'm doing this because i care about what um position the alphabet each character is so to encrypt we would add p to o to decrypt we subtract p from o and it's a bit tricky to do this because you think you'd just be like the difference between o and p is one so we'd go behind p one and the character would be o that's not how it works so let's pull up our ascii table this explanation could not be good if this makes sense it's going to be a miracle so we're going to start at p and we want to go back 14 places so going back p this would be 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14. so b so going back to ov we have uh i have no clue what's doing there recording no i don't want to do a macro okay uh plain text encryption uh key so b now we'll do the same thing for i and our so r and i and we want to subtract r from i so starting at i we want to go back 17 places so we do this again started r 0 1 2 3 4 5 6 7 8 9 10. wait i want to start i right yeah i started r so from i we go back 17 places so 0 1 2 3 4 5 6 7 8. it's like a modulus so go to z 9 10 11 12 13 14 15 16 17 r so that one is going to be r so we could keep doing this but i'm going to do something to speed this up so i have to keep counting and rumkin has a lot of good ciphers or tools so google rump i thought was romkin uh i could have swore from yeah here we go and we're going to use his one time pad because that's essentially what we're doing right now and we want to decrypt i believe so let's verify what we did if we do i and r we should get uh our okay yep so we are good so if we do pno verify we should get b yep so we'll do e and e a next one will be a and s i then we'll do [Music] g and t g t n and you're getting the picture now so t i t i was it no ni f and it's just my brain my brain my brain constantly but i don't i don't want to waste time doing that so we know the key we can go to visionnaire keyed visionaire let's see alphabet use there that's fine passphrase so i don't think i have to do anything for this alphabet key it's been a while since i've done this so bear with me this video is going pretty long so i didn't want to um restart go to skeed visioneer your message is that passphrase my brain and there we go please arrest us hack and find a profit so now we can decrypt the message which means we can decrypt this url down here so let's see what this says come on tabs there you go you stupid i hope you remember my password because i don't we can download this rsa file we are getting near the end of brain  but we got one very tough challenge ahead of us so let's just move that id rsa file into this mv downloads id rsa here and the next step will be decrypting that rsa key because if we look at it id rsa encrypted yes awesome thankfully i've already done this on the 1010 machine so hopefully everyone's familiar i'm going to breeze right on through this quickly without explaining too much i'm going to cut the idrsa file put it to my clipboard ssh into my cracking rig that has some graphics cards uh the kraken and i'm going to paste this idrsa go into my john directory i'm going to run sshng to john on that idrsa file to put in a format that john knows if you're not using jumbo john then chances are you're just going to use ssh to john i don't know the difference i know this too and i know this one works with jumbo john so give this a name we'll call this brain to crack and let us run john so dot slash john slash root brain to crack dash dash word list equals slash opt word list rock you dot txt and we see it cracks almost instantly we have this three polaki i don't know what that means but let's go into our creds add this sh key and three palakki awesome so let's try logging in we'll do s h dash i i d rsa and a user probably arrest us at brainfuck.htb and it's thinking it's thinking did i type of that i did not it's my vpn vpn still up huh try this again unprotected private key file so chmod 600 idrsa login private key three polocky and we're in so looking at the files we have a debug.txt encrypt.sage a mail directory output.txt user.txt so if we find mail nothing interesting there let's look at encrypt.sage and it's a script duh we are opening root.txt output.txt debug.txt doing some magic and writing a string so we're taking what was in password.text and writing it to output.text right here and we have debug writing p q and e don't know exactly what this is yet so let's just throw this into google just random strings to see if we can figure out what we're looking at and we see a script that is almost identical here another sage script this looks familiar this debug a bit different writing different variables out and we have rsa so we know there's going to be some type of rsa attack and i'm guessing you may if you know i say well no based upon pqe not sure so let's look at what those values are we're writing p q then e into debug.txt so we have p and q about the same size these are both prime numbers in rsa and e this is the exponent and ginormous generally you're going to see this to be set at i think 65537 that is just the normal prime for this and i may get stuff wrong here because crypto is not my expertise but i believe this may be vulnerable to like weiner's attack as well because the modulus of e is for the public key and modulus of d is for private key and when the public key is ginormous like you see here the private key is going to be small so if this created a public key we may be able to brute force the private key because the exponent for this is just small maybe i don't fully understand wiener's attack if you want to do more crypto stuff and get expert at it i'd recommend crypto pals haven't done it but i've heard great things so being the noob i am at crypto my next step was to google about p q and e so we're going to go uh google decrypt rsa given p q and e because with these we should be able to we have security dot stack exchange and crypto stack of change first let's go to both trivial this guy's kind of just explaining it and this one gives us a nice script and i love scripts so we're gonna whoops try running this and see what happens so last debug open up a new window v uh decrypt i already have a thing so we'll just delete this v decrypt dot pi uh set paste there we go so let's put our values in so we want to put p whoops not that hockey there we go and we want to do q and we want to do e this number thing okay and ct probably ciphertext so let's go back to our ssh it's not responding come on just need to get the ciphertext out come on there we go cat output as you can see my ssh session is lagging it's not a great sign if we get this output we should be good though come on there we go awesome just enough so cut that ciphertext place that there okay and now we're going to run this and we get plain text but it's a giant number so we have to convert this number into ascii easiest way i think is to convert it into hex and then convert it from hex to ascii so for python interpreter we'll do pt equals that number and we can do x pt so we see we converted that number into hex but we have this l at the end and that zero x we want to get rid of so i will do this to get rid of it check that yep and then we can dot decode to hex from hex and this should get us um an ascii string if i type this correctly uh like string what did i screw up [Music] i'm not exactly sure what i screwed up let's take this again so string hex pt 2 negative one close that dot decode hex do we need the print a length string i may be taking off too much let's see go back to this thing let's copy this ciphertext again maybe something screwed up in our pasting v uh decrypt dot pi i think that was only 18 not 182 at the end there that looks much better so let's take this plain text and try this again uh that was embarrassing so string hex pass uh we need not pass pt equals that string hex pt okay this is looking better guys i'm not exactly sure what i did there but i'm sure you'll find out in the video and we're probably laughing when i made that mistake if you noticed get rid of that l of the n and the 0x dot d code x and there you go this is the contents of root.text i don't believe it was the password i don't think you actually get the password for this machine no you don't but you know it's openingroot.txt and then taking that contents encrypting and writing there hopefully that made my sense again my apologies i'm not a crypto guy so just doing my best if i made mistakes let me know uh yeah take care