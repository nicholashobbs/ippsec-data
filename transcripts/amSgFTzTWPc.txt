 what's going on youtube this is ipsec and like i said in my last video i'm going to start trying to break out the beyond roots into their own videos that way my videos aren't like two to three hours long and these beyond roots stick out more so if you enjoy this new format let me know with that being said let's jump in so as a quick recap when doing the hack the box machine noder you get this flask session cookie and you have to crack the signing key so you can forge your own cookies now my first instinct whenever cracking anything is go to hashcat because it's optimized so it's super fast and the rule files let me create very big word list from short files um but hashcat ran in troubles thankfully flask unsigned worked because the signing key was weak but in the future i'd really like to use hashcat so i wanted to figure out what i was doing wrong if we look at the actual actual um flask session cookie we got from this it is going to be this one it looks like a jwt but if we decode it um let's see where the actual algorithm says like how it's used this is the payload this so this is going to be the data and then the second field is going to be pretty small it's just a timestamp and then the last field just like a jwt it's the actual signature or the signed blob so um everything looks fine here if we take the example so it does support flask and the example they give is very similar to the one we have so if we put this in jwt dot io it just looks the same the time stamp's a bit different because of how it's doing the time it's not encoded as ascii or whatever but everything looks fine if we go to the actual github page for hash cat this is how i would actually start tracing the code i probably should go hash cat example hashes real quick so we pull what was it 29 100 yes so i'm going to just search for 29 100 on the github page so let's go here type 29 100 in this repository and we get the source modules module 29100.c and this can be the module it uses to crack the flask session cookies and if we keep scrolling we see this module hash decode and we got this token count three so that's going to be the payload then the timestamp and then the signing key or whatever the signing something uh whatever you want to call it signing blob and i notice in the very first part we have the token length minimum 0 and token length maximum 27. so if i look at this so let's just view this size so echo dash n wc-c 27 characters so they limit it to what their example was if we look at what ours is it's going to be 51. so this is probably going to be the thing we have to change and when looking at what to change it to i pretty much did the same exact steps of the um flask session except i went to jwt so let's copy this and i'm going to look at module 16500.c i'm going to look at what they have the sizes set so let's see i'm gonna search for three maybe because it's gonna be token count right three and these blobs they're giving 20 47. so that's what i'm going to set my token length max to i don't know if that's correct because there's a lot of other things in the code that may be optimized for a short length token but that's why i just leave a comment on the pull request and see if um they wanted to change anything so let's now go into hashcat if we go to i don't have a source directory so i'm going to make the build and we're just going to pull hash cat so get pull or get clone and then once it actually downloads we can make that change so let's go into hashcat and then we will be source modules module 29100.c look for 27 and put 2047 there so that's going to mimic what um jwt's max length is assuming most the other code is the same i'd assume it would be just because these are two very similar um algorithms and then i type make to build hashcat and i'm going to pause the video we'll resume when this is done and see if we can actually crack this okay or a copy of hash cat is now built if we execute hash cat now dash mode 29 100 the word list file is going to be up to folders and hash cat hashes neuter and then let's just do the dictionary of rock u and it's going to be starting rebuilding the um kernel driver or the whatever it builds the device driver to crack this and once this actually gets built hopefully it works we didn't see a token length exception and um recovered two out of two so if i do shell we can see it cracked the first one to be hash cat all the hashes on the example page are just hash cat and then the second one secret one two three so now we have a version of hash cat that is cracking jwts which is great however if we ever updated hashcat because it created a new algorithm or something we're going to lose all our changes and the next time we crack this flask session cookie we're going to be lost so let's create a pull request so i'm going to fork the repository we'll name it hash cat and my repel and once it forks i'm going to re-pull it and make the change and then push it back up and make a pull request so let's go to clone ssh copy this then we can i'm just going to remove hash cat and we can do a get clone clone it again and then once we have it we just make that quick change and then do the pull request so let's go vi hashcat source modules module what is it 29 100 and then we look for this line the token max and we're going to put 2047 and that should be it so now we can go into hash cat get add dot get commit m update flask session max length for payload to be 24.87 okay we can push our changes okay so now back on the github page if we refresh this we can see our latest change and if we look at this exact commit it should just have the one change of us changing the max to 2047. so now let's go on the github page and i'm going to search around for the word poll to see if they have any instructions and it looks like they do they want us to adhere to a bunch of coding styles and we didn't change enough where this is actually going to be relevant to us because we're not creating a new function or anything but if your patch fixes a bug be sure there is an issue open so we should create an issue for this so i'm going to search for issue flask and just to make sure an issue doesn't exist already and it looks like this one may be old um i believe this issue probably could be closed but um let's just create a new issue and i'm going to call it a bug report i guess and we're going to say flask or yeah flask session cookie mode 29 100 token length too small i guess um and then i'm going to pause the video we'll just type something here you don't need to watch me type for a little bit and create the issue okay so now i have written a description just saying um the length is very small so let's submit a new issue and then we're going to make a pull request and tie it to this issue so let's go back to our page so github ipsec and let's see repositories hashcat and where is pull pull request new poll and we can go from us to master and let's see i think i just create the pull request and i can say pull request for issue this what 344 there we go and i'll just say copies the max length from jwt and applies to flask session mode 29 100. now we can create the pull request and maybe you'll get added into hashcat and if i go back to this one we can see ipsec mentioned this and i have the pull request linked to my issue so hopefully i did that all correct um i'm not a get guru but yeah so that'll be the video i hope you guys enjoyed it take care and i'll see you all next time