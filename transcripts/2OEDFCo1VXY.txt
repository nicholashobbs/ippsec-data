 what's going on youtube this is ipsec and last week on twitch we took a look at crowdsec which is like a fail to ban on steroids the issue i have with fail to ban is it's all local like someone has to brute force you and then you block them and it doesn't do it for all the other hosts on your network so crowdsack really makes it like a massively multiplayer firewall because whenever you block someone it forwards it up to their cloud and they do some magic to decide if that block goes out to everyone else additionally you can have your own private clusters so all your servers have just one decision making so if someone tries to brute force or run go bust on your web they immediately get blocked on like your vpn server so i think that's really cool the other cool thing that would do at the end of this video is instead of blocking someone for them to somewhere else so someone's going to brute force our first web server they get blocked there and then when they try to ssh to a second web server it's going to automatically just forward them straight to a honeypot so that attacker doesn't even see that ssh host key changing it's super sneaky a great way to do honey pots i love it so let's just jump in so to start things off we have three different web servers and i use digitalocean so every single web server has a routable ip address and then i have these two attacking servers which i'm going to use to test the web server's banning ability and then at the very end of the video i'm going to configure web server three and two to report everything to one so if someone attacks web server one all the other web servers get the list immediately or if someone attacks web server o3 then web02 and one will automatically block that now based upon the enter the video you may be thinking well if someone attacks the crowds curse doesn't everyone also like get all this list immediately well the answer is no and my understanding is it's to prevent one bad agent from being able to retain the whole well of ip addresses so multiple um crowdsec agents have to report an ips malicious before it gets added to the global list to push to everyone so having like the mini centralized network of crowdsec agents will let me push rules out immediately so um in order to install it we can go to the website and if you scroll down you can read exactly how it works but they do have install instructions for various os's i have a ubuntu so the first one is run this curl command we could take a look at exactly what the script does but it's just going to add the crowdsack repository so um we can just run this with the pipe bash i wouldn't recommend doing this without vetting the script yourself but it's coming from their website so chances are it is safe i've already installed the agent on webo3 because once you see the process once you don't just see it three times so now we can see the repository is set up we can install packages and all we do is do a apt-get install crowdsec and currently there's a weird um bug where you won't get definitions immediately and it should also be noted this isn't going to put it in any type of blocking mode immediately we have to install the bouncer for it to actually interact with ip tables so right now it's just in like a detection mode because we just installed it the bouncer is not installed so it doesn't go and block things but if i went to web03 i do cs for crowdsec and then cli for command line interface we can do h and see everything decisions is going to be listing all the decisions this agent did if i do a list we can see um it's already blocked two different hosts i'm going to pipe this to less capital s to prevent line wrapping so we get a bit prettier of output but we can see these two ips have already tried to brute force this agent and it didn't actually block them because the balance was not installed but you can see these were banned because of this exact thing if i do a dash a on this list it's going to list every ip that is banned and the reason so we can see lots of band just because of ssh right and i'm kind of curious if it's only ssh because this one only has ssh installed so if i grep v ssh uh we don't really get anything do we did that show anything let's see come on i don't think so um that's weird oh i guess the formatting was slightly off but i'm going to run that same command on web 02 because web002 has also been running for that hour and a half so it's pulled all these um decisions and web002 this one has either engine x or apache installed so we can see we have a bunch of ip addresses that are also now blocked because of various attacks so we can see this ip got blocked from someone because they were doing a spring for shell scan this one has a bad user agent like this is doing a log for j so you can see all these ips that if i had the bouncer installed would no longer be able to access my web server just because they're blocked right uh we got hdp open proxies probing uh some cves and it should be important to note that the crowdsec doesn't install any like apache or engine x modules it's doing it purely based upon log analysis so if you want a true like web application firewall to prevent these type of attacks um look into like mod security the core rule set um the best place is crs mod security on github and that will pull it up eventually i will have a video going over this but not right now um maybe by the time you watch this i do but at the time of recording i do not um so now that we have like a list of decisions we should be able to do it here but again if i do sudo cscli decisions dash a list we need list there's no active decisions because again it hasn't had that hour and a half to actually populate and no one's actually attacked this server yet so if i do a curl ifconfig.co so i can get this ip address let's go and attack this guy right i'm going to hop over to my attacking web server and run crack map exec ssh uh we'll do the user of root and the password i'm just going to give it common.text so just a standard word list we should hopefully see this connect to my host and it won't actually block come on crack map is not working let's do ssh 157 230 54 205 oh i probably have it in public key mode only so let me v etsy ssh ssh and we have to allow password authentication so let's allow this service sshd restart and then now i should be able to attempt to log in so let's do one two three we did three logins i'm gonna look at decisions we don't have any yet so i'm going to do three more one two i think it's five it actually blocks on maybe not three there we go so on the sixth login we can see that ip address would have been blocked um i'm not banned you can see i'm still able to try to log in and that's because the bouncer is not installed so let's go and install the bouncer so i'm going to google crowdsec bouncer and this should get me to documentation it's just a simple apt install yeah so we're using iptables if you use nf tables you have the bouncer instructions there so we're just going to install this and probably just have to restart it i'm not exactly positive if we try to log in do this ssh oh it's already blocking so i can't even get to this port now right because the block list is in if i do a look at iptables dash l we can see how this works so we got a input chain on input we are dropping packets that match this ip or the crowdsec blacklist source and this is using something called ipset so let's see how do we do this ipset it's just this is it list there we go so if you do add ipsec list crowdsec blacklist we can see all the ips that are part of it so if i am able to do this ssh brute force here um i'm not sure why crack map exec is not working on this but we can just kill it and ssh the good old fashioned way 157 230 54 205. yes we try to log in and we're going to do six times to make sure this gets applied one come on two and now i should be blocked so if i look at ip set again i was figuring we'd have two but i still only see okay there we go there's that second one so two different ip members of this so now both these boxes are blocked um we can look at the actual configuration i think it's blocked for 10 minutes by default um i'm sure this timeout tells us let's see those are seconds right that looks like seconds so let's just google this seconds two minutes and see how long this is uh 237 minutes it will expire in so 237 minutes to hours is that like four hours yeah about four hours so if we want to we can see all the rules that are applied so let's do cs cli and do dash h again so we can see help and we want to look at collections and then next we're going to look at scenarios but if i do collections list we can see all the collections that are applied to the server we have linux base http scenarios sshd http cve and nginx if we look at one of these collections we can see it's applying various scenarios in this so the ssh one applies ssh brute force and ssh slow brute force so if we want to look at scenarios oh here it also has the parser so it's parsing sshd logs but um let's look at scenarios we can do list and i want to look for ssh so this just gives me the full path we can see what this looks like and at a quick glance we can see basically how these things work it's the ammo so it's not that hard to understand just glancing at it the in-depth i don't even know exactly how it works because i haven't looked at the application that much in depth i'm just doing these basic things and kind of showing what i did on my twitch stream so we have this type is equal to leaky and if i google crowdsec leaky docs pulls up the page and we can see there are three different types leaky trigger and counter and leaky it says a leaky bucket that must be configured with capacity and leak speed triggers a bucket that is overflowed soon as it is poured and counter only like overflows after a duration so it's useful to count things don't really understand what this one is i don't see any examples using it but trigger would be like if this ever happens in a web app then block them because that's bad and leaky is like if this happens x number of times um the concept of a bucket is a bit like strange to me but it does make sense so every event that goes into a bucket um just stays there and when the bucket gets full that's when it blocks someone so if we look at this ssh we can see the bucket's capacity is five so if there are five events that are grouped by the source ip in this bucket then it's going to be maxed out and on the sixth one the bucket overflows spills and that's when the block occurs so that's essentially the um scenario at a high level to my understanding uh what we probably want to do now i'm trying to think um probably install the bouncer everywhere so if we do the apt install bouncer i can put it on the other two boxes and we can also show it working on like a directory brute force right so this box the web 02 does not have um it does have the scenario installed for apache right scenarios list uh not scenario what is it collection yeah so we have apache installed here so i'm going to do a cscli decisions list or a decision is it decisions did i mean this yes i did mean that right this is what i want i hope no active decisions awesome so i'm going to get the ip address we have this and i'm going to run go buster so dot slash go buster dir mode dash u we have to give http w for word list common.txt and we see go busters oh well wait common.txt we have a lot more files there right yeah we're blocked so if i go to the decisions because of those 404s we have been blocked hdb crawl non-statistics so if i look for this scenario we can see exactly what it looks like so if i do scenarios list grep for this it's going to be in the scenarios directory we can see detect aggressive crawl from a single ip i was hoping if i do it vim is it syntax highlighted it is a bit easier for me to read let's see access log is equal to false i was trying to figure out how it identifies if it's not like google or something like that but i'm not exactly sure um but we can see aggressive crawl from a single ip and it's looking at the access log of the error log so now that person is just blocked from accessing my box now again the whole like it hasn't been blocked from everywhere because if i go on this attack box i can still ssh to this guy we have to probably enable the um sh shd config we want to key where is it password change this to yes there we go and we have to restart ssh so now if i attack it we should be fine yeah so i'm not blocked yet because all these agents aren't reporting to one so let's go install the dashboard on web01 and then we can take a look at it so i'm gonna google uh crowdsec install dashboard probably go to the very first one and let's see we'll run this dashboard setup uh cannot oh we have to install a docker first so let's do docker install we want to because this has its own way to do it you normally don't want to install it off of apt you want to use their instructions to install it so install that then add the gpg key and then finally well not finally we have to add the repository and run update and after this update we should be able to install docker so that may take a second try and think what else we want to do what we're going to do in the future is take this iptables rule change it from a drop and forward it elsewhere so we're going to forward it to a honeypot but i want to get all these servers configured first because um i want to attack web01 and then have web03 for that attacker's ip straight to the honeypot so um i'll say why that's cool once we get this working so now that we have docker i wonder if i had to start the service or it's already started i'm not positive let's do this dashboard setup yes that is fine awesome so now it is going to be installing this dashboard and the dashboard is actually pretty cool um i'm going to just fast forward this video until this whole pulling the docker image is done and there we go the dashboard is now installed i'm going to for this port so report 3000 to myself uh already in use let's do dash l 3000 i'll do 3001 localhost 3000 there we go so what i'm doing there if the very first thing you type on the ssh line is that squiggly c it goes into that prompt so now i should have port 3001 listed on listening on my localhost and that should go to this port 3000 so i'm going to do localhost 3001. this looks good because i see metabase log in with the username do the random password and let's see do we have does dark mode work well with this looks like it does so this is the actual dashboard so i can look at the decision list we can see the ones that my agent used and it's blocking the two attacker ips i don't know if i can delete them from here edit dashboard revision duplicate doesn't look like i can we could look at the alert history see what that is what else do we have we have the main dashboard that shows some pretty graphs and this will be probably a lot better when we have multiple host up right um so let's go and delete a decision so if i do clc cscli decisions then we can do list to list them then i could do delete h and we can delete it by ip id range things like that so first let's do dash i for ip i'm going to delete this one so if i delete that and now we do a decisions list there's only one so one of those things have been deleted i go to the dashboard we can see that decision is no longer active so it's hidden right and if i go here let's see let's do the if config grab this ip one of these boxes can now ssh to this guy so that one can this one cannot so let's go and delete that decision but we're going to do it based upon id so decisions list let's do delete dash dash id 2. so that decision has been deleted if i go here i should be able to yes i can ssh so that is that piece of deleting decisions um let's do something i haven't actually done before and have web 2 and 3 pull decisions from web one so for this i'm going to do crowdsack multi-host and see if i can find the blog post i was reading before doing this here we go they do have really good documentation blogs for a lot of things so it's going to talk about deploying it in a multi-server setup so i guess we're testing their documentation now if i can do this first try so both server two and three are meant to her services take a look the hub so these are her stink two and three and one i guess is going to be the main one so let's see install crowdsec we did i'm not going to do postgres i bet if we had many things we'd want to um but i think if you just have one hopefully it uses like sqlite or something so first we have to configure crowdsec on server one to accept connection from two and three please make sure your firewall allows connections two and three and port 80. so let's configure the api server so we edit this yaml file and let's see what do we do does it tell us i'm guessing we have to look at server right here so the client is skip verify false credentials path that's fine the listen url is probably what we have to change so i'm going to put this on all interfaces um if you had like an internal interface it would be much better to do that so you're not listening on the um like port 8080 to the world i'm not sure what security implications this is you probably should use file ip tables and stuff to block unauthorized things from accessing port 8080 so profiles path do we have one we do and then credentials path we have that as well okay so that looks good let's do a service oh wait it was two files local api credentials so we have a login and a password okay we want to change the configured ip and then restart so let's see let's do it ifconfig real quick i guess we can edit this to change the ip did this say change it to https so we still just http looks like http restart crowdsec and as long as this restarts hopefully we get things okay and now we want to register so let's do that here so if i do this and we say http like this port 8080. what did this say successfully registered a local api credentials dump there reload so let's try that same command we did on the next host so copy this paste that there okay okay to achieve this we need to tweak the agent file so now edit this let's see crowdsex service was not there ccd etsy fine dot grap crowd sec where did you get deployed looks like it's a multi-user target once on my service okay add the net no api parameter to agent invoking so on the exact start we add this okay and i'm going to copy this whole path do it on the next guy uh what oh we have to do c there we go exact start and it's dash no dash api i hope it's not dash dash no dash api i only see one dash and then we reload and restart okay last thing to do is allow server two and three on server one so if i do machines list up here we can see this one is allowed this is going to be my own host i think if i do a ifconfig.co this ip does match but these two are disabled so we could enable those so how do we do that we do validate so validate this guy and we'll validate the other guy okay and then restart just going to restart it everywhere but i'm going to let the one finish restarting before i restart the other ones and so set up mitigation it looks like it wants us to run this command on our main server to add the two web servers so let's try this real quick so on our master which is one i'm going to run this and i'll call it web 02 and then we will do one for web-03 okay and where do we put these configs so this is installing the bouncer which we've done so it wants it in this yaml file so if i do a vi here i guess that file doesn't exist anymore so we can do a find etsy grep for bounce and edit the configuration file here with the new api key so we have an api key here let's put in the new configuration um i wonder if it automatically did this and i didn't have to do this step anymore because obviously the um like applications changed a little bit so i'm not gonna do o3 um we're just going to do o2 and see if o3 works the same way o2 does if it does then the step i just did here is redundant at this point but we'll see if the registration automatically does this because we should have an api key here this one yeah is not the same so let's restart the bouncer so service crowdsack firewall bouncer restart and now hopefully everything has the same like decision list so cls cli decisions dash l or list a or not dash a i just want dash l um well not dash l no arguments okay we only have one blocked i'm going to copy this command i'm going to run it on the other ones to see what their decisions look like they may be slightly different because nope they're not so we have the same thing we can see the band time is pretty much the same here different seconds because again i did not run the commands all at the same time but the 14 247 box is blacklisted from everywhere so let's clear this i'm going to do a ifconfig again on these to get the ips and we'll try to ssh to this guy so ssh this looks like we can so this is not the blacklisted one uh this isn't both these aren't um decisions list 14 247. is that just no that should be this guy i should be blocked weird um let's see if i'm blocked on this host maybe bouncer isn't properly configured up here ssh i think something is wrong or maybe because it's an old block and didn't replicate so i'm going to delete the decisions real quick so decisions list let's do delete dash id one so now if i do a decisions anywhere no active decisions that's good so let's get ourselves blocked so we have to do three login uh six login attempts so there's three let's do some more one two and this last one should block us so we should be blocked at this point okay blocked here and okay decisions have been updated everywhere if i try ssh into this guy i can't so i know i was successfully blocked um we can also just do nc for netcat 22. uh we want to do zv to see if a port is open if i did that on port 80 oh i can't because i am blocked so um if we run the same command on a host that is not blocked this attack 2 guy we can see succeeded so let's try a different ip so if i do it if config we have it down here so let's do this ip and i succeeded i did not expect that so we have incorrectly configured the bouncer here because um i'd assume this would be blocked but it doesn't look like it webber three let's try this guy real quick uh if config this is the one we did not change an api key to so let's try this so this guy is also fine bizarre um let's see web02 did i do it lowercase um api oh shoot um i did not save that api key so my tmux history went away i think so i'll probably have to regenerate the api key um but this is confusing i wonder if i have to change the user somewhere there's no user there's just api url and api so i thought i would be able to pull this i wonder if this only pulls like every few minutes let's see i p set oh no we want to uh what is it iptables dash l dash n oh there's no i p there's no drop rule iv tables dash l dash n where is input so that may be why i preset list so if i do an ipset is this going to list things does not exist so something is wrong with the bouncer because i would think i have something here um let's see service let's do system ctl status crowdsack firewall bouncer and it's loaded with inactive start status so i think something is bad with a bouncer because it keeps dying so i'm not exactly sure what's going on i'm going to pause the video do some light troubleshooting and we'll figure it out so almost immediately i realized a mistake um i was looking at the logs so if i do a tail on ver log crowdsec firewall bouncer we can see it's doing a get on 127.001 8080 and getting connection refused so when i updated the api key um i did not update uh the url so we have to tell it to go to this guy so if i do a what is it if config there we go copy this ip put this here now we restart the bouncer so let's do restart here hopefully when i do a status it is active running that is good if i do ip set hey now it looks like it's better iptables dash capital l dash n we see that drop roll in place so that being said now i should be blocked from accessing this guy right ss8 or we can just do netcat do this and hey we are blocked so what i'm going to do is go unblock me from o2 from 01. so decision list we can do um is that really like a yeah one two eight three six so decisions delete dash dash id id12836 so now i deleted that rule i'm going to try to access this guy right 139 yep and i can so this seems to be working between these two now this third one i don't think is working because we did not do the api correctly so let me just not update this key real quick and point it to this guy so if config there's no way this works this api key is probably meant for its local host one so we still have to go and add it so let's do a restart on the bouncer uh that's the crowd sex service um we want the bouncer firewall bouncer service sure okay now it's restarting so if i tail ver log crowdsack firewall bouncer let's see did it log in api error access is forbidden because we did not update that api key so there's one thing i want to do real quick i want to see if i can pull the api key we have so i'm going to cd etsy crowdsec i'm going to grab r bd413 and that doesn't exist in any files so i'm guessing we'll have to regenerate this api key so um if we go here what was that command we ran yeah uh you would not be able to retrieve it so whoops uh server dash three okay uh it won't be web03 this would be server dash three i wonder if i call this web-03 so we can't have duplicates there i'm guessing i did capitals or something like that uh let's see but if this video is a hit maybe we'll go more into managing the api and finding out how to delete them well i'm guessing we can do bouncers list and probably delete this way so um delete h my bouncer name so we can probably web 03 oh look at that we can easily delete them and regenerate that way look at me i don't even have to wait and do a second video um off screen because that was super simple it's nice when like application interfaces are intuitive so let's go back into this config and i'm going to put the new api key and we can restart the bouncer service and now blocking at one place is going to block everywhere which is going to be amazing so i can look at decisions list no active oh yeah because i had deleted it so if we go to this attack let's run ssh again we're going to brute force let's brute force web03 the new one we just added actually let's do webo2 we know this one's working so let's do this ifconfig again uh go here go to the attack let's ssh yes [Music] person denied b etsy shd or ssh shd password yes service shd restart there we go so let's get blocked from attack oh let's do three here i'm actually curious so i just did three on atk01 let's do three on this next guy so if we distribute these out is this decision going to like play about so if someone does a failed login once across all my servers is that going to block no it does not look like it so let's go back to attack go 2 and put another bad few attempts and i'm actually going to go back to attack one because it is a 10 second thing so maybe me grabbing the ip change something so it looks like i am blocked now from one if i do decisions list i am blocked so if i can check can we get to the other one still so 157 i can't i can't get to 2 and let's do another one can i get here so let's check this this one i can i think if config 139 is that what i was just doing oh no i probably just like did something stupid like trying to get in to the attack from the attack probably but yeah i am blocked everywhere so let's delete this decision real quick i'm gonna block it via web and see if web will affect the other ones because this guy three does not have a web server two has apache this guy's nginx so the decision is gonna be blocking based upon an engine x rule and i want to see if that populates everywhere okay decision is deleted so let's go to the go buster and that's got the wrong ip so let's add it to this ip so now it's like immediately finishing um i want to say it's blocked let's do decisions list yeah it is blocked so let's look at decisions here do i have it blocked i do decisions well it says it's blocked because of http crawl so now if i try to ssh to any of these it is going to be blocked so that is awesome just by go bustering i've completely blocked it um now let's delete this decision and then do one more thing before we get to the really cool part that i'm excited about so i want to look at the active thing so if i refresh this we don't have any active decisions right it's pulling it up i don't think it does oh it probably does because of all the decisions now let's see what's a good way to do this so before when i ran the dashboard it probably did not hit that like hour and a half mark where it was only showing um my things because now we have plenty of others so crowdsack value i wonder had a dashboard sharing auto refresh revision history say origin i wish i could like right click and filter out an origin because i don't want c api i think there is our data alert history there was some like write sql okay learn about your data alerts decisions select star from decisions click run okay so this is good and what we want see origin okay so we have all these from c api so let's remove that so where origin is not c api does this work awesome now all the origins are going to be crowdsec so this is a good way to show filters so let's do ifconfig go here let's root force this guy um am i still blocked decisions list i think i am delete dash ip there we go may take a second oh wait that was the wrong ip um curl i want to delete this ip 157. delete ip this guy there we go now i can so let's get blocked and i am going to 68 so i'm going to this guy web02 i'm just curious if on the dashboard i can easily see um which service is blocking it right so we got another couple nope it looks like it's blocked now so if i rerun this query see origin crowdsack ssh brute force this one is probably me that's the latest id i don't see it's saying web so i wonder if we look at alerts what does this table look like if we click on alerts oh wow this is much bigger select star from alerts ssh brute force ip six events events count six scenario hash i don't see anything about the sensor i'm sure there's a way but maybe it's not all that important source ip that's the one that we blocked but uh we can see like the events like the leak speed scenario version things like that but not exactly sure how to see which sensor it was that blocked but some pretty cool graphs so the last piece we want to do is the fun piece and that is the honeypot to forward someone's traffic so what's gonna happen is we're going to do an ssh brute force from the attack guy onto this guy so i'm going to block ssh and that's going to communicate it down to these guys and then on web 02 this guy is going to be configured instead of blocking ssh he's going to ssh forward it over to this guy and this guy is going to be running a honey pot called kaori which used to be called kippo i still refer to as kippo a lot but it's really kaori so that's going to be the entire logic so let's start off by enabling ipforwarding on web02 so sysctl-w-net.ipv4.ipunderscore4 is equal underscore to 1. so this enables ip forwarding here and then i'm going to um write the iptables rules i'm going to craft in this file because it's going to be a bit easier for people to understand i believe because we use a lot of flags here so we specify the nat table pre-routing chain and the protocol tcp and we're going to match the set um let's see iptables dash capital s we can do it here iv tables s um all these chains are because of docker being installed so we're just mimicking exactly what this does so i have match set here and it's going to copy this so i think that is right okay and then we also want to match on tcp for destination port 22. i don't know why it started highlighting everything but oh well so now we can do dash j d net and then to destination and then this ip address which is 157 like this on port 2 2 2 two so with that set we can set a masquerade rule up so iptables dash t nat m set match set uh crowd sec blacklist source and i should have done it like this and we need um dash a this is on the post routing rule and let's see i think we can match destination port 22 and then do a j masquerade so i think this is what we want to do let's just flush the iptables and if i do iptables-l we have no rules so it's not blocking or anything and then let me run this invalid argument run d message what type tables tcp match only valid for protocol 6. um specify tcp there there we go so iptables-tnat-l i'm going to flush it again because we put it in twice because the first command finished completely uh successfully shoot there we go dash l so now we should have it and i'm doing it this way first i flush the whole table because i'm not positive if i do this pre-routing thing if a block on input is going to stop things so that's why i did it this way so now if i do nc lvmp on port 2222 and i do a curl ifconfig actually we want to go on this guy so if i go over to my attacking box attacker one is blocked attacking two is not so i'm going to netcat on port 22. we see we get that ssh banner um no connection over here on web3 i'm going to try it on attack one which i believe this guy is still blocked and i don't get anything and i did not receive anything so it did not forward correctly so dash t nat let's see let's flush this vip tables i'm going to take out that destination port and let's get rid of ptcp let's just do match set on ip okay let's run this listen on attacking connect there we go so it's something to do with um how i had all those extra matches on my post routing rule but we can see we connected here and we sent data back i'm going to start netcat back up we go down here because this guy is not in the database he is not being forwarded so if i instead do a brute force on this my whole tty is weird but i think that is set up correctly so after six times we should go over into the other box right so let's try a second ssh so one two three and now the next ssh we should get to web 03 so if i do this ssh connection we see web 03 has got it so we have set up forwarding correctly so now all we have to do is install kippo on that guy so let's go over to here all right kippo uh calorie carry install installing in seven steps so let us run all the dependencies so sudo apt it wants python virtual and let's do python 3 virtual environment and install all this and now let us do the next step which wants us to add the user calorie uh enter the defaults for everything we can switch to them then we want to download the code go into the directory set up the virtual environment okay created let's do a source just source it and then we want to install the configuration file so if we do cd etsy i'm just going to move calorie cfg.dst over here and i think if i change user db just to use a db that works and usernames let's see so start is for any username or password exclamation point at the starter password would not grant access slash can be used will not grant this password access so i'm going to get rid of this star star we don't want that um some password we don't want [Music] so let's do that and root x i'm going to call this please subscribe so the password please subscribe should match for root um we can probably delete all these entries okay let's look at the user actually not use db the calorie config userdb i wonder if i did that correctly because i don't see it in the config i just want to make sure ssh is enabled if we look for ssh enabled is true so that should be fine um i think this is going to be the basic setup and it's not going to be an in-depth video of kaori we're just kind of showing the potential here so if i bin carry start twisted not found oh um tip three install twisted i wonder if there's a typo because it was it didn't have a e unknown command calorie uh we missed something let's let's see i probably didn't do this pip install so let's do this upgrade pip and hopefully we did not screw up a virtual environment by running that one command but let's install this was that a step that i just missed oh um yeah i just skipped over that so now we can start it i did not get an error message looking at it we have twisted listening on quad twos so i think we are good so if i go over to my attack and we ssh or we do nc uh we have this debian and i want to say before let's see nc it was saying ubuntu so this is definitely now going over into the honeypot so let's ssh this guy let's do root at the host key has failed right so this is what would have happened if um like we previously connected to this guy right the host key fails and we're like oh god um we got now directed to a honeypot so let's just ssh yes root i'm going to put something so any password is working um [Music] that shouldn't be the case root doesn't work please subscribe that logs in uh we can do ls who am i echo please subscribe if you want to see the really cool thing um we can play back that log if you're not familiar with it so all the login attempts go in like uh var what is it log calorie carry dot log grep i p l e is it json let's see root oh i'm doing ls cat let's do the log so we can see the login attempts if i just grab login attempt we can see all the credentials they are trying um crap so we can see there's i don't know why that asd succeeded um i wonder if i just don't have the right database but this isn't a video of calorie we're just showing it working so let's delete all decisions real quick so let's do decisions list and i'm going to delete dash dash ip and we're going to delete both of our attackers right so we delete that and delete this so let's do a curl here and i'm going to delete my known host file so let's exit this rm ssh known host so what's going to happen actually i want to restart the firewall here that's not it system ctl restart crowdsack firewall bouncer because this puts a block back in our input right if i do t nat as well um we can see the pre-routing rule exist uh my input wait what status is that not running it is stop start iptables-l okay t-net so i guess when i add the tnat it's not going to show me my input rules because they're all that's weird because i can see input i wonder if nat has separate input rules oh well um but we can see we're matching on the pre-routing forwarding and we are also dropping as well so now that we have that set and that was probably the most confusing part of this video because i'm so baffled by that but ssh to this we're going to block ourselves so get a few more requests so we gotta do six different ones okay and after we get blocked from this guy we're not even going to be able to identify that we're blocked from the second guy right okay all that is done yes i did delete the known host before i did not hit enter so a known host file is still there but i am now blocking this so if i do decisions we can list i am now blocking that attacker so if we go over here we got this and i'm going to ssh over to this guy and we're going to accept the key and hopefully this is our honeypot so login and we are we're now in our honeypot even though we're logging into this guy the attacker has no idea we forward him to our honeypot which is amazing like that's my favorite thing the biggest issue i have whenever you do these type of honey pots on ssh like on fail to ban like you're ssh in the um key changes on you you're like wait um why the key change i know now you're sending me somewhere else after x numbers but what this tool allows us to do is fill the band here and then this guy picks up the rule and forwards them to the honey pot and um yeah it's really cool so echo thanks for watching and what we're going to do now to end this video is a playback log of that honeypot session because i don't think i showed that so let's do um we showed the logs of like guessing credentials right but carrie also has this um var i think lib kaori tty yeah we have these files so la um this is the most recent one i believe so let's look at this so if i do bin play log and then we go var lib calorie tty paste that file i think i added that h i don't know how i added it but i did we can see exactly what the attacker is doing in like real time so there was the lsla we are waiting for a little bit uh go up a directory and um here we have it um you can hear him i'm not typing anything that's just it playing back to log so um maybe the next time we'll take a deep dive into honey pots but for now take care guys and i'll see you all next time