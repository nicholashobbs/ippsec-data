 what's going on YouTube the Zips that can be doing canopy from hack the box which I like this box a lot because in the very beginning it forced you do a lot of different things with your recon every page returned as a HTTP 200 so you had to find a way to work around that the word list I've used in pretty much every box it didn't find a directory and that directory was pretty darn obvious it's not get dodgy IT have no idea why that's not in the word list I'm guessing maybe the word list is just old and before get was a thing don't know but it really reinforces that when one thing fails and if you can run in the background just switch to a different word list just do it again a different way and eventually hopefully you'll find something that works so let's just jump into the box like every other box we're gonna start for the end map so and map - SC for default scripts sv enumerate versions Oh a output all formats but in the end map directing call a canapé then the IP address which is 1010 1070 this can take some time to run so I've already run it looking at the results we have just one port is open it is Apache listening on port 80 it's running version 2 for 1/8 and as Ubuntu so we know this is probably Ubuntu zaniel if you didn't you can look at Launchpad and look at what versions of Apache come bundled with what versions of Ubuntu and determine that so let's just go and look at the site so going to 1010 1070 we get the Simpson fan site so let's just poke around open things in tabs oops everything we see look at the page source temporary hide check so that's unique let's look at slash check and method is not allowed so we got something to look at they're pulling up the page source again I don't know exactly what that is it looks like a md5sum I'm going to copy this echo - and paste that in WC - see 40 characters so I believe that is sha-1 it's going down don't really see anything else so let's look at what this page has so this is exactly what we saw we got a quotes thing here home emerge but Maggie Lisa so all Simpson characters and favorite quotes some middle quote let's put junk here seems to be an error we don't recognize that character so let's put Homer and junk here so looks like that is fine well looks like we can submit any character as long as that character exists we can put anything we want in the quote so in turn burp on and go to foxy proxy use burps wheat submit this but there's a repeater just to save it and we'll call SQL question mark and keep going with this more quotes same page so let us check this one as well for this request go to check send this in and I don't know what this is so you can close that one and leave these pages up well we should have something running in the background for enumeration so I'm going to run go Buster with dash W for list users share word list der buster then directory list to 3 medium text - you for URL we want H to be 10 10 10 70 and then I think it's - over L file would do go Buster no I'm Gor whatever and go Buster doesn't run it says wild code response found so the force processing prêt do - fw i want to do that first and everything is responding with 200 which obviously is not good if we go to the simpson site let's turn intercept off and put a few things so 1010 1070 ASD that was odd huh weird no idea what I just hit but doing random characters did something I wanna see what that is that was like a 64 or yeah maybe a 64 not sure exactly what's going on there I didn't think I could just hit random characters and have something trigger okay but what you're supposed to see is most the time things are giving 200 responses I guess if it's a long string there's something odd going but if we go back one hit this again it's not giving us that response every time so that's why I go through burp and we can see a little more what's happening response so it is sending a 200 there I have length of 403 maybe that's a troll I don't know but the key thing a note is everything is sending 200 responses which is go buster off so when that happens I do w fuzz so let's do Dobie fuzz then - H for help and the key things we want to do is hide responses so W fuzz - W for a word list will do the same word list I would hit alt and period go through my arguments I've typed previously and get that quickly ten ten ten seventy slash buzzing capital all caps and W fuzz is gonna see fuzz and then go through this word list putting it all so we hit enter we see all the two hundreds and we want to do - - will do H w41 anything that's one word we don't want I'm guessing that is going to be this random junk so I'm gonna hide that and I also see 3076 characters repeated and also 237 words so we could do probably comma 237 I'm not sure - hi how to hide multiple things the same argument but I'm gonna do - - h h4 Hyde character 30 76 and H may not be intuitive for character but keep in mind there's also code so that's why character is H do this and now we have go W fuzz anew bring actual pages so let's go back over into burp and see what we can do we're going to grab this repeater request the SQL we can copy to file and we want to do it and can't it be so this will be submit request open the new window SQL map - uh submit - request an data that's gonna start going and we can play with this check if you remember we just got method not allowed so I'm gonna send this on a majority end repeater I'm going to change request method and to a post and see if it accepts this method and there we go we got 400 bad request so we could manually do things like file equals a no I'd equals a and we get a different thing internal server error do we get that before No so just testing common parameters so ID equals one internal server error ID equals B so we're just trying to guess exactly what this request is and we're not gonna get there you can do W fuzz just like I had done before and specify that and that's what I had done I'm not gonna do it for the sake of the video cuz we do W fuzz with post and other videos I'm not sure if top my head but if I remember I'll put it in the description and oddly enough this default word list isn't going to find it so that's where you do other word lists as well and that's one of the things I like about this box is it's something that is I guess real-world that just doesn't exist in the word list we always use there's not one word list for everything and that's why it's always beneficial to have recon going in the background because when this finished and probably 20 minutes if I didn't set up another one I'd completely miss this for quite a while so let's just pretend to spend 20 minutes this word list finished I didn't see anything I want to go into SEC West and we're going to do discovery and we're gonna pick web content and look at what we have 120 different word lists here I'm just gonna do a comment text and see what we have and right immediately we have dot get found so if we go into a web browser go into dot get we can see it's got get I guess look at config we see the URL is get canopy h-2b slash Simpsons get and that's important because if we just do it via the IP the get program is going to pull this config and put this hostname there and try to download the rest of the things so let's try get clone paste this and just do the parent directory and info refs not valid is it a git repo we go there let's see what it says if it has links to get canopy weird let's just go into config there's things that you just assume work decide to dig deep the video and find out it doesn't work but probably just doing something silly let's go into our hosts file add the correct name and this gonna be 10 10 10 70 while we're in here let's just do canopy that ease to be as well save this and let's go to get dot can it be HD be I think I said HTML back there specify the HTTP that's it host get I bet this is some weird caching issue advanced clear settings that's fine I don't think it's realizing I edited my host file it's just doing what it assumes is an invalid request and then go into Google research or Verizon because my DNS is B whatever let's see let's try it again it's been in long enough nope it's disabled broke maybe it's cached ambert no by all private window we'll get there there we go good canopy done HT be with the private so we're not doing any caching just gives a blank page so we got a different website here and this is doing I forget what the option is and virtual host routing and Apache so now if we go to info / rafts still doesn't pull anything we go to get knows it let's just try to get clone this and see if it works and if it does magic and someone will explain in the comments so get clone get canopy htb we go specify HTTP and dot do we do it Oh what am I missing I think I sidetracked and forgot to do something silly git clone there we go I had to specify Simpsons dot get oh my god I'm an idiot this is a directory isn't it yeah that's gotta be something anyways a little bit more messy than I'm used to but we got there so now we have a git clone we can see the dot git and if we do get log we can see multiple commits and this is always something handy to do because we scroll down we have like a commit where it says temporary hide check due to vulnerability so that's gonna stick out like a sore thumb I'm gonna go and look at that so we're gonna do get diff on that and see what's changed so we're importing a few other things we got C pickle right here and I know there's a vulnerability there it's communicating with a couch DB server it's a flask app in Python so getting a lot of good things and then we see this was removed on slash submit and it looks like it was submitting straight data into pickle and the template here was hide vulnerability so now instead of going straight into pickle it looks like it's going into a file so looking at this code exactly we are taking the character and quote from the HTTP page going to whoops I'm going to burp we go here there's this submit page it's taking Homer and whatever a quote is and base64 encoding it then throwing it into pickle into a file oh I should be looking here I was looking at this but no this little code that's on the server right now so if care is not in quote there are true this is going to probably be character quote arrow trill so Homer has to be a character has to be in both character and quote right there is what I'm saying nope I'm missing the knots oh my god I'm so confusing forget the last five seconds if not care would not quote if either these are not defined error is true now we'll going into and else and this is the white list and C is going to probably be character so now we're looking at the white list if we search what waitlist is we see the waitlist is home emerge but Lisa Maggie Moe Carl and crusty so this is where it's searching and verifying we have one of those characters in then it's going to create the ID by doing a md5 sum of the character plus quote and then hex digest is just going to grab the hex so essentially md5sum character plus quote and that equals ID I'm going to guess that is the ID field of this check and now with opening slash temp PID dot P so it is saving the character end quote to a file and then opening that file and writing it here if we look at the check I'm going to assume it's going to pull ID then grab the file and do something with pickle this is probably really her to foil this is why I don't like doing live streams or code analysis because sometimes it's hard to explain things as you're looking at it but we look at Jack and check is going to be this request and we see it's going to open the path and this is going to be the ID so we're trying to open the file we just wrote with submit and then we're doing a pickle to load data and then I also a time equals data so we know we have a pickle vulnerability and if you wanted to you could Google like Python pickle exploit and you get a bunch of things this is I guess one to explain so there is a black cat talk from I think 2011 called sour pickle which explains this in depth and does a great job unfortunately it takes a while to explain it that videos an hour plus long so essentially pickles like a Python serialization and you can't pickle something some things just don't serialize well such as file objects network connections data bleep connections so pic will calls reduce to clean those up otherwise the code would just error and your program would crash so it uses the reduced function in Python to clean clean it up as it does pickling so the exploit is we actually serialize a new reduced call so when pickle calls reduce it calls the code we just submitted so that's what this is doing so let us create that exploit ourselves so we're going to do we'll call this exploit PI and I'm going to probably do this in Python - let's look for like a print statement less nit pie let's do it in V so we have syntax highlighting do they print at all no I'm not sure exactly what code this is I'm guessing it's Python too because that's what most things do so that's why we're choosing Python to do to do this exploit and I'm actually going to split this so I can look at the code as I write it something's help so ex-boy top pie we want to do import OS import see pickle we could probably just do pickle and not see sea pickles like the C implementation of pickle not much difference in terms of exploiting but since they you see pickle I'm using C pickle next thing we want to import is their hashlib so from hashlib import md5 and then we're going to import request so we can do the exploit ourselves and send it with Python so let's create a class called please subscribe and define the object and then we want to say def reduce self and then return OS dot system that's going to be the command we run and then think that's it oh it's that system command yep so we'll fill this in later I just want to get the skeleton of the exploit done and then we want to do as C is equal to C pickled dot dumps please subscribe so what we're doing now is pickling up this class then we can print it to make sure it works playing Python too and let's see what else do we need to do I think that's it what to send it but let us pull a exploit code so pen test monkey Rev shell cheat sheet and let's go to this one's always reliable I always default to this one if I'm not sure and I don't want to do it a hundred times okay so let's look at the code how we submit and what things we have to work around so submit care is not in quotes so we need to have if not care knock wood so we can ignore this that's not relevant to us see lower and that shouldn't be too relevant so this is what's relevant we need the out file and on check do we have anything now this one is relevant we need to put a character in this and then it's going to write but with the character in the quote to a file and this is a little bit tricky now because if we had just if we send it like we can rename this now to pickle if you put Homer here in the character and then put a quote as the actual exploit it's gonna right Homer and then the exploit and when we call the check right here and do the see pickle loads it's gonna fail because Homer isn't valid syntax it's sending kind of a bad pickle because it's not a hundred percent valid the very first thing is wrong so we have to put the character in the actual pickle so we can pass the check and what not so in order to do that I'm just going to put a shell command to echo Homer estimation point and RM and then we'll want to split the shell code so we'll split it on character and quote is equal to SC split exclamation point so now whenever we print this pickle it will split it up into two and we'll show that okay split a string to print quote so Python exploit dot pi so oops okay so here's the original pickle and if we had Homer above there see POSIX the pickles no longer valid so that's why we put it as active thing here so what we did is this is going to be the character and this is going to be the quote and then went write some booth to a file it's just one big pickle so that's what we're doing there hope that makes sense makes sense to me the other thing we have to do is the PID and I'm just gonna copy their thing reverse plus quote ex digest and the last thing to do now is a request so we do yeah we could actually test this so we'll do see pickle dot loads SC I will do care plus quote I think it's plus in Python maybe dot we also have to change this IP 10 10 14 12 each point nine thousand one and then if we run exploit NCLB NP nine thousand one we get a connection so we know our exploit works or at least if it does a pickles load on what we're sending it's going to work so that's taken care of so let's do request post HTTP ten ten ten 70 / submit then data to make this a post request and it wants the character and the quote so character it's a quarter care and quote is equal to quote that is for I said date its data that is the piece for submitting it and now we need the piece to check so check this is going to be ID is equal to PID I believe and we could verify that by going into the code looking at check and it wants request for them ID so save that we can exit this clean it up a little bit and NCO vnp 9001 Python exploit and we get a shell so we could run the whole Linux enumeration script but I don't think you guys have to see that every time so first thing I'm gonna do when I get a show is Python import PT y PT y dot spawn and then bend bash I knee put that in double quotes Claire do use single quotes do I owe - echo so I'm just gonna do a PS - ayo xww to list everything that is running and going through things let's see these are all system processes that's odd I'm not sure what that is I see couchdb is root there and then we got CouchDB running as homer and because canopy is French for couch I'm going to start here and that's what I'm gonna actually did on the box when I did the first time is I saw a couch DB and that code and realized oh that's probably something we should look at there's gotta be a reason this box is called canopy so let's take a look at exactly what CouchDB is if we do netstat a LNP grab list cuz I don't think couchdb says what poor doesn't we did see CouchDB is at least 2.00 and we're listening on a few ports if we google let's see couch DB port we can see 59 84 is the port so if we curl one 2700 159 84 we get welcome to couch DB version 2.0 and whatnot so see if we can pull this up quickly when we're typing echo couch DB usage or maybe we'll search API API reference this will probably be good so we can see things to do so let's do a curl against all DBS so curl all DBS and we can see the database is it has is global changes metadata replicator user passwords and Simpsons so we do all DB's Simpsons nope we just curl against Simpsons we can see the data inside of there I think we can do all underscore docs and see the docs within Simpsons and then there is a command to do all Doc's and recurse CouchDB exam and all docs I'm not sure what it is DB on Doc's do we have it giving us example of how to go inside the doc and request well you do not so we'll just do Simpson and then the document ID and we can see the very first quote Simpson and the next one so we know this database is full of all the quotes let's go into the passwords database so if we call against passwords we get we're not authorized so if we head search let's see couchdb 2.0 exploit we see there is a exploit DB article I'm just going to pull up in search boy so search boy - couchdb remote command execution this is looking good we search poit checks on it we can see what it's doing so the very first thing it does is a check to get the version and let's see so we're doing a payload against C users would couchdb user plus a username and [Music] this line is odd we have it crafting a payload and the type username and then we got let's say we can pull up couchdb create user next boy not always the easiest to read code if there's any write ups for it it'll be a bit better vulnerability here we go so doing this new curl we can see it's doing a put request to this and then they're doing a little bit of something like type confusion and they're putting the roles as admin the roles as nothing and password and I think the vulnerability here is you can create a user and JavaScript is going to just look at this one as can be like hey you're not requesting admin role go ahead and create that however the back-end processor which is early in CouchDB is going to look at both of these and add you into the admin it's something like that so that's what this is doing so let's create our own user and then it's doing this piece that actually doesn't work - actually Isaac you code not sure why but we'll test it out and verify it's a - C - copy forget what copy is so exploit each case exact JSON mirror I'm going to copy that exploit here but we also want to do this so set paste step creating the user oops we're going to create the user hip sec so we're signing this as a user yeah the name of it is going to be hip SEC it's going to be an admin and then that second role that's the exploit the password is going to be please share the video so that looks good we're going to cap this and send this in and see if it works curl oh that was odd I guess I didn't like something how it was written weird spaces again and see if it works oh cool - ex-post HTTP oh we probably should be doing this against let's see two things wrong the first thing this should be on that line or we should have like a back slash at the end so cad exploit sh and then we also have to run this on a canapé session so now we see okay true so we added the user if sec and if we now go to a history and look at the passwords thing it's not going to let us without a user we can see we're still unauthorized and in code we're gonna specify - - user tip sec please share the video and now we can curl this password stable so let's do passwords all Docs and we can see just like in the other one we have documents with IDs so let us curl all passwords and this and we see item ssh password this user i don't know doesn't give us the user so let's just go all these and again there's a flag in all docs where you can actually have it do this for you don't remember it I should have taken notes or something and looked at it before recording so see a few things we have SSH password and this couch DB password relax on the couch Simpson fanclub password whatever users Homer Homer jzo to github password stop showing your passwords here - admin so guess he doesn't like people storing the passwords but we can't Etsy fast WD we should see there is a Homer user various homers there so let us grab the password that says SSH and just try do a su - su Homer - and put his password in and now we get a shell as Homer so we should be able to go to slash home slash coma and there's user text and a bunch of other things so I'm gonna do a sudo command because the thing I was looking for is does this person have like sudo privilege to start CouchDB no TTY president - sudo - shell enter his password and we can see that he is allowed to run pip as Roo and there's been boxes that have the same mobility but with different package managers like NPM so all we have to do is create a malicious Python package then we can install it as root so let's do that the first thing we want to do is create a directory for our exploits so we'll just call this I guess if set go into it and then create a setup PI file go over to pen test monkey and we want to copy the python script and we can clean it up okay there we go it's typing beep to slash and wood may backslash backslash n I always forget how to add lines that would be fine doesn't have to be but it's just nice for aesthetic purposes so we want 10/10 right foot 10 10 14 13 we're already using 9001 so we're dude 9000 to save this so a new shell on 9000 - and do pseudo hip install and then the current directory and pips going to go and execute septa PI to install it and given we did everything correctly it will give us a shell doesn't what could we did everything correctly though well let's see it's not owned by the current user check the permissions and see there's - 8 flag psst - crap pip when I screw up well let's see I can't kill it now that's for sure joining us root 10 10 14 13 is that my IP 10 10 14 12 that's the easy mistake to make let's try that so let's do sudo pip install dot now that we have the correct IP and there we go do ID we are now route and I don't see root text but we're in a temp directory so there we go we do WC - see rude text and there's the box I do want to go back though and we're going to look at doing the escalation of homer a different way and that way is going to be through Erlang but I'm going to show you exactly how I found out about that and I saw something similar by mu bik's Rob folio Rob fuller a few months ago doing it with kind of a different thing but I'm going to show you the path that I found to get into CouchDB so credits to Mew bits for fighting this first but yeah let's begin the first thing we have to do is get a shell so we can exit out of this exit let's just close everything so that's all closed that's good get a net cat shell on 9001 and let us run exploit PI so this is where we were before we were dub-dub-dub data and this is all we had the original exploit did say that it was code execution I just said it wouldn't work so I'm gonna dig into that and research this because this is what I was doing before the video trying to get this to work is I didn't get this to work actually when I was doing the box so let us copy this all and then we will paste it in because again the CouchDB is listening on a local port only so we can't do it remotely so let's just be I exploit PI or you have to do the Python thing and then the tty thing so let's just go into a database s hm for a clean working directory export term equals screen there we go now I can clear so V exploit PI paste it in and I cop in next door there we go so if we look at this exploit again we see the example usage and that's just gonna run ID so if we execute that whoops Python exploit PI says command executed ID and I didn't see any help but from that so let's try this again and put this does not like my terminal right now well do tab hips ik clear this do history and we see it magically typed it all correctly so do LS - la on temp grep for hips ik we see it didn't actually create that file so we know the command execution isn't working we tested for just joining the exploit script and seeing footprint it out didn't and then made the exploit script send it into town and we still don't see it so let's take a look at exactly what that exploit script is doing and do it manually and see where it's failing so we see a git version right here and def exploit see this is it creating a privileged account let's just delete this get this out of the way because we already have a privileged account create the payload so if version equals one do this else do something else so the first thing to do is check the version which is here and that's just doing a request get and decoding the JSON and pulling the version variable so let's do curl localhost was it five nine eight four yep and we see version 2.0 so we know that version is not equal to one so this code is L the only thing we have left to do is now start this so it's doing a request to underscore membership and pulling all nodes so let's do that underscore membership then all nodes you and our server admin so let's do the - - user tip sec oh my god that's gonna be annoying please share my video and let's see s TTY a it's because I did that screen thing I think let's just export term is equal to that that gonna be fine I forget the whining column thing to do so let's see if this works user epic please share my video did that create I got the password wrong um let's just I guess create a new thing so probably created that in slash exploit that Sh oh that's gonna be in the script please share the video what did I put there we go so now according that membership all nodes unknown error function Clause and that's not what I expected underscore membership okay chorong underscore membership and pulling all nodes so we're pulling couchdb at localhost that is the variable so the next thing to do is underscore mood host and then config query servers CMD so node host which is going to be CouchDB at local host because we're doing this have an app that's a weird character that terminals don't really like I'm gonna put the URL and single quotes so we don't process that at sign then he was underscore config see yep we can just run that and we can see the actual config of this CouchDB thing so we know the command is valid up until that point so the next thing to do query underscore servers and we see it's valid up to their search for CMD and we get unknown value so let us see exactly how it's doing that it has data here so we know this is a post request and it's adding just a command with double tick and single tick so let let's do that - D and then ID method on a well so - X put I keep saying post I guess it's put the - G is gonna make a post so we want to put it as put and we get a weird error message of saying something about bad or PC dot e RL which is Erlang but a bunch of error messages so what I was doing is I figured okay well if we can create a new oh I was thinking was something in this config so my logical step was okay let's see if we can create a new membership name or a cluster name and make like Apes a cat localhost and then change the config value and maybe we'll be able to get code execution that way so went over to google and did couchdb cluster setup node we go to this page and reading this we see if you expose port 4 3 6 9 to the internet or any other trust network the only thing protecting you is the cookie so I had immediately decided that sounds interesting let us do a net stat al NP grep what was the port 4 3 6 9 and there we go it is listening so doing more research into this we look at the cookie its distributed Erlang and we can see we can set up a connection up there and it's saying it's a distributed protocol so the next thing to do would be Google Erlang run command on remote node to see if that's possible and learn you some Erlang sounds like a good thing and reading this whole blog post about Erlang eventually we get to a spot that says setting up a Erlang cluster there's the Erlang s name we saw now we can connect to it and this is the secret running node to see the nodes on it we can register run commands receive commands from other nodes things like that so the only thing we have left to do is find out what this cookie is so if you just look at github CouchDB pull up the page and search for cookie we can see let's see do we have it we have the cookie and the node name right here so and I think I misspoke when I was scrolling through this let's see Erlang s name where do they set the cookie in this page there we go you set the cookie up here and they connect to the node name so if you read this whole thing you know to do your L - s and we'll call this we go a cluster name anything we want so call this EPS act - set cookie and the cookie we had saw and github was monster who must be set so export home is equal to s hm I guess do that again Oh s name there we go and now we're in a Erlang shell so we can try Asian commands on a remote host net Colonel connect so that's what we have to do net Colonel connect and then the name was couchdb at local host and erling like sending commands with the period not a semicolon not anything else and we can see it connected true if we put something bad there that Colonel connect local host we see false and we can see I think we are still we'd not connect anymore because we did that second one let us try that again true node set nodes nodes okay and now show the remote node is CouchDB at local host so the final thing to do would be Google Erlang execute shell command and let's see we'll do a West Command I think this is the same page that was there and this page does have it so we can say OS CMD Who am I and we're still dubbed up data but we haven't tried to run it against the remote host so again you go back to this whole post remote shells hidden nodes or a PC or a PC remote procedural call the host and then the command it looks like essentially instead of space as you do commas so we'll try that our FPC call specify CouchDB at localhost and we want to do OS CMD again just pulling this this and then send it Who am I put a period and it says Homer now so we're in this command on canopy as the Homer user so the final step to put this all together is string another netcat listener LVN p one two three four and we just got to get a shell so we can do OS command and let's try echo test to see if this works syntax error so we can do OS command that go test like that bad about PC so this is the same exact error message we had pretty much got from the CouchDB so playing around with this a little more so let's just see exactly how was supposed to do this OS command so and go back to google and when you're doing a new language you do this a lot I'm just going to do Erlang OS CMD and how do we call let's see try this just you have to doing LS in any directory and it looks like they are not so we can close that one try this and the pudding and in quotes so maybe Earling just doesn't like spaces so it's odd to me that Who am I works without quotes but maybe it works with quotes too let's try that and then we'll try it with a space so we're just trying to figure out exactly how the heck this works and yep it works with quotes as well so let's go back and do echo test and we see that works is as expected so we can go back to a trusted pen test monkey for I believe the third fourth time and pick a shell we could try this neck happen as a lot of weird characters so the very first one I'm going to try right now is this this bash one so you want ten ten fourteen twelve and nine thousand three I guess and then zero and one close that and hope for the best I guess we'll see if this shell works and this is what becomes trial and error right now so NC l v NP five thousand three and a syntaxerror bad file descriptor number so I don't think it liked any of the pipe characters which is a shame so let's see we can do echo LS and pipe it to bash and that will execute so I'm going to be 64 and Cove this command to get rid of all these special characters and then do it this way and we'll see if that works so echo dash n put this in single ticks let me actually put that in single takes underling see if that matters I don't think it will but never now so single tick single tick still bad a file descriptor number so looks like a command basics for it we can type it correctly and then we can make sure to copy that later I've done this in split pane RPC copy this HECO paste everything looks fine there I'll just again checking all the special characters it was using the plus and equal and whatnot so we can do echo - n we don't want that line break there I'm not lying yeah the line break or a new line and then send that to bash and we'll see what happens here Oh base64 then bash base64 - T bash and it's hanging right now which means we got a show here as Homer so that is the box I hope you guys enjoyed that little second prevx using Erlang so yep take care and I will see you all next week