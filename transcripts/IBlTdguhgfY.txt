 what's going on YouTube this is epic I'm gonna be doing shocker from half the box I know this is the easy box we should begin the hard boxes starting next week again but that being said women do a lot of cool things this video because I enjoy this box first off we're gonna get the Ubuntu version based upon the Apache header like is it running trustees any old zesty artful Bionic I don't know but the Apache header should be able to tell us that then we're gonna do a lot of debugging on the end map shellshock script because it doesn't work as advertised all the time so we're gonna find out why fix it and learn a little bit of nmap scripting then we'll just pop the box and call it a day so let's jump in so let's do the end map so a map - SC for default scripts as V enumerate versions Oh a output all formats and I've graded the directory and mapped keep these n filename will be initial and then the IP address of shocker which is 10 10 10 56 all the way ran because it takes time so let's look at the results we do see port 80 and - 2 - 2 is open there's no real exploitation on this port for this box however it leaking this exact version is a pretty bad thing I know in the intro I said we do it through HTTP but let's actually do it through this first because this is much more specific than this and that's because how you bun to does things is it generally keeps the same version per distro like trustees any olds st whatever zaniel has 7.2 p - I believe for OpenSSH but then they create updates and those updates are like for Ubuntu - - so there's probably a for Ubuntu - one for Ubuntu One etc that are patches against this version of SSH so if we go in google OpenSSH 7.2 p and put that version information on it we should be able get the last time this box was updated or a good guess so OpenSSH let's see why didn't watch bad come up oh 7.2 p2 I think get some exploits here I don't think it's vulnerable to this again that's just because of how Ubuntu does the patching 7.2 p2 was vulnerable but Apache had a Ubuntu has since patched it so if we go all the way down to this launch pad we do see OpenSSH 7.2 p2 the exact package version of Ubuntu and it was lasts it was uploaded on much 16 2017 a little bit of a rabbit hole for this box because shell shocks much older than this I guess they installed bosch manually and that's probably to avoid a bunch of criminal exploits and other things for unintended routes but there you have it we have this box was probably last updated much of much 16 2017 if the server was configured correctly and didn't leak the exact version in the header you do have this Apache header and this will only tell you if it's trusty zaniel zesty whatever because we don't have this exact version to say hey this is the Ubuntu revision of this Apache package at this version hopefully that makes sense but you can generally can get a relatively good idea so if we go to just like packages ubuntu.com and this goes for Red Hat and windows to the red that I did in jail windows I think I did it in grandma but we can search for packages so if we do apache 2 and let's start with the oldest trusty we see that is 2 4 7 1 if we go to zaniel we see 2 4 1 8 and that is what our apache is so chances are this is a xenial box zesty i'll crap supposed to click here go to zesty apache too to four to five so you kind of get the idea of how to identify Ubuntu versions just by what Apache version it is so that's why in a lot of those compliant scans that you hate and you're like what why do I care that it's just specifying a small version because it's not the exact version well that's why especially this this is relatively bad then say hey SSH this is Ubuntu and last patched march of 2017 so let's get out of that enumeration and begin with a go buster against port 80 my go Buster is saved and slash optical Buster someone do a dash ace to view all the options I want - you for the target URL or domain and that'll be HTTP ten ten ten 56 and - W for the word list which is user share word list for the sake of time we'll just do Derby small this is a really small word list so it'll finish quickly and we're not gonna get anything and the reason why we're not going to get anything is because of the status codes that we're looking at if we wanted to we could say hey also show us the status codes that include 403 which means the directory exists but would not allow to access it and when we do that we get slash CGI - bin slash so when doing directory der bus you may want to also include just four three forbidden x' because you may be able to get files inside this directory but not be able to list them so if we go to 1010 1056 slash cgi - bin we just get forbidden not allowed access so cgi - bin is generally when apache gives something over to like bash or something or a different scripting language I guess it's hard to explain anyways we're just going to now specify slash CGI - bin and some common extensions that we want to brute-force with so it's going to take small text and append let's say SH and PL SH is for bash scripts P o is for Pearl I actually don't know if the file is in this word list because it is so small it's only about a thousand lines so now doing three thousand requests and there we go user dot SH so let's go over to use it on SH and it sends us a file back if we open up with a text editor we do see it looks like it executed some bash and you may be wondering why it did that and we can dig into that with Bert so go to options intercept server requests turn aricept on refresh the page go over the book here's the get request and here's what that's cgi-bin I was paying attention I would have saw that there we go so here's the get request and here's the response and Apache it has a header then a blank line and then the contents of the text so if you looked at that notepad contact text plane was at the top because there's the blank line here so the browser is saying this is text and SH and like I don't know what to do with that so it saves it as a file if we put text plane up there for the request a browser is going to show us that request so that is that the next step is to do shellshock and based upon the versions we got previously shellshock shouldn't be vulnerable but because the name is shocker and there's a CGI script which is often vulnerable to shell shock if bashes old enough we're gonna try that so let's try it nmap so locate NS e NS e is and map scripting engine I believe and I'm just gonna grab for shell shock to see if and that passed something to detect it and it does so let's look at this script and it gives us sample usage so copy that and we will run it so target is gonna be ten ten ten fifty six I don't wanna do all ports we just want to do port 80 and it's looking like the URI specified slash CGI slash bin we want user dot SH and hit Anna now once this finishes we should see it is vulnerable shell-shocked unfortunately we do not and we can dig into exactly what's happening if we set up a HTTP proxy and burp to redirect so go to the options tab go to proxy listeners we combined the port 8081 request handling redirect to host two ten ten ten fifty six and the port will be eighty so now we're listening on localhost 8080 one and everything goes to ten ten ten fifty six eighty so we can see a web browser says one 27001 8081 cgi-bin and we get forbidden so that is set up correctly let's just change or nmap script to be one 2700 one and we'll do 80 81 and quickly go over to burp turn intercept on and now we can see all the requests and map is making so we get a get request that's fine I don't know what that one is not found SDK and here we go we have a shellshock request we haven't seen a response back not found bad request h snappy not and so it's kind of a mess it didn't come back on the same order so we're gonna look at history go to their cgi-bin use it is H send it over to repeater and send this and we'll try to figure out why we're getting a bad request so looking at this HTTP header we have a get on one line host on this line user agent this is the actual shellshock and I go over this again in the beep video if you're confused by shellshock but we got this line of it doing nothing and they've got cookie referral connection but I don't know what this line is so what's gonna remove that because it doesn't have like anything beforehand to tell you what it is and that may just be confusing a web server so when we do that we get that result on the page several times text plane and see it's obviously vulnerable so let's fix that in the end map script so if we do that locate and let's edit this and see exactly why that's happening so scrolling down we're generating the HTTP request random equals nil I'm guessing that maybe nothing I have to see exactly how oh yeah it's just defining random so randoms nothing if CMD is nothing then that I hate looking at NSC scripts blind it's not the easiest thing to read but we got that random string right here so if command equals nothing then maybe no doesn't mean nothing because this is saying if command is defined then execute shell-shocked with command if it's not generate a random 15 character string and execute the echo and that's what we saw in burp this is a random 15 character string and then it's saying hey if that exists then it's vulnerable so we have the command being injected into the header the user-agent the referral the cookie and then nothing so I'm going to comment that out and then I'm gonna run this again and the thing I commented out was the thing just saying in the header and not specifying any variables I think burp is still set to intercept nope intercept is off but we see now our map is saying it's vulnerable and again if we go to http history click on this user Sh we don't see it injecting shellshock into something random so awesome now the only question is why didn't L s work because it was saying hey execute the command LS and it still did nothing we got a 500 server error and we shouldn't be because oh here's it detecting shell shocks mountable and then here's our LS so it does a request says yes I'm vulnerable then LS anyways if we compare the two requests we have a echo right here and then it does something again this we do not so let's send it over to repeater and kind of fix this up so we go back to proxy we can look at this request so space echo semicolon and we don't need an user age of that we just hope I don't in just get rid of it here cookie should still get past and we get a 200 okay but we don't have any output so if we do let go bin LS what do we get the actual content so what happened here is without this blank echo this response this users are SH was here there was no blank line so this blank line is this echo and then we put the echo in and then we execute a command so that's why we see the output the server let's see oh that sucked I do set paste I'll just clean this up so if it's not clear without that echo semicolon this is what the server sees in the response and it errors because there are FC States between the HTTP header and text there has to be a blank line so that's what that echoes doing now the other question is why do we have to do the full path when it just LS work if we did just LS here it would actually work we do sleep 10 maybe not I thought it would but we don't have a profile set but if we did like a sh - c for command with specify bin bash - z then we don't have to specify full paths because it's going to load the profile and set you pass correctly and that's why that works so let's fix the nmap script again - now allow us to do commands so if we look up here we have this command here we want to specify space echo been - - see now let's run this again and we'll see what we get and now we have it's vulnerable shell-shocked we got exploit results and it ran our command LS so we have a fixed end map script or at least fixed to this actual box I have to do more testing to see why it's coded the way it is but I think this is a more reliable way so now that that's done we can get a reverse shell in the box and begin popping so let's go to the reverse shell cheat sheet pen test monkey and we'll just start trying these reverse shells so and CoV NP will do 8080 to go to boot there's where we're doing shell shock to specify and bash we're probably once or IP 10 10 10 14 27 and our IP is 8080 to click go don't have a response back here that's a good sign and we get a shell so Python see input input PT y PT y dot spawn and bash Python doesn't exist which place on three we do have place on 3 so we'll do that for PT why do I spawn and - not sure what I didn't work oh well it's not too important to get the full reverse she'll still bothers me don't type that again just in case I made a typo okay we will go on without a great shell that's fine let's go into a top let's see women um Linux probe ask Leonard I'm not sh this is the script I want again you can probably just google this and pull it off of github nothing in this directory is coded by me or anything so python - m simple HTTP server 80 83 and now we can curl 10 10 10 56 80 83 when an SH pipe it over to bash I killed the wrong IP girl 10 10 14 27 80 83 when God s each paper tabash and we will begin Earl in freedom Jack that is done so let's scroll up and go through it so the colonel was built 20 17 September so I guess SSH hadn't updated or we may have been wrong I don't know Ubuntu xenial so we got xenial correct the host name is shocker the user ID is Shelley and we can look at sudo and we're loudest sudo as root with no password and execute Perl so that's good available shells nothing looks unique in the cron but let's begin with that pearl check so let's go to dev s hm so we can write a file and if we kill this we can go back in that directory we're going to write a file because we have this Perl script that does a reverse shell on pen test monkey oh it's even using PO - I don't even have to write a file so let's see back to terminal studio - L so we can do sudo user bin bro I can't this is why I wish I had my regular shell it's gonna timeout hopefully if it doesn't I'm out woof to kill the shell and get it again annoying so let's kill the shell and get it again is that yeah that's just a new one suck it so with 10 10 14 27 or it's going to be one two three four second Ben - that's fine cut this copy that pseudo I'll use a thin pole - ewwww that should work and we get a show as root so that is Shaka and if you also wanted to you could have just done something like go let's see if we go back to this example we have it doing PO - II this just means run a pole command so if we did like Oh - e print hello rolled does that if we wanted to do line you can do it that way but that's just running a portal command you could do the same thing in a file that's saying you sock it actually let's do something to make it easier to read how do I copied it because yeah so we can say replace all semicolons with new lines I finally did that correctly there we go uh it's been a long morning I guess but anyways see was it making the call to bash there we go we got a pool command exec and I'm guessing if we do pro - e exec - am i we can actually run shell commands so if we just did pearl - e well sudo user thin pearl - e exec then bash it drops us into a root shell so that is shocker hope you guys enjoyed the video take care and I will see you next time