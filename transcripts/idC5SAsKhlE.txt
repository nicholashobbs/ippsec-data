 what's going on youtube this is ipsec and this video is going to be all about php type juggling and why you should be using three equals versus two equals in your php applications now i think other languages do have three equals but the whole type juggling confusion thing isn't as prevalent in other languages as it is php and in this video we'll dig into why this video was also recorded in front of a live twitch audience i generally stream sunday mornings you just go to my twitch tv channel ipsec click on the calendar and find the next time i'll be streaming if you want to see me live and since this clip is highly relevant to bug bounty integrity reached out and wanted to sponsor the video which i can't thank them enough for because number one it motivates me to create more content and number two it lets me have some money to pay some graphics designers to make thumbnails for me which i absolutely hate doing so big thanks to integrity which is a bug bounty platform we'll get more into them later but for now let's just get into the video so we have a web application here and if we try to log in it just keeps telling us invalid login now the very first step with any web application is trying to identify what it's running on in the back end because that will tell you what type of attacks you can do in here we don't really have that many hints in the source code but if we send this over to prep suite and do a login let me make sure i'm intercepting we can see it's got a larval session cookie and this is important because it does tell us it's php and php does have a really hilarious type confusion bug and that is the like triple equals thing so if we do php dash a and we say if a is equal to a and then we just do echo true it's going to echo true now if we say a is equal to true it's still going to echo true now if we said false it's going to say false if we say a is equal to 0 it's going to echo true as well because 0 is true it's like the normal exit codes so what this is doing is essentially saying if a is not empty because i think that's generally how php treats strings or variables like if we say um let's see we'll call ipsec equals test i think i have to put a dollar sign first right so now we have ipsec um echo oh echo hipsec we have this and if i do my if then so if i just do if ipsec i think it's going to echo true because it's not empty if i change this and we do the same thing it's no longer true because the string is empty so that is essentially what's going on with this type confusion thing if you want to patch it php whenever you do comparisons most likely you want to do a strict thing or a strict comparison and do a triple equals because that's going to compare the value plus the type of variable it is in this case we're comparing like a string to a boolean and it's saying nope that's not the same so that's the vulnerability it doesn't affect a lot of languages right so if i do like python3 and we can say if a is equal to a i think this is right print success that works but if we do a is equal to true it doesn't um maybe we need a capital t there it doesn't work right because python isn't vulnerable to this piece um javascript let's see we can try test javascript i actually don't know um let's do if a is equal to a then console log success i think that's the right javascript syntax that works so now we're going to change this to be true right and we get undefined um let's do a lowercase t still we don't see it saying success so it's not vulnerable to this um let's see ruby oh god uh if a is equal to a is it just like this uh ruby i think is print success and sweet so it printed success right here um let me just success two there we go i just want to make sure like that wasn't a default thing so i remembered how to do an if statement in ruby awesome uh true whoops let's change this still it's not saying success so we can see this is relatively unique to php and all these languages have quirks so that's why i'm always saying like recon is super important just knowing what the language is may help you so now let's go with how to exploit this and then we'll look at the vulnerable code on the back end um i'm going to send this over to my repeater and we know this is larval there are two indications we're going to the api and larval the first we have slash api the second we don't have a token variable generally larval for any type of web form you submit has protected a cross-site request forgery and it does it by putting a token in the actual field so the fact that there's no token also means we're going to the api middleware and that's just what like php or i guess larval calls it is middleware we're going into larval's thing to process an api request and this is interesting to us because apis behave a little bit differently than the normal user input the very first thing is the apis essentially accept data in either the get portion or the body so if we put that down here password field is required because we're missing the content type probably if i convert this selection let's see what is change request method so i was probably missing this content type to tell it it was url encoded if i send this we see method not allowed it doesn't like post request but if i change this to a git uh password field is still required and what if i take off this xml http header we can see different behavior so we can put data here i wonder if i leave this blank believe this completely blank it looks like it still um does something so maybe this piece isn't interesting but if i change this to application json and it was let's see what was the actual request just password is equal to something so let's put password um let's see a server timeout i don't know what my burp suite just did there let's just get to a good spot again i probably didn't have two line breaks at the end of this and then it waited a while and then when it timed out it put my window back to how it was before i did the request that timed out which is annoying but we're gonna change this url encoded to just be json and now we can say password i think it was a lowercase p is equal to ipsec and we see invalid password if i didn't put this as password we get that weird redirecting thing so we know it's accepting this password as json and now this is really interesting to us because now that we're in json or json we can change this type right like if i just did password is equal to true here now we're passing a boolean because we didn't put it in quotes we don't have a way to do that this way because the field is always going to be a string it's just like type casted that way or whatever like it's just like nope we're not going to use quotes here it's just going to behave as a string but as json um we have to put the quotes there for it to be a string and if we don't it gets treated as a different type of variable in this case it's getting treated as a boolean and we get login successful so if i do i could also do it with zero right because we said zero is equal to true and there we go if i do one we get invalid password so now that we're login successful we could just um take a cookie and edit it in or we can take what we did and proxy an actual request so i'm going to drop all these refresh this actually let's not refresh let's just click come on intercept off on i'm going to log in with ipsec click it now we're intercepting this request we're going to go to a repeater tab we're going to grab this field and just paste it in and take off this and i always like password is equal to true and we just click forward and now we get logged into this application so let's take a look at the source code real quick before we wrap this one segment up apologies for the sloppy cut but i want to take a minute or two and highlight integrity which is europe's number one ethical hacking and bug bounty platform so you can take anything you learn in my videos or just what you know in the cyber security or hacking in general search through all their bug bounty platform partners and apply that knowledge and earn cash which is a great way to make a living or just earn a little bit of side income now i like integrity's platform but the main thing i like about integrity is their community engagement so we can go over to their filters where you could filter for like bounty to see um all the partners that give you money but i'm going to go to sustainable because i know integrity would be near the top and i just wanted to highlight that they do monthly challenges so this one is a cross-site scripting we can go here if we go to the link we can see um they have three randomly drawn winners and three best write-ups to get a 50 euro swag voucher it's just a simple cross-site scripting test and if you find a way to perform cross-site scripting that's how you get entered to win and if you just struggle like me probably on this challenge and don't come up with a solution then just wait for them to publish one and learn new things to apply to these bug bounty platforms but they don't stop with community there they have a huge youtube channel and i like a lot of the videos you can see i watched this time based blind one where i learned something new about burp suite and he used the intruder feature to do a time-based blind sequel query which i knew how to do you just send a bunch of requests and look for the one that took the longest but he shows you how you can increment the character automatically so with like one intruder query you can dump a whole password through sql blind injection it's really cool magic that he does in that video if we go to home we can see their cross-state scripting solution how they do it so that's where you can learn there and again the community doesn't just stop at their youtube uh five years ago they made this medium post i'm sure they have a lot of them but this one in particular is what inspired me to create the delivery machine so their little community engagement five years ago inspired me to create a machine just one year ago so all the work they do for the community definitely pays off i do love them as a company but let's get back to the video and again this is on my live streams which i do sundays at 8 am my time if you just go to my twitch tv on ipsec you can look at the calendar and see the next time i'm going live um i generally don't put the vods online but let's see i think it can ssh root no probably hdb at what was that ip 10 10 11 153 and if you do the box you end up getting these credentials so um yeah but we're just going to skip it so we can see the actual source code so i think i put it in sov yep there we go prod now we're in the actual application um larval if we go to routes i think api we can see [Music] the um login route is using the function custom login so if i go let's see app http controllers auth controller and we have custom login right here so this is the vulnerable code uh this is the actual root password of the box but we can see we're taking the request get password and doing comparison with two equals against this string and like we saw before during the php we know if we had this to be true we pass in and get success now where we see this in actual applications anytime like a string is being compared like registration codes um the hack the box flags would do it it's normally not a login bypass because generally how logins work is they look for the number of rows retrieved from a login request also like when someone does a login and laravel they're not handwriting the sql they're just essentially passing it to larval's back end to do a login function and that's why you should always be using frameworks because frameworks are rarely vulnerable so you just want to look at where comparisons would be made um i've seen it on captchas can i also show the portion of code which allows the json request in the git is a question i just got from stream um this the reason why we can do the code inside of the [Music] get request is literally because it's in the api route um any larval api will allow this so it's an easy mistake and yeah we could dig through all of larval i think oxdf did on his blog like dug into exactly why that happened let's see oxdf github ransom if you look at his blog let's see beyond root looking at route request handling let's talk about it here input let's see so it's going into symphony and it goes into debugging here so if you really want to see exactly why laravel does that um that would probably be the best resource i just knew it from when i was creating machine like um like i created a larval machine before this machine and i noticed that little weird quirk so i dug into it and yeah so hope you guys enjoyed that small segment