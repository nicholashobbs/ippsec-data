 what's going on youtube this is ipsec i'm doing bounty hunter from hack the box which i really like this box because the foothold is easy but did involve chain together a few pieces of recon in order to weaponize it the actual exploit is an xml any injection which can leak files on a server and if you convert the files to base64 using a php filter you can actually leak php source code the reason why you have to use the php filter to convert it is because the greater than and less than sign is bad characters and xml any injection so the base64 avoids those bad characters with the ability to leak any file on the box you leak the etsypassabid file to get a list of users and then you find db.php through go buster in the box and that file has a password you combine the password with the list of users perform a password spray via ssh and get a shell on the box and then the route involves reading a python script that parses help desk tickets and if you format the ticket correctly you can hit a eval function to get code execution as root with that being said let's jump in as always we're going to start off with an end map but the one small different thing i'm going to do is a dash p to scan all ports because i haven't really done this yet and i want all the ports and i want them pretty quickly and then we'll do dash dash min rate and set it to ten thousand that's gonna be ten thousand packets per second and then oa output all formats put it in the nmap folder so make dur nmap and we'll call this all ports and the ip address which is 101011.100 and the last thing i'm going to do is dash v so it shows me open ports as it finds it and we can see two ports are open right now i'm going to start my second nmap script with dash sc for default scripts sv enumerate versions oh a output all formats put it in the nmap directory and call it bounty hunter and then the ip address of 1010 11 100 and since i know the only ports open are 22 and 80 those are the two ports i'm going to run it against and this one only took about like seven and a half seconds these two ports i bet this has been more than seven seconds already because script scans take a while so um that was actually relatively fast for a script scan even on two ports coming back in 11 seconds but um if you want quick results don't use scripts and then just do script scan on what is open we do see ssh is open on port 22 and it's banner tells us it's an ubuntu server and then we have http open on port 80 and its banner tells us it's apache also running on ubuntu we have the http title called bounty hunters so let's go take a look at the website so 1010 100 or 1010 11.100 and we have just a page bounty hunters the b team i'm guessing the b means bounty hunters uh we have a pricing guide if we click it it goes nowhere this contact form uh let's do ipsec we're at ipsec dot rocks and then i always like doing like an image source is equal to something so this will be 10 10 14 8 would be me uh slash image i think that should be enough maybe i can specify http colon slash uh we'll do port 8000 and nclvmp 8000 and the last thing i want to do is stand up burp suite and before i do that um i have some doubts so make dirt www let's just v index.html paste this in and then python3 dash m http server 80. even the simplest syntax i still screw up from time to time so i'm just testing it i go to 127.001 let's turn intercept off real quick and i do get a connection back so my image header does work if someone goes to that page they will get redirected so let's go back here to this image or this contact form and submit it and that was pretty much a waste because it's not submitting any data whatsoever so we can just move on um i'd expect this to be a post request and our contact form would be below but it's not so let's just move on and before we keep testing this website um let's do some recon in the background because every second we're not running something we're just wasting so let's do go busted dir w ford list opt set list discovery web disc web content raft small smallwords.txt uh dash extension what type of server is this let's test index.html not found index.php looks like it is php let's see what else do we need we have word list extension out file we can call this go buster dot out and then good old url so http 1010 1 uh 11.100 it's gonna take me a while to get used to not saying 10 10 10 but we've ran out of ips on that subnet so go buster is running let's take a look at this page we have the contact if we go over to portal it says portal under development i'm just going to examine the source to make sure nothing is hidden there if we um looked at the source here i don't see wordpress or anything so this is looking like a static site but we go over to where the portal is and we have a basic form so exploit title uh let's do please subscribe cwe i'm gonna do uh 9001 cvss score let's do a 10 and bounty reward let's delete and just see what happens if the db was ready this would have been added so let's examine this request if i go to brook suite i can go to my history and we have the post request right here we can send it to the repeater and that's just there because my proxy is currently not intercepting but everything does go to the history so we have this repeater tab i'm going to highlight this and we can see burp suite already decoded the base64 and we have xml so whenever i see xml i like trying xml nd injection so what i'm going to do is just google payload all the things xxe and we go to this page payload all things is a great github repo that just has tons and tons of attacks so looking at this we have a quick detection uh this isn't including any files and i do like doing this first because it's not actually malicious i always am in favor of keeping it as simple as possible um if this was like a bsd box we know it's not because the nmap header told us it was ubuntu but like etsy pass wd may not exist i think maybe that file does exist on bsd um but if for some reason we can't read this file maybe the web application is in some type of jail meaning it can't go out over www.html this lfi request would fail and we may move on thinking it's not vulnerable so i do like starting with a super simple payload that's not weaponized in the least so let's go and edit this so we say doctype replace and then entity example do and in here we're defining entity to be the variable example and its result will be do so if in here i do and example semicolon now it's going to put that variable in this title so i'm going to apply changes send the request and we don't have the example we have do so we have confirmed this is xml entity injectable so the next thing i do now is making my exploit more and more dangerous so let's try a including a file so i'm going to grab this let's edit our doctype now it's going to be entity test no longer any example so we change that variable and it's including etsy passwd so we send this and boom we have the passwd file so we know there is lfi now the um bad thing with this example right now is we can't actually include php files because i think the file when you're doing xml any injection has to be compatible like there's a lot of bad characters because if it's invalid xml it just breaks so php involves or html in general has all these like brackets which i think makes breaks it at the end of the video i'll go and verify that but i think it's all the brackets that are involved in the payload that do break it so if i try including this file it fails additionally if we got rid of this slash because this file colon slash i think this is called the protocol wrapper i'm not exactly sure what it's called but it's always two slashes that third slash is putting us into the root directory um that would be just slash so i got rid of that third slash so we're now in the current working directory of the web application which is generally where the index file is so that's why i did it with the two slashes and this still fails but this is php and if we keep going down this payload all the things repo there is a way to use the forget what this is called the php filter to convert output into base64 so we can copy this and then go back to our payload highlight this and doctype change this so now our entity is defined as xxe so we put that there and the resource is just index.php so let's apply this change go and boom we have a bunch of base64 and what i'm going to do copy this and let's go here echo dash n paste that oh my god that is ugly base64 d and it looks like we have the php source code which is quite big see oh um we have index.php source code there is no php because this is a static site but now we can actually include files so from here we could keep playing around in burp suite but that is a very like cumbersome process and it doesn't take us more than like five ten minutes to create this in python which would let us get files much much more quickly so that's what i'm going to do so let's go and create uh we'll call this xxe.pi and right off the bat we know we're going to need the request module because we're making http request so i'm going to do post and then we copy this um page we can do http 10 10 11 100 and then paste that url and we need to actually send the post data so i'm going to do data equals data and we'll define data now so we'll do data is equal to and it's a dictionary as and value then colon um or variable colon actual value so we'll do data and then just paste in the static value we have and eventually we will move towards um making this piece dynamic but i always like getting a super proof of concept very quickly so this will be r is equal and then we should be able to just print our dot text so if i execute xxe it did not work so we have some issue somewhere i'm going to guess it's because this is url encoded so percent 3d is equals and then we have a percent 2b right there and i think that's a plus if you didn't know you could just go to like um burp suite decoder and then do equals and plus and then we encode this as or um the better way would be or is it i actually don't remember the variables but you could just put like percent 2d and then decode but if we do that and then encode as url we have those values and we could have done it the other way around decode as where's url oh there it is for some reason those colors messed with me but yep let's try pasting this in whether not already encoded and boom we have it so here we could write like we could use beautiful soup and go through it or write some custom regular expression to get to this exact part what i'm actually gonna do is a ugly hack i'm just gonna use split so i'm gonna split on this character one two three four so i think this will be five so let's go back here let's do um output is equal to r.text dot split like that and i always like just doing that and we'll do five output run this and we almost have it uh we just need to trim one two three four characters so what i'm going to do is a um [Music] forget what they call this string jitsu or something weird but i'm gonna do negative four colon i think that's gonna chop the last four characters off actually it did the opposite it just grabbed the last four characters so let's put that colon on the other side and boom we just have a base64 string so we know what to do with that import base64 and then we can print output but we need to decode it so base64.b64 decode output and we have a string now the base64 library puts everything in um a byte so if we just decode that it'll look much more pretty so if i do decode right there boom so now we have the exploit working but still modifying it's going to be a pain so we need to break this piece out so the best way to do that is let's base64 decode this so echo dash n base64 d and copy this go back here and we can say let's see payload is equal to i'm going to do triple quotes and what triple quotes does is makes so i don't have to escape any characters it'll only be terminated by another triple quote which is just a weird bad character to have to bypass so it's super safe i'm going to put this in a format string and what that's going to do is allow me to include variables by just putting them in brackets and create the variable fname and as long as i do fname is equal to index.php actually we've already included that let's try etsy passwd so now when i run this uh actually we have to do one more thing uh it would fail so if i do python 3 xxe we don't get anything really the thing i forgot is we have to oh we got it because we still have a static stuff here but we need to base64 encode this now so let's do um payload b64 is equal to base64.b64 in code payload and this has to be a byte string so i'm just going to do encode there and we will decode this to get rid of the bite thing it's just a weird thing when working in python 3 is always knowing when it's a bite and when it's a string and what to do but that comes with experience and now we include payload b64 so if i run this success we have just the passwd file so we could do two things with this um i'm going to show you both we can import sys and then fname we could say is equal to sys.rgv1 and that's going to get the very first parameter so now if i ran this it fails out but if i include etsy passwd we get the file um index.php we get it but i'm a sucker for like command line interfaces so i'm going to cp xxe to be xxeargs.pi and let's edit this one step further i'm going to import cmd i'm going to say class actually let's do it at the right here class xxe leak cmd.cmd i think that's how prompt is equal to that which is just going to be um the prompt on every new line and then def default self args i need to put a colon there and we'll say get file args and may want to print this okay and then i want to say xxe leak.cmd loop that's how we call it and what i'm going to do here capital v to put this in visual mode indent everything now we can do def get file fname comment this one out and for this let's see i just need to return instead of print like that let's see if this works probably does not i probably screwed something up python3 xx e dot pi cmd loop missing one functional argument let's do python 3 cmd example want to include like cmd loop but maybe not cmd okay so let's see class total shell so i called this um cmd or xxe leak lowercase uppercase that is right oh i need parentheses there so when writing code um almost everyone resorts to google or stack overflow so let's try this boom etsy passwd um index.php and we have a pretty good exploit so now we can just explore files so the files of interest to me is this log submit page so let's grab this put that there and we can look at it it's getting to javascript files i'm looking for like php required to include other files that i don't know about um the other weird one was we have a tracker dirt proof so if i include this one let's see what this looks like here's the xxe we don't really have anything um we could go back to our go buster so i'm going to less go buster.out uh i really don't want those ah 403 yeah let's try filtering those out so grab v43 go buster.out and we have a db.php and also portal.php these two are definitely interesting so db.php and we get credentials for the database admin and this so what i'm going to do v creds.text admin that and then portal.php is the other page and it just says under development so we have a potential password uh ssh is also exposed so what i'm going to do is grab this passwd file v passwd whoops paste it cat passwd and i want everything that ends in sh so i think i just do sh dollar and we have two accounts so root and development we could just test the password out with each of these but i always like doing password spraying so let's try crack map exec so we'll do crack map exec ssh 1010 100 um dot oh 1010 11.100 dash u users.txt dash p put the password in and of course we have to create users.txt so we're going to do root and development we're on this and we're going to try to ssh with these credentials to both accounts um root has an authentication fail but development succeeds so we can ssh development at 10 10 1 11 100 and paste in the password and we get on to the box there is a contract.text um don't really want to read that whole thing but we can also do like a pseudo-l which is always good especially when you have a password because if it asks you for the password you know it and it's calling python3.8 on this ticket validator file so let's take a look at this so let's see we are load file if location ends with md return open so i'm guessing we have to load files with md but let's go to the main function so file name is equal to input and the sudo thing um did force us to use python 3.8 if we could use python 2 um we could just do an exploit here because input is vulnerable to a code execution thing exactly what type of vulnerability class it is i'm sure if you went to ipsec.rocks and we type let's um input python i thought i would have it there i'm not exactly sure what box has had that if any but i know there is something there um if i find it after this video i'll make sure it's indexed on ipsec.rocks but that is a attack path if it was python2 it's python3 so we can ignore that then we have ticket load file so that load file is this and it's only going to load the file if it ends in md so we should probably start taking notes here exit this or control c we can exit this pane i like doing notes sideways or a vertical split like that there we go the notes so we need end with dot md okay so the next thing is we have evaluate ticket so let's look at what evaluate does um code link was none enumerate what is enumerate looks like it's a python function so we read lines if the beginning does not start with skytrain ink so starts with skytrain inc return false and then the next line should start at with ticket two so ticket two and i think the key thing here to remember is we always need a space after two and then let's see what is x maybe the next line starts with ticket code so next thing ticket code like that code line starts with dollar dollar or stir stir and it's going to replace that with nothing and then it ticket code so this is a modular statement percent seven so modulo seven equals four this is getting really weird and eventually we call eval so i think this may get us started we may want to like run this and debug it because this may be a hard thing just to do correct the very first time around but we'll try it so let's save and exit my notes and i'm actually going to just copy notes into inject.md and we will edit object.md to be the ticket so we can get rid of that line it starts with this ticket to take it code and then modulo 7 needs to equal 4 so that'd be 11. um that's essentially division with the remainder so um 11 divided by 7 7 goes into 11 one time obviously and there's a remainder of four so that would satisfy that and then [Music] it evals so i'm going to do a print um please subscribe and i'm going to get rid of the space just in case bass is bad character remember there was some replaces so let's try counting inject.md and we'll copy it over to the vm so let's see do we have to call anything ticket validated.pie nope so i'll call it inject.md paste and sudo l and let's try this so sudo run inject.md and invalid literal for int with base 10 not exactly sure what that is um so let's try do i have code installed a vs code um let's see code codium sweet i do have codium is it actually going to run python for me and this looks like i had dramas up maybe this is jarmus i don't know but let's do file new and we should copy that hopefully there's nothing sensitive here this doesn't look sensitive so i have to worry about filtering anything dramas was a video i did um previously if you go to my channel you can see it but should have done that okay that works fine okay so we need to get that file over to us so cat we can send this to dev tcp 1010 14 eight nine thousand one and nc lvnp nine thousand one two um ticket validator dot pi boom we sent it we can cat it and then x-clip selection i think primary would be good paste nope um clipboard there we go and that's in uhc so let's do ipsec hdr ipsec hdb this box is bounty hunter uh yeah ticket validator dot pi i probably could just open the ticket instead of copy and pasting uh it's been a long day so if i f5 to run this is it gonna run in python sweet it does so the path we have inject.md so the great thing about this is i can just click and set breakpoints so inject.md and we broke here so we can step into this and see where it goes and we can always see variables so if x does not start with so i'm just going to continue break there we can look at what x is equal to so we can see does indeed start there let's go to the next one um x starts with this ticket too that looks correct ticket code it's probably erroring somewhere down here so that's what i'm going to jump to uh let's see here we go so it's doing int ticket code so what is ticket code currently um debug console we can just do that and it is this whole thing oh we need a plus it's splitting on plus and in my mind plus with space so that is one of the errors maybe the only error i'm not exactly positive but let's try putting a plus there okay we can disable these break points so we only break at the point we want f5 again to run it inject.md okay let's see what ticket code now is it is just 11. so we have passed that one and now we're doing an eval and it's replacing star with that so if i do um x we have that and it's doing this eval so i could just copy and paste it in this debug window and we have an error my guess is um we're doing 11 plus print so i wonder if we do let's see maybe 11 plus semicolon print because that will break the python so int 11 if we did like that this breaks right yes so let's see if we did the let's try that what i said before uh let's see end 11 plus semicolon like that and then we will rerun this inject.md so the ticket code because we did 11 and then the plus the ticket code is still 11. so that is good and now we're going in here and the eval statement now will be um 11 plus semicolon the eval so maybe that will work oh we just um continue didn't i stand corrected it did error but um one of the previous attempts we did have it working because we have echoing please subscribe here but um we should be able get this to work without the error um we don't have to because we had code execution but it's always nice when the program doesn't crash afterwards uh looking at this if i go to the debug console can i still print x yeah so this is what we're trying to execute um let's take the eval statement out of it so we just print so we're trying to execute 11 plus semicolon print please subscribe the error message is coming from this 11 plus statement i bet if we do 11 plus 1 so it's valid python it'll now work because if i just execute 11 that's valid if i do 11 plus we have a syntax error but 11 plus 1 gets me to 12. so let's try this um we can stop that go over here the inject and say 11 plus 1 save it and then go over here run the python file and we'll call inject.md i typo that let's run it again enter name oh my god inject.md okay so now we're here if i go down we can copy this extra place code again debug console and that looks like it is valid so i'm going to step over this if we go back to the terminal i don't see it saying please subscribe and what do we still have an error with eval main invalid syntax this should be valid right eleven plus one let's see actually i'm just going to go in here python3 that works let's see eval like that eval does not like the semicolon see do we do like a plus semicolon let's well that one worked but um it still crashes however i think i am happy with the crash so it's just 11 plus print and that works i think that's what we had before when i said something worked and errored but i'm starting to think at this point we probably won't be able to fix that error message easily so let's just try doing a code execution point so i'm going to import os and then we will call system id and see if this prints out our username it does so we have a code execution path with this let's put this back into our exploit and try it out so ctrl d let's go vi inject.md and we just do 11 plus eval which is silly but it does work so let's go here um pass a ticket file inject.md i'm going to restart this so run this inject.md there we go we hit the breakpoint go a few times and we do have it outputting so now we just have to put a reverse shell in here so actually we don't we can probably just do bash because this should get us a interactive prompt because we're running with sudo um the reason why i don't want to do a reverse shell is just because of all the potential bad characters so let's just try running this on the um target which what is it which pane there it is so v inject.md we are so close with this example we just needed a plus i think what is the actual one yeah when all we missed was um a plus and why do i have that eval there i don't uh let's see we can get rid of this i want to say this is all we need we'll try this so was that sudo command okay inject.md and we are now root so that is the box but i did want to test one thing when it came to that xxe um i just want to test if it's like bad characters that are breaking it why we have to do the base64 thing so let's take a step back and go over dub dub dub html v output and we'll just say please subscribe save it go back to burp suite and we want to go back to a payload before we're doing this php filter convert so i press ctrl z a few times let's see where we are here this is doing file index.php which is good so um let's just move output to test.html okay so if i just include test.html apply change send it uh it did not like that why did you not like that let's see entity test ls it is world readable i think that should have worked let's see cp etsy passwd to test.html if we resend this so we have a error somewhere um it's not clear to me exactly where this error is yet so i'm gonna try including etsy pass to beauty it includes that file so let's try www.html test.html okay so v test.html it guess it just doesn't like um the non-absolute path with the file command which is weird to me but we have please subscribe so now we can try putting it in brackets like that send and it errors so we just have one bracket still crashes if it's like that it works but this opening bracket seems to be what is breaking the xxe so that's why we can't include any like php source or html is because of that one bad character but that bad character was worked around with the php filter to convert it to base64 where that character does not exist so that's a good way to get around bad characters when you're doing an lfi with xxe um yeah so that will be the video hope you guys enjoyed it take care and i will see you all next week