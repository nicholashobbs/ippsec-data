 what's going on YouTube this is IPSec and I'm gonna be doing DevOps from hack the box which was a pretty cool theme it's obviously a pun of DevOps and just common mistakes developer me make but it's also a double entendre because the clear of the Box liquori overlooked something simple and had a big oops moment of his own when he realized everyone was solving the Box an unintended way essentially you get a local file inclusion through a XML and the exploit and the mistake was leaving the SSH key to the user and its home directory which you can just read and then SSH into the box the intended way is to include the source of the application see that there's a function that you just didn't find through go Buster which uses pickles and exploit pickles just like you did in canopy once you get a show everything's the same you go through the get history poor old SSH key that happens to be the root key and then you can SSH and with root so that is the Box in a nutshell let's jump in and and map the box with - SC for default scripts SV Android versions Oh a output all formats put in the end map directory and call it DevOps then the IP address which is ten ten ten ninety one this can take some time to run so I've already run it looking at the results we see just two ports or listening SSH is listening on port 22 and we see for Ubuntu 2.4 so most likely this is going to be Ubuntu xenial you can just search like launchpad net I think it is and find like what packages are applied to what flavors of Ubuntu additionally we have HTTP listening on port 5000 and it's not nginx Apache or is it something called gonna corn or green unicorn if you went and googled this you'd see it's a Python WSGI which stands for webserver gateway interface normally it sits in the middle between nginx and Python and it does that because pythons not really threaded that well and nginx or Apache can't really call Python directly so it sits in the middle and it has tunable options like workers so you can deal with threading and things you normally don't expose it directly to the internet because I don't think green unicorn has like a caching mechanism so you don't want like nginx or Apache to sit in front so you can install things modsecurity caching etc and then have a wrap around that a call a WSGI such as green unicorn tornado or you WSGI I don't know the U stands for and that maybe micro or universal anyways long story short were most likely dealing with a Python web server so let us go check that out at ten ten ten ninety one and we also have to specify port 5000 and we see under construction this is feed PI which will become the MVP for blog feeder application and if we control you to view the source we see slash feed so let's take a look at slash feed and we're still on that view source page and just getting an image so feed is most likely literally outputting a image of a feed or RSS feed which is odd so let us go and throw this into goo Buster and see if we find any other pages so go Buster - you four URL HTTP 10-10-10 91 what 5,000 SW for word list user share word Lister buster directory list - 3 medium text and then we want to do - over out go Buster - root log and let this run it found feed and upload and if you're wondering why I have this progress bar it's just because I got the latest version of go Buster if you want it make sure you update your Kali so we can go to slash upload and see what this says this is a test API the final AP I would not have the functionality and we can upload a XML file so let us go and just create a test file upload it and see what happens let's create please subscribe dot txt and just put you should subscribe to tip SEC as the contents and now we can go to the web server makes that roof is on and it is intercepting go to browse go to route htb boxes DevOps please subscribe text upload this go back into burp and we can see how it's organizing this file upload and we just get the page back we don't get anything so it wants us to easier if we just view the page have the xml elements as author subject and content so let's change that so let's create a and please subscribe and then we want to do splash please subscribe we just have to give it valid XML so we're gonna do author eps AK and then subject is also epic and the content is you guessed it if SEC again we click go we still get the same thing let's change this to please subscribe dot XML and do we have any like content types or anything text let's try text slash XML and we get internal server error okay that is a little different let's see author subject content these are all in caps maybe that matters let's try this click go and there we go we process the blog post also zip set subject subset content zipsak and we can just do one two three to make sure these fields are all unique and they are so we have it now processing XML the next logical step is to go to the git repository payload all the things and look for something like a XML and the injection payload because it's processing XML so that's normally the next step there's other boxes like fulcrum and Aragog I believe that have also used this so let's see files and we'll do classic xxe that doesn't look like the one I want let's see passwd well try this so if we paste in the XML we can do please subscribe and it's putting and file where our xxe is so we'll try this click go and we get a internal server error so let's see doctype data that is fine and element data any that looks fun I'm actually not used to seeing this pound of hash tag but that should be fine let me get the next line it's declaring the file with the full path I know this works for PHP because it accepts these wrappers I'm not sure about Python so let's try getting rid of that does not look like that's the issue let's try getting rid of this because I'm not used to seeing that and there we go we got the file so we have successfully Elif ID this box through XML and the injection and we can just try adding this back to see if it allows this and it looks like it does so the issue was that little pounced I'm not sure if that's a requirement for some types of XML any injection so just I guess try it with and without it your results may vary if you don't know how this works I definitely recommend checking out the canopy or fulcrum video essentially this header creates a external entity which means it's using a system call to grab the contents of this and assign it into this variable and then this is how we call that variable within the XML so we can change this to anything so we could change it to please subscribe and then when we call file it's not going to work we get an internal server error we call please subscribe we get the contents of the file because that's the variable that we assigned here so hopefully that makes sense the next logical thing to do I think is to go back look at that home page and we see a reference to the file feed by so let's try grabbing that file we don't know the full path if you look down here we have file path but we can get just you abuse the current working directory and call BDI and then we have the piece of the file it looks like XML and E and codings do have some bad characters so just before this there's a bad character and we don't get the whole file it's calling death upload file so I'm guessing above here's like the app route to upload file or something and if you're unfamiliar with how Python web applications work you create routes give the route a page and then define the code so right here we have the route of the page calling index.html the next thing is slash feed and we got a fake feed function that just sends us a whoops image then the next route we have is new post that is new I believe looking back at go Buster we haven't got any new post yet so this looks like a hidden page we haven't explored its acquiring the method post so if we sent any other method to this so if we turn burp on go to 10 10 10 91 port 5000 you post [ __ ] type goober proxy send that to repeater I sent twice click go we get method not allowed if we change the request method to a post request we get internal server error so going back into burp looking at the source code to this it is using pickles which from canopy we know is vulnerable and I hope canopy was an XML any injection I don't think it was look at fulcrum for that there's another XML entity box if you just search YouTube for it check XML I'm sure a few videos will pop up anyways we are grabbing the data portion of the request data is what's down here so we're grabbing that I'll call this X X see a feed source maybe they'll stop me from clicking on tabs above so you don't need that so we grab request data and we post that into loads pic will not loads and executes it so we know pickles is vulnerable we can potentially exploit this so let us create a exploit script called will call this exploit pickled dot pie the very first thing we have to do is import pickle and then they used I believe URL safe be 64 decode yep so let's use URL safe be 64 encode so if we go from base64 import URL safe be 64 encode and I hate typing URL safe and because I just type load it there be 64 encode as be 64 encode so doing this as thing just means we want to type URL safe underscore every time and the main difference between you all safe and not you're all safe is standard base64 it does include plus and like the character set which your L Street as a space so it replaces that with a dash so that's the only reason why we're using the URL safe version because I'm not sure if you're all safe base64 decode will decode a plus because it's expecting a dash so the next thing is we got to create a string that's going to run and I'm gonna go to pen test monkey let's turn intercept off and just do pen test monkey of a shell cheat sheet and grab this one because it is really reliable so let's try this and we'll have to edit the IP address actually so if config tun 0 I had a type of there we were 10 10 14 3 so let's try 10 10 14 3 and send a port back on 9001 next piece is we have to create the actual pickle uncie ization exploit and like i said we've done this in other videos so i won't explain it too much essentially you just got to create this reduce self function because when you do a pickle load it is going to call or do self to help clean up any objects that are not serializable or uncie realisable and that would be like file handlers and things like that that just can't be serialized and instead of airing out it calls reduce to shrink those objects down and remove them so it doesn't air so we'll import OS and then we want to return OS system so we execute code run me and when we serialize now we want to Pikul this so we do pickled dumps please subscribe and the code had base64 decoded it so it's encoded and be 64 and we also want to print and I'm doing this in Python 2 not Python 3 because if you remember from the Recon where identified this was Ubuntu xenial and that defaults to having python 2 on the system I try to mimic the environment as close as possible to the target and if I thought the target had Python 3 I'd be doing a Python 3 version of this essentially so if we run Python against exploit pickle pick is not oh I didn't type pickle there we go type 1 run me one of these days I learnt how to type but that day is not today there we go so now we have some base64 that looks dangerous so if we paste this in because it's going to do the pickle load on this string it should give us a reverse shell so now cat LV NP 9001 we're on this and we get internal server here maybe this is bed let's just change content type to text here cuz we didn't get a call back there we go we don't get anything back so the content type being URL encoded or something like whatever it was confused Python and it tried to go down a different path so we just changed that to text and there we go we get a shell so Python see import PT y PT y dot spawn then - and then we want to do st - y raw - echo foregrounded and now we have a real shell and we can see your uploaded file is please subscribe XML so let's see what else can we do with this let's cat config PI see if there's any um hard-coded secrets doesn't look like it let's go to the home directory and we see we are literally the Rousseau user so it's not running as Apache or anything it's running as Russa and if we went to WC - see on user dot txt we can see the length of that is 33 which is 32 characters and the line breaks so that is the user that text file the logical next step may be to run like Linux projector or something to enumerate the box but that's generally what I run after I do some manual enumeration just because it's noisy the first thing I normally do is look around the users home directory if I have it to see if they left any passwords or anything we could try sudo - L and it's doing I guess a DNS lookup and failing so we gotta give this 30 seconds and it returns us with enter the password for Rousseau we don't know the password so we just ctrl C out of that we look at the hostname of the box it doesn't look like oh it thinks it's called OS boxes and host so if we had Russa here not Russa get her here and Etsy host and it could resolve that then this pseudo wouldn't timeout but we want to try to find the password for Russa to see if she can sudo we can also check groups and see if she is a member of anything special so a DM that should give privileges to I think view logs sudo that's why I wanted to do sudo we don't see like LX d or anything else dangerous so we can move on if we looked at burp and went back to the feed source at the very bottom we saw the file path was home Russa deploy so let us look in deploy we can see resources and source we look at resources there's integration we can integration we have auth cadential zki so it looks like we have a SSH key so let us LS slash home slash star dot SSH and the only person we can look at is Russa and she does have an ID RSA key so if we cat home rusa ID or essay that ssh we see the very last line of the previous one ends in O ee or zero this one ends in qu so it's a different SSH key I don't know what that keeps coming off but we can try this SSH key for the other users so let us grab this create a new thing and we'll do V whoops whoa off cred dot key paste and chmod 620 and we know it's not Russa so we can try root at ten ten ten ninety one doesn't work let's see what other users on this box so if we do cat Etsy passwd there's blog feed let's just grab grab the bash export term is equal to X term but I can clear the screen we got root get Andrew so so if we SSH get with that key nothing works and we know it's not Rousseau but we wanted to we could just use root is key now probably home Bruce does SH ID RSA I mistyped that there we go we could probably just use this ski in the future to get to a box so if we V roosted key-based chmod 680 10 10 10 91 there we go so we got one key a sir there is a work directory so let's look at work well actually let's go deploy and we'll do LS - la we'll find da - name get and we're just looking for a like I figured what it's called it stands for but any versioning repositories on this so we don't see anything there let's look at what's in her work folder we got blog feed looking at blog feed looks like another web page and it is probably the same web page we see this dot PNG that we recognized from before I recognise it so forget our resources integration cat off potentials and we see it ends with a EE or 0 which is that same ending as before so let's do that find command here no subversions and we see a git repository so if we do get log we have a bunch of commits so we can see this top one is using base64 stuff setting pen so maybe this is a newer version of the blog feed app but we see Russa accidentally committed with a different key it looks like so if we look at this commit history so get diff is what I wanted to do and on that we can see this SSH key got removed and this one had got added so let's try seeing what this is copy this whole string go back to a box V unknown key paste this in we can remove this space and then we gotta remove all these dashes I was going to a said script to do that and then realize it would mess with the being - of beginner or SAT by the key so let's put that at the bottom and then put that at the top change begin to end and then chmod 601 and we can SSH - I with unknown key and we can try the users again 10 10 10 91 and that appears to be the root key so the developer accidentally had placed the root key and the source code of the application and then eventually changed it but did not clear the clog and the source code repository so we could pull the old key from the log and get in the box relatively common mistake so we could do WCC on root text and get that there were some unintended routes the very first being you didn't have to do any of that pickle if you just decided you wanted to let's see seda feed PI we can do home rusa dot SH ID or si and we can grab the or s a private key and just SSH right in without pickle so generally after I do a box I try to think of other things I would have done to make the Box better and one thing I would have liked to see is like a way to very much like I think it was canopy I keep saying canopy Aragog has a XML any injection canopy is another one with get stuff and I would like to have two downloading the git repository through an XML ng injection and we're gonna begin doing that it's actually not possible but it's good practice and also we want to create a Python script to exploit this xxe in case we did this on a actual engagement and the client wanted us to verify what they had was fixed instead of trying to remember how we formulated the xxe it just works better if we have a Python script so let's get into coding so we can do all of that so let's get a well we can clean up all the sessions because we don't need to be connected anymore so this one can be exited this can be exited here we go so let's move all the keys to make the sage keys start key there we go and we'll make exploit xx e dot PI so the very first thing in the exploit we need to import requests and I think that's what we need to import or a as well so when coding this out the very first thing we have to do is get files and this isn't going to be super trivial because we have a bunch of junk in this request so we want Python to only grab the contents of this the easiest way to do that is to put some unique string before and after the file and then create regular expression to grab that so I want to see if backslash N is a newline it is not can I do a newline this way I can so we'll do subject and this will be we got to create some fun unique string so please subscribe to my channel and I don't think this string will exist anywhere in the application so we'll grab everything there and then at the very end we will put thanks for subscribing and now when we click go we have please subscribe to my channel align the file a line-break thanks for subscribing so we can create a regular expression around this to only grab the contents of the file so that was the key thing we were doing there so let's grab this payload and go into a request we can say get a definition for perform XX e and the file name is what we want to call xml is equal to f we gotta set o I delete way too much I forget the hotkey to restore that so perform x XE power name and then xml is equal to set paste don't make that mistake again and we can clean this up we don't need all those blank lines there we go and let's see this should be phoneme because we're calling that assigning that here there we go then we want to do files is equal to file that's the name we want so name will be file and this is gonna be a bit wonky but request likes everything indict and then this field is a tuple this will be the phone a ma so this is file name we can call this please subscribe XML and then the contents of that is this XML up here okay so we can do response is equal to request post HTTP 10 10 10 91 put 5,000 upload and then spice didn't auto in them I think I'm an error in my code somewhere we want to do proxies is equal to HTTP HTTP 10 nope one 2700 one port 8080 so we're sending everything in our Python script to purp because well it's handy for debugging things when we create mistakes and then files is equal to file since we're uploading a file and we can end the post and we just want to grab text so we can return response and if we do perform XX e and we'll just get let's see passwd to see if this works python 3 and we did not print the results so if we do print perform x XE there we go so now we have everything we have all this junk that we want to erase so we will create a regular expression so will do result is equal to e dot find all and then our and we want to begin with please subscribe to my channel and then we want to grab do a line break with backslash s and then dot star this is going to grab everything and then we ignore our line-break and do thanks so grab that and grab thanks for subscribing that should be a good regular expression we want to run that against the contents of response and we have to enable dot all which means I think it's lowercase Scott maybe it's uppercase I don't think it matters actually and what that dot all is doing is saying this period matches everything including line breaks so and we only want to grab the very first response out of that or the first match so let's see if that works we got to return result and there we go so let's see it's still giving us a line break which is odd if we do two of these it's probably not going to match at all nope there we go so I was an idiot with this we have it the file ends it does a line break here then doesn't line break then thanks for subscribing so without doing the - backslash guesses we include this backslash S but not that one so that's why you have to do two so there we go we have a way to automate this injection and we could just loop while true and then do something like F name is equal to input and then form this on F name and now this script I'd say passwd home Bruce ID not ssh ID underscore RSA never quick way to do the file inclusion vulnerability without using book but we want to grab the contents of this git repository and there is a DVCS pillage script which does this and - so if we look at this get pillage dot SH it's using curl and everything and you can imagine this is going to be really messy with that xxe because if we go to burp and copy this as a curl command not only is it long but then you have to take an account that we have to remove all that junk we did with a regular expression it's just easier to put this into Python and this isn't gonna work because early in the video we discovered there's bad characters with XML any injections and this is configured to be zip everything and the git repository and when you do that it's gonna create a bunch of bad characters that the script eventually won't like but this will kind of explain the start of the process and show you not every attempt and successfully and this still just teach just kind of how dot get organizes files and it's just good practice so we're gonna do this even though it doesn't work right down here is where the script actually begins and it's creating a git repository locally and then going into that so let us do that manually so let's make directory we'll call this blog go into blog and then get a net and then we can go in to get so this is where it's going and then it's doing a git command on head and up here they probably have get defined so let's see there we go function get and this is downloading a file so we already have the getting file portion we just need to do the saving file so let's go back into our script and we'll copy your script into this folder so copy exploit xxe in here and we just have to create a new function to save files so we'll call this def get file filename and this will be f content is equal to perform XX e on file name F is equal to open file name as write and F dot write F dot content so now when we get a file it is going to save it and we can get rid of this while true so if we do feed Pi Python 3 we have to put this in quotes and it did not save so let's see what happened there it said out of range so if we look in a proxy HTTP history here's opposed to upload we have the police subscribe to my channel and subscribe if we look at the response it cut it off so we don't have that so we have to change up a regular expression let's do do we have it at the end we do have it at the end we just have to change up the beginning so if we go here you probably want otter upset one backslash s and then it wants is that a space subject I believe so subject well we can just do probably upset stir subject space so we can try this and then we want to get rid of this needless line break because that's not always going to be true and we want to grab feed by index I'd arrange still so let's look at HTTP history on the latest one just send this trip Peter and play with it manually so it gets this and I guess we'll get rid of this so author let's do it check one new line subject space let's try this still at a range let's pretend it doesn't have that out of range so we're screwing something up so subject let's just try putting that space back in I think I just did star last time so let's do dot star question mark and try this there we go that's looking better so that's what we needed and if we get at C passwd let's make sure it doesn't end on that line break I have it hard code to feed by let's see passwd okay so that's good the last thing we want feed by instead of perform xxe we want get file file feed by and foul name is not defined because I have a typo here there we go it returns none but we got the file feed by and it saved it so now we have that get function working let's go back here and we can get head and get config so we don't need to print anything this will be what does he call it get static files head and config and before we do this you have to work a little magic and just know that config is going to be in home rusa was it work let's see we have a valid directory it returns nothing and valid returns nothing okay work dot get slash config is that the directory no let's make sure it's just not our code that's the passwd return something so let's try home Russa work was it vlog feed that get config there we go so this is the path we want and we always want to ignore it get so heard code this in our script so we will say where's the file up here system this and we'll call this script now get village PI so let's edit this and if we do Python get pillars PI line 15 has an error we didn't really change this Oh Python 3 my bad there we go and we can look at head we can look at config and it's looking like we got the files off the server so go back into a get pillage and we can do the next step the next step they have is get references from head so get references from head and their script is doing a cat on get head and grabbing what's after space so we can make our own code that will do head is equal to open head for read and then reference is equal to head dot split and we want to grab the second thing so if we look at the file head it's just doing ref : and then this and the script wants to grab this so when we split it on space and grab one we're grabbing that if we grab 0 we grab ref : so that code has been mimicked and all we have to do now is call get file on ref ok and I also notice description is here I'm gonna get file description now if their script ever does it I don't think it's needed but might as well okay we run get pillage again we cat description don't really get anything we cat refs head master we get a commit so let's move on they have a get shock command and we're doing a bunch of bash stuff here so this is grabbing the very first two characters and this is grabbing characters to 240 and we can verify that if we just said like dirt is equal to he's 20 1 2 3 4 5 6 7 and then do echo derp and they're calling 1 0 2 like that dirt is equal to 0 2 like that I'm actually not sure about that I don't like doing this stuff in bash but essentially that's grabbing the very first two characters and this is grabbing to on so we can do that in Python simply enough so I don't have to look at exactly how that works in bash so we can create a new function called F get sha and we want to create a variable sha I guess and then directory name is equal to sha - so that's going to grab the first two characters and then F name is equal to sha-3 I think like that we can test this so Python derp is equal to one two three four five six and then the two should get 1 2 and then 2 : 3 4 5 6 so that's what we want and that's what that Bash is doing and then after that we want to do get file F objects direct aim D name F name ok so 4 is going to be get object from ref and they're doing a get Shaw and catting ref so we can do ref object is equal to open reference dot read get sha on ref object do Python 3 get pillage index out of range we look at a history we see internal server error and this does look correct as that is the sha if we grab this WC echo - n WC - C pipe get rid of that back slash four slash four slash we can see it is a sha-1 hash which is what get uses it's just this file contains a bunch of bad characters that cause the server to barf so we go in an HTTP history for this two repeater click go internal server error if this file didn't exist the server would just do nothing so we know we got a valid file I don't know why it won't undo to go to the beginning we know we have a valid file it's just the server doesn't want to handle it and if we had SSH into the box - I um what is it unknown ten ten ten ninety one ohm rusa work blog feed get we were in objects refs CD objects CD 7f and then that's the file and if we cat this file we see a bunch of characters and some non ASCII like that II so that is why this method just randomly breaks and we can't progress further through converting this script but if you want it you can do this on your own and instead of doing it through XML just create a open web directory and try to get clone it or do this on canopy convert this script into a Python script it started for you so enjoy doing that extra challenge because I'm sure you'll learn a lot on how it works and additionally you'll get a new tool out of it so yep take care all I'll see you next week