 what's going on YouTube the Zips I can be doing dab from hack the box which was a really fun box and involved exporting the underlying services of common applications so the first being memcache which is a memory caching service for web applications so if you have a database query that takes a lot of CPU you cache the results so the next time it runs the query it goes to your caching mechanism and not the database making it much less load intensive I guess the second piece of the box is getting to root and that is exploiting the dynamic linker or how like see applications load libraries so with that being said let's just jump in as always we start for the end up with - as see for default scripts SV enumerate versions Oh a output all formats but in the end that folder I know let's call this tab and then the IP address which is 1010 1086 this can take some time to run so I've already run it look at the results we have quite a few ports are open the very first thing we noticed is FTP is open on port 21 and it's run the application vs FTP d30 3 so the first thing we do is a quick search point and see if there's known vulnerabilities for that so doing that we see all the vulnerabilities are for version 2 not 3 so we can ignore that and move on it does have a file dabke peg and since we can see this it's a non miss authentication so this is something we should take a look at the next thing on the list is SSH listening on port 22 it is for Ubuntu 2.4 so this is most likely a ubuntu zaniel box and then we have a HTTP server listing on both 80 and 88 it's the same exact like server version so chances are this is on the same box we don't to worry about like any type of darker or VM component so let's just take a look at the FTP first because once we grab this image we can rule FTP out pretty quickly so typing FTP 1010 1086 do anonymous for the username and a nonce for the password we can do directory listing with dir we see dab JPEG so I'm gonna get that and then I'm just gonna quickly look at like the metadata what exist all and we don't see anything unusual here we can do a strings on it and don't see anything unusual there we can bin walk it to see if there's any data other than jpg in it we don't see anything and then finally we can just look at an exit or real quick and it looks like a normal image so I didn't see anything that stood out I was with xxd just mainly making sure I didn't notice any strings or odd things like it's saying zip or something so let's just remove that image before you remove it the most critical thing let's open it up and make sure it's not a picture of anything meaningful looks like it's just a picture of probably fortnight of a guy dabbing so now we can remove that image and move on looking at the end map the next thing we should look at is probably the HTTP server on port 80 so let's go to Firefox and go to 1010 1086 we get a login prompt here so let's also go to 1010 1086 on port 8080 and we get a message saying access denied password authentication cookie not set so I'm gonna go back and we'll see if we can try logging in the first thing I'm going to do is a basic SQL injection and I'm just typing or one equals one like this oops and we'll see if this logs in does not so let's go over to W fuzz and try a few things with this login form so let's run w fuzz - H to get all the arguments we'll want to do we'll do W fuzzy output with colors I love colors - W for a word list and we're gonna try to brute force the password so I'm going to do user share SEK lists I'm gonna go into the passwords folder and then I'm just gonna do Dirk web 20,000 17 top let's do a thousand right here and I'm not doing rock to you over the web just because rock you is a enormous list if we look at the character count or number of passwords we have 1000 and top 1000 and then if we look at rock you text will see that rock you has is that 14 million so this will take quite a while to go through the whole list so let's start with the top 1000 and then we need let's see we got the colors we got the word list we need the actual payload so - d4 post data and we go back to Firefox we'll try logging in with admin and please subscribe and then just send this over to burp so we can inspect the URL and our proxy tab is on click login and we have username password and login so we'll do - D username is equal to admin password is equal to fuzz and all caps and then submit equals login if you haven't used W fuzz before it's gonna take every item in this word list and replace it with fuzz's and before I actually run this I want to try one last thing let's click go on this we just have log-in failed if we try a user that doesn't exist let's see what this user says still login failed and if we try like admin and see what the milliseconds is it actually went up so there's no way we can try to enumerate valid users on this easily so let's just brute force it as we were doing and the final thing we need is the URL so there's gonna be 10 10 1086 slash login 10 10 1086 slash login and then we can hide everything with thirty-six words and h/w probably wants to be at the beginning of this or we say 36 words and we'll see if w fuss comes back with anything and it looks like I guess passing Unicode gives you a 500 which is internal server error so that's interesting but we do get a valid password of password 1 so let's turn intercept off and let's login so admin pass pass with one with a capital P and let's never save this and we don't really have anything we just get a big list of items and a logout button pressing ctrl you to view source we see debug data tables alerted from my SQL DB and if we press ctrl you again after refreshing the page we see data tables were loaded from cache so that is something interesting let's try that again control you MySQL and if we do this twice we get cache so we got some type of caching mechanism here but no obvious way to exploit the caching mechanism because there's no features of this website we could try doing in go Buster and finding other pages on this site but that's it for now so let's just look at port 8080 since that was the other thing that came up the title is internal dev and it says access denied password authentication cookie not set so you could use W fuzz again but I'm just going to guess the password authentication cookie is going to be called password so if I edit this header let's go over and to repeat click and go we can see the message and I'm mainly going to create a new cookie so add cookie to the header and I'm going to say the password authentication cookie is password and we'll try putting the phrase up second there clicking go let me get the password authentication cookie is incorrect which is different than not set so let's go back into w fuzz do - H and how do we edit a header it's probably going to be something like - capital H right here so let's go back to a previous W fuzz command and we're going to remove that - D and replace it with a - capital H we'll say password is equal to fuzz and then instead of 86 slash login it's 86 and then the port which is 8080 and looking at burp it's just on slash so wrong header is specified we want to do - H cookie like that and there we go so let's do hide everything with 29 words and let this go through the list we do have something come back on secret so let's go back into burp set cookie password is equal to secret click go and we get a page so let's go back into Firefox we can not go through burp for now and then go to tools web developer toggle tools and we want to create the cookie so I'm on the storage tab the website click the + now we just created a cookie so let's give this a name which was password and then the value which is secret so now we have the cookie set refreshing the page gets us this which we have status of cash engine online and TCP socket test TCP port and line to send so if we do a TCP port of like 22 and put anything in the send launching this we get the hetero ssh if we did a invalid port let's try like elite and then put something in here we get a internal server error so if we tried like 80 with the same stuff we get a bad request because that's not a valid HTTP request so if we do 80 and then get slash I think 1.1 get space slash space HTTP slash 1.1 so if we make this a valid header we get suspected hacking attempt detected so we have to find out what the bad character list is and this website and again I'm going to go back to w fuzz so going back into a terminal let's look at the last command and instead of HTTP let's just redo this whole command so W fuzz - C because we want colors - W for word list we want this same do we want this one no we do not so we want to look at new word list so LS user share SEC list and then there's a fuzzing one and this alpha case extra looks like it would be a pretty good one test so if we look at this we can see this is just a text file with every character and some symbols so let's use this one with W fuzz so W fuzz colors weird list and then we need let's see let's go back to Firefox and I'm going to test if we need to add that cookie so let's send this request go to book send into repeater that's not the right request drop that send this one in repeater okay let's remove this cookie and we're still good so as long as we knew this whole syntax we didn't need to do that whole cookie thing so only thing this means is we have one less thing to add into w fuzz so all we need to do HTTP ten ten ten eighty six eighty eighty the page was socket and then we will need port and CMD so port is equal to it doesn't matter what it was we were sending for Katie and CMD is equal to fuzz and we have to put that in single quotes because bash will try something with that and since that's I guess bash then texts well and let's hide everything that is not let's say eighty four words so - - HW eighty four and we get a listing of pretty much all the symbols that get detected as hacking detect hacking attempt detected so we just know we have to avoid the use of symbols and it looks like spaces are fine here nothing is not fine but a space is fine so the next thing to do is let's brute force all these ports let's see if there's anything the server is listening on that we couldn't access from our box but the server can access through localhost so this is kind of like a server-side request forgery type of attack because we're tricking the webpage into making a connection to one 27001 and seeing if a port is listening on localhost only so back to w fuzz we can do the command please subscribe it could be anything it doesn't matter port this one's going to be fuzz and then instead of dash W we're going to do something different so let's do W fuzz - each and we have let's see - Z payload and it says we if we do help where the payload is it would tell us all the different types of payloads so if we do W fuzz - z help we can see we can use like IP ranges buffer overflows standard in going up all through these different types of things we can fuzz another IP file we got range so we can do - G space range comma and then numbers in the form of like 0 to 10 so let's try that so we'll do - Z range and then 1 to 65535 every single TCP port when we get rid of that hide words 84 because I don't know what length we want to hide let's see we probably don't want to just see HC 500 which is the error code so we can see port 21 is open port 22 is open port 80 is open and I'm going to just speed up this video and we'll see what other ports are open on this box so we have one port comeback surfer and that is one one two one one so let's go and see what that says when we try connecting to it so one one two one one and we'll just send it I guess help hope is normally a safe bet because it may just respond with how to use the service and we get the output with just error which is different then if the port dings exists so if we did like 1 1 1 1 1 2 2 2 and did help we hit that 500 error so we know we're onto something with 1 1 2 1 1 so let's Google what is port 1 1 2 1 1 used for and let's see we get a bunch of stuff saying memcache so if we look up like a mem cached cheat sheet to pull like a valid memcache command let's see what this says get key let's see stats should work so let's do 1 1 2 1 1 and send it stats and we get a bunch of information so at this point you should probably look into like exactly how memcache works and essentially when we do things like logging in and pulling information from this database it's making a my sequel query which could be heavy and what memcache does is it just caches the results of the query allowing it so when it has to do it within like the next 5 seconds or something or five minutes it's a completely user configurable it doesn't do the query again it just pulls that information from memory since it just ran it and it's reduces words on web servers quite a bit so let's do 1 1 2 1 1 let's just send this to burp so it's a bit easy to play with so send this and we sent stats so going into burp let's go to the proxy for this one into repeater and I want to do stats and then let's do slabs slabs is kind of what information is stored in in memcache so we got stat 16 and stat 26 these are I guess you can think of them kind of as arrays or items so we can see the chunk size for this is only 3000 while the chunk size for 26 is 27,000 so this is much more memory that is cached but let's just see exactly what stat 16 is so we can do stats instead of slabs we can do stats and I think it's cached off whoops cache dump and then 16 and this is going to a bad command line 1 1 2 1 1 so it stats cache don't do we have to do plus a 0 there we go so this other number it can be a lot of things that's just like the maximum number of results to return and 0 means unlimited so that item is stock so if we just do CMD is equal to get stock we get no output however if this information inside of stock was pulled from memcache then we would get information so I'm just gonna go here refresh this page so it goes whoops let's turn boop off refresh this page so the memory now is inside of memcache and then go back to book quickly run this again and we get the information out of memcache so let's do that again except for 26 so we do stats slab slabs and then we want 26 so stats cash dump 2602 make it unlimited that item is called users so if we do get users we have no information so let's refresh is again quickly click go we still don't have anything and that's because we didn't have to do a user query so what's log out of this let's login with admin and password one and then quickly just go back here and run this and here we go it dumps all the usernames so let's copy this go over to the Dakota tab and decode this HTML thing by clicking smart to code copy this go back into a terminal and I'm gonna kill this w fuzz because I don't think it's gonna find anything more we found what we wanted and we're going to do users dot JSON and then paste this in let's save this file and then let's use the program JQ and we're not gonna do any filters so just a period and then the file name which was users JSON and then we have it printing all the users in a nice pretty format I'm going to pipe this over into awk and we're just going to do the field separator of a quotation mark and I just want to pull all the user names out of this so let's do that and then print we want the second field because this is the first this is the second and this would be the third this would be the fourth and that would be the fifth because we're using a double quote as a delimiter so we have all the users and if we wanted to we could have also done all the passwords so what I say for is the passwords so we could do that and then just send this all into hash cat and try cracking it and if we do a echo - n and then pipe that - WC - C - count the number of characters we see it's 32 characters so we're assuming this is probably an md5 hash however out of all these users how do we know which one we want to crack should we just try them all then go into Hydra or not well there's a I forget what the CVE is let's see if we can find it real quick there's a way in old versions of SSH to enumerate valid user names so let's do MSF DB run to open up Metasploit and while that's doing let's see SSH enumerate users 2018 I did this on a box I forget what it was the username was like Icarus on that box but let's see I think this is the actual CVE it's using but I like using the Metasploit so let's just do search ssh a Noom use this scanner and then a whoops LS actually showed me the users I wanted so let's do show options set our host to 10 10 10 86 let's set threads to 50 and then set user file to users LST and then run this and we'll see if we get a hit let's control C this real quick to show before we do that we got 497 users so let's do view V test and we'll try admin root epic and please subscribe and see if it can find that root is valid user because it's gonna take a while to go through 500 various users so let's do this as a test first admin root found if SEC not found please subscribe not balance so we know this works let's see is there way to only show valid users let's do show Advanced Options retry debug know maybe set show progress to false and set verbose to false even though it's already false and then just try this user file again doesn't literally it's a way to easily hide this without modifying the module so we'll just wait and there we go we finally have a hit Jenna Eva Genevieve is a valid user apparently so let's go and crack his hash while this keeps on going so let's grab Genevieve against users JSON let's do j q dot uses JSON grep for the username go get his hash ok copy it I did so let's go into the crack in and just don't use your VM for this well md5 hashes are fine but doing any cracking and a VM is just super slow so that's why always SSH to a different box so let's go into ashes and we'll call this dab dot gene I guess put this here dot slash hash cat - H can we grab - I md5 okay I think it's zero for just straight md5 that's what it looks like so we'll do hash cat - m0 for mb5 and then we want hashes dab gene and we'll do the word list of opt word list rocky text and because it's not a website we can crack much quicker than we can brew it for us so that's why I used rocku which had that 14 million versus just top 1000 so cracking is a lot faster than brute forcing so you can use big a word list so princess one is the password so let's try that so CH at 1010 1086 put the password in and there we go we now a local user on the box we could do WCC user dot txt and we see 33 characters so that's probably the md5 sum and then a line break so I guess the next step is to if I can pseudo execute anything so pseudo - she'll princess 1 and it shows us executing user been try harder so if I do pseudo try harder and it instantly says root at deb and then whenever we try to run a command it does a seg fault and then says that I've been too easy try something else so try something else and we get the same thing so let's look at this code to see exactly what is happening under the hood so SCP geneviève at 1010 1086 user bin try harder and then copy it to my current directory princess one and then let's analyze this in radar so our to try harder AAA to analyze all functions and everything we can do AFL to print list and a stands for analyze F is function and an L is list so radar does everything and the very first letter does things so if L we don't really see any functions we see main so let's do print just assembly function main and we can look through this code and we see it loading a string string root dab into EDI and then printing and then we have it doing F get so asking for input and then after that moving string segfault and printing that and then we get in S which is 3 and then it's calling sleep for whatever 3 is and then printing this string so if you don't like the this function view you can do PD question mark and you'd see C which would be a pseudo dissembler and C like syntax so if we did pd c at main you may get it in something that's a little more familiar but with it literally just saying rooted dab and then upon entering anything immediately just printing segfault and waiting three seconds then printing something else I'm gonna say this binary is a rabbit hole because there's literally no functionality to exploit in it so let's get out of radar let's go back up here look here we don't have a bash history so let's just try lanthanum so up linden um and then python jam simple HTTP server and then we'll do curl 10 10 14 let's see what my IP is it is three four eight thousand and then lynn enum sh fight this over to bash and we can see the thorough tests were enabled right there that's just more than amount of think the only modification i've done to lend um if we go into that directory and just I get diff we can see I've just added thorough equals one so my script the thorough checks are ran as all that does so I'm gonna let this finish and then we can go dig through the output let a new mess finished so let's go up and search so let's see can I do slash well this search let's do huh I'm just trying to search down for that's not it I guess because this is some weird unicode color when I'm just typing oh no there's no space I just can't read don't mind me let's go up to the top when a noon okay I was putting a space there's no space there we go so now I can just hit end to go through different things so I don't care about colonel information we know it's compiled in 2018 so chances are there's no colonel Provost for it first names dab user information Genevieve none in any groups user that previously logged into the system we have route from 10 10 14 4 and me from 10 10 14 3 but roots is back in August and mine is in January so about 4 month difference between there so no one else is on this box it looks like looking at who else is logged in we can confirm that only my thing is logged in group memberships don't really care about that looks like we have some admin users don't care passwd contents see the lxd group is interesting to me but because i'm not a part of it I'm just gonna ignore it we got super user directory permissions on slash home we only have one user in slash home so I can ignore that files owned by our user I'm gonna ignore that for now hidden files ignore that word readable files in home nothing looks interesting home directory contents we've looked at that as root can log in through SSH the path doesn't look interesting I wonder if slash snap slash bin is new that maybe a Ubuntu thing available shelves SH - bash or a bash nothing interesting you mask not interesting Cron's that one's normal let's see I think that is a normal crime listing I'm mainly looking for Cron's like that wood modified recently so we know this box was released in 2018 if a con is from 2016 even they don't recognize what FS trim is I'm guessing the Creator did not put it there because number one it's in cron dot weekly so that would just be horrible if we had to exploit that and number two it's two years old so crontab contents nothing interesting system D timers doesn't look like anything interesting their IP information or we see nothing really in the Europe history so we know there's no like docker or VM running on this box name server default rail listening sockets UDP running processes I probably look at running process more in depth if I don't see anything sudo version my sequel version dub dub dub we got dev HTML and prod we got some config files like dev ini so maybe go pillage these configs for credentials useful file locations compilers can't read sensitive files set UID files this is always interesting we have oh whoa I didn't want that su ID there we go so glancing down the list mainly putting extra emphasis on anything that's 2018 you mounts on interesting mounts not interesting my exec this one looks interesting this isn't a normal binary and I already config I'm not used to seeing in this list and I don't know what LD config dot real is so we've got to Audi config xia one small one big so definitely check out LD config and my exec see goig files going down ssh agent maybe my exec is interesting snap i'm guessing this is ubuntu thing that would be config so again LD config really stands out along with my exec so let's just go and poke at those let's see what my exec is and a password and or something we see invalid passwords so let's analyze this file so just like we did before let's download the file so SCP G&V ieve at 1010 1086 user bend my exec and then the password princess one later on this file ay-ay-ay and then AFL to whist functions we really only got main so PDF at main and let's see what's goes on so we got moving a string just before it does enter password and the string is secure login so chances are this is the password right off the bat and then let's see if the password is correct call sec login and that is not in this binary we don't see any secure login in a function list so this is gonna be a I guess shared library or something so let's ignore that and just see what happens when we type secure login in the file so my exec secured well again I think it was that maybe it's g1n there we go and we see the function SEC login was cold and there's a to-do place order for now functions not implemented yet so we don't see it actually in this binary if we do list all the libraries that this is linked to user been my exec there is Lib SEC login dot SL so we can see what that function actually does so we can do SCP GN e VI e ve at 1010 1086 paste that in princess 102 the file and then let's see PDF at sim dot SEC Logan and we see this file is Lily just like try harder it calls this function and then just prints the string to the screen and then exits but unlike um let's do sudo - shell unlike user been try harder we got this shared library and if we looked at the set u IDs set UID files LD config which handles all this dynamic linking is set UID bit so if we do CD Etsy Oh DSO kampf D we can see there is a test Kampf which is going to say that we can drop files into slash temp and then if we run LD config again it will repopulate the caching of libraries on the system and then link RS but so the main thing we're trying to do is if we go LDD user bin my exec we are trying to get lib SEC login to not equal this library and because we have control over already config we should be able to do that so let's first create a replacement file so we'll call this Lib SEC login SL and then just create a basic shell so standard header then we need to say this function can be called and normally this would happen like a dot H file but just putting in one to make it easy and then let's create that SEC login function so set our e UID 0 0 there's gonna set the effective ID to root and then we want to execute in bash and that's it so if we compile this with GCC - shade for shared library - OH Lib SEC this should've been dot s so this should be dot C so GCC shared Lib SEC log n dot s so as the out file and Lib SEC login dot C as the source what I screw up code object is not a function pointer the Lib SEC log n dot C think that's right oh I'm missing a comma there we go let's see our data cannot be used in making a shared object to plate wreak pile with FBI see so let's do that now we've got lib SEC login SL so if we copy this and put it into temp let's do l DD on user bin my exec we see that's what it looks like if we do LD config do it again and now we have overwritten the pointer for lips a quaggan and it's in temp now so if we execute the binary my exec and then s3 CU r 3l zo g 1n was that the password password is correct and we get a shell so if we do ID we a root and there's root our text so if we didn't knew the password you didn't feel like getting the password we could have always just hijacked a different function so instead of sec login we can do printf whoops sec log n print F and then let's remove lip SEC log n dot s oh and when you start doing things like this you have no idea what can happen in your system but lib sec logins only used in this program so I don't suspect anything that will go bad let's move that file out of there it's probably owned by root because I don't think I should be able right in that directory well this just got interesting oh no I can I don't think I supposed to build right in there I wonder if there's a check on only root owns it root yeah that's world writable okay we'll go back to that let's recompile this and if we looked at website login see we could see that instead of lib psych Logan its hijack and print F so let's do LD config we haven't copied it yet so this is just basic functionality the program so if we copy website login dot SL and at em run LD config again and then let us run my exec and we immediately get a shell because we hijack that printf function but let's do something real quick let's see what was it LOD DSO compte remove test comp and then exit LD config my exec okay even though that follows there because we don't have tests Kampf in that directory it's not going to link so let's go into Ezio DSO Kampf D V test comp add t'aime and let's see if this works user and my exact huh so I guess that directory definitely should not be writable by anyone so Lynn something new there but hope you guys enjoy the video take care and I will see you all next week