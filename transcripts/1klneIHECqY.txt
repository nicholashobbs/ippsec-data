 what's going on YouTube his hips I'm doing water from hack the box which was a really fun box the only thing I didn't like about it is there's no way to actually get a shell as route you're limited to just reading files but it does have a lot of cool things like dr. a fun web application escaping restricted bash and then Linux capabilities which I haven't seen in hack the box before which is awesome so the web applications pretty simple and has a bad character filter to try to limit path traversal but there's a way to bypass that so you do that and then you get an SSH key you can log into the box which you find out you're in a docker container and then from that docking container you can SSH into the host but when you do that you're in restricted bash there's two ways around that restricted bash to break out of it and then you have to abuse something called in Linux capabilities which is a way to do granular permissions on Linux so instead of like set UID which just grants you route you can say hey this user on this binary has a way to read fouls as root so if they exploit it they don't get a root shell because they only have permission to read files so with all that said let's just jump in as always we'll straw for the N map so and map - SC for default scripts as V enumerate versions Oh a output all formats put in the MF directory and call it Waldo and the IP address which is 1010 1087 this can take some time to run so I've already run it looking at the results we don't really have that much information we have SSH listening on port 22 it's version is OpenSSH 7.5 it's not leaking any information which can help us identify what OS it's running we also have nginx listening on port 80 and I don't really care about the versions of nginx because there's just not many vulnerabilities in nginx itself so we can just safely ignore that the other interesting thing is we have a port eight eight eight eight there's responding as filtered and I've said this in a previous video but filter just means the OS didn't send us a packet back when we send a request on this typically when you make a request to a port the OS is not listening on it sends you a reset packet back and that tells you that the port is not listening when it doesn't send you any at all that's interesting because this means there's a firewall here configured to drop the packet and just silently do nothing so let's just take a look at this behavior with TCP dump and before you do that I'm going to edit my hosts file and I'm gonna do 1010 14 2 which is my IP and I'm gonna put this as if SEC and then do 10 10 10 87 and put this as Waldo and the reason why I'm doing this is just so TCP dump will do some dns resolution and show us client and server and it'll just make it easier to see so let's open up a new pane go down here we can do TCP dump - I ton 0 this is the interface for my VPN connection and now we can do a netcat - 10 10 10 87 and port 80 to see what a normal connection looks like so we see it sick that is me sent a request to Waldo and that request is a HTTP and it did that by sending a syn packet then Waldo sends a packet back to me and that is a syn ACK and then I acknowledge that syn ACK by sending Waldo and ACK so this is your typical 3-way yet 3-way handshake for TCP by control see this will see me sending a fin packet back it sends a fin ACK and then I acknowledge that and close out so that is a normal TCP connection so let's clear that again and we'll do it to a port that is not listening so we'll do elite 3 1 3 3 7 we see if SEC sends a port packet to Waldo port 3 1 3 3 7 and it's just a syn packet water responds with a reset and just that's where it dies it just tells us hey this port isn't listening go away so do one last thing and we'll do a port 8 8 8 8 so but qua dates here and we see I am sending a packet to Waldo port a t-888 the syn packet again and I'm just doing this multiple times because I'm hearing anything back so Waldo just dropped this and that's indication that there's a firewall that did something odd and when a firewall is configured on a specific port that typically means maybe something's listening and it's just not listening to me so just interesting behavior and keep this in the back of your mind as we keep going on through this box so let us look at what port 80 looks like open up Firefox and let's go to 10 10 10 87 and we get a weird looking web page so we always want to do some type of recon in the background as we progress so let's stop go Buster so go Buster - 8 so we can see all the options you for URL so HTTP 10 10 10 87 - W for word list we want user share word list then der buster and directory list 2.3 medium start this up and we see it dies right away and we have a wild code response found so whenever we send a request it sent us a response back so let's just demonstrate this behavior curl 10 10 10 87 slash please subscribe and we'll put random junk at the end because this file definitely shouldn't exist on the server we don't see anything back if we do curl - V we can see us requesting the file and then the server responds with a 3 or 2 saying hey go to slash list dot HTML so let's go back to our go Buster command and what we want to do is say the status codes that report the page is good do not have 302 in it so let's take all of these remove the 302 redirect and now go Buster isn't stopping immediately because it's ignoring 302 so it's treating three or two as it treated like 404 if that makes sense so let's go play around with this page we can click a button called add list delete clicking this and it looks like we Paige whenever we're cleaning things clicking anything a URL isn't changing which is annoying because if we click back it doesn't it brings us all the way back so let's go investigate exactly what's happening with Burke so Turner intercept on with this is foxy proxy and I was just making sure the intercept button says intercept on and let's click a button so let's click delete and we see making a post request and deleting list number four because I clicked on delete on list four so if we Ford this will then do a post request to dir read PHP on dot list so before this and get this so let's see what is in dot list so because we did a directory agreed on this file we get four or four forbidden so let's try dot list slash list one four three forbidden everything is doing 403 forbidden let's try a list one dot HTML so doesn't look like we can request request that page so let's go in HTTP history let's see we have dir read file delete so let's just click around see if we can get all the PHP scripts if we go to target this would be a better way to view it then HTTP history so click around this page and see what happens click back click adhere new item delete delete' here let's go back to history and we have four different files file write file read file delete and directory read so I'm going to click on each of these and press ctrl R to send this into my repeater tab so sending all them in and then let's just rename by double clicking up here this is dir read - is going to be file delete three is going to be file read and four is going to be file right okay so reading files oh this is a get we want post request so delete these go back to proxy oh it's my target file delete what it send the get request that was odd okay maybe I should just make sure I click it there we go and let's do the last one follow right yeah okay so now we got post request everywhere so let's redo this rename so let's do file read and then seven which is file right so I want to read like Etsy passwd because that would just prove we have directory traversal so I'm going to change file to a bunch of dots lashes and then Etsy passwd click and go let me get file false so press ctrl Z we get list 1 file false list 2 + 3 so let's look at what directory read is real quick on list so list one and list two exist file read list one list two and list three does that exist so I'm not exactly sure how this is reading files but if it exists we are getting something back so let's try file is equal to file read PHP can we read our self and the answer is yes so we're getting the PHP source code back it looks a bit ugly so let us pipe this into a tool in Cali called JQ to read json strings so if I do curl - s HTTP ten ten ten eighty seven slash was it file read PHP - D for data and we want to send file is equal to dot slash file read PHP so file is equal to file read dot PHP and we get this back and I dunno but does have something where we can whoops copy as a curl command but it puts so many flags here it looks ugly and I don't like that what I'm playing with it so we can pipe this to something called JQ if you don't have this this is in the app depository and then if we do - or for raw and then we just say dot and then select the object which is file it will print it out so we can easily see what this script is doing we have if the request method is post set file content to false set the header and if post is set do this I'm guessing down here let's see file content file so down this if chain if the file set we're setting something here and at the end we're just echoing that file content variable so that's why when a followed doesn't exist it's getting false so let's go down here we have a sto replace dot dot slash dot dot backslash and replace it with nothing so this is that blacklist feature that we had while we couldn't go into Etsy passwd now the issue with this is sto replace this isn't recursive which means it's only going to run once so essentially we have dot dot slash sto replace says nope get rid of that replace it with nothing if we do dot dot slash within this dot dot slash st replace will run against a string remove dot dot slash and create a new dot dot slash and it doesn't run it again to remove all repeat occurrences so let's test this theory out by going back into burp and let's try file read and let's do dot dot dot dot slash and put two slashes here so again it's gonna remove dot dot slash leaving dot dot slash so four dots just copy this I want to say it's four dots one two three four yep so do a few of those then Etsy passwd and we'll see if it reads this and there we go so if we go back to our curl command and say dash D followed read let's get rid of this copy this paste it in we can see now we can read Etsy passwd and again sto replace is going and just removing this this this this it removes all the dot dot slash is creating new dot dot slashes it's a bit inception but that's essentially how it works and again if we just do this again we're gonna get false because it removed all this so we have a way to read files off and server so let's test that out with the directory read so we got path and dir read so I'm just gonna split the pain that's going to make it a little bit easier to use both file reads and directory reads so this will be dir read and this is path so get rid of all this and say path owner and this is not a jQuery just returns an array so just pipe it to JQ and we can see the pretty response so let's do four dots again two slashes and we'll go up one directory and we can see we're now in /var so very dub-dub-dub let's go up one more move up so we can see all these directories and we see a dot doc or n file which means when a doctor environment so let's see other things we can read let's try going into the home directory we can see there's a nobody user so let's go into nobody there's a dot SSH and a user dot txt flag let's go into dot SSH and we have a looks like authorized keys file and monitor so let's look at dot monitor if it turns false let's try a file read command against this copy this paste and we get a SSH key so let's copy this let's name this as monitored SSH paste the key chmod 609 I s SH - I monitor at 1010 1087 whoops I need to specify the file monitored SSH and we get permission denied right away so let us try a file read again and go to passwd I'm just going to press ctrl R to recursively search my history and we have to add these dots so add all this and we can see what users exist we could grep this for not know log in and we'll see root has the shell a sh there is a operator user a Postgres user and nobody user we got the file out of home nobody so we can try that so SSH - I know buddy and we get a shell and it's Alpine Linux which is common with dr. let us just try all the other users so let's try Postgres denied operator denied and let's try root denied so we get denied with everything except nobody so we could get the user tax we can read that if we go to slash root we can't CD to / root that's what it doesn't say permission denied I guess it's just an Alpine thing there we go permission denied there the first thing I wanted to do was just check what port 8 8 8 8 is to see what's happening there so I'm doing netstat a n LP grab 8 8 8 8 and we see we are listening on every interface what 8 8 8 8 and the odd thing is I'm connected to that port 10 10 14 - that is me and it's connected via port 8 8 8 8 when we just did an ssh on port 22 we can try another ssh so confirm this is us SSH into it so nobody at 10 10 10 87 and now we'll see two of my addresses are connected to this board which is odd because again we're supposed to be connecting on port 22 so that tells us the host is routing to this box so we're going we make the TCP request to us to two and we go to 10 10 10 87 well it'd be us dot some ephemeral port to 10 10 10 87 22 and then that silently fords us to the doctor if we do if config which is 172 1701 and that silently forwards us to 172 17 let's say 4.1 we'll just say I did a t-888 so that's the logic that's going on it's also odd to see that the doctor container also has access to 10 10 10 87 so if we do netstat dash a Ln P let's grep for list to see all listening ports we see 80 22 it ate at eight and nine thousand so let's check what 9000 is real quick netcat localhost 9000 get /pun so not sure exactly what is listening here let's try localhost port 22 and we get ssh 2.0 something debian so this is a different host banner than on point eight eight eight eight [Music] huh I thought it would have responded with the gist OpenSSH 127 zero guess it doesn't so anyways we have SSH open on port 22 so let us try to let's go back just a little bit and enumerate the SSH banners because I want to show that so let's do netcat one 2700 one what 22 and on this host let's do netcat ten ten ten eighty seven twenty two so that is proving that we're doing something funny with routing on that box what I said before because what 22 on its external interface says the banners ssh 2.0 OpenSSH and port 22 internally has it as debian and we know already the box is alpine and not debian and we can confirm this by going into SSH SSH is config let's cat sshd underscore config let's do grab - v4 anything beginning with a comment and then grant period to filter out blank lines and we see SSH is indeed listening on port 80 8 8 8 so let us go into your home directory again SSH and then there was that dot monitor key file so let's try using SSH - I dot monitor on one 27001 as nobody click yes permission denied if we cat monitor we just get RSA private key if we can't authorize Keys we see the user is indeed actually called monitor so let's try specifying the user monitor and we get into yet another box it prints a big picture of Waldo and we see an hour bash message here if we do CD /bin or something we get path through stricted we do bash command not found so let's do echo path to see what a path is and our bash is restricted bash so went in some type of restricted shell and it's black listing a lot of the commands we could probably run anything within our path so if we do LS home monitor bin we got LS most red and our Nano if we'd look in app dev we have a few files and if we look into app dev be 0.1 we have one file so let us look into the permissions on everything to see if we can write any executables so these are all symlink t' we do LS l a on bin LS we cannot write to it it's owned by root root read write execute or not so let's try going back to a path LS la hermana app dev looking at this we most likely can write to monitor as long as our group is mandra if we do group we don't have the groups command or Nano on Etsy passwd we can see mana is in group 1001 so let's do let's see I think groups maybe its group there we go and let's look for 1001 let's see 1001 is mana so we are indeed in the monitored group so we should be able to write this file which is executable so if we execute this blog monitor doesn't really do anything but if we do nano on Den Bosch we can let's see do control Oh wasn't let me change this that's weird let's do restricted IDI right - was it app dev slash log monitor then quit this we do log monitor now we get dirt colors not found we do CD slash bin we can see we have now escaped the shell because we're no longer in or bash if we echo a path the past is still the same so we can't do like anything that's in bin so if we type bash we get command not found one way to fix that is just echo a path on a normal Linux box and let's set it so if we copy this and then we say export path is equal to this and now we no longer command not found so well in a good shell so the next step is to do a Linux enumeration to find out exactly any known misconfigurations I guess you could say so let's do CD upped when a new Python M simple HTTP server and let's curl 10 10 14 to Fort 8000 when a new message pipe it over to bash and we'll see it running through so looks like we're hosting docker the first thing I'm going to test is my groups to see if I'm in the docker group because if I am I can probably do a probe ask that way but I am NOT in the dock group I'm just in the monitor group so let's go through this and see what there is so we have thorough test is set to disabled this is gonna be pretty key general information it's compiled relatively recently probably when this box released so I'm not gonna look into kernel exploits hurts names Waldo we can see a group information SSH group memberships we can look at like if any group is in doctor or something so Steve Bluetooth net dev plugged a video dip audio floppy cd-rom Steve so I'm not really seeing anything that indicates I should be switching to users because everyone's kind of in the same boat as me it's possible that there may be like a set UID binary and Steve's I'm just not saying because I want to Commission it into his home directory but no easy prevx there let's look into Etsy passwd this is that permissions on home directories looks like I may even go put a list Steve's directory so we can see if they're set UID binaries their environment variables path shelves new masks bunch of things not really too interesting krons look all default systemd timers all the default ones networking or piss tree running processes binary positions and nothing too interesting so if we go into home let's just look at Steve nothing there interesting appdev nothing at all interesting the key thing though is it said thorough tests were disabled so let's go and edit linen oom and turn thorough tests on and there's nothing stopping us from just saving the scrip to the OS and passing the - T flag to include thorough tests but I don't like touching discs if I don't have to so I'm just gonna edit this script to always include thorough tests so let's look at how it does this and we have if Thoreau then thorough test enabled we look down here if Thoreau is equal to one so let's just yank this with why go to the top put and let's make Thoreau always equal to one there we go save this Python - M simple HTTP server and let's go run this again so curl when a new pipe it to bash we have thorough test enabled and it's going to run a lot more checks if we wanted to see kind of what checks it runs we can always go into this directory grep for Thoreau is equal to 1 I think that's how they had it let's try this on when a new message let's look at this again Thoreau once that if statement look like let's just grab the Thoreau that would be much easier so gripping for Thoreau when you get a bunch of things we can do - capital a 5 to show 5 lines after every time Thoreau is referenced and we want to grab this echo statement that is in very places so let's grep for echo and let's get rid of these just backslash and newline so grab - V we need to put the dollar there just single signify that's end of line because some of these that actually print good things have backslash ad in them ed here we can probably get a rough idea of all the thorough checks this may not be complete because it could have happened after five lines of thorough that prints it but this should be a good starting point of just identifying what type of things it does so word readable files and slash home home directory SSH keys set UID files set GID files POSIX capabilities just does a bunch more checks so let's go over here and just look at the output so all this stuff we have seen consummate C past every D we've seen permissions and home directories the files not owned by user but writable by group I think this is a thorough check I wish it would tell us like t : or something to show it was a thorough check but we can see the file we had modified to break out of our bash we can go down let's go to like set UID by is cuz there's always interesting see what can execute as root don't really have anything interesting these all look default this one says potentially interesting this looks like a default SSH file potentially interesting geo ID I wonder how it finds this what's that logic like well that's less Linda new let's do it in vim so we have syntax highlighting possibly interesting let's see so it's got a binary list so somewhere we have yep and Matt pearl so it has a bunch of interesting binaries based off of get the Frick out bins so these are ones that you can use to escape shells so that's why it's interesting I wonder why SH is interesting was it was it here interesting ssh agents i actually didn't do this when i was going through the box cuz GTFO bins came after when i did it so let's see what that is we Google that was weird let's disable this GTFO bins go here what was that foul name ssh - key sign what is interesting about this we got shell oh oh it's flagging it because of it SSH is in the binary name so that's why it's getting flagged so it's not really that interesting SSH - key sign and SSH - agent no binaries matched but SSH allows for shell we'll follow up blue file download file read so just a good way to find interesting binaries and that's what it looks like this Landon oome script is doing now pretty cool to see that updated so going down we have files with POSIX capabilities set and this is not new but many people don't really utilize this these capabilities are like granular permissions and Windows or just granular permissions in general so if we wanted to do something like give a user the ability to run TCP dump but not give him the ability to run that as route we just wanted him to be able to bind to sockets you do that through this capability and you do that because if we go back to this TCP dump has a way to execute commands so yeah so that's why you'd give them the capability to only bind to the socket so if they did that with the gtfo bin they wouldn't be going as route which is how it would work if it was set UID so we can see the file user bin tak has the cap DAC read search and the current user has this capability assigned to him if we wanted to go more into capabilities we can just type man capabilities and we'll get a man page for this so wills it cap DAC read search we can see this capability allows us to bypass file read permissions check directory and we can execute permissions so it's telling us what we can do with it so if we go back we can do use a bin tack so let's try this this on Etsy shadow and it reads shadow and reverses it which kind of makes sense because tack is the backwards cat in Reverse so if we do slash route it's a directory invalid argument if we did route and see if SH authorized keys exist it doesn't we could do route txt and I don't want to actually print the contents of that to spoil it so we can see we do have read access to this so that is the Box there are a few things I want to show at least one thing I want to show is a different way to get out of our bash so let's go all the way back here and to where we were SSH into Waldo so SH - I monitored SSH 10 10 10 87 we have to do nobody here and let's actually do a tunnel through this so let's do - capital L listen on port 80 22 and would direct that at one 2700 122 so now if we do a new window and we look at what's listening on our local box a LNP grep 8022 we see we're listening on 80 22 and that's going to send it through this SSH connection and only return end it's going to go to one 2700 one which is itself on port 22 so if we do a netcat localhost 8022 we see it's that banner we get if we do netcat localhost 80 22.8 went to 22 and if we did 8 8 8 10 10 10 87 that's why I wanted to do so now we have a tunnel set up to go from a box through the docking container to 22 on the host so let's do SH - I monitored SH and let's do monitor at localhost 8022 can't do it that way that's specified - P for port yes and now where SH tin - we're at this our bash thing so can't get into bin because it is restricted but if we look at our profile let's do our nano dot bash RC go all the way the bottom we can see this is where it's setting a path in restricted bash you can only execute what is in your path so and we can't really change a path because it's read-only in our bash so if we put a path anything we can't change it but because this file only gets executed and ubuntu debian if you have a pseudo terminal assigned we can actually bypass this check and then after we do it we'll dig into exactly why that is so exit this will echo path we can see what a path is and if we do echo path has just a command we can see our path is user local bin and a path when were on the box with an interactive shell is home on red bin so if we just echo bash here we can do Ella CD slash bin LS and we're in the box so if we do Who am I will monitor if config IP addr we can see we're indeed on Waldo and we have bypassed our bash it's a little bit annoying because we don't have a terminal assigned to us we could do the Python - C import PT y PT why not spawn bend bash thing whoops in bash and get a terminal this way or we could just do the - T flag in SSH let's see if it's actually in the hell let's see is - T here doesn't look like it man SSH - t - force a pseudo terminal allocation so if we do - T here with bash we get a terminal and we have bypassed it the weird thing is if we look at a path because we got a interactive shell it's set a path to that bash RC file but if we echo path and let's just copy this and we'll export path is equal to this because we're not in or bin or not I've been or a bash then we the path isn't read-only and we can just escape it this way and this works because if we go into Etsy and look I think the pass goes or how it loads it it goes to profile VI my bad and then this will execute bash RC and if we look at bash RC v Etsy bash bash RC we have this if this ps1 variable is empty return if you're not running interactively don't do anything and ps1 is the prompt string so if we look at Echo ps1 we can see what that looks like if we exited this all and just did echo whoops echo ps1 we can see there is no prompt string so that variable is empty it doesn't execute the bash profile which allows us to execute bash with in restricted bash and bypass that hopefully that all makes sense take care guys