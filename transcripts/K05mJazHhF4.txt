 hey guys what is going on this is if second since hacked to Boxey you retired October we will try to do a walkthrough on October and I say try because this is one of the two boxes I did not want to get retired because it does get pretty complex and especially when there's easier prey that's out there the previs if you're a sadist you will enjoy yourself if not my apologies will try to get through it before we worry about print ask let's get a local shell in the box so nmap - sv to enumerate versions SC save scripts oh eh all formats name that and map and the IP which is ten ten ten sixteen not going to run it because it takes time instead i have the output so n mascot and map we see it's listening on port 80 so going over to that we see october CMS and just scrolling down we see 2017 i like seeing this in the copyright because most times it's not automatically generated so we can have an idea this software is up to date the other thing again october CMS so we can do search spoil act Oberer and we see one exploit for ease of viewing i have just loaded up NX boy DB we also see the date is 2017 so there is a good chance that it is vulnerable going over into this page let's look at what exploits are so we have a PHP upload protection bypass for authenticated users and it looks like you can upload like dot PHP five files because it's only restricting PHP PHP three PHP 4p HTML next one upload HT access as can be another authenticated stored wci and image name or Sena gated or sonicated I'm just looking for it on unassigned gated because that's the one I would go for first five authenticated authenticated authenticated so we have to get login to this box before we can do anything the other thing I want to look at is is view forms we see it is you the vanilla form system I believe it is and if this ludes yeah vanilla forms I believe that's what I have yeah and we see there is a exploit and 2017 for these forms going into this it is going to be a PHP mailer exploit and before we go running this and just testing out we should find a way to verify the version is vulnerable and this isn't going to work but on most platforms it does work so we know it's a 2000 through a 17 exploit and we know we assume a form is from 2017 so what we're going to do is Google vanilla form download and just download the source code because it is open source so here's the latest one we see 231 updated critical issue and PHP mailer so copy link location go to a terminal will main this vanilla okay and then we can guess that two three zero may just be 2.3 have to do it W get and it saved so let's just verify that the different files with md5 sum they are so what we're going to do next is make two directories oh one directory and put two things in it and we'll just do two directories sorry about that ah 3.0 3.1 go into 3.0 unzip start that flash oh it doesn't have a zipped exception on this is that normal there zips nope not normal download font now there we go w get and two three copy link W get okay the j4 one is two three so unzip j4 cd3 one unzip okay we got both the forms unzipped and we can just remove those zip files now so the next step is to do md5 sums on every single file in here because we want to see what files have changed so we're going to find dot dash type for file - exec md5 sum and that should do it yep the next thing is if we do Swit by unique this will be a difference in the string so we want to remove dot one and dot zero so we're going to type that - said F then zero one and now we see there's no more than 0.1 so now we can sort this you count the uniques yeah speed this up puts this into a file code hashes so so it hashes count the number of uniques in them and then sort in reverse order we see there's a lot of difference in a lot of these or dot PHP files and since we can't see the source code of PHP files let's exclude them so before we do this unique we're going to do grep - V dot PHP and terminate the string and we see there's only one two three four files that change hashes is something we create so the readme changes and the vendor composer license changes so what we want to do is see if we can access read me on these October forms so form slash readme MD no try to go here no it doesn't work unfortunately because this is composer and composer does not expose those files I believe that's the reason but use this technique for numerating other software versions Java scripts a great one that changes a lot but since the only changes this version was to fix that vulnerability it's not going to have many files that change so we could keep going down that exploit rabbit hole and trying that since we couldn't verify if it's vulnerable or not but we could also just try stupid things so let's Google October CMS admin log in and go into the first link don't have it so we see localhost / admin flashback end if you do busted this it would have told you there's a page slash back-end but I accidentally deleted my door bust wood derby or WWF OS but if you do some googling you'll find slash back-end is a login page to October and we're just going to try the username admin and the password admin and we get in so now all do CVEs that we have found what's a negated so we can exploit these the first one was a file upload so that's the one we're going to do we're going to upload a file and I'm in my op shell folder I have CMD dot PHP 5 and let's do this base bead River shell we don't need to get a full TTY just yet so upload this and let me go see what's actually in that directory CD up shelves PHP cat less PHP reverse this is a default one on Kali so there's my IP and I'm sending it back to port 888 if you just do locate PHP reverse shell dot PHP you can find that file and a few directories so NCL v NP 8 8 8 and when we call this october and when we go to execute this file we get a reverse shell so now we are ww data on this system if we run like linux probe check or any of the enumeration scripts it'll show there's a file with a set UID bit and I'm just going to search for that right away what set you ID does is allows the program to switch to the context of the user that owns the program so that's kind of how sudo works or on one second let me just type because this could take a few seconds to run yep that will search the whole system for set UID files so that's how sudo runs sudo is owned by root so it can switch to the context of any user because it has that set UID bit paying fuse mount su ping 6 all these do these programs just don't allow you to execute shells or execute code if there was an exploit and say ping then there's a chance you could go to route because root can run ping ping can escalate to root because it has a sticky bit set hopefully that's explained if not just google it and hopefully this shows us the path shortly I know we're going to have to send a file back to us so let's go back and whoops look back to for October so NC - L we want to send a file we'll do 9 9 9 - P I'm going to send this to ovo FL I believe is the file name this doesn't matter it's just directing the input go left October and we can see this binary this one out of all them looks a bit different because user local bin ovo SLW what the heck is that doing so let's look at it sending this back to my box so NC 10 10 12 194 put nine nine nine I think this is the correct syntax and we'll direct this I forgot a - wait five crap this may not work NC - w5 I think it is ten ten twelve 194 to specify pour it on NC or try not nope okay NC and that cat a good n CNN cat a completely different binaries same purpose and the flags get mixed up so sometimes that gets confusing so let's just make sure we have the full file 0e Edie first two last two general with some if there's match we should be safe 0e Edie okay so we got the file on a Cali box the issue is this is a 32-bit box and Mike Ali is 64 and the different operating systems etc so if we cat at C LSB release we can see this is Ubuntu 14.04 trusty and if you want to do exploits debut try to clone the client as close as possible just because Wes things will change so I have built a Ubuntu trusty image but let's go if config Ison - M simple HTTP server so we can easily send this I do that mistakes a lot M instead of n I don't know why copy this Ubuntu and this is words going to get difficult so we have to download this binary 8000 go V or FL I think I called it yep let's just move this into desktops fine for now md5sum ovo fl0 ee d good we got to make that executable okay so we try to execute it it says it wants a string give it a string does nothing if we do paesan c print oh my god I hate doing this live a times 200 maybe no I escape something that I probably didn't have to oh I was reading at backtick wrong this will be easy print a times 200 and entick there we go and we see a segfault so we have an overflow as the binary indicates and the very first step is to identify exactly where this crash is at so if we open up gdb and I have PE d what is it PDA installed Python exploitation development assistance maybe but it's going to change the Alka my gdb I would highly recommend googling that and installing it so we can prove a flow be main run that's what this program does is makes it so much more easy it's like the Mona the Linux I guess except it does more so we're going to rerun this with Python - see print a times 200 and end continue and we'll crash we stopped at for one for one for one for one and if we do Python see friend 0x for one oh my god for one is a that's what you need to remember I'm there we go oh that was embarrassing but for one is a so we crashed it with four A's and if you want to know why I will explain it in a future video where there's less stuff to get through but hopefully you have a basic understanding of how buffer overflows work we just over wrote the stack with forays the other thing we should have done first is check sack and we can see that NX is enabled and this is depth so we can't just drop shellcode on the stack and then jump to it the other thing that I probably should have done back on a shell is l DD crap LS / lib LS / lib /i 386 - linux - gnu I really hate not having tab autocomplete let's do that real quick Python C + PT y PT y dot spawn I can't do this in a tea mug session open new terminal NC l VN p 888 listening okay go back got a shell Python - C input PT y PT y dot spawn then bash yes okay sey for all - echo foreground this and I got a border collision awesome LDD /lib / i386 lib see 0.6 grep for does it fits my want no I just want to do on overflow and grab the web see I'm getting ahead of myself use a local then LBD overflow grab system grab web see there we go so we can see the address of web see is changing constantly and that is ASL whoa okay that's why I want to show you hopefully this video works again I hate doing edits and there's a lot to this risk so we know ASL was enabled on the OS it's not within this binary that is enabled so we can't just jump to shellcode so the first thing is to check if a SLO is enabled all my host so ldd overflow graft Lib C and we see it is so I'm going to disable that so we echo proc to echo 0 to process kernel randomize VA space do that as root and now my Lib C is always going to be at the same spot so we don't have to work around aslo right now which is going to help us the next thing we have to do is identify where the buffer overflow actually occurs so to do that we're going to go back to a Kali box because I don't have the tools on my other box and let's see pattern OOP so we're going to locate pattern underscore on Cali we see create an offset then do create what oh do it one two one there I think that one requires being in Metasploit go to the one in user share there we go - H for usage so we want one with let's just do two hundred lengths and what this is going to do is generate us a complete unique string so no matter if I was at these four bytes I could know exactly where it's I forget the name of the string but it's a pattern that never repeats so go to Ubuntu dot slash gdb overflow run past the argument we see we crash in six four four one three seven six four so go back to a Cali box offset look at the help we want to query one one two so in a hundred and twelve bytes that's when we start overwriting a IP so go back to a Ubuntu XSS and we can start the buffer overflow pie script import struct and we want to buff equals a times one one two and then buff this is what we're going to overwrite the stack with and I'm going to just start putting code here struck that pack little endian format and see if I type this right co x pc b 0 d 3 what I typed up here doesn't matter if it works well you'll see what I did it's just I guess a small joke gdb overflow again run Python both PI and we have a crash and where I type dead code so we know that's where we get to over iTIP and we can start directing code the next thing to this exploit is we're going to do something called return to Lib C because it has the depth protection we can't just drop shellcode and execute it but we can drop the memory location to the system syscall and linux and then have that pointed to a string that we control were found to execute the code so we're never executing code off the stack we placed we're just making a instruction appear out of thin air in order to kind of understand how that works let's write a program in C and it sounds a lot tougher than it is but we'll do rent web C and include stdlib.h void main system and SH and I forgot semicolon simplest program ever it's just going to call the system command because all we want to do is kind of see how this looks on or within the assembly so now we can compile it with GCC rent Lib C and - out Bret Lib C and then when we gdb it we can see exactly what is going on so so I'm going to set a breakpoint on main run and go to instructions we're setting up the Cisco so if we look at this address this address is going to be slash bin slash at Sage and what we're doing right here is just moving this to ESB which is the top of the stack so one move one step and we pop that address on the stack which is been SH then when we call system it's also going to put another dress on the staff the exit code and this is where the program is going to go to after this command runs so the siskel takes two arguments from the stack the first one is going to be four bytes long it is the exit address the second one is going to be four bytes long and it is the memory location to the string you want to execute so again we're not executing anything on the stack we're just placing pointers on the stack and then saying hey use this program and run the pointers on the stack if that makes sense hopefully it does so that is how the return to Lib C works we have a SOA disabled on o'connell so our next step is to start building a Python script so I don't know why egg is good gdb but go back into it and in order to do this we need a few variables so oh I know I did this I want to open up t MUX T MUX new - f HT be put this half this way okay v12 PI this is a skeleton script we had just to execute the buffer overflow with dead code and now we want to run gdb so we will need to get the memory address of system so print system on gdb and we get this address and we can put system address is equal to straw pack now okay the next address we will need is we will need the address of bin SH somewhere in the program so we're going to do search mem slash bin slash Sh didn't find anything are we running yes we were search for them M H there we go and we see it in Lib C so all we were looking for is the location of that string within Lib C so we can do argument address Z equal a struct pack I okay and we also needed the exit address but in reality this doesn't matter so we can just do struck pack let's take this so this will be our new overflow so we can add these so buffer address plus system address offer plus exit address and buffer argument address so when we run this program overflow paysanne plus dot pi exit address not defined EXI t Oh plus equals here there we go sec fault that's not good what are we missing so what we can do exit gdb overflow run Python boss PI guy do plus equals here plus a12 system exit argh yeah so I didn't break lanes so let's restart this break main run Python buff pi it just says main we want to I believe this where the puff of flow is occurring maybe so we got here looking at the stack we have this which should be system and this let's go back to my place on code I don't know what I did to get this address I think I copied something completely incorrect so this was system is I have no idea what went there and now we got code execution there we exit and it's seg faults because we're pointed back to a spot that doesn't exist if we remove PETA from a thing real quick and just do regular gdb it's easier to see run that should be fine fights on 12pi so we got the shell in the program and then we exit it's a quotes on dead code so if we really wanted to we could edit a script and go back here pee exit take this memory location and drop it right here and we probably won't crash now LS who am i exit and it doesn't crash so as you see anything can go in that exit address it's just how the program will handle itself crashing I guess you can say but now we have to get into the hyper and bypass aslo because this exploit won't work because it's always changing the location of everything so let's sudo back to root and we'll echo to there to an SL back on and now when we do ldd on overflow threats for system websi we want to get for we see lib see changing again but there's one thing as specular is it's not changing by that much all then begin with these three zeros or end with those three zeros and stir it with b7 most them have 5 some of them have 6 and then this byte is really the only byte that is changing that much so each bit is 16 possible values 16 times 16 is 256 so it's 256 possible values that this could be and it looks like two possible values the one to the left could be either 5 or 6 so if we're in this program 512 times there's a chance a good chance that we're going to hit this address and we'll know exactly where Lib C is and that's what they call brute forcing ASO uh this doesn't work on programs that when you crash you don't have another attempt but for this one it will do just fine because we can crash it as many times as we want so let's get back into an exploit script what we have to do is find a few addresses so first we have to know or assume where Lib C is and and we no longer have to do this on a VM we can start beginning to do this on the actual host and we will to save time so we're going to cat exploit script we have so far copy it and go to our VM and why isn't that going fullscreen view full screen view full screen there we go okay so we're on October here this window and we're going to go to dev sh m because that's a temporary file system if we forget to clean up in the system reboots it cleans up for us so we're going to name this buff pi paste our script exit out make sure buff PI runs and it does so what we need to do is we need to get the location of where Lib C is and remember it changes every single time so going here we can do LD d on user local bin I don't have it there overflow grep for a system lock system I need a grip for Lib C grip for Lib C and we can do that a few times to show that a SLR is indeed enabled and changes by those one bite there we go so 7-5 7-6 these two bytes change quite much and then you have the b7 and triple zeros so it's behaving just like a VM we just want to grab one of these Lib C addresses so we're going to grab the first one and go back and let's HM because I don't know why I left the buff hi this is an Oriole shell I don't leave good on this one first things first we have to import a library that will allow us to call a program because when we call this a few hundred times and then put a lid see base address here so we know one out of five hundred twelve times probably the Lib C is going to be in this location the next step is we have to get the system address exit address and argument address they're not going to be here but they are going to be within this program so we're going to find the offset of where system addresses so we get out of this I'm going to use a tool called read elf - s /lib I 386 web CS o dot six and I should do that with a grep on system so there's the system's offset add this so system off equals that the next step will be to do the eggs address and honestly we're not going to care about this because as we showed it doesn't really matter so regular address is equal to actually we'll grab it why not good practice at all grep for exit there it is and if that was the wrong exit again does it matter so Co X there's that now the argument address this is AB in SH that's going to be a little bit different we're going to use strings - 80 X and on the same binary so web I 386 web CF Lib C dot s o dot six I won't grip so we can show what it's doing it's just printing all the strings and also showing the memory location so now when we grab the bin SH we get the memory location 162 BAC so going back I believe this can be three zeros so that's one two one two one two one two so I think one I think that's right yep okay so we got the offsets so at byte 4310 in Lib C we're going to the system call add by thirty three twenty to sixty and Lib C we have the exit and at this point we'll have ten Sh so the sake of documenting we can say the comment there that that is been Sh so the next thing we have to do is the map so we're going to say the Lib C address plus the system offset will give us the location for the system address same thing for the exit address and I just butchered the crap out of these variable names it's been a long video guys what can I say Lib see base address + argument offset oh that should all be good let's exit out and run the program just to make sure we don't have a typo good it runs so the next thing we have to do is call this program 512 times so we do that through that process we had imported before so we'll say I equals 0 while I is less than 512 print try so we're going to say what number try it is and then increment I and then after we increment I we can call the program so red equals call user local then ovo FLW I believe it was and then pasady argument of a buffer okay and that may be it so let's try this does this work it's not incrementing I that's not what I wanted I screwed something up Marvis way maybe I didn't put the percent give this a few more seconds oh there we go we got show so Who am I root and then CD / root OS - Oh a cat fruit dot txt and there you go that is October hopefully that makes sense if it doesn't let me know and maybe I'll do more videos on these topics take care have a good night or whatever time it is bye