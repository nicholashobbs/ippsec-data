 what's going on youtube this is ipsec i'm doing open keys from hack the box and i really like this box because it's unique in the sense that use the same exact cv e chain in the initial foothold and prives but you did the exploit in different ways so it felt different so that was really cool it is a open bsd box and it abuses the vulnerability and the authentication system for ub keys and s key that was released around december of 2019 and i'm not going to go into too much detail um let's just jump in as always we're gonna begin with an nmap so dash sc for default scripts sv enumerate versions oh a output all formats bring the nmap directory and call it open keys and then the ip address which is 10 10 10 199 this can take some time to run so i've already ran it looking at the results we have just two ports open the very first one being ssh on port 22 and it's running open ssh version 8.1 no real information there the next port we have is http on port 80 and it's running an open bsd web server so this is interesting open bsd is not exactly linux but it behaves very similar the one thing to keep in mind is arguments may be slightly different and some things may not work like i don't think this bash reverse shell works on bsd so that's one thing to keep in mind and other things is like maybe a ps command and other things can be different i know with solaris which i have more experience than bsd things like psef i don't think worked in solaris at least the version i did i think it was like aux dub dub that it wanted you to run and um just things like that are a little bit different between various distros or um flavors of unix so keep in mind later on when we go do like a reverse shell if we do that that may trip us up so let's just go take a look at the website going to 10 10 10 199 and it looks like we have a just login prompt the very first thing i notice is index.php so we know this is a php web server so what i'm going to do is run go buster so go buster dir dash u htp 101010 199 w for word list we're going to use the opt set list um discovery web content raft small words dot text and then dash x for arguments we're going to add php because we know this web server has php files the other thing i want to do is dash o for out file and i'm just going to call it like root.gobuster there we go so now that that is running we can go take a look at this we can try logging in with defaults like admin admin and we get access denied we could try like admin open keys and get access denied so at this point i want to send it over to book tweet so we can play with it a little bit so i'm going to go to burp suite proxy make sure my intercept is on go with admin admin login and then we're going to try for some quick sql injections and every time we get a failure it says access authentication denied so that is the thing i'm going to look at i'm going to look at the number of bytes that come back 5 2 1 1 and then also the error message so i'm just going to put this in the search so it always says match found so between admin with a single quote admin nothing admin double quote the bytes are the same and we always get the same access denied message so we can try the same thing with the username and we're getting the same behavior no matter what we do so nothing really there i'm going to be doubly safe and i'm just going to copy this to a file so we can sql map it so i'm going to go into my hdb directory then open keys and we can call this login dot request and then run sql map dash r login dash request dash dash batch so now we have two things going on in the background so going back over to our go buster output there is a slash includes directory which is interesting so i'm going to take a look at that directory um let's go to burp suite turn intercept off and go to slash include maven includes um the 404 error message also tells us it's open bsd if this was a production thing i'd probably remove any reference of it being open bsd just because if the attacker can know what os you're on it could be bad i know that's kind of like a security through obscurity thing but i mean anything that slows down an attacker is good by me so i'm just going to download this swap file and i always like downloading things in wget because i know how wget behaves most importantly um wget preserves the um time stamps on the file and this is not a good case because it looks like all the time stamps are very recent but if this was an image i think it would is there an image on the server i can share this with i'm sure if you go to ipsec.rocks and search for it you'll see it but this is a off.php.swap and dot swap jelly means it's like a vim swap file i can run file against it and we get confirmation it is a vim swap file it's a little bit unique because vim swap files normally begin with a period this one does not the user is jennifer and the host is openkeys.htb and it's located at ver www.htdocs includes auth.php so this is another small thing about knowing its bsd because this is the default location to store web files in bsd if it was linux like ubuntu it would be verwhtml instead of htdocs so just one of the small things that can affect your payload i'm going to try to recover this file so i'm just going to open up vim and do colon recover auth.php.swp and then i'm going to hit q and we can get access to this file so the very first thing it shows is there is a potential command injection so we have cmd escape shell command and then it's executing this check off binary it looks like with username and password so escape shell command is going to prevent us from doing things like that to get code execution or backticks i don't know if this would be vulnerable to anything that's a relatively safe way to escape shell commands um it also will prevent like semicolons and things like that and then it just runs system against that and then return return uh yeah returns the return code this is the active session um we see it using the php session variable nothing too interesting there um let's see is there anything here um the session it's using request so we can provide username in three different places we can do it in the get request the post or in a cookie because the php request does all three of those and that may be interesting later on in the video spoiler spoiler so the main thing i want to do is check out this binary so i'm going to go and go to slash auth underscore helpers and check off and we're going to save the file i'm also going to just go to this directory to see if there's any other files in here doesn't look like there is so now let's um move the file to our directory from downloads so we stay a little bit organized and we can go back and look at sql map nothing was found go buster's still running so let's go back and um run ghija so we're gonna run this and i wonder if i should update this uh this is february 2020 this is a very old version um yeah let's just update it real quick because i'm curious about something so let's go back to firefox rip suite turn off uh geeja decompile maybe would be a good one introduction giger sre.org there we go download version 9.2 save it um sudo su rm up gidra rf cp ipsec downloads that has is that done it is done slash alt and let's go in here and unzip giga so once this unzips we can run it and you may see why i'm getting the latest version it's a little bit of a spoiler um this probably won't decompile it as good as we want so i just wanted to show that because this burned a lot of time for me when i was trying to reverse this binary because i've grown very accustomed to having a good decompiler that tells me what i want to know instead of going back to the assembly and when the decompiler fails i just go and freak out a little bit so let's just try this um file a new project sure the home directory project names check off finish open up this little guy the dragon i don't think i've ever done the two feet i don't know exactly what that is but let's go here where's htb and then we want to go to um open keys check off okay and i'm gonna check everything to make sure it runs everything analyze it now yep select all analyze okay so we're going to wait for this bar to stop it's a very small binary and we can look at the functions and where is main and we can see what main does so if there's not three parameters i'm guessing it's going to exit and if there are three parameters it's going to call this function and right now we have it just saying an infinite loop and does nothing so this is the guido decompiler failing us and we're going to go to a different decompiler but when this happened i got really confused i started digging around all the functions to see exactly what happened and i also um did an md5 sum on this file so we do md5 some check off and i went over to virustotal to see when this file was first seen so if i do virustotal.com we can search for an md5 hash and we can see some information about it like the first time this was seen i think that's the first time seen nobody down here um there's undetected details so let's see first emission july 25th around the time this box was launched so this is telling me that this is a unique binary to this box and um something we should look into more the next thing i did was strings it and this is honestly all you have to do if we strings it we can see the c files that it came from like test.c another indication that the author created this um he hasn't stripped the binary so we have that type of information and auth user okay is what we needed but i didn't really pick that up because i mean that's kind of like a long shot to just google and look at random things in a string um i used a different application to decompile it and i use cutter which is part of the raider framework or radar i don't know how to pronounce it but that's not it cutter.re is the good site to download it so let's download it and look at it and this program actually supports two different d compilers which is awesome um i think ida will also decompile this binary pretty good it being bsd just throws it up throws things off so chmod plus x downloads cutter so if i had a paid copy of ida i would use it let's see let's open the binary i'm in the wrong folder right there we want to go to uh open keys and then check off and then open and we can choose what level of analysis we want we can analyze everything i'm just going to leave it at aaa i think that's fine if you go to my radar videos whenever i open a file up i do aaa and this is just like any thing you'd be used to it does have a graph view if we want to look at that we can make this bigger and pop it out but it's not too important i'm going to go to the window and we want to add decompiler so let's see going to do this it's not what i wanted on the side there we go so now i have a 2d compilers that's not what i want let's see not a hex dump the graph view could be good see can i put this down below moving windows is a pain there we go that'll be fine enough maybe if i can change this up so now we got a graph view a decompiler and disassembly so this is super handy um we have the same function can i make this font bigger for you all i don't know how many layout that's nothing view layouts edit preferences appearance sweet font size let's do this okay that's a bit bigger a bit of a pain to look at but we'll live so we can either look at through the graph view which people may be comfortable with and this one's definitely a exit and this is doing something we could click down here and kind of see where this goes it shows us the disassembly and decompiler output but let's jump into this function this is the function that gija told us was just an infinite loop so double clicking this it's still going to be a bit weird because this decompiler is not doing it correctly and if you're getting the ghidra the decompiler output is in this bottom right so this is what giger said and i'm going to click it and go to r2d compiler and this is what we have so uh it's pulling the uh procedural linkage table address for auth user okay it's kind of failing to do that um we can see it's putting it in our 11 which is just a common use register for 64-bit we go into this function and we're just moving r11 to rsp and then that way it'll be able to execute the function but we're not getting full decompiler output because even this decompiler kind of goofed on this open bsd binary but it's using auth user ok which is a syscall so this was the key thing to get for understanding this binary so we can look at auth user ok we go to bsd's man pages and we can see it's got a few things name style type and password so we could also google like auth user okay bsd exploit and see if we get anything um there's quite a few like auth bypass and a bunch of things all around december of 2019 so we can look at this and let's see if we read all these there is one let's see s so this one right here authentication bypass and it's telling us if we use dash s challenge as the username uh this actually bypasses something and what's happening we'll probably go into this more in the root section but um bsd is treating dash s challenge as an argument and bypassing the user name altogether so uh it's a pretty cool cve and it happened in bsd which is hard to do because open bsd generally favors only secure code and i think this isn't vulnerable out of the box but if you wanted to use like open bsd with ubi keys then you would become vulnerable and most people that would do bsd would probably also set up to factor for um ssh and things so they'd probably be vulnerable uh i'm not putting anything really for the password um let's see can i show this quickly we can just go to this field and then name remove the password so it's no longer masked or maybe the type the type is what we wanted moved we can put the name back as password come on password there we go so you can see what i'm sending i'm just doing dash s channel and we do log in let's try this again or was it s channel what was it s challenge s channel i think is like microsoft's openssl equivalent for rdp um we get open ss key open ssh key not found for user user-s challenge so this is we're going to go back to the code when we did vim recover auth.php.swap uh this is where the knowing the request comes in handy because it offers three ways to pull files or pull variables so i'm going to turn intercept back on actually we don't need intercept we can go to repeater and do s challenge send we get 5158 bytes and access denied is not here if it's not as challenged we get that so [Music] looking for the error message whatever message do we get dash s challenge but something not found not found oh it's giving us a through to redirect and when we follow that that's when we get this not found thing okay so we can try like and username is equal to dash or let's do ipsec and see what this says what we're trying to do is get it to say ssh key for ipsec not found we did that and we just have an http okay so the script took this as the username not this and we didn't get anything so let's try adding it in the get parameter so we can do a question mark username is equal to ipsec send it we get a three or two found and use open sh key for user s challenge not found so we didn't get anything there again um we do php request if you knew what this command actually did it involves get post and cookie so we can try putting a semicolon here username is equal to ipsec and let's follow this redirection maybe it's lowercase u follow redirect wait where am i okay maybe it's lowercase u and we get open ssh key not found for user ipsec so having this with the cookie actually got it so um we have that ssh key we can go back over into this and we can look at let's see how does authenticate work it actually call it in the script it doesn't so i'm guessing authenticate is calling this with um post and not request and because it's a post request and this one is request we can have username equal two different things because request is going to override post by what we said in the cookie and the post is going to only pull the post so we set user name two different ways in this request but because we're doing it the code is doing it two different ways that's why we have this and we can confirm this is the case by um putting s channel if we convert this into or let's see i mean not s channel s challenge if we put that up here uh we don't get a three or two so just by doing this i have verified that the whatever code is calling authenticate has it in a post parameter and not request because this would still be a 302 redirect if it was using request for that authenticate command if i remember at the end of the video we will but now we have to know a user on the box and that is where a very small piece comes in handy when we look at this file command uh user jennifer so let's try instead of ipsec let's do jennifer and then we'll follow the redirect and boom we have a ssh key so i'm going to download this key and let's create that file so vi um actually let's get up my panes so we can get it out of radar or cutter get out of that get out of that there we go the jennifer.key paste it and now we just got to clean up this file so i'm going to remove that br and let's just automate this um i did colon percent s let's do br space escape that slash replace it with nothing there we go now we can do chmod 600 jennifer.key ssh jennifer at 10 10 10 199 and it wants her password because we didn't specify dash i so jennifer.key and we get logged in to the box so you remember how i said i hated like bsd linux and solaris at the start of this video well now we can actually show you some things so let's try um ps ef we get unknown option works here um i think ps aux dub dub dub there we go so that's how the ps command works now imagine we wanted to do something like echo please subscribe and we pipe it over to base64 oh base64 not found but on linux of course you can easily do that we've done it a hundred times base64 so you kind of see the difference of just some things not working right away which if you didn't know this was a bsd box to begin with maybe a payload doesn't work because of things like this i think we can do like b64 in code and then we also have to specify we want to go to dev sdd out there we go so that's how we would do that command in bsd land um the u name output is a little bit different like we look at this we have a lot more information here it looks like this is the bsd release and then i think this is the kernel version so this is saying generic uh if we didn't know we could look at man you name and kind of go through it so we could do dash r dash s and dash v to see what each thing is so system uh no release name version so let's do you name dash r 6.6 so that's the bsd version system name open bsd and dash v we get generic i don't know exactly what this is i think there's two options like generic and custom so if you wanted to let people know you've done some custom things to the kernel you can let them know this way i'm pretty sure if you compile the kernel you can also make it say generic even if you did a custom one and why you may want to do that i remember a long time ago reading a story from i want to say much of loft it was just talking about some of the weird things they did on their server in order to make it harder if someone hacked them one of the things was editing the etsy shadow like um iteration count so the shadow file it still used i think b cooked back in the day maybe it was md5 crypt but it still used that encryption algorithm for the shadow but they changed the default iteration count so if you tried to just crack it without knowing the iteration count was different even if you had the correct password it would not work because they just changed the crypto in a very slight manner making sure that the attacker would also have to enumerate what they did in that aspect so there are some reasons you may want to custom compile a kernel my suggestion is really really never do it unless you have a good reason just making that small change on the iteration count isn't probably enough because it's going to be a pain to keep your kernel up to date with the latest and there could be ods that come out even open bsd which tries to be as secure as possible does have them as we're about to find out so um yeah um the other weird thing about this is the etsy directory like the um shadow file is a berkeley db it's just not like there's no etsy shadow the file doesn't exist i think it's like master.passwd of course we can't read it because we're not root but everything's in berkeley db format there is a passwd file but i think that passwd file is also in berkeleydb format as pwd.db so um things are just slightly different in bsd land with all that being said let's go and enumerate potential exploit we kind of already have the answer because the same exploit that we use to get on the box is also a local privilege escalation so there's a lot of things we can do i'm just going to scroll and see if we have a poc if not we're going to go over to exploit db and find one going here we can just do exploit db and we want to search for open bsd and let's see do we have anything it looks like it's already sorted by date um can we say priv that's a bit less um i don't know which one it is i don't think it's ch pass let's see do we have a cve number let's see cve 2019 we got a few so 19 5 20. let's just see what this is search the cve uh it looks like we have this github repo of local exploits check this open bsd all through looks fine so we're gonna probably run this and then step through kind of what it did so let's hope we can actually write a file i'm gonna use vim and i think it's the same uh let's see open bsd dash authroute open bsd off root paste right everything looks good let's look at the start of the script it is a bash script so chmod plus x and let's run it bash not found there we go uh we have five seconds to cancel because it's gonna wipe something or do something bad um let's see trying your password is egg word grow hog drag lane do id and we root so that is the box but let's kind of explain what just happened because that probably seemed like magic uh let's see we were jennifer do we have syntax highlighting come on bim we do not um i'm just gonna download it on my box off root dot sh let's just w get it and vim open bsd all through there we go now we have syntax highlighting so we can kind of explain what's happening this is two cves so the very first cve gives us access to right into a directory where this um ub key or s key is so right now it's checking the system to see if s key or yubi key is used i don't know what sk stands for maybe secure key um open bsd s key does this say s key doesn't really say but um you do s key and then nine which is going to be the like iteration count and then this is the secret so um sequence and key and this is just a two factor thing so every time a successful login happens i think this decrements by one so the next time the system would be on 98 so you'd run sk98 and then your passphrase and would give you what the password is so that's what that is and i may say some things that are wrong in here just because i'm not 100 well versed in this exploit so right here we're going to compile an application so we're chatting to this file and then it's going to write everything below this end of line thing until we'll end a file not end of line we're gonna write everything and end a file so we're writing this c plus plus or just c not c plus plus c source code so we're defining um group ids real group id well i think that's real group id so group id real group id effective group id and uh maybe set uid group id and order sg ideas we're assigning all the group ids so um right now it's saying we're checking if we have the permission and then we're setting the group id permission and then this is just doing exec ve which is like system on the command so this is just a simple shell so we drop it to the disk if it gets the set uid bit or whatever um it will switch to the root user and then execute a command so here is us compiling it and then removing the source code setting the display to 66 i think this is just it needs to be set i don't think 66 matters i think that's probably a um star wars joke with order 66 and all it's kind of like if this was me i'd probably do 9001 so it has to be over 9001 but just has a sad display um that's essentially saying what monitor you use so this is using something with x11 and saying here's the display so we're just configuring a virtual monitor and here we're doing a like ld preload type thing or like dll injection saying the libgl driver path is our current directory and then we're going to execute x lock on our display and i want to say probably this xlock binary has set uid as root so this binary runs it pulls the libgl driver that is our shell code and then we execute code so let's see um let's go did i copy it i do not let's go here where is it user x11r6 uh stat user x11 r6 bin xlock and we can see it's a set gid i believe um so let's do lsla yeah so it's probably set gid so that's why we can do it and it's not root it is the auth user so we can't just execute commands as root we can execute them as auth with this exploit so if a group is now off success we have auth group permissions so if we wanted to we could uncomment this line and this will drop the shell where we currently are so um this will just drop a binary that lets us execute commands as off but we're already off so we don't have to drop a file so if we didn't want to redo this exploit every time we run it we'd uncomment this line and we'd have a binary that set uid to run stuff as off so here we're saying warning this exploit would delete our keys you have five seconds to cancel and then we do a check to see if it's um s key or ub key and if it's s key now we're going in and removing the existing key and looks like we're going to create one so user md5 um this is the password iteration count secret and another secret i think um sk5 so name of the user and i think what the next exploit is is it's a way it's kind of like that s channel thing we did or i keep saying s channel um whatever the previous exploit is i think there's a um cve that lets us authenticate as a different user maybe or something forget anything i just said in the last 30 seconds um let's just explain the exploit so this is gonna be the user so that's the record um here's the hashing format we're using then the sequence number just like last time we're setting it at a hundred and then this is going to be the seed and then the value expected from crunching the seed so this is like the end hash so we write the secrets to etsy s key root give it the correct password and then use our um like driver preload injection whatever you want to call it switch to the root user or switch to the auth user so this writes so this etsy s key folder probably is um writable by auth so if we do ls la etsy grep for s key and we are root right now so forgot to put g there we go we can see the auth user has um right permissions so that's that exploit so what it does after writing this is it just runs the s key command and hard codes this password um because it's not actually running s key because they've already done that before as long as these two things align with s key it's always going to say egg lured grow hog drag lane i'm not exactly sure how s key pulls the phrases but that is the pre-coded phrase for this combination yubikey the same thing they're just again writing the seed and that is it so the last thing i wanted to explain is um let's go into was it dub dub dub html it's htdocs because it's bsd and we want to look at um well remember the user thing so if we went back into includes auth.php includes auth.php um we didn't see what actually got this password variable from because we don't have this code actually executing authenticate um we do authenticate nothing executes it so that's probably in index.php so let's look for authenticate so we're setting password is equal to post so that is again why this exploit worked because later in the code we have um or username is equal to post later in the code we have it doing a request username and this so we set the username equal to two different variables depending how it's called so let's just show this real quick on our box so if you're curious um we can always play with it so let's make the dub dub dub v i'll just call it index.php so we're going to specify the file and we can say echo um get username we probably want to add a line break at the end or this is html so add a br we can do post and request so now that we have all this we probably want to close that off so we can curl index.php uh not that php dash capital s 12701 80 period uh pseudo there we go so curl localhost um let's do this actually in burp suite and i have to reopen but and i think we don't put the period there we go so no next start come on open book intruder not intruder proxy intercept is on localhost we will send to burp suite we are now intercepted go in the um repeater tab and we can play with this real quick so we could do um username equals ipsec here and we see let's edit our code real quick let's do get and we'll do post and request so you can see how this works we actually don't need the ah we'll leave the brs that's fine so we can see ipsec is here and request has ipsec if we put ipsec down here it doesn't work because this is a get request apache is not going to process this the weird thing is if this is a post request it will process what's up here i believe so we do this and now we have post as ipsec request as ipsec but if i do username equals please subscribe this populates so in a get request you can only put variables in this top but in a post request you can put them both in the bottom and the top now the super weird thing is is if we do um a cookie so let's do cookies is equal to username um thanks for the sub see did i do this wrong probably did let's see is it colon is it cookie let's see how do we do a cookie i think our code is correct i'm going to go here and let's put a thing that says cookie and we'll put cookie like this make sure we save it and we do have it actually writing but it's not overriding the post i wonder this is like a php version specific thing because now i'm baffled at how this exploit worked um let's get out of this cat index.php and we'll write it to the box and see what happens oh man this is why you always should um like explore the exploits because you just see weird behaviors the test.php write this okay so now we can just change this host we'll put this one to be target and we'll say us and we'll change the place to go to 10 10 10 199 which is the ip of the machine um method oh this is on index test.php and we can see this same exact request is behaving differently if i get rid of the cookie request now says ipsec but if we put this cookie in it overwrote it so i'm guessing this is something that is specific to php version or maybe just how php was compiled on bsd so one seven three one three and this one is seven three one five so maybe it's bsd i'm not exactly sure but again just kind of explore the kinks because that web application would be secure on a linux box or at least a prone box or parrot whatever we're using because the behavior of request the cookies is not overwriting the post but on this target box the um cookies is overwriting the post variable super weird behavior but again that's kind of how these exploits work and it's one of the cooler ones where like if this was in a test environment on a slightly different os or different php version it would come back as not vulnerable and then they go put it in prod and suddenly the code is vulnerable to something so hope you guys enjoyed the video take care and i will see you all next week