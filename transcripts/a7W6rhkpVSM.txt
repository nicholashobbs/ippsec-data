 what's going on youtube this is ipsec and we're going to do something a bit different today um i didn't prepare that much for this video hacking lz sent me an article from palo alto's unit 42 of them talking about some apt-29 fishing tactics of them using the brute retell c4 framework and i found it hilarious not because they're just using a paid c2 tool but the fact how apt 29 can be so successful for so long using the same techniques but just swapping out the tool so we're gonna go start off by looking a bunch of news articles showing them do it in 2016 with a zip and shortcut but using a custom implant then they hacked some more people in 2018 using a zip and a shortcut but this time using cobalt strike and here we are in 2022 them doing a iso which is essentially a zip and a shortcut but this time pairing it up with brettel so they're pretty much doing the same exact fishing campaign just keep swapping out the tools that are successful so i found that pretty funny and then took it as a good um time to go into reversing malware how to extract it from memory and some basic things of just what to look for so with that being said let's just jump in before we get into anything too technical i wanted to talk about the motivation behind this video because i found it interesting funny um it comes from this blog post by unit 42 from palo alto networks talking about apt 29's use of the brute retell tool now this whole blog post is great i would highly highly recommend reading it but the piece i found hilarious is right up in the beginning it's the executive summary right that talks about apt-29 and their campaign how it's attributed how it worked is it seems like it's a fishing document that they crafted using uh brute retell or actually they took brute retell's shell code and injected it into their normal technique which is how a lot of red teams would operate their technique that they use for phishing is sending this iso file that inside the iso file has a windows shortcut a malicious dll and a legitimate copy of microsoft onedrive updater so before we get into exactly why they do this which is pretty obvious in hindsight i want to show why it's funny like if we just google um apt29 lnk iso fishing we go to this mandiant post the night not so cozy which i think talks about something in 2018 and it's near the same thing um let's see is it up in this um thing let's see zip so yeah it's using a lnk file and a zip that is the main difference here so if we look at lnk i just want to go up one similarities between this attack in 2018 and a different one back in 2016 both which used the same um let's see new elements as well as the deliberate use of old fishing tactics techniques and procedures including the same system to weaponize windows shortcuts lnk files so i couldn't find exactly um this post i'm sure it's out there that says how it's packaged but they've been doing this type of fishing for what since 2016 so like six years using these lnk files and if you want to know how to like exploit an lnk file or create these if you go to ipsec.rocks and type like shortcut we have creating malicious shortcuts via powershell we're examining one right here so there's plenty of information out there to do that so the reason why they're doing all of this is because of something called smart screen in windows so when you open and execute well when you download an executable it puts some metadata in that executable as part of a ads i think alternate data stream it's just metadata that tells windows this file came from the internet now when it downloads a zip file which includes isos it can't go inside that iso and tag all those files with the ads stream came from the internet so if you give someone an executable and an email they download they click on it it may ask for administrative privileges or may warn them that this shouldn't be executed but if you put it inside of a zip or an iso they click that it opens a little pretty explorer window and then they click your executable and it runs so um it's a way around windows smart screen alternatively you could just buy an ssl certificate and sign it which would also help bypass avs but the easiest way is just these iso files and obviously it's less attributable now the other piece they have a paler dll and a legitimate copy of microsoft onedrive updater so what they're doing here is called dll side loading so they're taking a normal binary and putting a dll next to it so when the binary opens it looks like at its current working directory pulls from that dll and executes it now what this is getting around is in like sysmon or something like that if you see a program being ran you're just going to see microsoft's onedrive updater it's hash is going to be the same because you may not see the dll it's loading because if you track all those dlls it's going to be a huge like performance decrease so um also it's assigned microsoft binary which may bypass some firewall rules there's just a lot of um good things that come from i guess maybe this is bring your own land i don't know just reusing binaries that are normal on a system and doing this side loading if you want to know more about that go to my youtube channel look for the dll injection video because those two techniques are very similar so if we scroll down some more there's a lot of good information about this but the next thing i wanted to show you is kind of what it looks like this is just one i think it's just working off a shortcut which is how that one back in 2018 also worked i believe it was a powershell shortcut that would download a file then execute it but in this one we see what it looks like and i'm guessing um all this stuff is just in order to um [Music] hide right because we see these are kind of grayed out so these are all hidden and the shortcut because it's in iso i think you can just give it a custom icon so if someone clicks on the attachment opens it up they may just see the word icon and it's a cv so it's like a resume they may not notice it says shortcut here it's 4kb so they'll open this which then probably triggers this onedrive updater.exe to run which then loads version.dll and all the bad things happen right i'm guessing it will also pop open a um legitimate copy of um a resume as if we went back to that 2018 blog post i know it showed that and we can see here the shortcut it is running cmd.exe start onedrive update and it talks about it so lnk to the exe to onedrive to dll to something else to it now running so with all of that context now let's go um [Music] create a malicious executable using something we could just go straight into the reversing piece but generally when you get malware you're going to get it packaged in something so i want to highlight exactly how you can extract that from an executable because i just don't see a lot of people posting that online and there's going to be a lot of ways to do it but this is generally the very first thing i would do okay so i switched over to linux just because it's easier to create the next step um i just have shell code that is generated by the c2 program almost any c2 program will give you the ability to get shell code whether it's cobalt strike brute retell nighthawk probably does it i'm sure outflank does as well because the shell code itself is the heart of the program you generally or it's up to like the red team to create their own programs that load the shell code because the program's going to be able to obfuscate and evade antivirus right they load it the shell code or execute the shell code in a way that av won't be able to see it and the whole benefit to doing this is it's very modular like the first time i created an implant i had mainly created a service executable a dll and an exe and whenever i made a change to my agent i was like oh crap i have to update it in three different places so if instead you write it in a way that you can compile it to a shell code or use donut or srdi techniques to convert whatever you make into shell code then when you create just a service template you can then embed the shell code in that service template and you have a service you can create a obfuscated dll loader and then just embed the shell code in that and you're good that's essentially what msf venom is so we're going to cat the shell code and we're going to pipe it over to msf venom and i'm going to say the payload comes from standard in in linux whenever you do a hyphen as an argument that means standard in and this is sending it from there right um the next thing we want is to say it's an exe uh we want to say it's 64-bit and we want to tell it the platform is windows and of course the output file is going to be please subscribe exe right so now we're loading it from standard in it's going to hopefully create this payload there we go i'm going to do an ipaddr python3-m http server so we can stand this up and copy it over to a windows machine because we can't just execute this so have the web server up i'm going to switch over to windows 10 and then we can go 192 168 230 and download please subscribe exe so this should be in my downloads it is and if i just ran it it probably would send a shell somewhere right it's an executable that's going to execute shellcode we want to extract the actual application out of this right so i'm going to do x64 debug and we're going to open c colon users ipsec downloads please subscribe.exe so we have this now um if we just run it it's going to go to the first breakpoint which is the starting point most of the time when you run one of these droppers it's going to do some type of process injection to get it out of its current running state um generally we'll inject into like a web browser explorer.exe things like that um a good way to catch that is let's see we want to go to where is it i'm going to run it so we hit the break point and then if i go to symbols we can go to nt dll and we can set breakpoints on any function right [Music] this is a good one i normally start with this low dll break point and right now if i look in the memory map um we just broke at main right so let's look at protections let's see what there is if anything stands out um [Music] i don't think so let's see type i know it's a private commit maybe this one this is read write i think it's going to be this one we want to look at if we follow it and dump we can see nothing's here yet um memory map 1000 if you're not following me don't worry so i'm just going to run it because we have the break point at um the load dll and when we run it we're going to hit that we see it's calling it and then we can go back into the memory map and kind of examine what's going on look at the protection we see this one is really weird it started out execute read the permissions in this is really odd you would expect execute to be x because that's what it is in every other tool but in x debug e is for execute so it's execute read but um initially it was read write so it started out read write and this is not 1 000 this is 1700 but it's dirted out read write and now it's execute read so it's never um execute read write or read write execute it starts out read write then loads data in eventually goes to execute read and now if we follow this dump we can see it starts out with nothing right but then we have a pe this is indication that um there's data here looking at this this this is strings this looks like an executable right so we want to dump this thing to a file the whole reason why i'm guessing the actual header is missing let's go back here this is also weird being a private commit with an execute if it's not net or things that have uh clr this is going to be really weird behavior um we know it's not net yet because um it's missing a lot of things if we open up in process explorer you wouldn't see any of the i'm forgetting the app domains and things like that so um it being private commit execute is also weird but if we look at it it starts out with null bytes this should probably be mz the strings and the whole reason it probably does that is because if an antivirus hooks on this load dll call and then goes into the memory map and sees mz as the very first two bytes it's going to raise a suspicion right so um the creator just nulled those out so if av looks at that and doesn't examine like the whole bits or it only examines the first few bytes it doesn't move on and say oh this is an executable he's executing so it's just a weird um obfuscation technique probably should have gnawed out a bit more of the whole pe structure but um just doing the e magic field i think is what it called is fine i mean it works so i'm going to dump this to a file i'm just going to go to my desktop and then we're going to start analyzing it and we're going to add the mz back in so we got please subscribe dot bin i'm gonna copy this and we're gonna go back over to linux because that's where i have ida installed so here we are the file is just on my desktop you can see it right there and right now if we look at it so if i just do xxd uh desktop please subscribe less we can see everything is known about or at least the emagic field is where it would say mz so if i run in i don't know if i had a paid version i know geedra also doesn't like it because it doesn't have the magic bytes to know exactly how to parse it right so if i just open this file let's do new open this and it's going to say it only disassembles pe files so what i'm going to do is just open the hex editor so hex edit the file i'm going to hit tab and then just type mz here to put the header there ctrl s to save it it then do yes and then ctrl x to exit i think that's nano like hotkeys or whatever but now if i look at it we have mz as the first two bytes of that and then the pe header and everything else still down there so it can be completely parsed hopefully um so let's do ida 64. and we can disassemble this file and i'm going to say i'm not a reverse engineer by any means so um this is all just self-taught type things or things i picked up from talking to people so um may say wrong things here but um hopefully what i say helps you and doesn't like confuse people more point people down the wrong path so we have this it's a huge file um the very first thing i generally start off with is looking at the um exports and we can see just tls call pack the entry point and then ordinal one so the very first thing it's just got a function at 101 that it probably calls um if you don't know this is probably just to evade um strings so if you go to my youtube channel with like um building a undetected version of mimikats we changed some of the um calls to use ordinal loading which is essentially just saying um go to this dll and load this function at this number so if this was like um the string we were loading was please subscribe and it was the third function in a dll it would be at ordinal three so instead of saying use please subscribe from the dll you could just say use the third function from the dll so if we look at this press f5 to decompile it we can see what it's doing and a lot of this how do i make this bigger let's see options font let's change this to 20. that seems good oh it's probably too big oh well um we'll live so the decompiled output is a bunch of gibberish the one thing this is doing is calling functions by their ror13 hash and this is just something i guess you pick up by experience we can right click convert it to hexadecimal and then if we search the internet for this string this is just telling us it's 64 a bit but let's go to firefox if it opens come on firefox uh go to google if we search it for this um we get to steven fewer's reflective dll injection and where he defines things so this is the hash for load library a so it's very much like the um ordinal loading it's just a way you can call it so this is load library a um we could look at the next one and this function itself is going to be a reflective dll thing to load things so this is get proc address so we can name things and go down the list i'm not going to do it for this whole function because we saw it was pretty big but the main thing i just want this piece of the video to go over is just how this um 13 learning works the next thing i would generally do which this in this current version i'm not sure about the latest version but there's a pretty big opsec fail and that there's a lot of strings in this binary so we're going to go over that why i think it exists it probably doesn't exist on the latest version i don't have that because i don't have the software to just pull the latest version and look at it but i think it is a good talking point so let's see we want to go [Music] view open sub views strings now there's going to be something we can do i don't think it's default i think it's set because i've used ida before but i think by default it's just set at c style not 16 bit but we don't have a whole lot of strings yet we'll get to that in a minute but there is one string that catches my eye or the very first string that caught my eye in this binary was coffee um it strikes my mind because generally this is either going to be a reference to mimikats because mimikatz has a coffee function that just is to test mimikats to see if it works um the second is it's a cough loader so it's like a way to just execute um shell code cobalt strike has both files b o and all that is is really a cough file it's a common object file but it has a beacon header in it so you can do some custom things with the implant pull strings things like that so cough is very similar to buff if you use cobalt strike we can go in here let's go to this function go to the decompile output and we can see where it's calling it so i don't know exactly what this function is we can go down it's doing percent ls plus let's see um this is saying invalid arc and these strings are weird um let's see is this used anywhere else so this sub 61fa um i could probably just click and do x um we look here it says it's a call to ls we can go and i press x on the function you can see how often this thing is used and we see account lockout policy password length so right now i'm going to just um call this printf to team server because this looks like output and operator would want right so just renaming that we can go back to this and examine it and going through like my main thing was is this going to be mimikatz looking through it and see any other of those strings i'm going to guess this is some type of cough loader right so i'm going to rename it to that so in this function's name we have it and generally the first thing i would do is see any more of those raw 13 hashes in it and declare their names i don't know exactly what that is the other thing we could look at is um a public sample of what a cough loader is right so i do cough learner trusted sec as i think they are the first ones to post anything like post source code about this we can look at it let's see coughloader.c i'm near the bottom of this and one thing we see which isn't going to be a smoking gun to anything where is it um is it not in this file okay right here is where i want it to go so we have a loop here 0 to 25 and i see a loop here for 0 to 25. i'm not sure exactly why they loop 25 times but looking at this code the 25 we can compare it here so it's going through each section and then doing a virtual free virtual free and then a print right so we want to see exactly what this function is um we can actually i did not want to double click it um let's go back oh god where am i let's see right here i'm going to press x and i'm going to go to where this move is let's see what this does decompiling okay so i'm here and what i'm going to do is convert this one to hex and we're going to search this so go back to firefox um do this put aura13 in we see that's in kernel 32 and that is virtual free so we can go back into our program and call this function now i'm just going to do row 13 virtual free and we have that so now it's doing a for loop calling virtual free and right outside the thing it's doing virtual free as well um i would probably spend more time comparing like analyzing exactly how this works to this but based upon the string coffee and also like the function and exactly how it's working i'm assuming this is a cough loader right now the other thing i wanted to get into if we edit let's see let's go view sub views strings and i'm going to select let's see um set up let's just do every type of string right let's do all those and now we're going to get more things in this so if we search for something like amsi we have amzw patched right so we can then go to where it is look at this code and we see it talking to the team server say amz patching is not required unable to patch there so i'm going to call this msi patch because we know that function name i'm not exactly sure what that's doing maybe that's a let's see i don't know running.net clr what is this doing it's been a while since i actually looked into any of this so this is so v25 it said it's patched let's i'm going see do a search on this string what is this string i wish i prepared more to do this i think this blog pairs came out today right oh it tells us so this um is a decryption key right so that's the decryption key right there hard coded in the pr program so i don't know exactly what that function is it's probably something decrypt the question marks went to underscores that's fine um maybe decrypt see i'm still trying to figure out exactly where the patch msi is let's see maybe what is this doing nope let's see is this view going to help me more so that's patching etw see going jumps to here calling print f and i'm honestly not positive um i'm guessing maybe a bit i'm missing right now is when it decrypts this maybe it's pulling something from the actual profile um i was looking for it to like load um v10 keyword v52 maybe this pulls something like that i don't know but generally when i first start looking at something i don't spend that much time um on each function i'm just getting all the things right so i would go back to the sub views go to strings find something else that is interesting um let's see i think it's loading strings uh what view sub view strings there we go uh so let's see we do service this is another one to get look at we have service created uploaded i always like looking at service uploaded mainly because we may get some iocs and it looks like we have one right here so we upload service i'm guessing this is um let's see this is probably [Music] size let's see what is v34 let's just see what this function is so i'm going to press x to view cross references or whatever xrefs go to hexadecimal copy this and there's probably some like ida script or something that automatically does all this thing for me which would be handy but again i don't do this enough to where this whole process is actually optimized this is open sc manager a and now that we have this we can see what these functions are right so if i google this go to the documents it says machine name database name desired access so we know v6 is going to be the machine name this is going to be the desired access we can right click it do a new and let's see it's probably going to be sc manager it's either one of these right um keyhole access or sc mandrel all access so um we're opening the service active service with all access on the remote machine so right off the bat i'm guessing we upload a service we create it i'm guessing down here there is a started so um if i had to guess this is going to be like a start service thing so go here hit x i like going to where the move is scroll all the way to the right convert to hex search this create service so this one is create service and i'm hitting n to rename so this is going to be service handle or something i'm guessing this is start service would be my guess so this is probably going to be some type of ps exec just because of it creating the service starting it and down here i'm guessing this is probably going to be mapping um standard in out and air i'm not positive and at the end we free everything of our memory but um this because it's hard-coded um definitely is an irc because this is going to be the service name um lp database name service active right so this would be something i would look in elasticsplunk whatever your logging thing is to see if you've ever had a service called services active we can go back to the strings and see some other things before we call it a video but hopefully this has helped you understand something about this i don't want this to be a super long video maybe maybe i'll do a stream where we analyze it more in depth if people really want that but um i'm like at my limit of what i understand right now so um can't really explain a lot we have it monitoring user login log off which is interesting let's see minimum password length so if we look at this function let's see what this looks like so this is probably some like password check or something because we see it says minimum password length uh minimum password age it's probably getting information out of um like get password info maybe right like an opsec thing maybe upon getting a beacon it or getting whatever it's called um it runs this to populate some information not sure exactly what it uses it for but it is interesting nonetheless and again all i do is keep going down these strings really make it handy and how i why i believe these exist and again um just my intuition i'm guessing this program is um somewhere in the middle of or at least the version i have is somewhere in the middle of the program moving to a fully modular functionality because generally when you um let's do this let's do this function real quick this looks simple um maybe it's not a simple thing but generally whenever the team server sends a task to a server right um i really want to get to a func a simple function that i can explain this with i should rename that ps exec function right let's see i should just do the hotkey of shift f12 i think it is for strings yeah i don't know why i keep clicking it let's see if we sort it like this what do we have go near the top home directory crisis monitor dll and tfs privilege added i think i clicked on the wrong one i think i'm clicking one too high i think the font size is throwing me off here um priv that's not the strings you strings priv added this it nope everything was going so smooth until this last segment that i wanted enabled debug privilege go here awesome so this is enable debug right okay let's see if we can prove that else what is this function so sdr copy scdbug then it's copying the result from this i bet if we go here um go to where this move is hexadecimal and that just changed everything is this one it the one i clicked what are you copying this open process token so if we go back this is open process token so if we can open the process token then it's going to do something else see hexadecimal this is a very tedious process uh look up privilege values and first it's going to check what we have and then let's see what's v1 open process so i guess this is the one we want let's see hex so i guess the main takeaway of this video is um how to deal with roar 13 hashes let's see google helps so much ah close handle done i thought i was gonna get the call it actually does it i skipped it should not have skipped it let's see what this one is hex copy and this one adjust token privilege there we have it okay so um here we're copying sc debug to v5 so i'm going to call it debug string and then we open the process token and if we can open the process token it's going to look up the privilege of sedbug privilege and then if we don't have it it is going to adjust our token privilege to enable it and either way if it can or not if it can enable it or can't enable it it's going to close the handle right so that's how this function works and if we go back one more time i think right here we're in this i think enable debug i think is the function i was in yep not exactly sure what this is doing looks like the same thing maybe it's just checking if debug is enabled so i think after it enables it checks if it is is my guess i didn't look at like those like few seconds you saw of it was all i looked at that function right but um so the team server says hey implant enable debug privilege and then the implant goes runs this code and says hey i have enabled the debug privilege back to the team server there's really no reason for the team server to really um not know what it just asked the implant to do because it would probably send generally how like i carried the implant at least if you look at my c2 video um i have some type of a new or structure that has task codes so i'd send it a task code of 10. when the implant sees 10 it enables the debug privilege and then reports pack either success or fail probably the windows exits code because if it errors out gives me some debug information on why it failed and then the c2 server sees oh it was successful it's task code 10 that is debug i'm going to tell the operator debug privilege has been enabled so the reason why i think it's in some middleware behind highly modular is the actual implant itself may only have some type of like inline execution or cough loader type thing so you just constantly give it these common object files and it does the thing reports back and the whole benefit to that being will be the implant you have becomes very small because the only function in the implant is to execute cuff files so when a reverse engineer gets it they can't identify all the features that are in the implant because every time you want to execute something the um c2 server sends that shell code to execute it right and because you're sending so many cop files you only like it looks like it may only be coded with just one task the coffee task to execute it so it's just saying hey execute this cop file execute this cop file execute this cop file um the implant itself or the ce2 server itself doesn't look like it's storing what that cough file was so it doesn't know the exact result it's just embedded in the file like if you look at how cobalt strike is with buffs b o f um all those strings are going to be hard coded in that because the actual cobalt strike server you don't modify that you just send it the bar file the client pipes that baffle through the team server the team server doesn't really inspect it goes directly to the implant and then it's up to the implant to tell the user what it is um so it's a bit of a different way of thinking um right now like i think this version is in the middle grounds which is awful because it's super easy to signature when you have all of these and this is why um i'm guessing uh the creator of this puts so much faith in his off-gate sleep putting a lot of work there so the memory of this program is always going to be encrypted so you can't just inspect the memory that would be my guess because if you can just dump memory of this it would be um easily flagged so this is an indication the oxygen sleep is working and if in the later versions it goes into a more modular format where the actual implant just executes coffin also like the functionality to enable debug not in the actual implant that's running that's coming from the team server that becomes a lot harder to reverse and more forgivable that the strings are embedded because that's how it works in a lot of the c2s if it was really advanced it would like have all the shell codes or common object files whatever you want to call them as tasks so when the c2 server says hey i'm going to send it the enable debug common object file it's going to report back success fail i know i sent it this object file i'm going to put the strings around it right but right now the c2 supposedly is just one guy so that's a lot of work to have all that functionality this is certainly much much quicker so um hopefully you guys have enjoyed this video and found it beneficial i'm gonna wrap it up here because i think i'm approaching like probably 45 minutes to an hour and that's a long video a lot of information digest hopefully i didn't say too many wrong things take care and i'll see you all next time