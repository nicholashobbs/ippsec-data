 what's going on YouTube this is ipsec made on health from hack the box and my favorite thing about this box is it really hammers down the importance of slowing down and replicating the software you're trying to attack locally because the initial exploit shouldn't be that tough it's just a gogs instance that's from 2014 so it's just super injectable that being said um you can't access the gogs instance directly you can only access it through a server-side request forgery attack which then limits your ability to just spray payloads at it so you want to download that version of goggs locally run it build a payload against your local instance and then put that in the server-side request forgery which then will let you get the hash of the gogs user on that box crack it and you can log in through SSH what's on the box you can kind of exploit a second order type of attack or maybe just poisoning a mySQL database in order to extract the SSH key of the box but we'll get into that at the end of the video so let's just jump in as always we begin with an end map so Dash SC for default scripts SV enumerate versions OA I'll put all formats play in the end map director and call it health then the IP address of 10 10 11.176 this can take some time to run so I've already ran it looking at the results we have three ports open actually um looks like one port is filtered so the technically correct thing would be three ports not closed I guess but anyways the first Port is SSH on Port 22 and its Banner tells us it's in Ubuntu Server the next thing we have is HTTP on Port 80. its Banner tells us it's running Apache and also Ubuntu and then we have the filtered Port which nmap is just saying this port's behaving unlike all the other 1000 ports it scanned and nmap determines a close Port is when the port sends a reset packet back so filtered in this state is just saying hey we try to access this port and got nothing back so likely there's a firewall configured to drop all packets to that Port if you want to know more about nmap and it's filtering you can just go to ipsec.rocks type and map filter and probably this dc9 video looks like it's a good one based upon the description but let's go take a look at the website since that's the only thing that nmap really told us existed on this box outside of SSH and we can't really do much testing for SSH so we have this website health.htb so I'm going to add this into my host file so sudo VI etsyhost and then we can do 10 10 11 176 health.htb and I just want to make sure um this is the same website it looks like it is so we have a web hook here this is a free utility to remotely check whether an HTTP service is available so let's take a look at this I'm going to um do http 10 10 14 8 what do you put 9001 and then we'll do HTTP 10 10 14 8. I won't even put a port here and we're going to listen on both 80 and 9001 and see what happens right so um it looks like it wants the interval and a chrome thing we can say always I'm going to click test but before I do we should listen on um 9001 and 80. there we go test and we see it made a request to 80. and then it makes a request to 9001 after this is closed I did a control C to close this and it tells us some basic information um like the health of this website is down that's probably because there wasn't an HTTP server here right so let's listen back on 9001 and I'm going to try to send a like this page right so I'm gonna do http 127001 and we're going to see what happens when a website is online because we know what 80 is online on this host so I'm going to click test and we see the host given in the monitored URL field is not allowed so it looks like we can't monitor localhost right um another way to specify IP addresses is through hex so um 127 is equal to 7f and hex and then 0 is equal to zero of course um so I do 0x 7f for 127 0 0 1. so I just specified 127001 this way if I try to Ping it you can see it resolves to 127001. so right now I'm just trying to bypass the filter so I'm going to click test and it looks like they have um caught onto this so we can't do that we could try HTTP health.hdb and bypass it this way see if it knows itself it's taking some time we're not getting any hit back so I'm guessing um it couldn't resolve health.htb or nope monitor URL field is not allowed so everything we do here we're just getting uh the host isn't allowed um I wonder what would happen if we just hosted our own web server so I'm going to make the www I'm going to v um index.html I guess and I'm going to say instead of at least a hello world I'll say please subscribe uh we should start a web server and now let's go back here 10 10 14 8. interval I don't need that slash one if I just did all stars it would work every minute as well so that's a bit redundant but oh well so it didn't get and then we didn't get anything else I'm guessing maybe it wasn't valid HTML let's see 10 10 14 8 9001 let's try this again because I may have not clicked on um always send this right so went to the web hook be sent always uh click test hit this and we have the response here and let's see I wonder if it'd be easier can we just um Echo dash n paste this and do JQ dot Sweet It Is All JQ uh or Json I guess we can see the body so this web server is telling us the response of that right so what I'm thinking here is I have to get this to access localhost because if it acts as a localhost I can probably bypass the firewall and access port 3000. unfortunately there is a filter blocking everything to localhost that being said there's probably a redirect I can do so if I do V index.php um let's see I think I do PHP this way and then header location 10 10 14 8 or http I'm gonna do 127.001 real quick like this or three thousand and we can do die I don't think die is needed there and I think this is how we set the header um I have an A there we go so instead of using the python web server I'm going to do sudo PHP dash s listen on everything on Port 80. so now if I did a curl on localhost if we do Dash V let's see what it says uh we get this header saying the location so I believe this will forward us there if I go into a browser 127001 we see it try to navigate to Port 3000. so here I'm going to restart my netcat and we're going to replay this so send everything to 9001 okay so the monitor URL it's going to hit 10 10 14 8 which is going to be that PHP script we had just wrote that does the redirect and it'll redirect to localhost 3000 bypassing any type of filter looking at monitored URL and hopefully send us the website that's running on Port 3000 so hit test and we have a big page back so I'm going to copy this entire thing and we're going to go to JQ and print it out so let's copy this control c v response dot text I guess I should have done like dot Json but I just pasted it having trouble exiting them okay so now we should be able to just cat response.text uh pipe it over to JQ and we can see everything here uh what we want to grab is this body so I'm going to do JQ dot body and I don't like how it's escaping everything so if I tried to just um view this like paste it over to a file and open in a browser it wouldn't look that good because all this is invalid HTML so I'm going to add a dash R for raw and it's no longer going to escape all those things and this looks much more like a website so I'm just gonna pipe it to test.html and then we can buy a fox to open it and see what this looks like and the copyright is from 2024 and it's a goggs application and the version is 0.5.5 so this is almost a decade old I'm just going to go to exploitdb and I could use searchpoint I always like using exploitdb still just because [Music] um it I know it's always going to be up to date right and we can see there are SQL injections from 2014 which is the copyright gear so I'm going to guess this is going to be vulnerable now the issue with exporting this is going to be it's a bit weird because we have to send it through the um like redirect we have to do it through server-side request forgery affected versions We can see it vulnerable here and the URL is API V1 repos search but this also said um let's see I think it said users as well right yeah users and repos so I'm sure we could have placed Reapers with users um whenever just getting an exploit and you don't have a good way to exploit it it's always best to just like stand it up locally right and the very first thing I do is I gently go to Docker right because with Docker we could just do a Docker pull pull the version and clone a vulnerable version and have it running right away the issue I'm going to run into is if we go to do this and we look at the tags and go the oldest one uh it's six years ago and we went nine years ago so gogs wasn't even really on Docker Hub or at least um it doesn't have a version that old I'm going to go to Google and uh search gogs GitHub and see if we have a version on the releases that is from 2014. so let's scroll all the way down let's see we have Pages I'm going to hit on page five 2016. so we still got to go a little bit of ways uh seven 2015. [Music] Let's see 0.5.5 we have one right here so this is probably going to be the gogs version that is vulnerable or at least running on the server and I'm going to download the Linux AMD 64. I'm going to move from downloads let's see Linux AMD 64.zip and we can unzip it uh let's see make the dogs unzip Linux AMD 64. and we go into the folder and execute gogs it wants us to type web to start it as a web server and it's now listening on localhost 3000. so if I do 127001 3000 we have the gogs install so I'm going to change the Run user to ipsec because that's who I'm running on on this box um whatever your username is I use that one right and let's do the username ipsec the password of password and the email I'll do root ipsec.rocks and now we can install gogs and try testing out this exploit right so if I just copy this I and paste it here we have something I don't know what we have but we have something right um I'm going to try users and we get no such function users what if I just do API V1 user search and we get not found so let's see we have this whole payload I'm going to URL decode it I'm just going to put it into burp Suite decoder and we can see it's just a union select and they're doing a lot of joins I don't know if I like this whole thing um the key thing about this exploit is let's see are they doing it here I think space is a bad character with this so what we want to do is we go um q and then this we can do Union select one and then a comment and see what happens not found if I do users unrecognized token so that's good it's not giving us a not found so it's definitely slash users I'm going to send this over to brip Suite just so it's a bit easier to play with so let's proxy intercept on send it send this okay unrecognized token um and then our uneural encode everything and in SQL you can replace spaces with a comment and I just want to see if we get out of this unrecognized token thing we get bad request let's see there we go so the select the left and right do not have the same number of result columns so in this user thing we don't have the same number of columns so what I'm going to do is cheat a little bit because we have this server or this application installed to a box we can go into gogs and then go into the actual database so gogs.db if I do dot dump we can see everything I can also dot schema user I thought that would show us the table yeah it does so I want to grep for this line or I can just do head dash one and what we want to do is get every column here because this is probably going to be the number of columns in that select statement so if I just V let's go up a few V test dot text I'm going to paste this and I did this because I didn't want this whole create table thing to interfere so now if I cap this I can do a set to search and replace for comma because every column does have a column at the comma at the end I'm going to place it with a line break now I can do wc-l and we have there's 27 columns in this so let's do 5 6 7 8 9 10 11 12 13 14 15 16 17 18. 1920 if I can type I probably should have done a script to automate that but here we go we have now dumped information out of this so what we want to do is figure out where we can inject I'm guessing this one let's see ipsec does this appear anywhere no it does not uh let's see ipsec doesn't appear foreign doesn't appear see if I put in four so I don't know how we can extract information I thought we would be able to what if we have to log in first because it's weird that this username is blank to begin with let's see if I just do a query on ipsec we do see myself but this SQL injection is breaking it let's see what if there is all okay that's what we need so we need to put the all parameter in our Union and then we can extract information so I'm guessing the username three that's probably because of this yeah so now we can change any information we want right here so if I do a select um let's see uh salt and we'll put this in parentheses and we have to break out the space we get no such column but I can probably specify from user and now we have the salt so the next step is we want to get multiple Fields out so we can do a concat and maybe do salt and let's see where's the password and sql8 is telling us there's no such function concat because in SQL Lite how you can cat things is use two um pipe characters so if I do the select stop we can do double pipe and then I can put a colon at the end let's see select salt I thought I could syntax error select sort from user okay I had a bad slash somewhere I probably did a backslash instead of a forward slash but now I can append a colon with a double pipe character right I can do a select then pass WD from user and we need to close the parentheses and now we have the salt and the actual piece of the password the password hash the thing we don't have is the email so I'm going to go up here we'll do a double pipe again um put a single quote and now we're going to say select email from user see they screwed that up just going to paste it in a terminal so I can see what it looks like a bit better I don't have a forward slash there we go so now we have a payload the issue we're going to run into right now is we don't know what hashing format this is right so if I grab this V hash dot text and there's actually two issues um the first one is this isn't the Box itself this is just my local box right but the other issue is this doesn't look like just a straight md5 right so we have to figure it out exactly how to crack this and this looks like it is in HEX so we have a hundred hex characters but the actual hash length is probably only going to be 50 because this is just in HEX um so let's go back into the Gog Repository and let's see where is browse at this release if I go to releases oh here we go if I click this I should be able to browse the gogs repo at this point in time browse files okay see models looks like user so this is going to probably be the user structure of this application and we can see pretty much all the database entry here and then encode password this is the field I was looking at because this is going to tell us how the password is encoded it's in PK pbk df2 we give the password the salt um if I I thought I could click this and normally GitHub would tell me the functions of this this is the I want to say iteration count and this is the key length count and this is the hashing algorithm uh I'm going to change it from github.com to github.dev which if you don't know is really cool it just sets up like a oh I have to log in to do that never mind it sets up a visual studio code editor I really don't know why I can't just double click this and for GitHub to be smart enough to tell me where this function is right ebk let's see I'm actually going to drag a browser from my host machine over here so we can see if Chrome would show me this so let's see PB okay yeah this is what I was trying to do if I just click that it tells me the function so password salt iteration count key length and then hashing right and then since I'm on my main browser if I go to github.dev I can show you what this looks like thank God it just passed Authentication and we have this right so it's a pretty cool just editor for your web browser and GitHub but now that we know this is going to be this format we can do hashcat example hashes and find out exactly what format this is uh not that not that it's not true not Django this looks right pbk df2 hmac Shaw 256. so the one thing that's sticking out to me right now is we have it in HEX format right here and this is base64. so what we want to do is put this in base64 format so I'm going to Echo dash n base64--d not decrypt base64 so we have this and let's see we can close that so we want who is it shot 256 colon 1000 uh was it one thousand or ten thousand the example hasher shows one thousand this shows ten thousand so we want to be careful with that add a zero there and now we just need to base64 this next piece so we can Echo dash n this base64 Dash w0 because if I did not do disable wrapping it would go off two lines and we can grab this and put this in and I'm actually going to try to crack this ash first because I know the value of this one this one is password right so if I don't crack this then what that's going to tell me is I did something wrong and I should go back and try again so I'm going to say local gogs for this hash paste it in I'm going to say hashcat.bin hashes local gogs and we'll do the Rocky award list and it's going to Auto detect to the format that we told it to and here it goes trying to crack this and for being a password of password um it's not cracking that fast which does not give me hope that this is going to be successful and the reason why is this base64 if I went in probably D base64 this it's going to give me non-printable characters so if I do Echo dash n base64--d yeah it gave us junk um and when we looked at we see hashcat done was recovered zero but when we look at our hash it was all um hex right so what we want to do is convert this into ASCII so we can go back to this Echo command and before base64 we do xxd actually ASCII is the wrong word we just want to convert it back to bytes so Dash R Dash p so it's going to reverse this hex encoding and now we have this base64 string we can go back into the Kraken V hashes local gogs and replace this big64 with this one and try cracking again so it's Auto detecting starting up and there we go it has cracked it so now we have a way to reverse obtain the password and reverse it so what we want to do is go back to NC 9001 go into dub dub dub and in this index.php script we want to set the location to be our payload so I'm going to grab this and paste it okay I'm going to restart the PHP web server just for good measure probably don't have to let's see go back here let's set the payload set the monitored URL the interval doesn't really matter always so what this is going to do it's going to hit 10 10 14 8 which then goes to this page right and it's going to redirect it to localhost 3000 and dump the user and then send the user to Port 9001 which is the payload URL so let's test this and syntax error unexpected Union so what we screwed up is going to be obvious soon as I open this this header location I'm using single quotes here and I'm using single quotes all throughout this payload so let's change this to be a double quote double quote there I think there's the only double quotes I use so I think this one's going to work better restart a netcat and go back to this always test I don't think I can actually click test there we go hit and we have something so let's grab this Echo dash n paste it JQ Dot and there is some error I'm guessing the error is because like our SQL injection put in Bad characters in this Json so let's see or maybe V test.json wrong clipboard there we go cat JQ dot so the actual issue was um my echo had a single quote and we used single quotes in this payload so that's where we had issues but I can just do body we can specify raw as well or a dash r and we just get the body of this we could pipe it to take you I guess again and we get the username admin at gogs.local and this and we also have the username is Suzanne so let's base64 encode these so I'm going to do Echo dash n basic or paste this base64 then we want to grab this one Echo dash n x x d Dash R Dash p Bass 64-w0 men was it Shaw 256 10 000. and then copy these two so copy this and copy this and now we can copy and go to the Kraken and try cracking one last time hopefully so V hashes I'll just call this gogs then hash cat and word list so it's starting up the crack and we have successful crack it is February 15. now the issue I have right now is I don't really have a login prompt we can't really just log into gogs because uh we can't access port 3000 and it's non-trivial to use like service side request forgery to like do Post requests and all that type of method we have to do a lot of like cross-site scripting in a browser right so what I'm going to do first is SSH would do admin at 10 10 11 176. to see if this is the password um it wasn't if it copied weird so let's type it out to get it on the clipboard in a bit of a better way February 15. okay put in the password and we get a disconnect uh the other user was Susan above so we could try this so s-u-s-a-n-n-e [Music] put the password in and we get logged in um one other thing I did when I was playing this box is I tried to access the files right so if I go back into index.php we can replace this header so let's do actually whoops do location and I try like file Etsy pass WD this was one of the things I had tried right so instead of redirecting to a web server redirecting to a file and seeing if this works and if it did then I have a bunch of usernames I could password spray this with right so if I do this uh set this all up again test we see it doesn't work it just keeps it doesn't replace replace the URL it just makes requests in a pens file so um you have to extract the username out of the database as well so now that we're SSH into the box we can take a look around and looking at the home directory nothing really stands out there's a bunch of these config directories we do have the user.txt I always like doing find dot dash type f to list all the files just to see if anything's barely deep beneath these directories npm is like a node package manager nothing's interesting there we have composer this is uh to do with PHP I don't know a hundred percent exactly what it is so whenever I don't know something nowadays now I just go to the open AI chat and just ask it questions so in Linux what is the purpose of this file and see what it says it looks like it is um going to tell me exactly what I need to know and pretty quickly I get the answer it's a tool for managing dependencies and PHP projects and this key file is just a public key used to verify the authenticity of packages downloaded from repositories so the key doesn't really help us that much so let's keep poking around the box to see what else there is and whenever I hop on a box the first thing I like doing is check well hop on a web server I like getting whatever credentials I can get out of it right so this is going to be um probably laurable just based upon these the structure so I'm going to look for an environment variable because that's typically where these apps like storing things and the reason you store it in dot EnV is you can quickly Blacklist that and you're like git config and prevent it from ever going into the code repository or things like that it's just a much more secure way to handle passwords than embedding them into your application via the code so looking at this we can see there is a mySQL database and we have a password of MySQL strongest pass 2014 with a plus so I'm going to test for password reuse real quick and there's really no other accounts on this box so let's just do an Su to see if that's Root's password it is not so let's do mysql-u Louisville and then Dash p enter in the password and I think the database was also laurable and what I want to do here let's see if I can get any extra users that um I didn't have so I'm gonna do describe users and let's see we can do select star from users um actually I don't need star we can do name password and it's blank so there's no users of this application what I was hoping to do is like extract users and maybe I get the root password that way but nothing really here so we can exit out of this and then I'm going to run an application called p-spy while we examine some code on this box right so let's go and download piece by so piece by GitHub and let's see Monroe Linux processes without root that is exactly what we want to do go to releases and peeps by 64. I don't know what the difference between these two is piece by 64. oh that's 32 and 32 small so 32-bit and 64-bit we have downloaded it so let's go into www.m move downloads piece by 64. python3 Dash M HTTP server and then we can go in Dev shm wget 10 10 14 8. piece by 64. and we're on Port 8000. say it's mod plus X and we can run it so while that runs I'm going to SCP the web directory to myself so scp-r um I think we're a Suzanne at 10 10 11 176. HTML and password was February 15. so it is downloading and funnily enough as soon as we start the download we see a bunch of processes start because that was us logging into the box to do the um SCP and we could look at the web source code just on the box itself with like Vim but I don't like doing that mainly because um it's easier to use a IDE I think that's like integrated development environment whatever but it just makes it a lot more easy to view things and right now we have a cron going off and it's doing PHP Artisan schedule run so it looks like maybe every minute we have this Artisan running the um schedule like module and going to run so when we look at the code it'll make more sense I don't know all the PHP terminology we see it happening again right here we have a cleanup script that we can't access that's in root metaclean I'm guessing that's what has the run command so it is still SCP the files off I probably should have tart it up and then just copied the one big file because that goes much quicker than all these small files but you live and learn we can see the piece by again showing a slightly different way of it doing it goes into verb www.html and also runs it and it's doing this as uid 0. and I think I'm just going to copy the whole tar package because that is going way too slow so let's do Tara cjvf and then HTML we need to also specify the name we're going to call it web.tar.bz2 and this should copy it yeah there's so many node modules that I think that's where this is just taking forever it's even taking a while to turn it so I'll just cancel that out because this SCP not one we won't actually want to do so startup Dev shm taro bz2 and this hopefully will take like a fraction amount of the time it was before yeah it's done so if you ever have a long copy because you did a recursive tar um that's how you can fix it so let's do tar xjvf and then web.tar.bz2 and it's going to create all the directories we want so now we can just go CD ub-dub-dub HTML and I'm going to do codium this is just vs code it's my favorite IDE and we can view the files um it's probably doesn't have PHP installed so I won't get as um good of experience as I want to but oh well so the first thing I want to do is go into views and then I want to go into I think console kernel.php and that's where these Artisan or Artesian I don't know exactly how to pronounce that word all those commands are ran so we have this protected function schedule and then let's see where's run I think run is just um saying to run something I don't know larval that well but all that one command was doing is saying run this protected function so we can see exactly what this does so it's going to get all the tasks from the database and it's going to run this health Checker check and keep in mind when it does this it's doing it via um a root user because the uid was Zero so we want to look for this check and I thought I could just control click and go to it that's one of the benefits of having it but or having an IDE but it's not working so I'm going to guess that's going to be an HTTP controller's Health checker and here's the check function so it's just doing a file git contents on the monitored URL and because of that we can probably change monitored URL to be anything we want we do have database access right um we couldn't do it in the web app because the web app was doing some type of filters based on what we could do we couldn't put like the um localhost in it right I'm guessing if we try to file wrapper we couldn't do it that way as well but here it looks like we can um pollute the database so kind of like in second order type of attack right so let's go over dub to dub HTML cat.env again I'm gonna grab Dash I password so we can get this my SQL password and we're going to do MySQL Dash U H was it larval Dash p used larval show tables and we can select star from tasks because this is what it's getting a task for right so if I go back to this tool I'm going to put my payload URL now I'm going to put this to be anything we want I'm going to say run every minute three four there we go and we're going to say always and we have to listen on 9001 I'm going to send this to prep Suite so I can easily quickly recreate this because I'm guessing um it's going to clean itself up and not work the first time okay so now we should have a task in the database so if I do select star from tasks we have nothing page expired I'm guessing a cross-site request for a dry thing or something screwed up uh web hook does it okay create a gun page expired refresh this let's input everything again one of the good slash annoying things about Frameworks is makes it easy to do security things like put cross-site request forgery Checkers on all your web forms something you should do but a lot of applications just don't larval typically likes it so we have web Hook is created and we have everything here we want to view it in a more friendly format you can do backslash G instead of semicolon and view it this way so what we want to do is update um the tasks table and set monitored URL equal to file I'm going to do root SSH idrsa to see if this exists and we can say where ID is equal to this we don't have to do the where ID thing it's already cleaned out um you generally should always do a where statement when doing an update because if you don't it does it to every single column in that I'm going to retract it just because I'm getting annoyed with the cleanup job of it just removing it too quickly so let's do this monitored URL like this always create change it and then let's see if it runs and if we actually get the SSH key we can don't now do a select as well I thought we would maybe we should set this to every five minutes I don't know when it actually gets deleted out let's see yeah so star slash five one two three four always create okay we have it now here and I'm hoping it will send us this file if it doesn't then chances are this file does not exist um no it did right there so let's copy this so we can easily extract it with JQ so V let's go up three directories they were that's the right clipboard cat D dot Json JQ dot we want body we also want Raw two idrsa pH mod that to 600. and then SSH root at 10 10 11 176. and we want to specify this key and there you have it we are now root on this box so hopefully you guys enjoyed that take care and I will see you all next time