 what's going on YouTube the zipsak we're doing Ellingson from ACTA box which was a really fun box themed after the movie hackers the initial page on this box is coded and Python flask with debug mode enabled so that means when you cause the page to error its gonna output a big stack trace additionally pin code validation is disabled so if you just click the little terminal icon you can run Python code directly on the box I know this sounds super silly but it's actually affected some major companies for instance this is how patreon I get act back in like 2015 so you run code on the box and you'll notice you can't do any reverse shells because there's some type of firewall that's preventing you you can however drop an SSH key then SSH into the box from there you'll find you have to escalate to a different user you do that through cracking hashes but there is a set UID binary that is a wrap challenge and this part can be really difficult if you don't have any experience doing like buffer overflow type exploits but if you do then this is probably going to be super simple I have a video called bitter man that walks through this exploit in particular so if you have questions I'd refer you back to that video all that being said let's just jump in and do this box as always we start off there and maps are - SC for default scripts as via enumerate versions Oh a output all formats pin the end map direct and call it Ellingson and then the IP address which is ten ten ten one thirty nine can take some time to run so i've already ran it look at the results we have two ports opened the first thing we have is ssh on port 22 its banner is telling us that it's a new Bond to server we also have HTTP on port 80 and it's banner is telling us that it's nginx also running on ubuntu we had the nmap script HTTP - title run and tell us the web page title is Ellingson mineral core nothing too interesting so let's just go hop over to the web page go into Firefox and browsing to it we get what looks like a standard company page potentially some blog post here going down we have a meet the team page of how Margo Eugene and Duke all characters from the movie hackers and it's now giving us some information so I'm trying to think what I can use this information for and potentially user names so you figure out the username convention schema is at first initial last name first name last name who knows but if it's first initial last name then we have three potential user names M Wallis Ebell Ford and D Ellingson so just keeping that in the back of my mind as we go through this box and then some potentially more blog post I'm gonna press ctrl you to see if I see what this page is built with looking for ants that's like using WordPress Joomla II won it for just something that would go to a web page automatically that helps us search for it we have what looks like to be a Easter egg here of just a line from hackers but nothing in the source code tells us that it's built with anything so we don't know that let's just go back to the web page and then click on a blog post we have this page that says the virus was planted if we go to articles 2 which is probably the next blog post we have something telling us that there may be some type of denial of service protection in place if you attempt to login to a service more than five times in one minute you'll have your access blocked for five minutes so probably won't do any type of username brute-forcing on this box the next thing we have on article three suspicious network activity it's telling us that we should change a password and the most common passwords involve love secret sex and God and that's coming from the plague which if you've seen the movie you know that is going to be Eugene Bell Ford's character but you don't know it just keep moving on keep this in the back your mind it will help you morning comes to cracking something later on you don't need it but it does help so the next thing I do is check article four and we get a weird index error this page is telling us that number one it's a Python flask application and number two it's in debug mode not production mode so an old versions of works ugh I think that's how you pronounce it it didn't have any protection on opening it interactive terminal to debug the application this was exploited in a patreon I believe if we do patreon debug exploit help patron got hacked publicly exposed works a debugger so that's what this exploits going to be I think in version zero point of n' it got patched to involve a debugger pin but essentially we can just run Python commands straight on the server so if we do print test and I'm doing the Python 3 print because we see python 3 here you can see it so if you want to see what it looks like now I have a demo application we've just opened up in them it's just using this setting it in debug mode and hosting a page so if we do Python demo PI and then go to localhost 5000 we get the page let's put some bad code in here so we get a crash so if we do X is equal to int please subscribe this code should crash because it's horrible code mainly because I wrote it but it does crash and then we see the same exact icon here so if we open this in a Python shell it's asking us to enter the pin and if you look here we have the debugger pin so this is a small plug protection built into this I don't know if you can brute-force that if it has a timeout things like that but that's a protection built into this page now but old versions do not have that and you can just run code straight on it so since we can run code we should probably try to get a reverse shell to do that I'm going to import the get output module from sub-process so from sub-process input get output and what this is going to do is just let us run commands so if we do get output Who am I we can see with the user how we could do ping let's see what is ping is it ping - Co - and for Linux localhost probably - see there we go I always get that argument mixed up between Windows and Linux so ping - see one and then ten ten fourteen three to see if we can get back to us we don't have any output yet we'll try a different command let's just see if we hung the web server first since I ran a command and ok there we go we got output let me try this real quick get output ping and then print test okay so we don't hang this web server if we do 10 10 10 139 you can one of the dangerous things about playing with things like this is if you do a long-running command and it's not threaded you could just hang the whole web server so always be conscious of that whenever we try to ping we're getting a operation not permitted and that ping doesn't make it back to us we can also try do we have chrome s box we do we can do curl 10 10 14 3 and then a box say NCL VMP 80 curl is going to default to port 80 and it does not get back to us so there's some type of firewall rule that's preventing the box from getting out so in that case we should do get output and let's check if we have SSH keys since we have code execution as hell we should be able to drop an SSH key and gain access to it this output is a little ugly I'd like to have this formatted a bit better because of all these like slash ends not training as a new line so what I'm going to do is I'm going to create a new command I'm going to type it here because it's just easier to read I'm going to define run CMD and then I'm going to do from sub-process import get output now I'll do X is equal to get output CMD and we'll do print X and then end is equal to newline character so all these new lines have /n so all I'm is saying hey print this out and on this this is the new line I don't know if I actually need that because that may be the default we'll try it with both so copy this paste now I have this command called run we do LS la on home prints nice let's get rid of this and because that is the default so maybe we just did print on this it would work base this run so yeah we don't need that end thing but now we have a bit better terminal so we can look in this then slash dot SSH and we have read/write access to authorized keys read access to ID RSA and then the pub so the first thing I want to do is steal this private key so let's do run cat ID RSA and specify the full path and then we can grab this and then V SSH dot how dot encrypted because I noticed when I was copying it we had this proc type for encrypted and I'm not gonna try cracking this because if we go to the hip sector ox page you can just do crack SSH and and this one we do that whole process it's actually a rabbit hole won't crack so that's why I'm not gonna bother with it and I was doing this box for the very first time I definitely have that running in the background just because if it cracks who knows it may be a password reused somewhere but since that's not going to crack and we have read/write access to authorized keys I'm just gonna do SSH key gen - f how to generate a SSH key for the hal user if we can't help up there's gonna be the public SSH key that lets us login so I'm going to grab this and then again because it's just easier to read here I'm going to run and then we'll do echo paste the key in to start SSH authorized underscore keys and that and that okay so we can copy this whole thing go into Firefox and then paste this in let's see I'm in mistake here we don't want that single quote because I closed out the single quote here so I just got rid of the one single quote paste it there we go now we can do chmod 600 how the private key and free Shi that key he'll at ten ten ten one thirty nine it does not work we do - V will see that it denied a public key and then moves on to going through a password so let's go back here hit up a few times to cap this file cat SSH authorized keys and we see something weird this file did not end with a line break so it looks like we may have just appended straight to it so I'm just going to run our command one last time run this again if we can't authorize keys this is beginning on a new line now and let's try getting in I should I took a bit off but we get in so now that I'm in here the very first thing I want to do is clean up what I potentially broke so let's go into the authorized key file and we can see this SSH RSA starting in the middle of this so let's just do D dollar sign to delete everything after the cursor to clean up that key and then hit W to write this so now this one key is going to work still if we didn't do that and that key actually was in use and someone went to use it it wouldn't work and they may check this file out and notice something fishy so always make sure you fix what you screw up so now that we're on this we can do LS la we don't have anything there's no history file no nothing so I want to run Lin anew so let's open a new pane let's just cat slash up the linen oome linen new got SH base 64 - W 0 and then we'll do X clip - selection primary to put in a clipboard and then just let's go to dev SH M V Lynn a noob be 64 long clipboard there we go a 64 - Dee Linda new - Lynn a new message so now we should have this file on it and the reason why I'm doing this is because the previous attempt when we tried to do reversed shells it didn't work so we can check if that rule was on the web server or on users so we just curl 10 10 14 3 still can't get to it so that's why I dropped linen into the disk so if we run this now third tester enable that's fine we can clean this up and then just let the script run and we'll go over the output once it's done now that linen is done let's go to the top and see what it found the first thing it finds is Colonel information which tells us that Colonel was compiled on February 6 not too interesting since this was compiled around the time the box was released if it was a much older colonel I'd look for Colonel exploits but any colonel exploit that gets released probably came out after the time this box was made which makes it a unintended path that I don't really care that much about we have information about Ubuntu not interesting for the same reasons the host name is Ellingson not too interesting this current user slash group info we see we're a member of the ADM group which that is definitely interesting ADM users have generally better access to overviewing log data so I'm just going to create a pain to my right and we're going to take notes here so we can put member of ADM and then let's see we got to go back to where we were let's just search back and here we go so the users that have logged on to the system we have the plague locking in around May 7th how October 14th and Margo October 14th as well nothing too interesting there there are four users I believe at least on the webpage there were four users and we only see three here so one of them has never logged into the box if this was an actual engagement maybe I try default passwords against that user trial-like password password 1 2 3 but you also got to keep in mind that there is that fail to ban protection that is indicating the webpage if you fail to log in like 5 times I think your IP gets banned for five minutes so that's why we're not worrying about that let's see group memberships this page isn't too interesting let's go to the next admin users this is telling us that the plague is an admin and we are an admin or a member of the ADM group the plague is a member of a bunch more ADM pseudo lxd etc contents of Etsy passwd is gonna show us that one extra account it looks like Duke is the one that hasn't logged in so that's the one I tried default passwords with super user accounts root permissions on home directories it doesn't look like we can get into anyone else's home directory they're owned by the user and their group and looking at this user in group or W X and everyone else is nothing so files owned by our user nothing too interesting here just all the default files in home and then some LX CFS which may have been more interesting if we were a member of the LXE group hidden files we can skip that board readable home directories SSH keys we already have those environment information path shells new mask cron jobs all look like they're standard nothing unique crontab standard nothing unique systemd timers looking over here at the units everything looks standard IP address we see we're in the box that we ssh to which is 10 10 10 139 so we're not in any container or up history nothing dns stuff tcp we see that there's additional thing what 8 8 8 8 is listening so that is going to be interesting so what is for 888 and I'm going to guess this is going to be the Python web server the N and port 80 is nginx that's acting as a reverse proxy to this Python web server so we want to see what user this is writing as since we can see the PID I'm guessing it's running as us in a sense our code execution came back as us it's most likely going to be running as us that's the N at D system D there's just so much information here HT pass to BD found I'm going to guess these are like default creds or something I don't know exactly what this is but I see like Python failed a band test so I'm guessing these are just test credentials file locations compilers sensitive files can't really read any set UID files I see one that is really interesting we have garbage and that is March 9th 2019 so this may be a good box to just go look at everything that's happened on March 9th because I've seen that date a few times so that's probably when the box was created and we can see what else the Creator did on that day but everything else in this set UID binary looks standard and then set G OID it's probably gonna be the standard stuff and there's only so much of when a new output I can go through so I'm probably going to skip the rest of this and just begin looking at what we have so if we do netstat - a LNP grep for 888 we're going to look at what this Python program is listening on that port so if we do a psdf graph 1186 we can see the Python program is opt Corp web run PI so let's see if there's any credentials in this web server so there's run PI and run Sh I'm guessing run that Sh we'll start run PI so we can start with that and we see that flask debug is set to 1 and the pin is set to OFF and then it executes this Python script so that's putting this in debug mode and then also telling it to ignore the pin so that's where the vulnerability comes in run PI we can see it's a flask application doesn't look like a database everything is hard-coded we got a few JPEGs I don't see any passwords we could grab this entire directory for password to see if anything comes back but it's just the templates so nothing too interesting in this if you want to see the nginx configuration we probably can pull that it's probably under sites available cat default and then let's see so add slash index it's doing a proxy pass to localhost 888 so this is how it's serving this webpage so it is just acting as a reverse proxy so we answered what is port eight eight eight eight we got this set UID binary so let's go take a look at that if we execute user bin garbage we're going to get user is not authorized this attempt has been logged we do s trace user bin garbage we can see let's see it doing a call to get UID right here coming back as 1001 if we grep passwd with our username which is how will see that we are ID 1001 and then it exits and I don't see it actually right here maybe doing some type of log so maybe it is actually logging not positive but let's just take this binary and put it on our local box and analyze it with Dedra so SCP - i how ten ten ten one thirty nine user bin garbage right there we forgot to specify the username and then let's open up get raw agita and let's see we need a new project non-shared Ellingson garbage set UID let's make the garbage okay open this which is going to be the disassembler slash decompiler file open oh no we want file import and then input this binary yep is it a 64-bit l let's analyze it select all and I'm just gonna wait for this little bar at the bottom right to finish doing all the analysis shouldn't take too long there we go it's done and let's look at main where is main there it is hit too many keys and then we can go to the call graph to start out and kind of analyze this and we see a call to check user so looking at check user we can see it's going to do that get UID call and then we got a few jumps down here and then an exit and then right here it looks like user is cleared for access to the program so if get UID and then goes down this if train let's just get out of the call graph because it's easier to read it this way I believe especially when you have D compiler output so we have a if statement that has three things if verb 1 and var one is going to be the output of get UID is not equal to 0 X 3 a and I believe that is 102 so if we do Python print 0 X 3 a 4 it is 1002 so if one's not equal to 1000 to 0 or 1000 print the user is not authorized to access this application otherwise user is clear to access the application and continue so since we are UID 1001 we can't we're not clear to access this application and then looking at main let's go back there's nothing that really happens before there's check user call so we don't really have an attack surface so I'm gonna ignore this binary for now we probably should look at who is 1002 because we see one thousand one thousand two and zero can run this so let's grab one thousand two let's see passwd that is Margo and then one thousand that is the plague so those are the two users we probably want to target we want to get on either Margo or the plague because we can access that binary if we get on the plague he's also a member of sudo so there'll be something really good there so let's save this for later and then one member of the ADM group so we can see what follows we can that group provides access to with find / - group ADM I do - OS so I can see all the permissions and then - Devon all to hide errors maybe group should be lowercase ADM and now getting the output so we can see the very first file we have is ver backups shadow dot back it was modified March 9th we have a bunch of log files and then stuff and snap which I believe is a package manager for Ubuntu so this file is definitely interesting the first thing I want to look at is the date on this file and the one in Etsy shadow so we can see that etsy shadow the group is shadow shadow got back its ADM the important thing though is our backups 1309 and etsy shadow is 13:30 so ours is a slightly different so that means is going to be different tie a knot time but different entries in it I think we do - - is that time - style is equal to full eye so there we go and we can actually get the dates or the timestamp so we see the backup was created at around 8:40 2:00 p.m. and then Etsy shadow the last time it was changed was around 1021 so there's about a 90-minute window which a user could change their password and us not see it so I'm gonna go to do is go into very long and I'm going to grep passwd on auth dot log and this will show us all the password changes so we have let's create go back here great canvas pseudo timeline so at 20 42 we have shadow backup that we have access to and at what is Etsy shadow 22 21 we have shadow wait a shadow so much ninth nineteen twenty we have how changing the password and then Margo changing the password and 1921 Duke changes their password they've never logged into the system that's weird so maybe that's when this account was created or something but the next thing we have is down here 22:06 the play changes and then we also have how changing and 2207 is Duke so how do k-- now the thing that doesn't match this timeline is Margo Margo's 1920 and she has not changed her password since we have this backup so chances are the shadow backup will contain a valid password for Margo so let's go cat that shadow backup so the backups shattered up back I'm gonna grip - because I don't want anything with that star so we can do like that and now we'll only have the hashes and the all dollar six dollar which I believe is sha-512 crypt so we only want to grab the first two so I can do awk - capital F a field separator print 1 : - and now we have stuff we can crack if we're concerned about time I'd only throw Margo win because Margo is the only one that I'm assuming has a valid password but it's still useful knowing users previous passwords in case they use like the date a season or things like that so I'm gonna go ahead and crack them all ssh to my kraken and this is just a dedicated box for cracking i just recommend not doing cracking in a vm because VMS are swell and cracking is very intensive so let's go into hashes we can call this file Ellingson paste it and now i'm gonna do dot slash hash cat example hashes pipe it to Wes and I want to see dollar $6 so the example format here that's shop 512 crypt and the mood is 1800 so dot slash hash cat - mmm 1800 I'm going to do a - capital o for optimized kernels this means that if the past was extremely long I won't crack it but if the password is of I guess a normal length it will be a bit quicker then I'm also going to specify - - user name and what this is going to do is take that hash dump format and - user name colon hash so when I go to output the hashes I can see exactly what I cracked and then we want the hash file which is going to be hashes Ellingson and then the word list we'll do opt word list rock you text let this crack it's going to initialize all the open CL runtimes and then begin cracking we can hit ask for status to see the time and we've already cracked one it's only going to take two minutes so let's grab a actually it's not glad that password let's show you what that - - username does so let's open another SSH session CD hash cat we can do dot slash hash cat - - username - - o - M 1800 and all we have to do is specify the hash is final so hashes Ellingson and this will tell us not only the hash and password but we keep the username so we can see the plague has a password of password one two three we could try this keep mind we're going to set off a log and we don't think this is gonna work because he set his password after the backup but we test it out anyways because why not and we hit all failure so that's not his password we get a second crack I am God s zero eight or dollar zero eight running this show again we can see that is going to be Margo's password so let's grab this and we can do su - Margo and go in and keep in mind we just created a log aware of how su into the Margo user why would we do that when we have SSH open so the better way probably would be SSH and this is just going to maybe not flip off as many alerts because maybe how let's use two different users so now we're in as Margo we can WCC on user text see that's md5sum line break to get to 33 characters we also can run that garbage binary and it asks us for a password we could do s trace potentially and see if the password comes out if we want to look for like a compare or something let's see I don't really see it so what I'm going to do is just go back into Geeta and we want to look for the string access denied so search for Strings why is there no string maybe it's because I had something highlighted search for strings there we go we don't look for access denied because that's what we see go to the cross-reference which is where this string is used in the program and we can see we got access denied access granted and if you want we can probably easier to look at the call graph if you're not used to looking at assembly so this is the access denied this is looking like access granted and up here and we're doing enter access password we're doing a call to gets gets is going to get input from the user and then we're loading the effective address never fear I is here into RSI and then doing a string compare so we're doing a compare against probably RDI and RSI RDI we'll have what we put and then RSI we'll have never fear I is here so easy way to get this is just to probably strings it and we can also look for m3 there we go copy the password and then run the garbage program paste it and we have a few options and before it cancels out so the one thing I want to look at is is there any hidden options because it didn't really give me any input so let's go back to Dedra and let's see we go to main check user let's go oh we can cheat and just look at this decompiler output so we have a few wall throughs let's see if local 10 is not equal to 2 then break then we get launched check balance and this is going to be 1 3 is canceled and 4 is exit so we only see 4 options 1 2 3 & 4 if we go back to this call graph may be more obvious there so if EA X is 2 Fe X is 1 EI X is 4 so it doesn't look like there's any hidden options here because we would see like if ei X is equal to 9 a be something high but we don't see any of that logic here so I'm going to go with there's no hidden options so the next thing I do is just put long strings whenever I have input and we'll try to see if the program crashes and we get a segmentation fault bear so that is a good sign let's copy this password and we can try putting those a's and to the next one and thing if it always crashes on long strings or that was just a random thing and we don't get a segfault it just closes out so if you look at the code we can go back into main we're doing a call to scanf to get user input I believe here if we look into the auth function we have a call to let's see where is it gets STR a copy and string compare so these are going to be where the vulnerable functions are if I had a guess just looking at this briefly STR a copy this is probably assigning the memory space for STR copy looking at the decompiled yep it is so local 24 is going to be wait why is that saying 12 oh yeah 12 times 16 I guess is that what that is there gonna be a hundred now not sure exactly what's going on but boy signing character space for the password it should be 12 bytes in length and then loading it on and then we just overload it and start overwriting the stack so let's just go take a look at this binary if we go back to my box we can do gdb dot slash garbage and this is just regular gdb in previous videos I had used pita PDA Python enhanced gdb I'm switching over to Jeff which is gef and mainly because Jeff is maintained and PETA is not so let's go and install this the first thing I want to make sure is installed is see make if I don't do this then when strolling some other dependencies later it will air out with some odd errors so make sure IFC make and then we can go to gef github and why do they pronounce it Jeff but call it GAF I have no idea I can only assume it's to try to get people to pronounce gifs correctly by putting a G and saying it's a J but let's just go down we can install it either two ways we can run this w get script or we can do it manually I'm gonna do manually because I hate piping SH and two W get even though I'm not going to analyze this code so really there's no point not to other than I guess I don't know so now when I run gdb we get four commands cannot be loaded we type Jeff missing we can see it tells us to install a few things so I press ctrl D to exit and then let's just install these so we want to install the Keystone engine and this the thing that's going to fail oddly if you don't have C make then unicorn and rapper this last one is also Keystone engine so those three are the ones I want and then while that installs let's go back and we want to download pone tools because we'll use this eventually so go to pen tools I'm making sure I get the Python 3 version because I like doing everything in Python 3 now we'll have to do it one day so might as well learn it now and then we can I guess install this while that's running so once that's done then we can do this I've paused the video for about five minutes so all this stuff would finish so we can run the final command which is pone tools and I forgot we need one last thing which will get an error we need the gdb server so once this is installed we have everything we need and the exploits gonna be very similar to the one we show in bitter man so if what I say doesn't make sense here go watch that video because I'm gonna try to explain it in two different ways so there we go it's going to be a classic rock chain with a memory leak so if we look at the garbage binary crap I forget the password was it where's it can I not get this and three there we go if we look at this we have a few things and the program itself is has calls to print or put so something to print output so what we're going to do is inject in one of these calls using a wrap chain so it's return object-oriented programming I think or return oriented programming something something programming essentially think of it like a DC ol is a ssin exploit we can't inject any new code but we can hijack any calls and replace the arguments so what we're going to do is hijack this call to puts or print and have it print us a memory address that's within a linked library which is going to be G Lib C that's going to allow us to calculate the offsets of exactly where Lib C is loaded and then access other calls that aren't exactly used in this program but are available to it because of web C the call will probably use is system so we'll just say hey leek the input of this put statement get the location of system uh I'm explaining it horribly let's just do it and explain it slowly so the exploit is essentially going to do something like this let's just call this POC C include stdio.h int main so we're going to say a can be 12 characters and then we want to load a memory register into a so what I don't know what just happened there P and puts so there's going to load the address of puts into the variable a and then we can do ports a so super simple program with GCC man my keyboard is going wacko it just close that hole pain okay GCC PR CC - OH POC we can see the memory address of puts is changing every time we execute this program and that's just because of a SLR but we know that system is going to be a set amount away from this because Lib C isn't randomizing the addresses within itself so if we have Lib C here we may have system puts set u ID etc and these are always in the same location Lib C may be loaded at memory address 100 which makes system 0x 101 and then puts would be 0 X 102 set UID 0 X 103 and everything else will say 104 so what this exploit is doing is saying hey we know puts is 102 so if we subtract one will know exactly what system is and that information is important to us because we don't know where Lib C is loaded this could be instead in 100 it could be 45 which makes all these 45 and this is essentially why that memory leak is important to us because we need to know where Lib C is loaded once we leak the location of one address we can put together where everything else is so that's essentially the exploit so the very first thing to do is find out exactly where this memory crashes so we just did a bunch of A's last time we'll do this again so we'll print 300 days copy this to the clipboard and then we'll do gdb dot slash garbage or for run end of the password and crash the program we see it ended on a return which is going to bring us to where RSP the stat point is going to be pointing it's just pointed to a bunch of A's if we look at RSP up here it's pointed to this memory address which is just saying hey it's a bunch of a's and then that's why the program's crashing because it can't return to this address so what we have to do is find a way to put a memory address here so we're gonna do pattern create 300 and this is going to create a like never repeating string so if it crashes right here we can know exactly where this is so it'll make more sense once we do it so copy that run to run it again paste it and we can see our SP is pointed to right here so if we do a pattern offset I think its pattern search no pattern offset if you have a confused you can just type help pattern and see what it is pattern offsets an alias for pattern search because pattern offset is what PDA uses so and that's the cyclic pattern that's what it's called but we see it's found at offset 136 from a big-endian search so if we do a python command again so python - c print a times 136 and then we can add B times eight and then C times oh we don't even need C we can just do B times eight and then paste this run this again paste it we see we still crash but our SP is pointed to bees and we confirm by looking at the register this is pointed to bees so what we have to do now is induce that memory leak in order to do the memory leak we need to have the program call something so we're gonna look for a function with wrapper so wrapper - - search and we want pop or a question mark I okay it's gotta be in quotes so pop ODI and return the reason why we want this pop is because in 64-bit languages when you do sis calls or not sales calls but arguments are stored in registers and 32-bit programming you just put everything on the stack and then when you call things it would just pop it off the staff to get arguments and 64-bit it's a little bit different it pops things out of registers the order it generally does it is RDI then RSI RDX RCX are eight or nine are the registers it normally uses four arguments so with this pop RDI we're going to say hey take this first value off the stack and throw it in RDI and then return and return is going to be the address of RSP which is going to the function we want so that function goes looks at ODI says okay this is the argument we want to run with and then executes so if we went back and looked at a super simple test binary I think I called it POC if we do gdb POC run break main run let's see can we easily see this so where is this yeah so we're loading the address right here is going to be the output of this S print command so we're loading that into our ax re X is normally stored for like the output and then saying hey re X go into our di and then do this puts command which is going to print what is in our di so that was a super simple POC dot C file we did before always helps when going through and learning assembly to have some source code compile it and look at what it does so we can begin creating our skeleton exploit V exploit PI and we can say pop our di is equal to this address and while we're at it we should just create the whole skeleton for exploit so we'll do from bone import star and we want to say context terminal is equal to T MUX new window and what this is going to do is set gdb to always open up in a new window 40 bucks super handy so P is equal to gdb debug dot slash garbage and then break main ok and we also want to set the context to be oh s is equal to Linux we've got the single core and architecture is equal to amd64 so whenever we do memory addresses and things it knows exactly what format it is so the first thing we need is the junk variable this is going to be a times 136 and then pop ODI is going to be this address and then we've got to get a few more addresses so we can put a argument on to the register what is the argument we want to put on it we want to put the global offset table is address so let's do Oh BJ dump - D garbage and go within this binary so if we grab it for puts the global offset is going to be right here so this is going to be G ot puts is equal to 0x paste and we want to pack these in 64 bit format so P 64 and let's see the address of puts this is gonna be the procedural link table is going to be this I don't think I explained this yet but essentially there's some magic involved with like a SLR and within itself the binary knows where the addresses it actually used her and then it puts a reference to that into the global offset table and that global offset table has some magical linking to find out where websi is loaded so it's kind of a trampoline to get two effects and we're do put I call put on this address it knows to go to the global offset table the global offset table knows to get me to where web c is loaded so we have this now gadget so we can say gadget leak is equal to pop o di plus G ot puts plus P LT puts and what that's going to do is it's going to pop this into ODI and then return to RSP which is what PLT puts will be at so we can do P dots and line junk plus gadget week so that should be fine P dot interactive and if we do Python 3 exploit pi continue it looks like we crashed I'm going to do ctrl D to exit and let's see line 13 can only can catch strings not bytes so was it 15 junk gadget leak I probably have to convert this from string into bytes standard Python 3 errors so we can continue here okay we hit a breakpoint continue we have now crashed and we are now crashed inside of main we're no longer in that author crash that we saw before and RSP let's see what RSP is set to some Lib C address so let's exit this and we see it printed something weird so this is going to be the memory address we leaked we could run this again continue exit and we get something different because remember it's random so this is a good start the best way to view this I guess would be let's see we can do P dot receive until do we have something I guess access denied and then we want to grab what's after this so receive until access denied and then we want to do leaked put is equal to P dot receive eight dot L we just do this and we can print week to put real quick to show you what it is Python three continue will crashed and this is what we printed so it's always going to end with a new line and we don't want that new line so that's what I'm going to call the strip so dot strip so that got rid of that /n and then we just want to adjust it eight and then null byte so this is gonna be a formatting thing so now when we print we can see it will always be eight bytes long and the which we call it padding will be no bytes so that is the memory address that's what Ella just did this just said always be eight do padding of null byte so instead of doing print here let's do this better we can do well log dot info F leaked address and then leaked put okay wayde's on three CC okay that looks fine we may want to convert that into hex so it's easier to read to do that all we put is dot hex like this it's easy on Python 3 then python 2 thankfully so now we have leaked address this so I guess we could change it to a little endian format I think this is in big endian I always get the two confused but these zeros should be on this so this string is reversed but won't worry about that later what we have to do is make the program not crash now so that's super simple all we do is go back here and the same object dump command except we want main we're gonna get back into the beginning of the program so main is going to be 4 0 3 FF 0 so we just grab this go to exploit and then we can put PLT main is equal to p 64 0 x and then we can do gadget li + we'll put in gadget week PLT main and because main doesn't get called with any arguments we don't need to pop anything into our di or anything so we can just leave this we run the program continue continue and the crashed why did we crash that is bizarre let's see VLT main 4 3 FF 0 let's take a look at this again garbage main what do I get for 3 from call queue oh let's Lib C main my bad so what I want is this address it helps to have things in Matt's window when copying things so let's go back to exploit go to main put the address on the exploit continue breakpoint breakpoint and right now we put anything it's probably gonna say access denied and then kill us because we just leaked the address and then continued running the program and the reason why we continue drugging the program is because every time we stood this program lib C's address is going to change so as long as we don't trash the program we go back to main we'll be fine if we went back and did let's see we could probably bypass this password prompt so if we go out of off whereas main come on main where are you function graph let's see set username call off let's see let's just try putting 401 6 for a see what happens I have no idea what's gonna happen here let's do BLT fun is equal to B 64 0 X 4 1 6 4 a ok so instead of main let's do fun run the exploit continue a few times we set faulted ok let's just do it continue going through how we were get rid of fun we can't have fun let's just do main so now we're back at the beginning what we have to do is figure out where Lib C is now because we've leaked the address of where puts is within lube C and then continued running the program so we're going to do is read elf on our Lib C program so Lib C is in I think user Lib X 60 86 is this it and then read elf - s web C yep dot s o dot 6 and if you don't know where Lib C is you could probably do LD D which is going to show all the link libraries on the program and that will point you exactly where Lib C is so could be handy so we want to grab puts and puts is going to be right here seven four zero four zero so we can go back in exploit actually already have exploit running okay so Lib sees address we can put it right here put underscore websi is equal to p 64 0 x 7 4 0 we just double check that one read elf puts okay that should be fine the next thing we need is system because we're going to want to call system so that one's going to be at 4 6 FF 0 so copy this system actually let's do Lib C underscore puts and then loop C underscore system is equal to P 64 0 X 4 6 FF 0 and let's see we probably should have set UID as well because if this binary doesn't make a call to set UID we'll have to do that so we can grab for a set UID this is going to be C 8 9 10 so set UID Lib C set UID is equal to P 64 0x c 8 9 1 0 and then the last thing we need is a argument to put within the system because if we just call system like this it's going to crash we need to give system an argument so to do that instead of doing read elf I'm going to do strings - a for all - t X is going to show us the luke memory location in hex where this is located or not memory the size and X and then grep for Ben SH and we need to specify Lib C so dot 6 and we see Ben SH is loaded at 183 Cee so we can say Sh Lipsy s H is equal to P 6 4 0 X 1 8 3 Cee and that is going to be all the variables we need for the exploit so what we should do is go back and label where we got these this was rapper this is objdump this is objdump PLT main objdump this is read elf read elf read L because there's a few ways to get these and sometimes they give different values so it's always nice to know exactly how you got all your functions anyways we can get back into the coding and we have the leaked address so let's calculate the offset so the offset is going to equal the unpacked version of leaked put and then that's going to be the difference of the unpacked version of Lib C underscore puts and we can say log info F offset is equal to offset so now we know where Lib C is at least lipsi putzes so we can do the difference of all the other functions we want so let's do system location is equal to unpack version of Lib C underscore system plus the offset and then we will want to do whoops set UID location the same exact thing but set UID and then we'll need the string location for SH and this is going to be again the same thing but SH and we can do log info F system system underscore location and we'll do UID this is set UID set UID location SH location owners do it that's why and lowercase okay and we probably need to put these in hex okay if we do Python 3 exploit PI continue and has no value hex let's see we can convert these two bytes and we'll do byte order is equal to little I'm sure parent Tools has a function for this but it should be fine convert negative on site into unsigned something failed nervously that time we didn't crash so now we have the offsets for everything the byte order is flipped which isn't ideal but let's see for this we're going to want little endian but for our ability to check I'm going to change this to big real quick and you'll see what this does continued we can close this session so these are the addresses we're used to saying so we can test everything so let's go back into gdb control C to get in break examine this address and we can see that is the call to web C system we can examine this set UID address there's the call to set UID and then let's do pin Sh and we're going to see this isn't going to look right but if we say hey don't examine the hex examine it as string we can see that's been Sh so we know we have everything good so let's convert these back into little and then create a gadget chain so we need this will be gadget to leak and this will be gadget to code exact so the very first thing we do is call create the variable so gadget RC e is equal to pop or di plus this is going to be the set UID call so we're going to do P 64 0 because we want to put 0 on to into our di and then set UID location or not that is that what we called it yeah set UID location so what this is going to do it's gonna pop already I put 0 into our di and then call set u ID and set UID is going to see hey Oh di has 0 let's do a set UID 0 so the next thing gadget RC e is equal to pop our di and then we got to put the location of SH and then we put the system location okay and then P dot send line is equal to junk plus gadget RCE and then we'll get interactive so run this exploit continue o seg fault let's go see see see for some reason if I go to quick it looks like it's crashing but inside of this now I have my shell so everything looks like it is working just fine the final thing we have to do is make a exploit go through SSH so let's get rid of contacts terminal and this debug thing and what we want to do is s is equal to ssh host 10 10 10 139 user is equal to Margot and her password is equal to something let's go here it's going to be I am God dollar 0 8 I bet a previous password words I am god dollar 0 7 but paste that so that's going to ssh in and then P is equal to s SH process user bin garbage so let's see if this all works Python 3 exploit PI that's to say Qing in should give us all the leaked information soon there we go LS and we crashed and the reason probably is all our Lib C addresses are probably going to be wrong because it's a different version of Lib C so let's go back into SSH as Mardell and we can just do LD d use a bin garbage to find the location of Lib C and then if we go back to our exploit everything we got from Lib C was here so maybe we could do object dump garbage garbage garbage whoopsie whoopsie whoopsie whoopsie so read elf on websi let's just do read elf s Lib C dot s o dot six okay grab - I put a system and set UID okay these are the ones we want it's going to copy this and then we'll put them in set paste okay so let's see Lib C put put is going to be this one then I do it correctly let's put in word P there we go and we can get rid of these zeros okay Lib C system so system is right here in word but delete this set UID where you set UI d YW to yank P so now we put the new location for put system and set UID we just need Lib SH and that was gotten through strings so go back to Margo strings - a for all TX Lib CSO 6 grip then SH and that's at 1 B 3 e 9a so paste and now we've updated royal locations if you go to the bitter man video there'll be ways to have parent tools be able to do this automatically leaked address was all zeros so it failed let's try this again week to dress all zeros there we go LS user dot txt and we have my root CD / root WC - C root text and you can read it but as I was saying bidam Ian has ways where you can just say hey pone tools go read Lib C at this location and then dumped all the offsets so definitely check out the bit of man if you want to do some more advanced things but that will be the video actually we can go over the exploit script real quick in case you have any confusion so right here importing paren tools here we were telling pen tools to execute SSH and garbage this gets us to the RSP overwrite this'll put value into Rd I actually I don't like the way I can't wear that let's do take top value off stack put into Rd I because that's exactly what pop does global offset pointer to web see puts location this will be the location of calls and PLT which is the procedural linkage table I think and then this is location of stuff in Lib C calculate offset to get real location where will get loaded location would be a better way to put that okay this is going to catch the week put G ot puts into Rd I call puts to print G ot puts then call main to not crash okay this is going to be getting the memory address this piece was calculating offset then this is going to be using offset to find looted addresses and then this is going to be printing output for debug probably sure to put this under like log debug but oh well gadget to code exact so this is going to be put 0 which is the UID for root into Rd I call set UID and then this gadget is going to put an SH into our di call system and then have shell and that'll be it so hopefully going through the program helped you a little bit but that'll be the video take care and I will see you all next week