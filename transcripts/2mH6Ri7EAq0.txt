 what's going on youtube this is ipsec me doing unicode from hack the box which starts off with hacking jwt tokens it's a token that's signed with rsa 256 and it's a misused claim vulnerability it's a bit hard to explain but enables you to forge tokens so we forge a token that calls ourselves admin and then we gain access to the administrative functions of the web app which include a lfi vulnerability but to trigger the lfi you have to bypass a blacklist that is preventing you from entering dot dot slash so you can't do directory traversal however after the blacklist checks user input it does a unicode normalization so if you did unicode in the user input you can bypass that blacklist because a lot of unicode characters look like the ascii equivalent as you can see in this title image or maybe you know music so like under pressure you start hearing the start of that song and like oh god vanilla ice got me again this is ice ice babies so they look alike but they're not the same i guess you could say so with that being said let's jump in as always we start with the nmap so dash sc for default scripts sv enumerate versions oh a output all formats put in the nmap directory and call it unicode and then the ip address of 1010 11.126 this can take some time to run there so i've already ran it looking at the results we have just two ports open the first one being ssh on port 22 and its banner tells us it's an ubuntu server we also have http running on port 80. it's banner says it's engine x also running on ubuntu so let's just go take a look at the web server because http has a much larger attack surface than um ssh and going here we see a page hack media there's a link here it's going to 101011.126 slash redirect and then sending us over to google so we can see that behavior here if i do control you we can see the source code of the page and what i'm looking for is like um wp dash which would indicate wordpress uh slash administration i'm just looking for like fingerprints of a cms i don't find anything uh there is a login as well as a register so let's go take a look at both of these we can try logging in with defaults like admin admin admin password things like this and we don't really get in so let's try the registration now i'm going to register ip and then the password of password and then we go to sign in so yep password and we get to this welcome to hack media page and there is a buy now link a threat report log out button we definitely don't want to click that one and then just a bunch of various things so looking at this all these links look like they go nowhere we do see a powered by flask at the bottom so we know this is going to be a python web server looking here we have various checkout methods this icon is dead if i open this in a new link uh the bootstrap logo is not on the server so i was wondering if that would disclose like the host name of this box if we do upload there is a browse i click that and it's looking like it wants a pdf file so what i'm going to do is a locate on my box dash r to allow regular expressions and we just look for files that ending in pdf and while that runs we can go to the unicode directory on my box i don't want to go in and map and let's see let's take tip.pdf i'm going to do a file against it confirm yes that is a pdf and then we want to upload it so submit and we get a thank you and nothing else i'm going to mainly check like an uploads directory we don't have anything i wonder if it could be underneath of upload we did like tips.pdf we don't know where that upload actually gets stored we could examine the request but i don't think any good information will be there so if i go in burp suite and let's intercept on submit it we do have a jwt token in our authentication and how jwt works why i knew it was jw at first is i double clicked and right off the bat after seeing this i saw a period and jwt is three pieces you have the header then the payload where's the payload end oh that's a short payload and then the signature and they're all base64 encaraded so like we can highlight this uh we see it's decoded selected text oh i'm surprised it decoded again decoded url encoding uh base64 i'm not sure why that's not decoding properly but anyways uh no good information here if we wanted to actually decode this maybe we needed like the equal signs yeah so burp suite isn't doing it because of padding so i make that valid base64 and we see it decodes to a jwt the type or the algorithm is rs256 and we have this jku let's go over to jwt.io to make this a bit easier to play with or at least c so jwt.io paste in a token and i don't know why this dark mode theme did not apply is it on it is oh well um so what we have exactly what we saw before type jwt we have this jku and then the payload user is ip and let me see if i paste this again there we go and then we can put a public and private key if we have one now this is a bit odd for jwts because we normally don't see this jku we normally just see it being like i want to say like hs 256 or something um yeah like we see these algorithms not rsa and what is happening here is the jku is i want to say an oauth thing like single sign-on so if we wanted to authenticate our google account to hack the box we don't have google sign like private keys we have to find a way to trust google somehow so what happens is they put this jwk file and the jwk file will contain information or essentially the public key that can be used to validate the jwt token so if we go here we have to add a hack media.htb so hold on one second sudo v etsy host let's do 10 10 11 126 that's not what i want 10 10 11 126 hack media dot htb save that then we go to the url and we have what the jwks file is and this is just information it's saying like the algorithm it used the kid is some identification i don't think it's too important um well it's rsa here's the actual algorithm rsa256 but the key piece is the modulus and exponent and is modulus in rsa so this is how third parties can validate the key because they get this jwt key that um we sent so in this case let's say um hackmuted.hdb is google and hack the box is taking that key and we want to allow google logins but google won't give us the private key to sign their users because if they did that we could impersonate people so they host this file so when hack the box gets this key they look at the jku and oh in order to um validate that this key has not been tampered with i can go download this file and then check it with the key so that's essentially how it works now one of the attacks of this is them not protecting the jku file itself so if we can edit the jku and point it back to us then of course we can put the um modulus to be anything we want and then validate the keys so um that's going to be what we're going to be trying to do so the first step is we have to change this to be an ip address and here's going to be the annoying thing in jwt as soon as we make an edit if we don't have a signature it erases everything so i'm going to be doing it from the command line so let's go back and i'm just going to copy this v we'll do this jwt dot header and i'm in visual mode we'll paste that's not the right clipboard that is and we want this on one line i wonder if i should have done it a different way ah this should be fine actually i'm just gonna go back to my burp suite window and we can take this cookie right okay echo dash n b 64-d there we go jwt.header so if we edit this we can change the url so we're going to point this to 10 10 14 8 jwks.json i'm going to put it on port 8000 so i want to listen to port 80. um just to make it easier this way like python http server and everything else listens on so if we encode this so base64 jwt dot header w0 we can copy this and then um let's see just paste it in and we have to find a url that the key actually matters to um so if i go back to where's that upload form this thanks if i hit this without a key let's see exactly what happens real quick so i'm going to refresh this send it we have to turn intercept on and we're going to take this off what's going to happen forward it still says thank you so this is not a good page to do it because there's no authentication on this upload page if we go over to dashboard and we take off a key what happens so erase this cookie forward it along we get to the login page so this is good so if we refresh this and put our modified token here and we can show that's not a modified token that's http uh let's copy this again copy paste there we go so this is a modified token we can see the jku is pointed to us i'm going to do nclvnp 8000 to listen on the port and when we send this request we don't get a hit we go here and we see jku validation failed now the jku validation failed and it didn't even make it to us so we know um it's not doing some type of signing thing yet it's doing like a check on the url itself so what we can do is hope that it's just checking that it begins with hackmedia.htb static because earlier on the webpage if we went back to the slash we noticed there is a redirect so what we can do is if we went to hackmedia.htb static then dot dot slash redirect question mark url is equal to http 101014 port 8000 jwks.json if we went to this url we can see it will redirect us over to our burp suite or not burp suite our thing and it did not that is weird static redirect 10 10 14 8 i'm going to redirect to 12701 because maybe my firefox window can't hit that right so if we redirect it's still not hitting that what if we get rid of this http well now it's taking longer to hit and we have intercepted a request so we know we don't want http in this url so if we save this and we put this as the jwt payload so v jwt.header this jku i'm now going to put hackmedia.htb static it began with http and then redirects us so now if all the server is doing is checking to make sure it's coming from hackmedia.hdb it'll validate that right so let's encode this and we don't care about the equal signs so i can copy this let's do nc lvmp 8000 again go over to burp suite turn intercept on we will see that's not the page we want we just want this so i'm going to delete this put this header in and when we for this request it's waiting for us and we can see that 1010 or 126 connected back to us and it's looking for jwks.json so this is really good we have the server connecting back to us we just have to create this jwks.json file and put some uh private key in it so i'm gonna make dirt dub dub dub we go in dub dub dub and we can download the jwk so i'm just going to do a w get on this file [Music] my clipboard's been wonky there we go so v jwks.json and now that the server is coming back to us we can change the n and the e because we just have to make our own key and if you want a really good post about this if you just google like jwt claim abuse i believe it is let me turn burp suite off it should bring us to this pen tester academy blog which is pretty good on it it's just pretty lengthy as you can see my search bar so i won't be using that essentially the first thing we have to do is generate the key so i'm going to do ssh key gen t rsa block size 4096 create a pem and jwt rs256 dot key that's going to be the out file we're not going to put a passphrase on it and now we just have essentially an ssh key right if we do jwt rs 256 we have the private key here now we just need to get the modulus and exponent out of this so i can do open ssl rsa text dash no out in we can do jwtr i believe uh it wants the public key um i mean the private we can get it from the private key i'm sure we can extract these from the public key as well i just don't know the syntax off top my head but we have like all the information we want about this private key the two exponents it's using the primes let's see here's the public exponent and it's this and i bet if we go to like decimal to hex and look at this convert it i was hoping we'd get um what we got on the jku let's see cat jwt dot header oh no we want jw k oh one dub dub dub cut this file jjks.json aka b that's what i was expecting to get um let's go dchq cyber chef oh that's probably base64 um let's try this real quick six five five three seven convert if we base 64 this what do we get uh echo dash n base 64. we get that let's see 0x if we convert this from hex out i don't know how to get that exponent um let's see let's go to gchq cyber chef cat jwks.json aka b [Music] from base64 to hex and we get this so that is hex encoded um i'm just having trouble like converting from hex whatever but um where is my public key i think it's up here okay so exponent that's one two what is it public there we go so um yeah we see zero one zero zero zero one uh we don't have this area here because you can just strip this off in hex doesn't mean anything but you can see zero one zero zero one so that is what aqab is we don't have to change that the only thing we need is that modulus so i can do a dash modulus and we get this and actually i think i know how i could get this um i bet if i echo that xxd dash r p base64 there we go so that's how we can convert it from hex and then base64 because we're going to do the same exact thing to this so echo all this then xxd dash r to reverse and p it's making so it's not that three column output that is expecting and then we do base 64 and we want to put it on one line and now we have the modulus that we can just put in our jwks file so if we take this out paste this in and we start a web server http server it's already on port 8000 then let's cat jwt rs256.key uh xclip dash selection clipboard to copy it we go to jwt.io put that in the private key cat the public key uh is that what we want i don't think so let's see invalid signature we probably need to convert this into a different format i wonder if i can just copy like this line and say public key and it starts with begin right if we do this does it accept it invalid signature i was hoping it would automatically sign this because i don't think it wants it like this right whoops copy paste like there's no way this will say key validated yeah so we have to figure out how to convert this into a public key so let's go over to google we can say open ssl or say private to public key and hope it gives us something see out maybe this dash pub out option let's do open ssl rsa and jwtrs256.key dash pub out that's looking better i think we can say dash out and then we want key.pub that seems fine if i cat this now jbtrs256 key.pub hopefully this works it's in a better format um i think this is a different thing than we were saying with that ssh i don't have that anymore let's see control z yeah ssh began with aaa and this does not begin with aaa so um completely different if we paste this in signature verified let's modify it sweet so now we have a valid signature so i can do user and we can change our user to whatever we want i'm going to change it over to admin because typically most web apps have a user called admin and then we can copy this whole token and go back to our page i'm gonna do f12 and we're going to edit this auth i'm going to change the value to be a new token so now when i view it oh we're not getting anything however oh we were listening on port 8000 um let's go back to jwt.io because we forgot to update the jku so um do we have that somewhere here cat dot dot slash um jwt dot header and we can copy this to change this and now we can update our cookie to be the new one and when i refresh this page we have a completely different page that we haven't seen before so this is the admin dashboard so if we go back here we can see it did do a get on our web server if we go to orders we can go products if i click on this plus for saved report nothing um i have a page is equal to something here so chances are this is going to be what we want to attack and we can see a lot of times when we click the web server is making requests because it's validating our token so i'm going to hit enter here send this to repeater and every time i send this i'm going to send three times here we go we have more hits so every time we're sending this we're getting something so i'm going to do a w fuzz against this soon but first thing i want to check is standard um lfi right and if we do this we get directed to a slash file not found so if we follow this redirection we get something so let's just put that so we can view it so i'm going to copy this put it here forward it turn the intercept off and we see it's a 404 but they do a lot of input filtering so chances are um we have to bypass some type of filter because that's not the standard 404 if we do a random thing it just says 404 so this slash file not found does bring us a warning message about filtering now we could pass this over to like um an lfi script so that's generally my go-to with like w fuzz or f or something so i'm to do w fuzz because i remember that syntax i'll stop my head but i can do hdp colon slash slash um 10 10 11 126. we want to grab this come on and then the page is going to be fuzz the word list we want to use let's do opt set list uh discovery fuzzing or is it fuzzing here fuzzing if i look there is a lfi directory so i'm going to try like this lfi jhaddix right so let's do opt set list buzzing lfi this and when i run this we get a lot of random status codes right is this getting all the pages oh um if we look here we're not getting anything i'm gonna move the w fuzz to the other pane so we can see simultaneously what's happening here right we're not getting any hits on our jwks and that's because we didn't specify the authentication so i can do dash h uh cookie and then we copy and paste this right so now when i do this the web server is going to be getting our jwk now i don't know what these so we got 302s we get 503 i don't know exactly what that 503 is if i go back to burp suite and we send this one url we have a 302 here right and what i think is happening is the python web server is pretty slow so what i'm going to do we can do dash dash hide code hc 302 we're only we're seeing a bunch of 503s db.php was 200 what if we look at db.php that is 200 but this is a flask app that's weird i see astronaut things um let's actually refresh the page and see exactly what db.php is db.php not found so we may want to hide things that are 516 lines right hl 516. we get 503s still and what is happening is this python web server can't keep up it's single threaded and w fuzz is multi-threaded i bet if we do like t1 to set one thread it's gonna go slow but we're no longer going to get those 500 errors if we just stood up like apache web server um i think we'd be fine because it can handle that right if we instead of this server we do php dash s i wanna say zero zero zero eight thousand like that now we have a php web server is this working uh fail to open stream unknown line zero maybe i do slash let's see history grab php dash s do i have in my history web server started okay sweet because i think the php web server is actually a bit faster [Music] maybe not let's see let's just start sudo apache to start and we'll probably have to modify this to be port 80 actually pseudo v etsy apache 2 sites enabled 0 default let's change this to be virtual host 8000 start and restart so is apache now listening on port 8000 grep 8 000 it is not it is listening on 80. maybe i should just change my jwt token that may be the quickest thing to do here um port let's see go here i wonder what this 098 is 9876 don't remember what that's from so i'm just going to change the jwt payload let's delete all this okay cp jwks.json for www.html pseudo and i think we should be good if i just go to localhost we have this json file we can view it awesome so we have to go back to jwt.io remove port 8000 and then in our w fuzz command i'm going to laugh if we still get all those uh 500 errors and there's probably a hotkey i can do to delete all of this but i'm just going to do it the painful way okay now that's deleted paste in the new key and we still get those 503s occasionally so i wonder if that's just some type of bad name but this was a big like kind of rabbit hole because this whole lfi w fuzz doesn't really bring us anything we could do um comma 503 to also hide those and we don't get any results now the name of the box is unicode right so wonder if we can trick this because we know there's some type of filtering on etsy passwd so my first question here is what exactly is filtering i'm going to start removing things to see when we get directed away from [Music] oh um we have to update our jwt here because we're no longer listening on 8 000. uh let's see because i just noticed we're getting directed towards login right so let's copy our cookie and paste it in here okay we're no longer getting directed login we're getting directed to follow not found so this is the correct um error message and notice when we remove etsy and passwd it gets removed i'm going to just try does not exist does this get redirected if i were not found no we do the 200 okay dot dot nope 200 okay dot dot slash 302 found so dot dot dot slash is going to be a bad character we could try to encode this in unicode and hope it does some type of normalization and the main reason i'm thinking that is the whole box generally this type of attack works really well when there's a web application firewall in between you and the app because by the time it gets the app the app may just get regular format the web application firewall sees its unicode and does a bunch of string comparisons and of course the string doesn't match because it's slightly different um you notice this a lot when you like copy payloads from a word document into your terminal and you'll notice every time you do that you get like those angled quotes and things just don't work because you got a character that looks like a quote but it isn't exactly like that so that's what we're going to look here and whenever i want to get to an attack i normally just google hack tricks then we can say unicode normalization and see what it talks about here because it probably gives us some good um [Music] characters to try this off with we could also check like payload all the things but here's things and a few things unique characters and we want to slash so this will be encoded into a slash so let's try dot dot that gibberish we do 200 okay so let's try this a few times and then etsy pass wd and we get the contents of etsy passwd so it is vulnerable to some type of unicorn normalization tag because this slash isn't a slash it is this and the application's converting from unicode back down to ascii after the filter comes in place right so now we have to figure out where this web server is and generally the first thing i always do is like proc self cmd line and we see this is using uwsgi localhost on port 8000 the file names probably to be app we can try checking out like the environment so environ um use a local it's home directory is home code so chances are we're going to be the code user we also see user equals code so that tells us it's in a bash shell we don't really have anything else there um we could just try like app.pi because we saw app before and we don't have anything because we're going through all this unicode stuff but i would just do page app.pi uh we don't get anything maybe app slash app.pi no um let's see what else can we do i wonder if we do home coder dot bash history and we may have to um there's way that one time it directed us to our login and then the other times it didn't and control zing back to get here we can try home coder dot bash history to see if there's anything here it doesn't look like there is let's see we can try app.pi nothing one of it's in a directory called app nothing so we don't know exactly where this application is um there is another handy directory and that is proc self cwd this can be the current working directory so we can do app.pi there and here we go we have the python application so um [Music] this is just the working directory of the process so if i go here let's see if we do echo dot dot that's going to be the pit of my process so if i cat proc this cwd or if we do an lsla on it we can see where is cwd his point into this we could also have done um proc self and grab cwd uh i thought we could have is that not working proc self okay we need the trailing slash i was like that's weird but grab cwd we can see it's a sim link to ver dub dub html because that's our working directory i just go here we do it again now the working directory is home ipsec so this whole cwd directory is super helpful for dealing with lfi so we don't even know where we are we just know we can do proc self cwd and get it so we got my sql user and it's opening up db.yaml so i'm just going to replace app.pi with db.yaml and we have localhost code and then the password best coder2021 at bang so we're going to try ssh with those credentials so code at 10 10 11 126 was it coda coder code this in and we get into the box and the actual web app directory looks like it may be coder so if we knew and we did page is equal to coder slash app.pi it still doesn't work we probably need like one dot dot slash or something i'm not exactly sure why actually just app.pi should have worked because we're in current working directory um maybe at the end of the box we can look into this lfi and exactly what went on here because i'm confused why app.pi didn't work um oh it's probably pulling it from like an upload directory so we probably need dot dot slash app.pi right yeah so the python code is probably coded saying um pull the page variable and then go into up well it's going to be like file is equal to uploads slash page so we're no longer like here is not going to be in current working directory because we're hard coded to go into a directory in the app so that's why we just need one dot dot slash but the easy way to do it is current working directory so that gets us onto this box and the first thing i always check is sudo when i'm a user and we can see i can run this binary t report so if i do sudo this we can create a threat port read it or download so if i do one i'm gonna do ipsec enter the report i don't know what the report is choice what is this it's giving multiple i'm just going to control c in it um redo it and we see it's executing t report.pi when i did that so we may want to try to find this file as well because maybe we can just edit it right um the threat reports we have ipsec so and a choice uh let's see fine slash grab this and we want to hide error messages to dev null and i know you can probably use the file name with the find command i just always for some reason uh get that syntax wrong and this is the easiest way for me so let's see let's try download a threat report ipn file name i'm going to do nclvmp 80 we'll sudo that so we can listen on 80 apaches running service apache 2 stop we have to do sudo now we can listen on 80 and we say 10 10 14 8 slash test and it's using curl so that's interesting um let's see we can do this again download and we can say 10 10 14 8 slash who am i and see if we get code execution this way uh not allowed so it did not like that we can try 10 10 14 8 back ticks who am i not allowed so that's not working um i wonder if let's see download a threat report if we do http 10 10 14 8 does it still connect it does so one of the weird things is well not weird but from doing a lot of ctfs one of the things that is in my mind is we're in a python application right now and um it's using curl it's not using the request library and that's a very nuanced thing but maybe it's like a quote-unquote master recon thing of knowing because um the request library doesn't allow a lot of file wrappers um it can only pretty much do http and https if you look at the man page they say because request is http we don't want to allow like gopher and all those other weird things so if i do file colon slash slash let's just do root root.text do we get it invalid url let's see i wonder if we escape something so in bash if i echo file like this it's still filed because the backslashes escape so this is an easy way to bypass a lot of filters now i did not like something see f i l e let's do three slashes and it downloaded it if i exit out of this i don't know where it downloaded it to um it definitely accessed it right but nothing else um let's do download report f i l e colon three slashes root root dot text and then we can say dash o for out file i believe we can say temp root and it says invalid ip so we could try the ifs so ifs ifs and by default ifs is always going to be space and it says file not found oh let's try actually doing it when we're in the right prompt so we do this it says not allowed there's another way we can do spaces in bash and that is through expansion so if i do echo hi it's just going to convert all this commas here to spaces so that's a different evasion technique so we can say f i l e like that root root dot text and then comma dash o comma slash temp root and see if we bypassed it says it downloaded if i go to cd slash root or cd slash count we can see root and get the flag so we could have also knowing that we can write files we can probably download a threat report and then say it's on 10 10 14 8 slash [Music] we can just say authorized keys and we want to shoot i have to put this in brackets slash authorized keys and then out to root dot ssh and let us sh dash key gen f we'll call this root move root dot pub to authorized keys python3 dash m http server and we want to listen to port 80 there we go so this should download the authorized key file and save it to root.ssh it downloaded it i don't know if it saved it though we can just try ssh with it so sh dash i root root at 10 10 11 126 and it did not so authorized underscore keys dash o let's actually specify the whole file name maybe that's what it wants three then we can say authorized keys if this doesn't work i'm going to guess the ssh directory doesn't exist underneath of root um that time it's saved we do this and we get in so that was it we can always go now to the root and read the key if we wanted to but the main thing i want to do is look at this application a little bit so looking at it the question we had was what it did with the file include right so i'm going to go into app i'm going to search for page and we see request args get page and right here it's looking for the dot dot slash so if it starts with dot dot slash or slash at c or slash proc or slash user uh we have two of these etsy's that's weird that they did this twice but if it starts with those then redirect them to this file not found otherwise it's going to [Music] normalize the unicode which this is weird i don't really like how they presented this but um because normally like the web application wouldn't do this unicon unicare normalization but this attack path does exist mainly when you have some type of web filtering thing before your web app so like blue coats mod security maybe things like that or maybe even load balancers so i can forgive this because they're trying to present it in a way where you do um unicode normalization obviously it's intact because it's on hack tricks so um what i was looking for is that open though so else we're going to get this and here we go it's going into files plus save page so i want to look at what's in files right so if we go to coder files we can see monthly.php pdf and quarterly.pdf uh we didn't see the thing we uploaded which was like note.pdf so that's what i mainly want to look at is this upload thing so i'm just going to do a search on upload and see how it is so let's see post it's pdf docx php python asp so it's actually allowing php files i guess because it's a python web server it doesn't matter and it doesn't do anything with them right so we don't actually have an upload vulnerability because we got this request method post and then it just says thanks right or far not loud i don't see anything where it's downloading um i don't know what this slash debug is we do have a slash debug so this is probably because we didn't run go buster we're finding all these endpoints right so if we do slash debug bad gateway let's see debug value get it's weird 10 10 11 126. did we just is the whole app down no debug value equals one i'm not sure why this debug is changing pricing checkout i wonder if we need to stand up or apache again so let's do sudo service apache to start okay and refresh so i was just wondering if it was trying to get our jwt token and i don't see it doing that so i don't know what's going on here we can look in apache oh it's um nginx right so sites available less default debug i don't see anything uh we do have a rate limit but it's going on localhost 8000 rock see i don't really see where that debug thing is so that's weird um we can go back into code coder maybe uh debug has to be true well it is true here app route def debug see this upload maybe it's because it doesn't have a method there's no method tied to slash debug but there's no method tied to pricing and it works oh well um i don't understand what's going on here that's the danger of doing like this exploration as um like live we can look at like slash internal none type none so it's just getting the traceback error let's see yeah we don't have a method on this file not found and this definitely works so i think that's going to be it um i mean look at how they validate the jku right so right here it's loading the token doing things and if the jku starts with hackmute.htb static then do things right so um that's why we had to set that and not have it be like just straight 10 10 14 8 and why we needed to chain that redirection but i was looking for the key here we go so on login we have this and how is it signing the key priv okay so it's just doing jwt encode user priv algorithm so this is how they create that token so that's gonna be it hope you guys enjoy the video take care and i will see you all next time oh wait username is equal to admin is there actually a user called admin or not i wonder hold on um there's a database here right catdb.yaml dash u code p there's got to be a database the admin user right i'm just wanting can we just register admin because it i noticed like it was saying username equals admit didn't do like a group so um show tables show databases use i'm guessing user show tables select star from user info and [Music] i don't see admin what if we register as admin without just bypass the whole token step that'll be a stupid bypass let's see clear it clear history and again these are all things like i do after i pop the box just looking out seeing if i missed an unintended now that i can register so i try to register as admin admin password and i can't log in right that just did not let me admin password why didn't that let me hello again okay this is the login oh if we attempt to log in with username equals admin then it's been blocked is that what it was saying and redirecting me prep suite admin password login proxy huh oddly enough i don't think that is telling me i'm blocked because i read this as i hit this login i'm doing a post so here we are in the post method we go down username get user password if username is equal to admin it's blocked where's it actually testing login can we just log in with any user see there's something i don't understand with this app again login no it's doing something right um this is a test password password yeah it definitely does something with that we can delete this cookie what if that wasn't the right table let's see no because there's my password catd.yaml mysql we should now see admin use user show tables selector from user info yeah admin password see so app config mysql so on register we're doing a my sequel connection that's fine that makes sense when we register and that's anywhere i see my sequel redirects to login okay on a post we do this we have priv and username so if username is equal to admin then oh is it ever actually saying that is login.html admin password so i think i spotted what i was confused about so let's intercept this and broke real quick because i'm guessing they're passing a message to a template that does not accept messages yes that is what happened so if we look at this code um we see if username is equal to admin then they put this message access to admin account is blocked and do render template login and message is equal to message right but this login template doesn't ever use message if i um go into login templates the login.html and search for msg there is none there's probably a template that does do something um let's just grab everything for percent because i remember the syntax off top of my head um [Music] and we get numbers shoot um let's see i'm gonna google real quick j2 uh jinja two example template most python applications will use the ginger 2 framework so that's why i did this ginger 2 example template ginger 2 example template and i think it's just like um like a yeah this percent so ginger to example template if variable exists that's the variables this is probably not going to be the correct way i don't even think i need is defined i think i can just do is variable right so let's go v login and then what's the login page look like uh login we're gonna look for your username your username okay you can say if msg i think we can just do this right and then end if let's see um still did not find it i'm gonna do it right at the top i'm gonna do it before the html because um this way we know it hits and then we can move it to a place that we want so we hit this we're not getting anything we should test make sure this is live right so that is live so let's see ginger too we need to open close black brackets that's what i was missing if i do this i was expecting to get user does not exist let's see if i don't do that if nothing ginger to display variable this definitely should be working so we're hitting post to dashboard um maybe it's to login this is weird so admin password so we post a dashboard and that is the intended way is that what we're seeing in the code v app.pi where are we here one login approach dashboard it has off that's fine see if i change this to log in there we go so we have the message there correctly if we hit the correct endpoint the message is there i'm not sure why we're posting to dashboard though that is weird to me because this doesn't look like it has any code for logging in renderlayoutlogin.html dashboard use the dashboard login so i'm not sure what i did wrong we can go back to login and we can say if msg and if like this so now when we send this again we're getting bad gateway because we have bad code probably that extra bracket right okay this is like the beyond root that's never ending um once upon a time i'd be able to do this quickly i just forgot all about ginger apparently if variable is defined we can try this if msg is defined then end if is this going to give me okay that is good we can move this now down to well actually before we do that if we change this user does not exist now we're getting error messages so let's take this go to login body container let's just put it down here there we go and i think we finally fixed this app right so let's turn this off on the login form do something that doesn't exist and we have an error message user does not exist here so that is better um [Music] i wonder if we move it into the wrapper where does this go um behind it's not exactly what we want we probably want to create a special place for this but their message is going there now that is looking better i bet if we move this above there we go user does not exist so i hope you guys enjoy me fumbling around playing with jinja maybe that would look better if we put it below the submit button right like that so now when we log in we have that if we log in with admin password we have access to admin is blocked so that whole error message piece hope you guys enjoyed it um that'd be it take care i will see you all next time