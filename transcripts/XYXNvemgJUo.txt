 what's going on YouTube this is if SEC and we're doing Valentine from hack the box and believe it or not this is the first video I've recorded in like three weeks I haven't even touched Kali in three weeks because I was on vacation so we're gonna see how this goes this box was released on Valentine's Day so heartbleed is a very fitting vulnerability for it if you couldn't guess by the logo yes this is a heartbleed box so let's just jump on in as always we start with the end map so nmap - I see four default scripts SV enumerate version Oh eight I'll put all formats put in the directory and map and call it Valentine and then the IP address which is ten ten ten seventy nine does take some time to run so I've already ran it looking at the results we don't really see too much interesting here right off the bat we have SSH on port 22 HTTP on 80 and HTTPS on 443 but if you look deep in the nmap scan and look at the versions you'll notice something a bit off OpenSSH five nine it is eigh Ubuntu server and we're used to seeing 7.2 here and I think for Ubuntu - - and I say we'll use to seeing that because that is Ubuntu xenial which is a recent release of Ubuntu five nine is much less than seven - so this is probably going to be an old version it's also backed up by HTTP to point to point to - because we're used to seeing two point four point one eight so let's see exactly what version of Ubuntu this is so we can Google Ubuntu two point two point two - and Apache now we're gonna go look for the launchpad League which is the package manager and it'll tell us what distro that version was uploaded to and look at this it is uploaded to precise so if we google Ubuntu releases precise and go to the releases page on the wiki we're going to be able to see all the Ubuntu releases first up is probably going to be the current releases and when that finally loads we'll see what they are Bionic beaver which is Ubuntu 18 daniels eros which is 1604 Trustee tar which is 1404 a future release is cosmic cuttlefish which is 18:10 and then we get to all the end of life builds that aren't really being updated anymore we have artful aardvark which is 1710 zestes actors which are zap us which is 1704 I always say zap ders yak-yak 1610 and how Ubuntu does this the tens are pretty much like the bleeding edge and then the 1404 is LTS the long-term support so that's why we see like 17 and 16 down here and end of life and 16 and 14 are still current because these are the long-term support while this is the dot ten versions 1510 wily werewolf 1504 vivid Velvet 1410 utopic unicorn 13 10 saucy salamander have no idea how they come up with these names but go all the way down to 12 over 4 we have precise Pangolin and this was released in 2004 or 2012 and that's pretty old so since it's an old release let's just run a vulnerability scan against it normally you don't get a win but when something is end-of-life you may actually get a win here so we can do a map - - script Vaughn to run vulnerability scripts and I have a video that explains all the scripts and nmap I'll put in description I can't remember I'll stop my head I'll put all formats will do Vaughn scan and then 10 10 10 79 this is gonna take some time to run so while that runs let's also just do a go bus on the website because we always do go Buster so go Buster - you for your L 10 10 10 79 - w-4 word list user share word list through Buster then we want directory list 2.3 medium and then - oh for help and we'll put go Buster dog to speed this up we'll do 50 threads with - T 50 well that goes let's just go over to the website 10 10 10 79 and a big old picture pops up and this is the heartbleed logo which is a I think 2014 vulnerability which is when precise penguin was end of life so chances we want to explain how I played on this box but let's go dig in a little bit more we can try HTTP we get the same exact thing we can try common things like robots.txt and it's not found if we go back to our ed map that vulnerability scan has finished so let's go take a look at what it found it starts up right here and for SSH the von scan found nothing HTTP ain't gonna find any cross-site request forgery vulnerabilities dom-based cross-site scripting did find a dev folder and potentially an order called index which is interesting so it does a basic der bust kind of funny stored XSS I don't even know what this 2017 CV is but script execution failed so it wants to debug we're not gonna worry about that the SSL variant of HTTP HTTPS same things found but we also have SSL checks and we have a man the mineral vulnerability and heartbleed so this is confirmed vulnerable to heartbleed there's also a poodle which is another attack that's I think more man-in-the-middle II and I think there's a application part ssl wise and let's just see if that also does it so when it's specify that and 443 and this is just a SSL scanner I thought of as I was reading and maybe I have to specify plugins let's see - heartbleed so we can do SSL wise - - heartbleed 10 10 10 79 and it also confirms that it is horrible it this is a cool tool because there are flags that will I'll put like all the ciphers that website supports let's see we have like SSL be two scans TLS be one but a bunch of various as self scans with SSL lies I should have looked more into how to use that before I mention it but we'll just move on and exploit heartbleed so we could use Metasploit but in order to explain how I plead it's going to work better if we just use Python screen Golf github because Python is much easier to read than Metasploit models and Ruby code so I'm gonna Google Python hopefully github and we're just gonna randomly look at that very first one so clicking this let's click raw and then we can get clone paste this in W get my bad then heartbleed op PI and before you dig into this it's kind of the best way to explain it with good ol xkcd and we're going to search SK CD heartbleed to bring up the comment comic because xkcd always has a relevant comic let's get this bigger so you can read it so heartbleed is a memory bug I guess you can say so how it works as it exploits a heartbeat the herpe essentially works by us saying hey reply to us with this word and this word is six letters and the server is gonna respond with that word and six letters to let us know it is still there and essentially here's us asking hey are you there if so respond with potato and use six letters to spell potato and the service process thinks it puts in memory use a Meg once these six letters potato and you can see all this gray around it this is the memory of the server and right after potato is just random junk and the memory and here's the server it finds potato and responds with potato and our user is thinking huh okay are you still there if so respond bird with four letters and we can see the memory around this has changed a little bit they're currently 348 connections open right after that and this is user ADA because it just places things randomly in memory and now it says user Meg wants these four letters bird and pulls that out pulls bird and grabs four letters so if we say something like hey are you still there if so respond hat and 500 letters and now the server puts it back in the memory it's searching for hat and it finds that but it's gonna grab 500 letters after that and give us everything and this is just giving us random pieces of memory which could be sensitive things on the server like a SSH key or passwords or anything it could be literally anything in memory so looking at this Python script let's go down we have a bunch of arguments here and then we'll building the pls header so here's the head it doing the handshake maybe generating some random stuff because it's SSL and it needs quote unquote random but the server doesn't do it so it's gonna respond the same thing every time I actually don't know the whole TLS header surprisingly probably the safest Suites that are accepted compression method to be used extension length elliptical curve settings session ticket stuff and then we got the build heartbeat stuff and here I think is where we're asking for like potato and then saying the length so we're asking for length of I guess 40 right here and that'll be 64 bytes well maybe it's going to be a lot more than that maybe that's hex 400 we'll see what that is so we do Python heartbleed to see how to run this looks like we can just do we want hex output because that's going to tell us how many bytes there are in the output easily and then 10 10 10 79 and it looks like it stops at 4000 X and we can scroll up to see stuff doesn't leave much stuff was in this heartbeat so let's see what's on this again still not much still nothing let's do - let's see put this in a loop I guess 4i and SEC's 0-100 - done and we'll see if this output changes much doesn't look like the output is changing control-c out of that let's just edit this script and let's change that 40 let's make this a quarter of it we'll do 1000 stead of 4,000 hex and now when we run this oh it's output actually changed oh we see it stopped right around 1000 bytes of output if we change that to let's see mm it's going to respond with around 2000 hex of output so that is how heartbeat heartbleed works we just run that without the hex dump we can see random data we go up a few times we do see it actually outputting something that was probably useful in memory because I saw a base64 if I could find it let's just search equals I guess we have to exploit it again just do it a few times let's see instead of 20 let's do 1,000 that's going to yep so let's try changing this to the length of let's do max ffs which i think is too big for it to actually respond so yeah around 4000 is the maximum see does this have a seem to run in a loop if we do Python heartbleed let's see number of times to run so instead of looping it let's just do - and 100 Python her plead - an hundred ten ten ten seventy nine and now we're going to output the I guess four thousand bytes 100 times and while that runs let's check the other directories so we got dev encode decode and OMG so if we go to omg sounds interesting so let's just check what that is it is just the picture if we go to dev we have heiped key and notes we go to notes to do coffee research fix encoder decoder before going live this is done only on client-side don't use and find a better way to take notes we go to hype key we see a bunch of hex it looks like and just glancing at this I think this is ASCII because we see looks like a bunch of equal signs maybe it's not the equal - it's some symbol but we also see a few 0d 0a which is a line terminator so I'm just going to Google like a ski too x2 hausky go here face this in convert it and we have a encrypted RSA key obviously you be used with SSH so let us save that key so we'll call this pipe key because that was the name of it go back to this heartbleed thing and just glancing over at what memory it leaked so we have one of it leaking probably us going to dev actually and going up still this a decode we have someone running this decode PHP and putting this text in and that is base64 again they're doing that so we echo dash n that a 64 dash D we get heartbleed believe the height so again we look at that HTTP request a GV h let's just search did i give us the like IP address where it came from doesn't appear to but hopefully believe the height which is interesting because if we looked at the key we just saved typed key we have a encrypted ssh key or what believes to be an ssh key we try to use this if we do file does it say it type dot key mrs a private key so let's chmod this to 600 so we can use it and then try SSH - eye height key and I'm gonna specify the user height because again that is what the server had called it pipe underscore key that is like the standard SSH naming convention you have like ID underscore or si which is the default key and then user name underscore key for various keys so you hi Pat 10 10 10 79 and this will take a little while to negotiate the SSH connection come on what 22 is open right and map Valentine and map yeah 22 is open here we go copy this again paste it in and we get wall again so we are hype at Valentine if we do it OS we can go to the desktop and get user dot text and we see it is 33 characters which is 32 and the line break so there's the md5 summon got the user so as always the very first thing we want to do is let's run a Linux enumeration script so opt let's do Linux Prive asked and probably Linney numbness H so Python hm simple HTTP server and what IP address in my on 0 10 10 14 3 so let's just don't curl 10 10 14 3 when enum dot s each type at the bash to execute it I didn't specify a port on simple HTTP server so it's running on put 8,000 this script will take a few seconds to run going to the top let's see colonel was built in 2012 so a lot of on Billy's work especially probably dirty cow Seymour kernel stuff you want you 1204 a precise we got that correct uid for hype 1000 we have the actual user logged in from pts zero so this has a physical login on it it looks like oh no that's us the physical user is not logged in I'm used to doing like a reverse shell where we don't show up who else is logged on but no that is us if it was a physical wall again it would be TTY one not pts does that sudo not physical let's see accounts let's go back up let's see if it saw anything else wouldn't leave off okay so groups nothing interesting home directory board readable files home directory contents ash history February 16th its 131 bytes so we got something in that bash history that should be worth looking into got that RSA key we don't really have to look into that because we know what the contents are because we got it SH TTY available shells cron jobs nothing looks too interesting contents nothing IP address TCP connections running processes glancing over looks like a weird Apache that is defunct not sure exactly what that is root SSH that's a pipe login there should be something in this PS output it's hard to see when you're just looking in this output so I'm going to grab it later for just route running processes and it dot d installed apache modules set UID files nothing looks out of ordinary there there's set GID files look all normal so let's first look at a bash history file and we see P MUX - s on devs dev cest and if we do a PS - EF and let's just grab for root to show all of root running processes and let's see what there is so all those we can ignore this should be one that is good here we go so we see root is running team ox so if we look at this team buck socket file we do LS - la on that we see it as owned by root but the group owner is hype which is us and that is readwrite if we do groups were that ok so we are in member of the height group and we have readwrite access to the file that P MUX is using as a socket so if we do T MUX - capital S 3 spell team ox correctly and then specify that file we can hop on that team ox session and there we go we hopped on the team buck session and root had left it open and we could read and write there so we can now do ID we a root and we can also do a WC - Dion root text and we could have read that and code that Sh this is that post request that is adding heartbleed into the memory so that is the box if we wanted to we could um also do dirty cow real quick so let's try that let's just do dirty cow is it that ninja let's just Google dirty cow man job view the exploit go to one of the last pocs because that's why the later one cow Kron Red Hat Android that's a tester what do dirty dot C at C passwd based route I think this one changes the password to be fire fart exploit let's see yeah afterwards you can either add a su fire for it so let's see compiled instructions are they in here there we go GCC - P thread so we should be good so if we do GCC it is installing this box so we'll do them dirty see VI dirty see there we go set paste paste the code in grab the file for GCC so we can get the compiled instructions copy this paste it and then we'll run dirty cow and it's going to change this ass would to be fired for it for the root user this is going to take a little while so let's just ctrl C out of this and we can SSH to test it so ten ten ten seventy nine probably takes fifteen twenty seconds - that's the sage prompt to come back and then we can try typing the password fire for it maybe that specifies a user fire for it as well because that's adding the user fire foot and then UID and GID zero so my bad there it's been a while since I did this exploit H as this user now you can find control C the exploit and su now and it will probably work face the password denied what if something happened to patch dirty cow or it just hasn't been long enough so at one time I'll pause the video give it a few minutes and then we'll try again it could just be this box is running so slow it's taking a while for a dirty cow to work but eating on a kernel from 2012 definitely definitely should work let's try Route one last time see run afterwards you can either su yeah it should have been fine his route login blocked su fire [ __ ] nope s WD still looks normal oh we got that there that is odd and has been modified but we can't su zahra because it's definitely overwrote @c passwd and that's probably the des cryptid version of the password fire for it unless it just put it no password oh I'm gonna hit enter it asked me what I wanted to set the password for I hit enter which is a blank password so there's now no password in this server I thought if you hit enter it defaulted to fire fart but no plain password there we go so that is the box and I guess my ignorance on that one exploit script I would have assumed it set the password to the default if you did nothing for the password but nope so take care guys and I'll see you around