 what's going on youtube this is ipsec and this video is going to be about my methodology for when doing ctfs and finding a web application as a vulnerability that i have trouble exploiting how i go about and explore that and figure out what i was doing wrong because when solving the machine nerder on hack the box and we did some source code analysis and it looked like it was vulnerable to command injection however we had a lot of trouble exporting it in that video and then moved on in this we're going to download the web app to a box open up in a debugger and see exactly what we did wrong and bypass or get rce in the unintended ways it's nothing fancy but i figure opening up visual studio code showing how all that works and setting breakpoints may be beneficial for a lot of people so with that being said let's jump in so the first goal is to get the web app running under local box because that opens up like standard out debugging and a bunch of other things where you can see what's going on also another reason it could have failed is maybe the python was running in a virtual environment and i wasn't using absolute paths so running it on the local box is going to take a lot of those unknowns out of it so let's take a look at where this web app is it looks like it's just in this svc directory and then let's take a look at how big it is there is a 450 megabyte file in misc it looks like and this is just node modules so um i'm going to move this out and looks like we need root thankfully we copied a root key on this box and the reason i can just remove these is because node will automatically build it think of it like the python requirements except instead of going into a shared location it just goes into the web the app itself right so if we end up needing this node module we can always just rebuild it on a local machine or copy it at another time so now that we have this let's do atar cjvf web.tar.bz2 and permission denied let's just do this from root i guess so we want to rerun this command paste and there we go so i'm just going to run a simple http server we could scp it but this is the fastest way i think 160 port 8000 web tar bz2 uh failed to connect there we go it took a while for that python to start up and then i guess we should be kind and put the node modules back just in case anyone else was working on this box but yeah so there we have that and now that we have the web app on our box we can try to run it right so if i go cd web python3 app.pi uh we need to install a module so pip3 install html to text and for some reason whenever i'm connected to the vpn pip doesn't want to work so i'm going to get off the vpn install this get back on i think i did that fast enough with my ssh connection it died it's magic i probably should have ran it multiple times but thankfully that's the only dependency i have right so now i can go to localhost 5000 and we got this application running however if i try to do anything that requires a database we get internal server error and we can see we can't connect to the mysql server now we have two things we could do we could stand up mysql on our box copy the database and run it or we can just be lazy and go to our ssh connection do a ssh tunnel and now when we go on this it should connect to a sql server but it's still trying to go into this run mysql sock if you don't know um how i just did that if you google ssh konami code you'll go to a sans blog posting that talks about all that if you want to get to that hidden prompt if the very first thing you type on a line is squiggly c um then it drops you in that ssh prompt and that's why i did dash l but uh we should look at exactly why this isn't working so i'm gonna go into web let's look at app.pi and we see localhost let's see nc localhost 3306 we definitely connect to it but for some reason this doesn't i wonder if we restart the web app nope uh let's go back into app.pi i'm going to put an ip address here instead of localhost 127.001 see what happens here probably have to restart the web app there we go so now we're logged in um we have a second issue right now and that is going to be we don't have a login prompt we um got a credential to access a illegitimate way i believe in the actual box or maybe we got his password um but the easiest way to get around this issue is if we just look at the app.pi we have database credentials db userdb password so i'm going to do mysql dash u db underscore user dash p i'm going to type db password to login show databases use app show tables select star from users and this is a weird format um how the password is hashed we could try to figure out how to hash this password but i mean we could just create a new user right um i said we could try to figure out how to hash the password because then we could reset blue's password to be anything we want i often like choosing the lazy rail and i don't know why it says i'm logged in let's do log out it's home where's registration notes do i have a cookie or something here let's get rid of this session refresh there we go we got a register button that was weird um name ipsec root let's do alt shift a there we go ipsec dot rocks ipsec and we'll put the password of password so because now we registered an account if we go back into this database we have us so we can now update blue's password or we can change our role to be vip which i guess is admin i'm just going to oh we can change our role so let's do update users this is update the table name set uh let's do role equals vip where name is equal to ipsec change one matched one so now if i do a select star from users ipsec is now a vip user so i can log in with ipsec password and we are now completely in this web app so the rce we were working with was on this export note feature and i'm going to kill this server because i want to go into visual studio code because i just like this much better we can open folder neuroweb this is where we want and let's see we want to go to where's export note here we go so in the actual video when we're doing this box is where we got to saw a potential command execution and then failed and then moved on to something else we can download that later so right here this is where we are trying to get command execution so it's on pawn export note local it runs the binary node it does this miscellaneous md to pdf.js and then passes in the note in this note we can see let's see cursor fetch1 so it's coming from the database and it's doing a select star from notes where id is equal to a string which is going to be id and author is equal to our name the session username right so we should know what note is and if i create a note let's see let's add note uh we should start this app so i'm going to press f5 and do python file so now it's running in visual studio code and let's do please subscribe and let's do curl 127.001 like this hopefully that's big enough for you and here pseudo nc lvmp80 so if we get command execution we should see it on this window uh note must be 30 characters long let's put a bunch of comments in submit awesome so now if we export note we should be able to export this to pdf and we get an internal server error and now we can see what that error message is which is handy sometimes no such follow directory that could be because we didn't have um the node dependencies so we can't run that binary so it looks like maybe it errored before that and just didn't print anything so here's where it's going to come in super handy that we're doing this in visual studio code i'm just going to click right here and set a breakpoint on this subprocess dot run command right so i'm going to do ctrl shift r to refresh now we hit this breakpoint we can see all the variables here we can go in the debug console we can just type command which is this variable or we could hold a mouse over it and see what it is and we see it's running node misc md to pdf and then it's doing this dollar exclamation point some html and then curl and i actually before doing this box i have no idea what that is so if we um echo who am i like this it's just going to print who am i now if we do who am i like that it still prints this so if we wrap this and this so maybe i'm not sure if this is the correct word but maybe it's like a string literal which means never like process any character when you do it this way so it looks like they tried to prevent command execution that way they should have used something like schlecks or something like that to patch it so if we added single quotes we see we got command execution so we have to escape the um single quote so let's click that little plus so we move on and let's see we can go back here i don't know what key i hit was it f11 it was and instead of export note we want to edit our note where is the edit here we go and we want to put a single quote and i don't think we need the semicolons we just want command execution so this is what we have now if i submit this okay we still have a breakpoint set refresh and if we look back at command uh oh um we can see it converted it to an html entity so this still isn't going to work we can even in this debug console do a sub process run we see it's completed and if we look at our window let's see is it here we don't have that curl coming back to us so this is also where going in visual studio is handy because right now we don't know if we can bypass this html entity but since we have access to the code i can just set command equal to whatever i want so um if i wanted to make sure this would have worked i can just set command equal to curl 127.001 like this and if i look at command that's what it said as and if we do this subprocess dot run it's not telling us it's completed and it says deadlock because this is taking longer to run and we got it back so all that did was tell us if we can bypass um the html and the encoding we probably have rce and this is another reason it's handy to do this in a debugger because if that didn't work then we know we may just want to move on right because we're out of ideas at that point so now that we know that let's go over into burp suite and see what happens if we i did burp straight too early i guess so we want to see if the um html nd is on the user side so if i submit we have a lot of html encoding i do control shift u and we can see that percent or whatever three nine i'm going to just edit it out and i don't think i need the semicolons so let's just try this we could probably even get rid of the p's per paragraph so let's for this in and then we can run this again right so this is the export note we hit the break point i'm going to run command again and we see it is now in single quotes so we have escaped the string literal or whatever this was doing so let's make sure our netcat is running we can run it and we get another hit so now we have found the rce path or the unintended rce path i guess i should say so hope you guys found this beneficial and start playing with visual studio code and doing things like that so take care guys and i'll see you all next time