 hey guys what's going on this is epic and we're gonna be doing this sneaky box from hack the box this is my favourite box because the unintended ipv6 solution and most likely you're thinking unintended ipv6 no I did this box to ipv6 I got it through SNMP but there's another way to get the ipv6 from this box that is very real-world esque and you may be thinking wait I P v6 in the real world no one uses that but hate to break it to you that fe80 address the link local that you see everywhere that's not a loopback and you can actually route to that if you are on the same network we'll get into that in a little bit I'm gonna do a 15 to 20 minute ipv6 primer once we get to that part so let's jump in if we do anything let us and map the box so and map SCC script SV version Oh a I'll put all formats the name we want to give that n map we'll just do n map and the IP address is 10 10 10 20 looking at the results of the N map we see only port 80 is open so let's go to that address and see what's there so 10 10 10 20 and we get this page is under development the first thing I do look at the HTTP source don't see anything other than that under development image try like robots.txt see if that discloses any URLs it does not and then you may want to do bust or go Buster this but I just when I see development I normally try slash dev and we get to members area only login now so let's send this request over to burp so we can play with it try logging in with admin admin and Bert must be set to not intercept so turn that off or turn intercept on try logging in again and we get to this request so send that over and we can try admin admin and we get not found so try different users guest user and we just keep getting not found so we may have to throw this in and brute-force a bunch of user names but let's just try some other things send some bad characters through this to see what happen on the pass field and we get internal server error so may have a sequel injection here or something because throwing bad characters cause this to error out try these one at a time to see what happens the single quote errors out double quote does not so let's go back to that single quote because the server definitely doesn't like that and if this is my sequel injectable this should fix that query and we get not found so we know there's a sequel injection here so let's just do the really basic or one equals one and try logging in and we get a login prompt so for successful login let us try that and if you want to go into sequel injection I'd highly recommend the Shorin video Karen video that was last week I go into sequel injection a lot I'm not doing it here just because I really want to get to that ipv6 segment so going to this login prompt we do see the login was successful to an intercept off and named thrive vollis and my key clicking on my key reveals a SSH key so let's save this out so copy that what do that vollis key and I probably mispronounced that I don't know what that word is but we'll move on copy this key but we have this issue because nmap only showed one port is open it didn't show anything else so what I do here is I'd set up a end map - su to do UDP and I would also set something up in the background to do my sequel dump to see if anything else is in that database so let's go back to a repeater tab where we have the sequel injection put this into something valid like admin and we'll copy this to a file login dot request and we will my sequel sequel dump a sequel map - login that request - P we want the past environment DBMS it's my sequel and we can do level 4 risk 3 and it's saying the page is a ASCII page they don't recommend it we're going to tell them no we do want to do this and we will continue and see what sequel map says we have one injection and I forgot the - dump parameter but we'll let this finish come on sequel don't map gonna include all tests no because we know it's relatively injectable come on still doing blind so this is taking a bit longer than I thought so lets us hop over to the ipv6 primer so first off the main reason I know ipv6 is just sending up at spook on with a few other people they have the smooth labs program but that's how I was introduced to it and I use it at home mainly to bypass my ISP throttling because I set up a ipv4 to ipv6 timer to HD Electric and what that does is pretty much think of it as a VPN it's sending my ipv4 traffic to Hurricane electric which converts it to ipv6 and then goes out to YouTube and Netflix and when it does that ISPs can't see I'm going to YouTube and Netflix and that traffic doesn't get throttled so that's why I use it if you set up to go to like hurricane Electric which is free be aware it is free whenever company provides you a service for free you're not the customer you are the product so they may be doing like marring your network or doing things like that so please don't do anything sensitive over a free connection so that being said let us get into the real primer first thing first what does a IP address look like let us copy one out well we copy both these out actually and use these as examples so ipv6 notes and we have two example IP addresses one that begins with that fe80 and one begins with dead beef so those are two examples ipv6 addresses are 128 bytes long so a full IP address is 1 2 3 4 think that's 8 bytes 8 segments so 1 2 3 4 5 6 7 8 yes it is 128 bytes long split up into 8 16 byte chunks ipv4 on the other hand is just 32 bytes long split up into 4 8 byte chunks so one that is Ang's represent a P V 4 so you can imagine how much bigger ipv6 actually is and to show that we can do echo 2 to the 32 bytes that over a calculator and we get I think that's yeah four billion two hundred and ninety four million nine hundred sixty seven thousand two hundred and ninety-six to go over into the ipv6 realm and that is a hundred and twenty eight bytes long that is the number of addresses we have so let's go into a notes and we can do total addresses and we'll try to see how long this actually is so shoot so that is a very very long address if you wanted to say this it would be 340 undecillion 282 de Cillian 366 na million 920 octillion 1938 septillion 463 sextillion 460 quintillion 374 quadrillion 607 trillion 431 billion seven hundred sixty-eight million two hundred eleven thousand and four hundred and fifty six total addresses it is a enormous scope everyone can have at least fifty octillion addresses on earth that's like 6.5 billion people and we still wouldn't run out of addresses and if you didn't know that's undecillion de Cillian non alien and octillion so we're going all the way over here so everyone can have 50 of these addresses it is a lot of addresses so that is that the next thing I guess we should go into we did just the number of addresses we should go into shorthand because we look at these two addresses they're not looking like they are 128 bytes long that is because of this double colon we see double colon is kind of a shorthand if you have multiple segments that are just straight zeros like this this address can now be abbreviated with f-f-f-f-f-f-f double colon FFF these two addresses are the same because that is just the shorthand form you can only do that double colon once in an ipv6 address so we can count this so that's one two three four five segments so this full address is really 1 2 3 4 1 2 3 4 1 2 3 4 that is that full address and then again we go here there are one two three segments so we do five of these now we stop there and you may be thinking this still doesn't light up and that's because they're represented in hex and in hex you can drop the leftmost bits if they are zeros so that that's the fully expanded form of the two addresses we had so that is the shorthand and now there are three types of addresses in ipv6 just like in ipv4 you have the unique link local address and this is the unique address and ipv6 because we're really using it so that's fe80 and it's on a / 10 subnet and it's called link local address unique oh I got ahead of myself it's a link unique link local address and this is where most the confusion comes from people assume fe80 because they see it everywhere they do ifconfig is a loopback address an ipv4 loopback is 127 0 0 1 or 2 3 127 is the loopback realm that is incorrect link-local is completely different ipv4 has that in the 169 to 54 subnet and if you don't get our ipv6 and don't have something static configure Windows you may recognize that that's the Auto configuration to address ipv6 uses this a lot because they don't do our address resolution protocol they take advantage of everything having unique link local and doing ICMP which pings to identify addresses so this address definitely used a lot in ipv6 and this where the unintended solution comes from the next type of address we have is FC 0 0 and that is on a 7 subnet that is the unique local unicast and this is the private ipv4 ranges so this would be like your 10 subnet your 172 16 subnet and like one I to 168 subnet so there's these are those unique link local addresses and I know one of these is incorrect but that's how people recognize them visually so we'll keep it at that the next thing will be the global unicast and this is the routable one and that is two thousand and it's a slash three and that again is called global unicast and this would just be all routable addresses so those are the three types of addresses the next thing I want to get into is just how to do subnetting we don't need it for this challenge but again we're doing an ipv6 primer so might as well go into subnetting because many people don't have do something on ipv4 so try to understand ipv6 without ipv4 may be tough but hopefully I can explain it easily enough so let's go to the very first address this slash 10 means 10 bits remember I said they're divided up into 16 byte chunks and there are 8 bits in a byte so subnets all the leftmost bits are 1 and then everything else is 0 so with a slash 10 the 10 leftmost bits are going to be ones so we do 1 2 3 4 5 6 7 8 and then 1 1 and then go zeros forever but this is going to be 4 bits that's going to be 4 bits so you have both of those taken care of so this Fe does not change this next one the 8 that's going to change because we have 2 zeros so these are going to be reserved for the network these could be reserved for the hosts so this we have 1 2 4 8 4 plus 8 is 12 and that is B so we have II that doesn't change B F on that and we choose F because that's the work most the highest number it can be nothing in hex goes after F and that would just be the same as saying like 255 and a IP address so that is how that works so this would be that all apps one two three four two three four I may be missing one or not I can't tell one two three four one two three okay that looks right so that's the very last address and fe80 that is the address range of the link local if that makes sense and actually no that is not we need to do that zero is the start so my bad so this is the address range link local addresses can be in we can do this to the unicast as well seven so we're gonna do this quicker seven we know it's not going to be this because that's four this will be up to seven so C will be the one changing here so we have three left over from four so 1 2 3 0 so that is 1 then 2 4 8 which will be 14 so D so this should be f d 0 0 0 and then all zeros F D will be and then these will all be F's I'm not gonna brought the type of them all out and I think this is correct so what we can actually do because again I'm not an expert let's to ipv6 calculator and verify before we go into the global unicast yeah so ipv6 we have FC 0 0 / 7 so let's go to / 7 FC 0 0 calculate this and we see it goes FC 0 0 2 F DF f FC 0 0 F DF f so yes I did that correctly so the global unicast again you should be an expert at this by now we see / 3 so now we know this is changing so it will be 1 1 1 0 which B's is 1 so this can be 2000 or 3000 or 3 F and again it goes all the way over and I guess it may be a little bit confusing because this is 1 and you may be thinking how to get to 3 from that one and the reason is some mangoes from the very beginning network so you have a network of all zeros and then a network of all ones that would be able to first subnet and then 2 would be the next on that if that makes sense and you keep going on and that's the same apply for here I think I just did that mentally because I'm used to subnetting so that is how you do subnetting in ipv6 hopefully that makes sense there are two other addresses in ipv6 which are very useful and that is FF 0 2 which is the multicast all nodes address that is like a ping broadcast and FF o 2 2 which is the same thing except for router nodes and we're going to be abusing this ipv6 you actually don't need DHCP they have a stateless configuration by default which uses like multi casting to identify IPS that are not in use so ipv6 is awesome and definitely recommend looking into it a lot if you want to or not if you want to just looking into it a lot and become an expert because it is awesome so so I think what I wanted to talk about next Oh the whole reason I had included this address so here's a quiz what type of address would dead beef be we went through unique link local unicast and global unicast what would dead beef be it's a trick question it's actually probably an invalid address because it's not reserved and it's a well it's reserved for future use it's not defined so the correct way to do this address probably would have been like FC 0 1 and then did dead beef and got rid of some of those zeros but just a little tidbit you can do invalid dresses and still have it work just like you could do a routable IP address on a private network not exposed to the internet have it still work whatever so that's enough of all of this and let us get into actually exploiting the ipv6 or a sneaky box in the unintended way which is extra sneaky because we have to hop on the hack the Box network remember in the beginning of the video when I said there's fe80 addresses were routable if you're on the same broadcast domain or network well they're accessible so if sneaky isn't listening on the ipv4 address it may be listening on the ipv6 address because there's a separate firewall rules if the administrator neglected ipv6 rules then the ipv6 may be open so we just have to hop on the hack the Box server Network because there's a router between my cally box and the HTTP server network there's many routers between them but if we just hop on the server network on the local network and then we can access fe80 addresses so let's do that to do that I'm gonna come hop on 1010 because this box is super easy to get root on from nothing if you already have that or a say key and it does require VIP access I forgot to simplify the username but does require VIP access definitely worth it if not then just use one of the ones you've exploited in the past if you want to do things like this so to get root we can just do this if you don't know this box I have a video on it so the first thing first is we don't know what Sneaky's link local address is because it's going to be fe80 and something big if we look at our ipv6 notes it was a huge subnet it could be a lot of addresses so luckily in Linux that address is calculated based upon the MAC address so if we go back into a ipv6 notes we can take this MAC address of 1010 and show it so ten tens Hardware dress is here yeah did not mean to do that copy this go over here paste it and his link local address is here and I specified Linux because Windows does something funky like almost any RFC they obey it and then add some special sauce so it works but technically it doesn't follow it to a tee it's just Microsoft things but will exploit the windows as well soon to figure out their link local addresses just have to do something a little bit different anyways back to this so this is the MAC address and this is ipv6 link local because ipv6 is split up into sixteen byte chunks and Mac's are split up into eight I'm going to change this and get rid of these colons just so it makes it easier so now the Mac is split up into sixteen byte chunks you should recognize a lot of these numbers are the same so all link locals begin with that fe80 and then it's the MAC address but it's something weird happens with the MAC address and the invert the seventh bit so one two three four so this number doesn't change because that's up to four bits this number second number will change so in this one it is all zeros the seventh bit so one two three four five six seven this gets changed don't know why they do it they do so this number begins with the 2 so 2 5 0 then 5 6 AAA oh no once you get halfway through a Mac you randomly just decide to add F F F II don't know why they do that but they do so you do the first 3 groups FFF e then you do the last 3 which will be a a 8 a 2 5 and that is how you calculate a link-local address hopefully that made sense if it didn't we do it again so that's Tenten and we'll do sneaky so how do we get Sneaky's MAC address well the earth table and ipv4 shows it ipv6 doesn't do up they do neighbor discovery protocols were through ICMP and there is a thing called art poisoning and ipv4 it's applicable and ipv6 through neighbor advertisement spoofing we won't go into that but just wanted to mention it so to get Sneaky's MAC address let us ping it 10 10 10 20 and then let's look at our ARP table and we do see a MAC address here so we'll copy this go over here Mac ok so what I'm going to do again I like having things in same formats and we'll do ipv6 so we append that fe80 then we do invert that bit so 0 0 it's the same invert as last time so that begins 0 2 and then 55 6 F F F e a a F F 4 1 4 6 and this should be Sneaky's link local address so we could copy this over here and try pinging we do ping 6 specify the address and when we do pings on link locals we also have to specify the interface because it doesn't know which interface to send it out because link locals have all the same and we can ping this on ipv6 link local so can we SSH to it so if we cat that key I think I do nope that doesn't do it I'm trying to think how to send this over easily let's just agar introduce session I forget to hockey right now to switch that from vertical to horizontal pain thinking too much so let's copy this V no no we can do it from you know one ten ten the high sneaky key is what we'll call it so to use this key we have to chmod it to 600 and now let's try this Sh - I and then the name was Sara vollis at ten ten ten oh not ten ten ten twenty we want to do this and this probably won't work right off the bat because we have to specify - 6 which best buys ipv6 oh no no let's get rid of this real quick we forgot to do the key - I specify the public key SSH - I sneaky key that I think that's how you type it oh we don't have to specify - nix it looks like I thought you did on SSH but let's see if it lets us in we had SSH respond so this should let us in and there we go we are now into sneaky using that link local and we could just do ifconfig from here copy the routable address and access it from a Cali box so that is method 1 to do it another way to do it through ipv6 is take advantage of those multicast addresses I talked about earlier so let's get off sneaky we are back on 1010 we can look at our herb cache and we can also run this IP - six neighbors command and we can see the like ipv6 equivalent to an ARP table so that's what it looks like right now if we ping the multicast address so paying specify interface as ENS 34 we could also just do the percent at the end but ping specify has that interface argument so I use that so being six and the multicast all nodes address we only get response back from ourself if we look at that ARP table nothing else appears but if we do IP 6 neighbor we get a list of all the other link locals on this network keep in mind there only 23 which are the number of Linux machines we have access to the windows don't appear because Windows isn't responding to this multicast Bing there's a way around that we'll do it in just a second but it's trying to get with something oh well we didn't see all those responses if I do IP 6 tables - L we can see I have a bunch of roles on this box so what I'm going to do is just do a service ufw stop to stop the firewall do IP tables - L we don't have anything and now let's try that ping again and we get a bunch of responses and we can actually see them so that is what had happened there we could also do specify let's see the interface dead beef one and if we do this it will now send us I hit a backslash I think I cannot assign the requested if I do it through this address I know there's a way to get it to respond all there routable addresses so if I specify the source to be the dead beef address and send a ping out on that multicast everything is going to respond to me on there routable address so IP - six neighbors and we can see some dead beef there because not many things have that configured maybe well whatnot but that is one cool tidbit but what I'm going to do real quick is let's clear the cache so now we look at neighbors we have nothing and we'll just do that ping six - I and s 34 so that was weird okay now we're getting them all back again in a table we want to get all the windows addresses remember I said they don't respond to this and like all RFC's they kind of fold them but stop at one point if you send them an invalid ping packet they will respond to you saying you sent me something invalid so we can still get their addresses via just sending them a bad ping packet how do we do this the easiest way is through a program called in the THC toolkit the hackers Choice toolkit not that thing related to Mary Jane so let us Google the hackers choice alive six and the hack is Troy's THC will Google that to go to their page oh maybe this will have the source code Hydra THC ipv6 attack tool that's what we want so we want to download this and my lib s cell and ten tens live s cell is different so I have a box on my network I think it's called Daniel X 64 I think that's what I called it yes that kinda just has the same Ubuntu version as 10 10 because 10 10 doesn't have a lot of the packages to compile this software so again I just mimic it in my own lab and I can W get that and it saved 2.1 but they are the same so let's just move the junk I don't need and will unzip this go here and we just go in tight make compile it all go on Spanish compiling because this has a tool called a live six and a live six will send invalid ICMP packets and we'll see windows responding with bad packet essentially so let's copy a live six to my root directory just to make it easy and now I can do there you go to 10 10 SCP EPS SEC at xenial - x64 alive 6 - yeah and SCP - I ID RSA - Takas at 1010 1010 so let's go into taxes directory and let's run that ip6 neighbor again count the lines we have 23 and let's look at what a live six does so we can do a live 6 send a ping packet and we can just send it to FF o 2 1 we have specified the interface we always do when we do this so ans 34 and we're just getting echo replies right now but we see that - e option so if we do that we see other boxes responding with ICMP parameter problems these are the windows boxes so now if we do the IP tables again we see 31 host have now responded we now have Windows boxes so what we would want to do is we could IP - 6 neighbors we could walk this print 1 to I P v6 dot list and do we have n map here we do so we can just do n map - yes Bruce do 2 2 + 4 4 5 & 3 3 8 9 those ports we should easily know if a box is Windows or Linux and we can just specify il ipv6 dot list oh it's specified - 6 and we can nmap those devices and real quick let me just do something - 6 P 22 I want to make sure and that doesn't need an interface I'm gonna add the - and flag so we don't do DNS lookup and as long as I'm not ending in 8f and map is smart enough to know which interface to send out so let's try this again so we get responses back we do have some with 4 4 5 opens so we know this is probably a Windows host but that is more ipv6 shenanigans through just pinging multicast and I think that is going to be it for all the ipv6 stuff if an map wasn't on this box cuz I'm not sure if it is I almost was positive it wouldn't be let's do an map - V yeah I think I may have installed that so if you wanted to install an map on a debian box just you go to and map download and i download the RPM which sounds odd because we want a debian package so if we downloaded this save move downloads and map to here so we got the PM package we can just drawn a program called a lien on debian and that will convert it to a debian package and to install it you just copy it over and do dpkg i and then the package name so that is all of that we will now I guess do the intended solution once that alien finishes there we go we got the Det package and just copy it there and install it with D package but I guess the intended solution then we can do the previs the way you're supposed to do this is through SNMP and you'd find that by if you just did nmap - s capital you to specify UDP because SNMP operates on port 161 UDP and you could just do the SC o a flags again and the IP address which would be 10 10 10 20 I already ran that because even if I just specified that one port it takes about a minute to run so I had called it UDP nmap and we have the output of this SNMP is simple network management protocol just has a bunch of management information on some devices you can set information or run commands it depends how its configured that's much more common on networking devices but this is the output and map pools from SNMP so we can look at it we have the I guess package name that's using as net SNMP some basic interface information it's not smart enough to go pull the ipv6 information but it's there if you do it manually some stuff from netstat running programs which is definitely useful especially if something like my sequel had the password in a parameter that would be awesome you have then package information system uptime but package information is also helpful because if you saw like shell shock outdated bass version you know it'd be so shockable and things like that but let us mainly do SNMP we know it's the public community public stream because that's what M map told us if we didn't know that we could use a tool called 161 to brute-force it you're on your own to learn that duel but let us SNMP wok we have to specify which version it's either going to probably b2c or three and then we can specify the IP address community string - the public and then the IP address which is 10 10 10 20 and we see how it outputs and SNMP is in like a tree structure but it uses all numbers which is really hard to tell by hand you have SNMP MIBs that convert that into human readable things but let us just quickly pull what the ipv6 portion what it look like if we didn't have a bib installed 1 4 3 4 1 3 and we can see this is the interface information if we got rid of that 3 it would tell us also something about the Kurds and I think like the number of packets transported and things like that but this is the easiest thing so ipv4 address is easy to spot 10 10 10 20 you got a broadcast right there one 2700 one that's the loopback and then this this is the ipv6 information except it's in decimal form not hex so if we did Python - see print int 2 2 - I forget how to convert hex to decimal and Python happens when you talk for probably about an hour so let's just do the easy way hex to decimal decimal to hex is why I want over two to two this will be de so this will be probably ad yeah so that's dead beef right there again not easy if you don't have the min so let's turn easy mode on in Kali let's just do app install SNMP MIBs downloader to install the package that would download MIBs for us and maims again make all those numbers and make it much easier so downloading all the myths come on okay then we can now just enable MIM so at CSP SNMP Kampf this package says to comment this line out if we wanted to use the MIBs and now when we snmpwalk it is much much more easy to understand so let's just direct this to a file 6 that's fine and I guess I control seed at the perfect spot because we have like IP for MIBs we got a dead beef address right here and that is the address of sneaky so if you had just installed the mill you would have been able to get this box easily so yeah I don't even know why I'm dragging this file anymore because we can see the address here it automatically it was like yeah ipv6 is displayed in X so it even was nice enough and converted the decimal to hex I believe that's where it could be a maybe maybe it didn't I think it did it's also possible that we're looking at the IP address and a different spot so if we background that do this yeah it'll automatically convert so that's the spot we were looking at before it says ipv6 and there's your address awesome so we've got all the ways to do sneaky now except the one if we had just googled the creator's name we would have been able to get to it so a guy called trickster zero created this challenge so if we do trickster zero github we can see the first result is NX a ipv6 enumeration tool so we could just get clone CD and X cat readme usage and X dot PI SNMP version to see community string public 10 10 10 20 and that should have worked usage annex SNMP version community string IP huh and well it in I'm not exactly sure what's happening I wonder if it's because I have the mid tools installed and it's not expecting that yeah so this tool is doing merely snmpwalk and I think if I disable the MIBs it would work because it's looking for that specific string and doing magic things so uh SNMP SNMP calm comment this so now we've killed all the mids we downloaded and we run this tool it pulls it for us so cool tool but the main thing I'm trying to get with there is if you're stuck on some challenges and CTS maybe stalk the person that created it and see what they're up to so there's that let us now I guess jump into the previs k-- so we have to SSH and to do that I need to know the ipv6 address so we'll run that annex tool again to see public ten ten ten twenty and we get the IP address so now we should be able to SSH I that username and get in and once we get in we're going to do this relatively quickly because this video is getting along and I'm getting tired of talking so this should be a good buffer overflow to get practice with but we're gonna skip all the enumeration find it right away by just doing a fine / - perm - 4000 type errors - Devon all and we get user local bin challenge so the very first thing we want to do with this is to send it to a local machine so we can do like check SEC on it to see if a SLR is enabled or pop it DEP as well so check compile-time instructions so we need to first set up a netcat listener so set that up and we will direct this to the file Chiao b64 go back to our ssh machine and we can just base64 user logo in shell and pipe that over to netcat our IP address is 172 1610 133 what 80 81 looks good that's my LAN IP as I said this video is getting long 10 10 14 5 4 80 81 there we go so we got Chau it's a base 64 we can base 64 decode it and pipe that over just to shell and now when we run check SEC on it I forgot to see we have DEP is disabled and aslo is disabled so that makes exploiting this super easy the architecture is also 32 bits so chances are I won't be able to execute this on my Kali machine I need a 32-bit VM or we can just do everything from sneaky which is easy enough so that's the route we're going to be going with the first thing is to find the buffer overflow in this and you would do it just by trying to run it running with no arguments gets a seg fault running it with an argument gets nothing and then we send it a bunch and we get a sack fault again so going over to a linux box we want to see where this actually happens so we can do locate pattern create run this give it a length of 500 oh shoot oh really oh there we go I guess I just hit the wrong key sequence before but that is modifier and spaced change the pain like that so if we use a local Ben Chow run that's this psych floor again so let's load this up in gdb and we can run with that as the argument and we get a seg fault at this address which is a string somewhere in that giant argument we sent so let's go over and we can do pattern offset and dash Q for query that hex string I don't see if it finds it so at 362 we have the e IP over right so we have that much of a buffer space so let's create our skeleton exploit so buff size is equal to 360 - the next thing we need is shell code so we're just going to pull shell code from the Internet to execute Ben Sh so packet storm spin SH shell code C 64-bit 64-bit 64-bit there's a 32 bit we'll go to this one copy the shell code set paste just even this up and then we can do buffer equals oh we can do shellcode one name our variables easy shellcode it's equal that shell code plus equals plus equals plus equals okay so a payload we're going to want to use an op sled so the knop sled is going to be equal to X plus X 90 and what an OP sled is it's a no operation so we're gonna be sending a giant payload to the program and as long as it executes s-- anywhere in an op sled it'll slide all the way down to a shell code and execute this way we want to be exact on memory address we just have to be around the memory address if that makes sense but not sled and we'll multiply that by the buff size minus the length of our shell code so if we a payload will equal knop sled plus shell code plus e IP and we don't know what a IP is yet so the IP is equal to question mark right now so to find a IP the easiest way without any tools that automatically search for you is or to save this and exit for now get a full window to run the program and we're going to give it a bunch of A's so Python - see breath a times 400 and this will segfault but now we can just look at the ESP register so x4 examine want to look at it I guess a hundred bytes at a time ESP shoot we do X this will be in hex so we can see part of our buffer is probably right here so if we do ESP - 400 and we see a bunch of it here as well so if we set a IP to be right here let's see what happens so it's just go to the new window the exploit VIP equal to that and without using struct we just have to convert this to little endian so backslash X what would it be c0 backslash x f4 backslash xff Texas Lex bf in little-endian just the memory address rightmost so C 0 F 4 F f BF that's all I did so and then we can echo payload oh that's print I bet Brett payload Python spy looks good let's copy this over to our attacker box copy here exit gdb be exploit pi run this Python exploit PI type that over - oh we can just do tchau tchau python exploit pi segfault so let's open that back up in gdb and see what happened so gdb user local been shell run this paesan use PI X / 100 X ESP I don't see mine ops led there so ESP - 500 see some knobs the knob stop and see if they continue again here we go down here is another part of memory address that has a knop sled so we can try just jumping here and see if this is the one I want so up above it may have just not been in memory correctly so if I Shrunk my shellcode maybe it were to work there but since my show codes big maybe it got chunked up so let's change a IP C this is f 750 so f 750 and we get a shell and effective ID is root so if we go to slash root we could go and get root dot text hopefully that buffer overflow made sense if it doesn't make a comment and I'll make sure I do another video with a similar buffer overflow to go over it more in depth but this video was just too long and I had spent too much time on ipv6 want to spend on the buffer overflow so I hope you guys enjoyed it take care and I'll see you next time