 what's going on youtube this is ipsec i'm doing blunder from hack the box which a lot of people didn't like because of the brute forcing at the beginning but in the box's defense the brute force was actually pretty cool your script had to be aware of two things number one logins used crosslight request 4g token so you'd be aware of those and number two you'd be banned after 10 failed attempts however the application would actually read the ip address from the http header if it's in the like standard form a proxy would use so if you put exported four and then a random ip every request your ipad just would never be blacklisted once you get into the application the foothold to get a shell is also pretty darn cool um you have to upload just a standard php file however the directory it lands in isn't intuitive and additionally it doesn't allow you to execute php files so you have to upload a dot ht access file for that directory to allow the directory to execute php files it's pretty cool so with that being said let's jump into the box as always i'm going to start off with the nmap so dash sc for default scripts sv enumerated versions oh a output all formats we have to make that nmap directory put it in there we'll call it blunder and then the ip address of the box which is 10 10 10 191 and i forgot one flag i want to do a dash v so it shows me open ports as it finds it because i have not ran this one before hopefully it doesn't take too long we do see a port on 10 10 10 191 it is http so let's go check out the web server going to 10 10 10 191 we get what looks like to be a blog so real quick i'm going to press ctrl u to view the source and see if i can figure out what type of like cms this is content management system i see dynamic in these tags so i know it's not going to be some type of just static page because it's got dynamic in it but i don't really recognize what this is in hindsight this is a hint the bl beo-themes but when i was first doing this box i didn't know what that was i just assumed it was author created and kept moving on so looking at all this nothing really stands out so the next thing i do is i try to figure out is this php or not so i'm going to search the source for php don't see anything i'm going to go to index.php and we get page not found i'm going to try like index.html page not found uh i'm gonna go back over to prep suite and we see this is apache hdbd it doesn't look like it's a windows box especially because the banner tells us it's ubuntu we can also ping it so ping 10 10 10 and its ttl is 63. there's one router between the box and us which is the vpn endpoint so it decrements from 64 to 63 so this is definitely linux windows is going to be defaulted to i believe 128 so if i saw like 127 here i know it would be a windows box so it being linux no php no html when i do my go buster i'm now going to choose a word list that i don't have to guess extensions on because i don't know what this web server is yet so we're going to do go buster dio for dir mode http 101010 191 dash w for word list op set list discovery web content and i like these raft word lists and i'm going to use raft large files dot text and let's see it's giving us 403s we want to hide this error code so it's just less pollution in our output so i'm going to do go busto dash h and then we can do maybe dirt h there's probably one to silence a code so dash b status code blacklist so in the same thing we'll do blacklist on 403 and maybe 404 as well so when you do blacklist um i just noticed something uh it doesn't look like it tells us blacklist so when you do blacklist you have to specify everything you can't just specify one of the error codes you don't want four or three is i think unauthorized access 404 is not bound so we got this going we have install.php so i'm going to go over and check out install.php and we see bluedit is already installed so i'm going to search for like bluedit and then we can do like github because most source code is always going to be on github and we see simple fast secure flat file cms so this looks like to be what we want we need to figure out what version this is so maybe we can check out readme.md does that exist on the server readme.md looks like it does let's open this file are you going to tell us what version see installation doesn't really tell us the version okay we can close this out look at the other files license that's just gonna be the mit license nothing interesting there so no way to know the version that is installed and if we dug more into this actual application or just guessed because i don't think it says it yet there is a slash admin this is something i would just normally try and we get username and password so let's go and try admin password and down here we get username or password incorrect so we'll try like password1 doesn't work we could go back in github and try to search around for how it sets the default password but the default password i think is randomized or user set at install so try a few more nothing really works we can go over and check out search point so search point b-l-u-d-i-t and we have a directory traversal image file upload from metasploit so we can take a look at this so i'm just going to do search point dash x look at this exploit and we'll see what it requires let's see a remote user could abuse is this authenticated author so it looks like we need a username and password with this so we don't have username and password yet so let's go back to search point this file upload probably going to be username password as well so search point x on this one and let's see we can see it's under the admin ajax upload files so chances are this does require authentication and the other thing i see is there's csrf tokens the cross site request forgery so if we go back to this login and tell burpsuite to intercept make sure intercept is set to on and try logging in with a password i'm sure you can guess what i'm typing right now but we go back over to burp suite and we see the login has a crs csrf value and the username is admin password of please subscribe go back over to repeater we try sending this and we get a 200 okay but is invalid anywhere here let's see send it again and a 301 so when the csrf matches we get the 200 okay message when it doesn't we get to 301 so if we have to make any type of exploit we have to keep in mind about this csrf value let's see let's go intercept another password request so here we can just type the username and password send it over to repeater and i want to go and now turn intercept off and see the exact message this says so admin password try to log in our um intercept is off well again using my password incorrect so i want to go back over to burp suite we can search for incorrect and we can see this 200 message does indeed contain the word incorrect so nothing really here search point didn't yield anything so the next thing i'd probably do is search for like bluetooth exploits and see if there's anything just not in search plate which does happen from time to time and we do see bluetooth cms version 392 brute force bypass protection so there is apparently some type of brute forcing protection in this so let's try this again let's just try sending a bunch of requests so i'm not seeing the fail down here so username password incorrect incorrect so eventually maybe it will say there we go ip address has been blocked so if we read this post uh it's right here let's see this is talking about a thing here's the blog person actually want that's not it um let's just copy his name and go so we can search for bluetooth his name and this guy's also made a few boxes on hack the box i want to say node was his but this um header the http exported for header i believe we can set it so the server thinks we're a different ip address so let's try this let's go back to the login admin pay something here ipa just blocked turn burp suite on send this request and i keep going in burp suite to do this so i get a valid c surf token so here we have one and we need to set that x forwarded four and we'll say um 127 127.001 and let's see if we get a incorrect username and password or bad ip address um i don't think it's http underscore i think it's just exported for okay we got 200 okay we look for incorrect we don't um ip address has been blocked so back to the page and look this over and i'm noticing it right now um normally hdb headers have dashes not underscores and looking back at this i have underscores so i'm guessing that may be it so let's go back over to our box admin login probably have to do that intercept on put username password login send it to repeater and we'll grab this line paste and then replace these with dashes send the request and we get username or password is incorrect oddly enough i forgot the zero here or the one but let's just double check a time did not expire between playing around with all this so attempt to log in username password incorrect let's do this again let's get blacklisted the csrf token really makes it a pain to get your ip blacklisted come on you gonna say anything username password username password one of these times it's going to say ipa has been blocked there we go so now we verified we are definitely blocked send the repeater login go here and then let's take the exported four copy paste dash dash send and we get username password incorrect so we have definitely found a way around the brute force thing it's just kind of a pain so the one thing i want to try real quick if we try logging in again ip is still blocked okay so i wasn't sure if doing one thing with a exported four header would reset that block list but it doesn't look like it does so um the next point we can go back over to our go buster to see if it's returned anything else and we have a to do dot text but other than that we don't have anything so i'm going to do to do dot text and we can see update the cms turn off ftp remove old users and inform fergus that the blog needs images so it looks like fergus could potentially be a username so we could go back over to the page um let's do it this way and do slash admin i'm going to try fergus bluedid as the password and we don't get in oh ip's been blocked uh you do password and do this annoying thing and we're gonna create a python script so we don't have to keep doing this because this would get very very tedious so send and and username passwords incorrect so that was just with fergus fergus so let's try making a br 4 script for this so we can do vi uh we'll call this bluedit.pi we're going to want to import the request module we're also going to want to import um our e and the first thing we have to do is define our variables so i'm going to do host first and that's just going to be 10 10 10 191 the ip of blunder and then user is equal to fergus and if you want to make the script more like usable you could always just replace these with arguments but for proof of concept hard coding things is fine uh we need a net session as a very first variable and this is going to return the csrf token plus the session which is a cookie so in order to do that we have to hit this slash admin page and if we look at the source the cookie is in it so this is token csrf and we just want to return this string and this looks like it's just hexadecimal characters i just see zero through nine and a through f so i'm going to do copy that field and you can always use like beautiful soup or something but i just like using regular expressions so the very first thing we do is get the page so r is equal to request.get http 101010 191 admin and then we can do csrf is equal to re dot search paste that in and then parentheses because this is where we want the match to begin this is the data we're extracting a through f zero through nine put that in brackets and i think we can just do a star and the parentheses and the double quote and that single quote and then we do our dot text because this is a text we are searching and we can say csrf is equal to csrf.group1 return csrf so let's see if this works um we can just say print init session python3 bluetooth and it looks like we are getting sessions so the next thing we want to do is grab the cookie and i'm going to do this in probably a really bad way i wanted to do it all this in visual studio uh visual studio code but my visual studio code is acting up so i'm just doing it all in vi so let's cat bluetooth pi real quick we can grab this and we can say r is equal to that and we can say r dot cookies or r dot headers i should say and no double in single quote so we look at headers and we look at cookies uh this cookie could be potentially heard to search i'm not exactly sure how to search this um or dot cookies dot maybe get and then let's send this over into grip suite we'll try this one thing real quick it's blue dash key is what we want to get is that going to get me this cookie oh it is so this is how we'll do it this is probably a better way so we can say cookies is equal to that and we can return cookie i'm not going to put that in plural because it's just one cookie okay so now we have to do the login so def for definition login user pass password and we can say is equal to request dot post http 10 10 10 191 slash admin and let's intercept a login request go back here and these are the fields we want and that is going to slash admin so data is equal to token csrf then we need username this will be user then we need password then save i don't know what the safe parameter is but we haven't so the one field we need now is this token csrf so we can grab that by just doing a csrf cookie is equal to a net session like that alternatively we could just move this code into login it's up to you how you want to do it csrf like that we can say data is equal to data i'm also going to do a proxies variable for debugging and it wants http 127.00 8080. so now on this request i can say proxies is equal to proxy and we can do login ipsec please subscribe and we should be able to get this login request here clear intercept q run it we got csrf username password we don't have a session yet though we forgot to add that so if i do this it's still 301 it moves us so we need to put the um session inside of the script so back up into this and just like we did data we're gonna do cookies so cookies is equal to a dictionary and let's see what is the cookie blue dip key and then cookie and here we can do cookies is equal to cookies and let's clear this proxy the background uh we're save let's see oh i put an i when i was trying just put this on a new line okay man it's got a lot of other requests going on so now we've got cookie at the bluetooth key we send this to repeater and we are still getting uh moved permanently so we screwed something up uh everything looks fine to me so let's try this one last time and then we're going to intercept both requests and step through it it's still moved permanently so token i'm just uh token csrf like that do we have a field go in the history token csof let's just intercept a request real quick proxy intercept on maybe we need this referral so i'm looking at these two it's going to copy this is that really what we wanted yeah so we're both posting oh we're posting admin slash login so let's try that so admin login turn intercept on go to repeater we got 200 okay we send it again we get the 301 so everything is good there's one thing i just noticed that i want to clear up and i want to convert these to be variables in case the ip changes host like that okay so what we probably want to do is tell request not to follow anything because we want to be able to see a 301 or not so let's go to google real quick and just search for request do not follow link i know it's a variable within this module python to not follow my internet is going awfully slow right now see allow redirects false this is the option we want so we can say allow redirects false and we go back into a request module so import requests are equals request dot get 10 10 191 so r dot by status code is 200 so we can say if r dot status code does not equal 200 return false else return true and we also want to print user password oh that's not exactly what we want um hold on i got ahead of myself real quick uh status code 200 print csrf error so we can run this that works let's edit this to be just static so this token csrf should not work anymore and it fails so we know we have got around that so now the last thing we have to do is see if um the username and password exist and if i think it's just incorrect let's see go back over to repeater do we have any responses we don't proxy uh it is password incorrect is what we're going to search for so we can say if password incorrect n r dot text this can be elsif print oh we'll just do nothing we'll return false and then if we make it down to here we'll say print user password return true so when we run this script nothing should happen because we don't have a valid username and password but this should be able to brute force now so we have to build a word list so let's just build a word list off of this page and to do that let's use cool so cool we do have it do i just give it the url like this and we can say words cat words wc-l only 350 words here so we can say word list is equal to open words and maybe dot read for a line in wl print line let's see if this works that does not so let's see maybe it's read lines there we go um see line is equal to line dot strip we don't want the trailing line so that should be fine i don't know why it's printing this something weird just happened let's see let's print our.txt here because we should not be hitting the state so print our.txt because it should get this password is incorrect oh no i thought it was because of the proxy but now proxy is equal to proxy is equal to proxy we can run the script again it's going to send this go to repeater oh ip has been blocked so we forgot to do the um exported for header so let's see actually first let's add this block detection into our script so let's say has been blocked we'll grab this string go here edit and we can say elif has been blocked in our dot text print blocked return false okay and for the headers i think it's just headers we can say x forwarded four and we want to import random or is exported for now we can say random.rand int 1 through 256 f not the most readable code but oh well one 256. can i copy this easy let's see up here nope oh well instead of copying random rand 1 256 random.rand hint 1 256. maybe that works let's just see if this code works to begin with random has no module rand i t it's int not i t i made that mistake everywhere rant in okay it's now going back to burp suite which is fine so now we can do headers is equal to headers headers is equal to headers intercept on and we have x forwarded four and then a random ip so that should be fine we can get rid of the proxy go back here and we can do login fergus line and run this and we'll hope it works um i got rid of the proxy so we want to worry about that and i wonder how many requests it does a second i guess we should have put in some like status that shows it working or how many requests it does but we'll see so the script finished and we only got one csrf error and nothing else so i'm guessing upon a valid login we don't actually get this status code 200. so i'm going to move this here we can remove the csrf error and we'll try this and just run it again so it's probably going to take another minute so i'm going to fast forward the video and see what that csrf error actually was the script's still running but we got a hit fergus and roland des chain so let's try logging in with these credentials so going back to firefox let's go admin now we can get rid of that view source we can do fergus and paste the password and we get in and we can see this page has become very popular with like 35 000 hits and we can see all these access denied from us trying to log in but we're in so now we can go look at the other exploits so if we do search point dash x or no not x just search blunder uh i think i have to update let's do for update so when i was recording this video you may have noticed one edit and i was trying to fix visual studio code and accidentally uh deleted python 3.8 so yeah it spent a day recording this video so let's see search point blend it if i can type let's just go exploit db.com and i bet it's my uh resolve.com v etsy resolve.com get rid of the field domain and that's just being right around here so now we can search for blender bluetooth bludit there we go the box's name is blunder but this is bluetooth okay so there's definitely a lot more here now that i updated search plate let's see this web app one is the one we looked at so you can do search boy x and we're looking at this post admin ajax upload file this is the csrf and it looks like we can just upload a file so let's try this so let's go back here with bluetooth is new content let's do test test images and let's create a php script so v test.php and we'll do just system and i'll just do who am i first before we do an actual reverse shell it's always nice just doing a who am i to make sure it works now we can do browse go back into hdb blunder bluetooth.pi uh phone file type not supported so let's move test.php to test.gif we can attach it here and then we'll use burp suite all right looks like it auto uploads uh i was going to say and then use burp suite to edit it so go here open turn intercept on so one interesting thing is it said test underscore zero dot gif so we know it existed already let's just change this to php forward file type not supported so let's try this again turn intercept on test.gif go back to burp suite and let's go back to exploit db and it looks like it has bluetooth endpoint input files instead of um images so we can change that and this will be files.php let's see if it uploads now and we didn't get any type of error message but we don't know how to access the file we can test if it just dropped it in the web shell or the web root but we get file not found so at this point i want to go back and look at metasploit so we're just going to do msdb run and that has to be run as sudo and we're going to see if metapoint has the script um let's see how did i do this last time i think it's like cd user share metasploit framework and then bundle install and see if this works hopefully this installs it but the main thing we want to do is run menace point and see if this gives us any better idea on how to exploit this and then we'll try exploiting it manually just so we know exactly what metasploit did but there's no reason ever not to use metasploit especially if it's going to help you do the research so we can do search blood it use xero show options show uh set blue dit pass um let's see if we grab words for anything that begins with capital r we should see it roll index chain this was the password set bluedit user to fergus set our host to 10 10 10 191 and set proxies to be http uh 127.001 8080. it's just type hearst port so go back to burp suite turn intercept on we have to set reverse allow proxy true run it and it's running on the wrong handler but it doesn't matter so we got the page to get our bluedick key we log in now we'll go into the dashboard we're going to new content we're uploading an image so the file name is dot png images.png dropping a nasty php script i don't know what this uuid is okay and then the next thing it's doing looks like it's adding a dot ht access file rewrite engine off add type um application xhtpd php.png so this is saying png files now execute as php and that's it uh we don't see the last request probably because if we look at a request let's see intercept server response only when content type matches text we can get rid of not that uh it's a client request intercept request when file extension is not an image javascript or icon so we could get rid of that or rerun this exploit and then we should see the final piece uh whoops turn the except on so we upload the script we upload htaccess so we say hey png files are now php and then we're getting bl content slash temp slash the image and that's the exploit so let's try mimicking that and doing a reverse shell without using metasploit so what we need to do is get a php shell so i'm going to do cp user share load num then php and we'll say php reverse shell.php this will be image.gif we're going to use gifs instead of jpegs so let's look at this take copy the image.gif okay and we're just going to set our ip address and i think we're at 10 10 14 3. we'll set the port to be 9001 and then upload this web shell so let's go back to our session slash admin images and the file we want to upload is going to be image.gif and i think we have now uploaded that so now we want to upload a hd access file so let's just create this and let's go back into burp suite to see exactly what it did right here the two lines oh come on there we go so this would be dot gif so let's upload this file now browse oh it's not showing me hidden files that's annoying so before we do that real quick let's go to bl dash whatever it was uh where's the image request admin maybe we should run metasploit again because of not seeing the directory do we have it here bl dash i wonder if it was themes let's just run metasploit again run target proxy intercept on next next next upload image okay bl content temp this is the file we want so if we go here and where do we call it show.php probably a show.gif image.gif uh we get phone not found see less image.gif that's what we did so let's try uploading that hd access file so v with cp.htaccess to just be hd access so we can see it intercept is on go back to the page and now we're going to upload it but first we have to make sure burp suite is on say file type not supported so move hd access to he access dot gif that javascript's getting annoying so now it's in burp suite so we can rename this to just be hd access yep and then is still returning 404 not found so let's go back to images image.gif view image so we may want to um go up a few directories because i think it's uploading into uploads so maybe that's what that uuid was to go up a few directories so actually what we want to do probably show options set lhost to ton0 let's just get this working so we can look at the files on the file system and see where we are writing to say session one opened may want to try running it one more time okay deleted hd access waiting for the meterpreter shell we got one so i can just do dir and i just see test.php i don't see anything else so let's see if we went to uploads uh let's see we can probably do thumbnails cd profiles cd pages so probably upload to one of these directories let's see 2020 1014 and if i cat image.gif here we have a shell code or a php shell so we have to go up a few directories so that's why they had the dot dot slash dot dot slash temp so let's try something cd temp so let's go back here where we can upload a file images we're now intercepting still turn this on image.gif and where's the name we can say dot dot slash dot dot slash let's try three i did t e m p shoot i think it was tmp so browse image gif and then send so we just did three and that did not work so we can try looking at exactly what metasploit did see upload images that's not metasploit that's not metasploit here's metasploit it's doing uuid nope uid so two directories in temp let's try that with file name and if that doesn't work then we're going to do the uuid parameter so image.gif intercept on so images here's this is there uuid at the bottom of this there is oh so this is the post id this is what it's uploading to so we should be able to find it this way they just do dot dot slash dot dot slash temp so it gets placed into that directory but i had copied uid to my clipboard so we should be able to find it either way so there's image.gif but it was going in uploads um pages this so this was uploading so let's just go to this directory so bl content upload pages uid so 10 10 10 191 bill content uploads uh yeah uploads pages this image.gif burp suite wants to intercept us cannot be displayed because it contains errors and we don't get anything the reason why is we don't have that hd access uploaded yet so now let's upload hd access so we can go intercept again we have to go back to the upload page browse hd access intercept on submit it's going to that folder here's the contents and we just want to write dot hd access so now we should be able to see if we go here it did not write that file cd here so maybe we have to write into that temp directory maybe for some reason we can't write hd access into this directory so let's go up three directories into temp and we're going to try to write hd access here i'm going to delete this one so we're going to try to drop it here by doing exactly what we did intercept on open uid dot dot slash dot dot slash temp and this can be dot ht access forward and we can see we actually wrote it here by doing that same exact thing and gifs are now going to be executed if i can't image dot gif it is a shell code or not a shell code or a php shell so if we just go to bluetooth temp image.gif we should have got a reverse shell let's see what this is go to the very top i have three tens so let's fix that and we'll do two tens everything is going wrong with this video but it's gonna get done uh intercept we can probably turn intercept on browse image gif and we can do dot dot slash temp and this file name let's call it shell.gif okay let's just access show.gif and we finally have a show to this box um there is another way if you didn't want to use metasploit at all uh if you go to github github bluetooth another good way to find vulnerabilities is always going to the github page going to the issues looking at closed so i did is closed and look for upload and you can see a bunch of upload vulnerabilities so one of these is a way to get code execution maybe this one and this i think is explaining everything we just did including dropping that hd access so this is the one the metasploit script was probably created off of uh it looks like they're not changing the uuid here but yep it's another way to look at it um with the shell in the box let's get a good shell so i'm going to do which python python c import pty pty dot spawn then bash then background with control z sdty raw minus echo fg enter enter and then when the export term is equal to x term so now i can do control l to clear and we can look at files so now that we're on the box let's go and look at these folders uh we have bluetooth 310 and 392. i'm going to look at the 310 version first just because that's the newer one let's see find.grep user and it's a flat file cms which means there's no database the database is just php files that are probably going to be json so let's cut this user's file and this this is how they do users on the box uh users on bluetooth so we have one hash here so i'm going to go here v hashes this is going to be hugo and let's go up one directory bluetooth392 cd there's no database directory is that where we were rcdbl content databases cat users let's see this is fergus and administrator so we already know fergus's password so administrator i'm going to still add fergus's password though even though we know it because this could be come in handy in order to um know that we get the hash algorithm correct so i'm going to cat hashes and we're going to count the words of this or the letters wc-c 40 so this is probably going to be a shot one sum i think echo test sha 1 sum print 1 wc-c yeah this is a shot one sum probably so let's copy these over to hash cat and then we'll try cracking them so i'm going over to the my machine i always crack hashes on a machine that's not my main computer because it's a cpu intensive thing and it's always nice to do those on a computer you're not actively using so we'll call this loot it and then we can do dot slash hash cat dash dash example hashes grab dash i sha b5 for before and we want to see just probably shop 512 raw see shot one something i think it was let's just try grab shot one there's shot one sum here see shot 256. let's see sha-1 mode 100 so v test i'm just doing a file real quick and this is going to just contain the one thing that we know is the password or we'll put these four or five we can do dot slash cat dash m100 uh the hash file which is hashes bluedit and then test which is a dictionary and if this cracks uh fergus's password we'll know it works and i'm going to do username and did we crack any doesn't look like we did cat test roll in des chain we should have cracked it so maybe this is not the correct mode let's just go back to the box and make sure we have everything correct so fergus here's the hash ends in c7 cat hashes bluedit ends in c7 begins with be begins with be oh there's a salt so this could be a salted hash which would explain it um is the other one i saw cd bluedit 310 bo content databases cat users there's no salt here so it's weird let's just try cracking this anyways so opt or list rocky.text and we'll see if hugo actually cracks maybe specify rules s64 and we actually get it finally it is password 120. so we can go back to our shell and cd slash home hugo is a user so we can see hugo password 120. what is la i did a typo of la and it did a ls um what la's not a binary i don't know what's happening there but anyways we're hugo we can do a pseudo-l password 120 and seeing this this is weird huge may run the following commands on blunder and pretty much everything but the root user and a while ago i remember a cve of sudo which was like a underflow that you could execute code as this user even if he's um got that so maybe pseudo underflow this let's see does this have uh example so here's that yep dash u hashtag just do a um user id instead of name negative one so we can do sudo dash u negative one bash and we have escalated to root so that is gonna be the box hope you guys enjoyed take care and i'll see you all next week